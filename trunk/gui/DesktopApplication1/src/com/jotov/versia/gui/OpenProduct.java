/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * OpenProduct.java
 *
 * Created on 2009-12-31, 10:39:48
 */

package com.jotov.versia.gui;

import com.jotov.versia.json.JSONConnection;
import desktopapplication1.DesktopApplication1View;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.jdesktop.application.Action;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 *
 * @author v
 */
public class OpenProduct extends javax.swing.JDialog {
    private JSONArray projects;
    private JSONArray releases;
    private int selectedProjectID;
    private int selectedReleaseID;
    private int uid = 1;
    private String actionCommand;
    

    /** Creates new form OpenProduct */
    public OpenProduct(java.awt.Frame parent) {
        super(parent,true);
        initComponents();
        getRootPane().setDefaultButton(jbCancel);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jspProjects = new javax.swing.JScrollPane();
        jlstProjects = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jspReleases = new javax.swing.JScrollPane();
        jlstReleases = new javax.swing.JList();
        jbOK = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(desktopapplication1.DesktopApplication1.class).getContext().getResourceMap(OpenProduct.class);
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jspProjects.setName("jspProjects"); // NOI18N

        jlstProjects.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jlstProjects.setName("jlstProjects"); // NOI18N
        loadProjects();
        jlstProjects.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jlstProjectsValueChanged(evt);
            }
        });
        jspProjects.setViewportView(jlstProjects);

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jspReleases.setName("jspReleases"); // NOI18N

        jlstReleases.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jlstReleases.setName("jlstReleases"); // NOI18N
        jlstReleases.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jlstReleasesValueChanged(evt);
            }
        });
        jspReleases.setViewportView(jlstReleases);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(desktopapplication1.DesktopApplication1.class).getContext().getActionMap(OpenProduct.class, this);
        jbOK.setAction(actionMap.get("doOK")); // NOI18N
        jbOK.setText(resourceMap.getString("jbOK.text")); // NOI18N
        jbOK.setActionCommand(resourceMap.getString("jbOK.actionCommand")); // NOI18N
        jbOK.setEnabled(false);
        jbOK.setName("jbOK"); // NOI18N

        jbCancel.setAction(actionMap.get("doCancel")); // NOI18N
        jbCancel.setText(resourceMap.getString("jbCancel.text")); // NOI18N
        jbCancel.setActionCommand(resourceMap.getString("jbCancel.actionCommand")); // NOI18N
        jbCancel.setName("jbCancel"); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jspProjects, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 174, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jspReleases, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(jLabel1)
                        .add(137, 137, 137)
                        .add(jLabel2))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(jbOK)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jbCancel)))
                .addContainerGap())
        );

        layout.linkSize(new java.awt.Component[] {jbCancel, jbOK}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(jLabel2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jspReleases)
                    .add(jspProjects, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 22, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jbCancel)
                    .add(jbOK))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jlstProjectsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jlstProjectsValueChanged
        // TODO add your handling code here:
        try {
            int idx = jlstProjects.getSelectedIndex();
            setSelectedProjectID(Integer.parseInt(((JSONObject) projects.get(idx)).get("product_id").toString()));
            loadReleases();
        } catch (Exception ex) {
            ex.printStackTrace(System.err);
        }
}//GEN-LAST:event_jlstProjectsValueChanged

    private void jlstReleasesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jlstReleasesValueChanged
        // TODO add your handling code here:
        try {
            int idx = jlstReleases.getSelectedIndex();
            setSelectedReleaseID(Integer.parseInt(((JSONObject) releases.get(idx)).get("release_id").toString()));
            jbOK.setEnabled(true);
        } catch (Exception ex) {
            ex.printStackTrace(System.err);
        }
}//GEN-LAST:event_jlstReleasesValueChanged

    /**
    * @param args the command line arguments
    *
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                OpenProduct dialog = new OpenProduct(new javax.swing.JFrame());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    } //*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOK;
    private javax.swing.JList jlstProjects;
    private javax.swing.JList jlstReleases;
    private javax.swing.JScrollPane jspProjects;
    private javax.swing.JScrollPane jspReleases;
    // End of variables declaration//GEN-END:variables
    private void loadProjects() {
        try {
            // TODO add your handling code here:
            JSONConnection jc = new JSONConnection();
            Map params = new HashMap();
            jc.prepareJSONRequest("getProductList", params, uid);
            JSONObject jResponce = jc.doRequest(null);
            JSONObject err = jResponce.getJSONObject("error");
            projects = jResponce.getJSONArray("result");
            int code = Integer.parseInt(err.get("code").toString());
            if (code == 0) {
                displayProjects();
            } else {
                System.err.println("JSON ERROR - code:" + code + "; message:" + err.get("message").toString());
            }

        } catch (JSONException ex) {
            Logger.getLogger(DesktopApplication1View.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace(System.err);
            JOptionPane.showMessageDialog(this,
                "Communication Problem.",
                "Error during products load",
                JOptionPane.ERROR_MESSAGE);
        }
    }

    private void displayProjects() {
        try {
            int pr_len = projects.length();
            JSONObject tmpProduct;
            Vector v = new Vector();
            for (int i = 0; i < pr_len; i++) {
                tmpProduct = (JSONObject) projects.get(i);
                v.add(i, tmpProduct.get("product_name"));
            }
            jlstProjects.setListData(v);

        } catch (Exception ex) {
            ex.printStackTrace(System.err);
            JOptionPane.showMessageDialog(this,
                "Communication Problem.",
                "Error during products load",
                JOptionPane.ERROR_MESSAGE);

        }
    }

    private void loadReleases() {
        try {
            JSONConnection jc = new JSONConnection();
            Map params = new HashMap();
            params.put("product_id", getSelectedProjectID());
            jc.prepareJSONRequest("getReleaseList", params, uid);
            JSONObject jResponce = jc.doRequest(null);
            JSONObject err = jResponce.getJSONObject("error");
            releases = jResponce.getJSONArray("result");
            int code = Integer.parseInt(err.get("code").toString());
            if (code == 0) {
                displayReleases();
            } else {
                System.err.println("JSON ERROR loadReleases - code:" + code + "; message:" + err.get("message").toString());
            }

        } catch (JSONException ex) {
            Logger.getLogger(DesktopApplication1View.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void displayReleases() {
        try {
            int pr_len = releases.length();
            JSONObject tmpRelease;
            Vector v = new Vector();
            for (int i = 0; i < pr_len; i++) {
                tmpRelease = (JSONObject) releases.get(i);
                v.add(i, tmpRelease.get("release_name"));
            }
            jlstReleases.setListData(v);

        } catch (Exception ex) {
            ex.printStackTrace(System.err);
        }
    }
    
    @Action
    public void doCancel() {
        actionCommand = jbCancel.getActionCommand();
        dispose();
    }

    @Action
    public void doOK() {
        actionCommand = jbOK.getActionCommand();
        dispose();

    }

    /**
     * @return the selectedProjectID
     */
    public int getSelectedProjectID() {
        return selectedProjectID;
    }

    /**
     * @param selectedProjectID the selectedProjectID to set
     */
    public void setSelectedProjectID(int selectedProjectID) {
        this.selectedProjectID = selectedProjectID;
    }

    /**
     * @return the selectedReleaseID
     */
    public int getSelectedReleaseID() {
        return selectedReleaseID;
    }

    /**
     * @param selectedReleaseID the selectedReleaseID to set
     */
    public void setSelectedReleaseID(int selectedReleaseID) {
        this.selectedReleaseID = selectedReleaseID;
    }

    /**
     * @return the actionCommand
     */
    public String getActionCommand() {
        return actionCommand;
    }
}
