<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0048)http://svnbook.red-bean.com/en/1.5/svn-book.html -->
<HTML xmlns="http://www.w3.org/1999/xhtml"><HEAD><META http-equiv="Content-Type" content="text/html; charset=UTF-8"><TITLE>Version Control with Subversion</TITLE><LINK rel="stylesheet" href="./0101 Version Control with Subversion_files/styles.css" type="text/css"><META name="generator" content="DocBook XSL Stylesheets V1.73.2"></HEAD><BODY>
<DIV id="adsense_left">
<SCRIPT type="text/javascript"><!--
// Text Ad: Skyscraper (120x600)
google_ad_client = "pub-0505104349866057";
google_ad_width = 120;
google_ad_height = 600;
google_ad_format = "120x600_as";
google_ad_channel = "";
google_color_border = "ffffff";
google_color_bg = "ffffff";
google_color_link = "0000ff";
google_color_url = "008000";
google_color_text = "000000";
//--></SCRIPT>
<SCRIPT type="text/javascript" src="./0101 Version Control with Subversion_files/show_ads.js">
</SCRIPT><SCRIPT src="./0101 Version Control with Subversion_files/expansion_embed.js"></SCRIPT><SCRIPT src="./0101 Version Control with Subversion_files/test_domain.js"></SCRIPT><SCRIPT>window.google_render_ad();</SCRIPT><INS style="display:inline-table;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:120px"><INS style="display:block;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:120px"><IFRAME allowtransparency="true" frameborder="0" height="600" hspace="0" id="google_ads_frame1" marginheight="0" marginwidth="0" name="google_ads_frame" scrolling="no" src="./0101 Version Control with Subversion_files/ads.htm" style="left:0;position:absolute;top:0" vspace="0" width="120"></IFRAME></INS></INS>
</DIV>

<DIV class="book" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H1 class="title"><A id="svn"></A>Version Control with Subversion</H1></DIV><DIV><H2 class="subtitle">For Subversion 1.5</H2></DIV><DIV><H2 class="subtitle">(Compiled from r3305)</H2></DIV><DIV><DIV class="authorgroup"><DIV class="author"><H3 class="author"><SPAN class="firstname">Ben</SPAN> <SPAN class="surname">Collins-Sussman</SPAN></H3></DIV><DIV class="author"><H3 class="author"><SPAN class="firstname">Brian W.</SPAN> <SPAN class="surname">Fitzpatrick</SPAN></H3></DIV><DIV class="author"><H3 class="author"><SPAN class="firstname">C. Michael</SPAN> <SPAN class="surname">Pilato</SPAN></H3></DIV></DIV></DIV><DIV><P class="copyright">Copyright Â© 2002, 2003, 2004, 2005, 2006, 2007, 2008 Ben Collins-Sussman, Brian W. Fitzpatrick, C. Michael Pilato</P></DIV><DIV><DIV class="legalnotice"><A id="id447099"></A><P>This work is licensed under the Creative
      Commons Attribution License.  To view a copy of this license,
      visit <A class="ulink" href="http://creativecommons.org/licenses/by/2.0/" target="_top">http://creativecommons.org/licenses/by/2.0/</A>
      or send a letter to Creative Commons, 559 Nathan Abbott Way,
      Stanford, California 94305, USA.</P></DIV></DIV><DIV><P class="pubdate">(TBA)</P></DIV></DIV><HR></DIV><DIV class="toc"><P><B>Table of Contents</B></P><DL><DT><SPAN class="preface"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.foreword">Foreword</A></SPAN></DT><DT><SPAN class="preface"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.preface">Preface</A></SPAN></DT><DD><DL><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.preface.audience">Audience</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.preface.howread">How to Read This Book</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.preface.conventions">Conventions Used in This Book</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.preface.organization">Organization of This Book</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.preface.free">This Book Is Free</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.preface.acks">Acknowledgments</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.preface.acks.sussman">From Ben Collins-Sussman</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.preface.acks.fitz">From Brian W. Fitzpatrick</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.preface.acks.cmpilato">From C. Michael Pilato</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.intro.whatis">What Is Subversion?</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.intro.righttool">Is Subversion the Right Tool?</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.intro.history">Subversion's History</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.intro.architecture">Subversion's Architecture</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.intro.components">Subversion's Components</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.intro.whatsnew">What's New in Subversion</A></SPAN></DT></DL></DD></DL></DD><DT><SPAN class="chapter"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic">1. Fundamental Concepts</A></SPAN></DT><DD><DL><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.repository">The Repository</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.vsn-models">Versioning Models</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.vsn-models.problem-sharing">The Problem of File Sharing</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.vsn-models.lock-unlock">The Lock-Modify-Unlock Solution</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.vsn-models.copy-merge">The Copy-Modify-Merge Solution</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.in-action">Subversion in Action</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.reposurls">Subversion Repository URLs</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.in-action.wc">Working Copies</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.in-action.revs">Revisions</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.in-action.track-repos">How Working Copies Track the Repository</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.in-action.mixedrevs">Mixed Revision Working Copies</A></SPAN></DT><DD><DL><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.in-action.mixedrevs.update-commit">Updates and commits are separate</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.in-action.mixedrevs.normal">Mixed revisions are normal</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.in-action.mixedrevs.useful">Mixed revisions are useful</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.in-action.mixedrevs.limits">Mixed revisions have limitations</A></SPAN></DT></DL></DD></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.summary">Summary</A></SPAN></DT></DL></DD><DT><SPAN class="chapter"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour">2. Basic Usage</A></SPAN></DT><DD><DL><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.help">Help!</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.importing">Getting Data into Your Repository</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.importing.import">svn import</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.importing.layout">Recommended Repository Layout</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.initial">Initial Checkout</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.initial.disabling-password-caching">Disabling Password Caching</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.initial.different-user">Authenticating As a Different User</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle">Basic Work Cycle</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.update">Update Your Working Copy</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.edit">Make Changes to Your Working Copy</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.examine">Examine Your Changes</A></SPAN></DT><DD><DL><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.examine.status">See an overview of your changes</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.examine.diff">Examine the details of your local modifications</A></SPAN></DT></DL></DD><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.revert">Undoing Working Changes</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.resolve">Resolve Conflicts (Merging Others' Changes)</A></SPAN></DT><DD><DL><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.resolve.diff">Viewing conflict differences interactively</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.resolve.resolve">Resolving conflict differences interactively</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.resolve.pending">Postponing conflict resolution</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.resolve.byhand">Merging conflicts by hand</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.resolve.theirsfull">Discarding your changes in favor of a newly fetched revision</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.resolve.revert">Punting: Using svn revert</A></SPAN></DT></DL></DD><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.commit">Commit Your Changes</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.history">Examining History</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.history.log">Generating a List of Historical Changes</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.history.diff">Examining the Details of Historical Changes</A></SPAN></DT><DD><DL><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.history.diff.local">Examining local changes</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.history.diff.wcrepos">Comparing working copy to repository</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.history.diff.reposrepos">Comparing repository revisions</A></SPAN></DT></DL></DD><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.history.browsing">Browsing the Repository</A></SPAN></DT><DD><DL><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.history.browsing.cat">svn cat</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.history.browsing.list">svn list</A></SPAN></DT></DL></DD><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.history.snapshots">Fetching Older Repository Snapshots</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cleanup">Sometimes You Just Need to Clean Up</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cleanup.disposal">Disposing of a Working Copy</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cleanup.interruption">Recovering from an Interruption</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.summary">Summary</A></SPAN></DT></DL></DD><DT><SPAN class="chapter"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced">3. Advanced Topics</A></SPAN></DT><DD><DL><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.revs.specifiers">Revision Specifiers</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.revs.keywords">Revision Keywords</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.revs.dates">Revision Dates</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props">Properties</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.why">Why Properties?</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.manip">Manipulating Properties</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.workflow">Properties and the Subversion Workflow</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.auto">Automatic Property Setting</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.file-portability">File Portability</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.special.mime-type">File Content Type</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.special.executable">File Executability</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.special.eol-style">End-of-Line Character Sequences</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.special.ignore">Ignoring Unversioned Items</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.special.keywords">Keyword Substitution</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.sparsedirs">Sparse Directories</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.locking">Locking</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.locking.creation">Creating Locks</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.locking.discovery">Discovering Locks</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.locking.break-steal">Breaking and Stealing Locks</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.locking.lock-communication">Lock Communication</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.externals">Externals Definitions</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.pegrevs">Peg and Operative Revisions</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.changelists">Changelists</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.changelists.creating">Creating and Modifying Changelists</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.changelists.asfilters">Changelists As Operation Filters</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.changelists.limitations">Changelist Limitations</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.netmodel">Network Model</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.netmodel.reqresp">Requests and Responses</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.netmodel.credcache">Client Credentials Caching</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.summary">Summary</A></SPAN></DT></DL></DD><DT><SPAN class="chapter"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge">4. Branching and Merging</A></SPAN></DT><DD><DL><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.whatis">What's a Branch?</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.using">Using Branches</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.using.create">Creating a Branch</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.using.work">Working with Your Branch</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.using.concepts">The Key Concepts Behind Branching</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.basicmerging">Basic Merging</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.changesets">Changesets</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchemerge.basicmerging.stayinsync">Keeping a Branch in Sync</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.basicmerging.mergeinfo">Mergeinfo and Previews</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.basicmerging.undo">Undoing Changes</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.basicmerging.resurrect">Resurrecting Deleted Items</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.advanced">Advanced Merging</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.cherrypicking">Cherrypicking</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.advanced.advancedsyntax">Merge Syntax:  Full Disclosure</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.nomergedata">Merges Without Mergeinfo</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.advanced.mergeconflicts">More on Merge Conflicts</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.advanced.blockchanges">Blocking Changes</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.advanced.logblame">Merge-Sensitive Logs and Annotations</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.advanced.ancestry">Noticing or Ignoring Ancestry</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.advanced.moves">Merges and Moves</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.advanced.pre1.5clients">Blocking Merge-Unaware Clients</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.advanced.finalword">The Final Word on Merge Tracking</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.switchwc">Traversing Branches</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.tags">Tags</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.tags.mksimple">Creating a Simple Tag</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.tags.mkcomplex">Creating a Complex Tag</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.maint">Branch Maintenance</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.maint.layout">Repository Layout</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.maint.lifetime">Data Lifetimes</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.commonpatterns">Common Branching Patterns</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.commonpatterns.release">Release Branches</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.commonpatterns.feature">Feature Branches</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.vendorbr">Vendor Branches</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.vendorbr.general">General Vendor Branch Management Procedure</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.vendorbr.svn_load_dirs">svn_load_dirs.pl</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.summary">Summary</A></SPAN></DT></DL></DD><DT><SPAN class="chapter"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin">5. Repository Administration</A></SPAN></DT><DD><DL><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.basics">The Subversion Repository, Defined</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.planning">Strategies for Repository Deployment</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.projects.chooselayout">Planning Your Repository Organization</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.basics.hosting">Deciding Where and How to Host Your Repository</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.basics.backends">Choosing a Data Store</A></SPAN></DT><DD><DL><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.basics.backends.bdb">Berkeley DB</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.basics.backends.fsfs">FSFS</A></SPAN></DT></DL></DD></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.create">Creating and Configuring Your Repository</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.basics.creating">Creating the Repository</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.create.hooks">Implementing Repository Hooks</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.create.bdb">Berkeley DB Configuration</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint">Repository Maintenance</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.tk">An Administrator's Toolkit</A></SPAN></DT><DD><DL><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.tk.svnadmin">svnadmin</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.tk.svnlook">svnlook</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.tk.svndumpfilter">svndumpfilter</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.tk.svnsync">svnsync</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.tk.fsfsreshard">fsfs-reshard.py</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.tk.bdbutil">Berkeley DB utilities</A></SPAN></DT></DL></DD><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.setlog">Commit Log Message Correction</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.diskspace">Managing Disk Space</A></SPAN></DT><DD><DL><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.diskspace.deltas">How Subversion saves disk space</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.diskspace.deadtxns">Removing dead transactions</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.diskspace.bdblogs">Purging unused Berkeley DB logfiles</A></SPAN></DT></DL></DD><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.recovery">Berkeley DB Recovery</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.migrate">Migrating Repository Data Elsewhere</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.filtering">Filtering Repository History</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.replication">Repository Replication</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.backup">Repository Backup</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.uuids">Managing Repository UUIDs</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.moving-and-removing">Moving and Removing Repositories</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.summary">Summary</A></SPAN></DT></DL></DD><DT><SPAN class="chapter"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig">6. Server Configuration</A></SPAN></DT><DD><DL><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.overview">Overview</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.choosing">Choosing a Server Configuration</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.choosing.svnserve">The svnserve Server</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.choosing.svn-ssh">svnserve over SSH</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.choosing.apache">The Apache HTTP Server</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.choosing.recommendations">Recommendations</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve">svnserve, a Custom Server</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve.invoking">Invoking the Server</A></SPAN></DT><DD><DL><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve.invoking.daemon">svnserve as daemon</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve.invoking.inetd">svnserve via inetd</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve.invoking.tunnel">svnserve over a tunnel</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve.invoking.winservice">svnserve as Windows service</A></SPAN></DT></DL></DD><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve.auth">Built-in Authentication and Authorization</A></SPAN></DT><DD><DL><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve.auth.users">Create a users file and realm</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve.auth.general">Set access controls</A></SPAN></DT></DL></DD><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve.sasl">Using <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> with SASL</A></SPAN></DT><DD><DL><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve.sasl.authn">Authenticating with SASL</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve.sasl.encryption">SASL encryption</A></SPAN></DT></DL></DD><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve.sshauth">Tunneling over SSH</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve.sshtricks">SSH configuration tricks</A></SPAN></DT><DD><DL><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve.sshtricks.setup">Initial setup</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve.sshtricks.fixedcmd">Controlling the invoked command</A></SPAN></DT></DL></DD></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd">httpd, the Apache HTTP Server</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.prereqs">Prerequisites</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.basic">Basic Apache Configuration</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.authn">Authentication Options</A></SPAN></DT><DD><DL><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.authn.basic">Setting up HTTP authentication</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.authn.sslcerts">SSL certificate management</A></SPAN></DT></DL></DD><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.authz">Authorization Options</A></SPAN></DT><DD><DL><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.authz.blanket">Blanket access control</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.authz.perdir">Per-directory access control</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.authz.pathauthzoff">Disabling path-based checks</A></SPAN></DT></DL></DD><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.extra">Extra Goodies</A></SPAN></DT><DD><DL><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.extra.browsing">Repository browsing</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.extra.logging">Apache logging</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.extra.writethruproxy">Write-through proxying</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.extra.other">Other Apache features</A></SPAN></DT></DL></DD></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.pathbasedauthz">Path-Based Authorization</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.multimethod">Supporting Multiple Repository Access Methods</A></SPAN></DT></DL></DD><DT><SPAN class="chapter"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.customization">7. Customizing Your Subversion Experience</A></SPAN></DT><DD><DL><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.confarea">Runtime Configuration Area</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.confarea.layout">Configuration Area Layout</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.confarea.windows-registry">Configuration and the Windows Registry</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.confarea.opts">Configuration Options</A></SPAN></DT><DD><DL><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.confarea.opts.servers">Servers</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.confarea.opts.config">Config</A></SPAN></DT></DL></DD></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.l10n">Localization</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.l10n.understanding">Understanding Locales</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.l10n.svnuse">Subversion's Use of Locales</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.externaleditors">Using External Editors</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.externaldifftools">Using External Differencing and Merge Tools</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.externaldifftools.diff">External diff</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.externaldifftools.diff3">External diff3</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.customization.summary">Summary</A></SPAN></DT></DL></DD><DT><SPAN class="chapter"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer">8. Embedding Subversion</A></SPAN></DT><DD><DL><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.layerlib">Layered Library Design</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.layerlib.repos">Repository Layer</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.layerlib.ra">Repository Access Layer</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.layerlib.client">Client Layer</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.insidewc">Inside the Working Copy Administration Area</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.insidewc.entries">The Entries File</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.insidewc.base-and-props">Pristine Copies and Property Files</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.usingapi">Using the APIs</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.usingapi.apr">The Apache Portable Runtime Library</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.usingapi.urlpath">URL and Path Requirements</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.usingapi.otherlangs">Using Languages Other Than C and C++</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.usingapi.codesamples">Code Samples</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.summary">Summary</A></SPAN></DT></DL></DD><DT><SPAN class="chapter"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref">9. Subversion Complete Reference</A></SPAN></DT><DD><DL><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn">The Subversion Command-Line Client: <SPAN class="command"><STRONG>svn</STRONG></SPAN></A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.sw">svn Options</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c">svn Subcommands</A></SPAN></DT><DD><DL><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.add">svn add</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.blame">svn blame</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.cat">svn cat</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.changelist">svn changelist</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.checkout">svn checkout</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.cleanup">svn cleanup</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.commit">svn commit</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.copy">svn copy</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.delete">svn delete</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.diff">svn diff</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.export">svn export</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.help">svn help</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.import">svn import</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.info">svn info</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.list">svn list</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.lock">svn lock</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.log">svn log</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.merge">svn merge</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.mergeinfo">svn mergeinfo</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.mkdir">svn mkdir</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.move">svn move</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.propdel">svn propdel</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.propedit">svn propedit</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.propget">svn propget</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.proplist">svn proplist</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.propset">svn propset</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.resolve">svn resolve</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.resolved">svn resolved</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.revert">svn revert</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.status">svn status</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.switch">svn switch</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.unlock">svn unlock</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.update">svn update</A></SPAN><SPAN class="refpurpose"></SPAN></DT></DL></DD></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin">svnadmin</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.sw"><SPAN class="command"><STRONG>svnadmin</STRONG></SPAN> Options</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c">svnadmin Subcommands</A></SPAN></DT><DD><DL><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.crashtest">svnadmin crashtest</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.create">svnadmin create</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.deltify">svnadmin deltify</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.dump">svnadmin dump</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.help">svnadmin help</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.hotcopy">svnadmin hotcopy</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.list-dblogs">svnadmin list-dblogs</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.list-unused-dblogs">svnadmin list-unused-dblogs</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.load">svnadmin load</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.lslocks">svnadmin lslocks</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.lstxns">svnadmin lstxns</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.recover">svnadmin recover</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.rmlocks">svnadmin rmlocks</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.rmtxns">svnadmin rmtxns</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.setlog">svnadmin setlog</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.setrevprop">svnadmin setrevprop</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.setuuid">svnadmin setuuid</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.upgrade">svnadmin upgrade</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.verify">svnadmin verify</A></SPAN><SPAN class="refpurpose"></SPAN></DT></DL></DD></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook">svnlook</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.sw">svnlook Options</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c">svnlook Subcommands</A></SPAN></DT><DD><DL><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.author">svnlook author</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.cat">svnlook cat</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.changed">svnlook changed</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.date">svnlook date</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.diff">svnlook diff</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.dirs-changed">svnlook dirs-changed</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.help">svnlook help</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.history">svnlook history</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.info">svnlook info</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.lock">svnlook lock</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.log">svnlook log</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.propget">svnlook propget</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.proplist">svnlook proplist</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.tree">svnlook tree</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.uuid">svnlook uuid</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.youngest">svnlook youngest</A></SPAN><SPAN class="refpurpose"></SPAN></DT></DL></DD></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnsync">svnsync</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnsync.sw">svnsync Options</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnsync.c">svnsync Subcommands</A></SPAN></DT><DD><DL><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnsync.c.copy-revprops">svnsync copy-revprops</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnsync.c.help">svnsync help</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnsync.c.init">svnsync initialize</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnsync.c.sync">svnsync synchronize</A></SPAN><SPAN class="refpurpose"></SPAN></DT></DL></DD></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnserve">svnserve</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnserve.sw">svnserve Options</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svndumpfilter">svndumpfilter</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svndumpfilter.options">svndumpfilter Options</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svndumpfilter.c">svndumpfilter Subcommands</A></SPAN></DT><DD><DL><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svndumpfilter.commands.c.exclude">svndumpfilter exclude</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svndumpfilter.commands.c.include">svndumpfilter include</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svndumpfilter.commands.c.help">svndumpfilter help</A></SPAN><SPAN class="refpurpose"></SPAN></DT></DL></DD></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnversion">svnversion</A></SPAN></DT><DD><DL><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnversion.re">svnversion</A></SPAN><SPAN class="refpurpose"></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.mod_dav_svn">mod_dav_svn</A></SPAN></DT><DD><DL><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.mod_dav_svn.conf">mod_dav_svn Configuration Directives</A></SPAN><SPAN class="refpurpose"></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.mod_authz_svn">mod_authz_svn</A></SPAN></DT><DD><DL><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.mod_authz_svn.conf">mod_authz_svn Configuration Directives</A></SPAN><SPAN class="refpurpose"></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.properties">Subversion Properties</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.properties.versioned-props">Versioned Properties</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.properties.unversioned-props">Unversioned Properties</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.reposhooks">Repository Hooks</A></SPAN></DT><DD><DL><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.reposhooks.start-commit">start-commit</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.reposhooks.pre-commit">pre-commit</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.reposhooks.post-commit">post-commit</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.reposhooks.pre-revprop-change">pre-revprop-change</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.reposhooks.post-revprop-change">post-revprop-change</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.reposhooks.pre-lock">pre-lock</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.reposhooks.post-lock">post-lock</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.reposhooks.pre-unlock">pre-unlock</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.reposhooks.post-unlock">post-unlock</A></SPAN><SPAN class="refpurpose"></SPAN></DT></DL></DD></DL></DD><DT><SPAN class="appendix"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.intro">A. Subversion Quick-Start Guide</A></SPAN></DT><DD><DL><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.intro.install">Installing Subversion</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.intro.quickstart">High-Speed Tutorial</A></SPAN></DT></DL></DD><DT><SPAN class="appendix"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.forcvs">B. Subversion for CVS Users</A></SPAN></DT><DD><DL><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.forcvs.revnums">Revision Numbers Are Different Now</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.forcvs.directories">Directory Versions</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.forcvs.disconnected">More Disconnected Operations</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.forcvs.status-vs-update">Distinction Between Status and Update</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.forcvs.status-vs-update.status">Status</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.forcvs.status-vs-update.update">Update</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.forcvs.branches-and-tags">Branches and Tags</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.forcvs.properties">Metadata Properties</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.forcvs.conflicts">Conflict Resolution</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.forcvs.binary-and-trans">Binary Files and Translation</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.forcvs.modules">Versioned Modules</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.forcvs.auth">Authentication</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.forcvs.convert">Converting a Repository from CVS to Subversion</A></SPAN></DT></DL></DD><DT><SPAN class="appendix"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.webdav">C. WebDAV and Autoversioning</A></SPAN></DT><DD><DL><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.webdav.basic">What Is WebDAV?</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.webdav.autoversioning">Autoversioning</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.webdav.clients">Client Interoperability</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.webdav.clients.standalone">Standalone WebDAV Applications</A></SPAN></DT><DD><DL><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.webdav.clients.standalone.windows">Microsoft Office, Dreamweaver, Photoshop</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.webdav.clients.standalone.free">cadaver, DAV Explorer</A></SPAN></DT></DL></DD><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.webdav.clients.file-explorer-extensions">File-Explorer WebDAV Extensions</A></SPAN></DT><DD><DL><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.webdav.clients.file-explorer-extensions.windows">Microsoft Web Folders</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.webdav.clients.file-explorer-extensions.linux-de">Nautilus, Konqueror</A></SPAN></DT></DL></DD><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.webdav.clients.fs-impl">WebDAV Filesystem Implementation</A></SPAN></DT><DD><DL><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.webdav.clients.fs-impl.windows">WebDrive, NetDrive</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.webdav.clients.fs-impl.macosx">Mac OS X</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.webdav.clients.fs-impl.linux">Linux davfs2</A></SPAN></DT></DL></DD></DL></DD></DL></DD><DT><SPAN class="appendix"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.copyright">D. Copyright</A></SPAN></DT><DT><SPAN class="index"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.index">Index</A></SPAN></DT></DL></DIV><DIV class="list-of-figures"><P><B>List of Figures</B></P><DL><DT>1. <A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.intro.architecture.dia-1">Subversion's architecture</A></DT><DT>1.1. <A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.repository.dia-1">A typical client/server system</A></DT><DT>1.2. <A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.vsn-models.problem-sharing.dia-1">The problem to avoid</A></DT><DT>1.3. <A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.vsn-models.lock-unlock.dia-1">The lock-modify-unlock solution</A></DT><DT>1.4. <A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.vsn-models.copy-merge.dia-1">The copy-modify-merge solution</A></DT><DT>1.5. <A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.vsn-models.copy-merge.dia-2">The copy-modify-merge solution (continued)</A></DT><DT>1.6. <A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.in-action.wc.dia-1">The repository's filesystem</A></DT><DT>1.7. <A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.in-action.revs.dia-1">The repository</A></DT><DT>4.1. <A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.whatis.dia-1">Branches of development</A></DT><DT>4.2. <A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.using.dia-1">Starting repository layout</A></DT><DT>4.3. <A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.using.create.dia-1">Repository with new copy</A></DT><DT>4.4. <A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.using.work.dia-1">The branching of one file's history</A></DT><DT>8.1. <A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.layerlib.repos.dia-1">Files and directories in two dimensions</A></DT><DT>8.2. <A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.layerlib.repos.dia-2">Versioning timeâthe third dimension!</A></DT></DL></DIV><DIV class="list-of-tables"><P><B>List of Tables</B></P><DL><DT>1.1. <A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.in-action.wc.tbl-1">Repository access URLs</A></DT><DT>4.1. <A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchemerge.summary.tbl-1">Branching and merging commands</A></DT><DT>5.1. <A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.basics.backends.tbl-1">Repository data store comparison</A></DT><DT>6.1. <A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.overview.tbl-1">Comparison of subversion server options</A></DT><DT>C.1. <A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.webdav.clients.tbl-1">Common WebDAV clients</A></DT></DL></DIV><DIV class="list-of-examples"><P><B>List of Examples</B></P><DL><DT>5.1. <A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.diskspace.deadtxns.ex-1">txn-info.sh (reporting outstanding transactions)</A></DT><DT>5.2. <A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.replication.pre-revprop-change">Mirror repository's pre-revprop-change hook script</A></DT><DT>5.3. <A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.replication.start-commit">Mirror repository's start-commit hook script</A></DT><DT>6.1. <A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.authz.perdir.ex-1">A sample configuration for anonymous access</A></DT><DT>6.2. <A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.authz.perdir.ex-2">A sample configuration for authenticated access</A></DT><DT>6.3. <A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.authz.perdir.ex-3">A sample configuration for mixed
            authenticated/anonymous access</A></DT><DT>6.4. <A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.authz.pathauthzoff.ex-1">Disabling path checks altogether</A></DT><DT>7.1. <A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.confarea.windows-registry.ex-1">Sample registration entries (.reg) file</A></DT><DT>7.2. <A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.externaldifftools.diff.ex-1">diffwrap.py</A></DT><DT>7.3. <A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.externaldifftools.diff.ex-2">diffwrap.bat</A></DT><DT>7.4. <A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.externaldifftools.diff3.ex-1">diff3wrap.py</A></DT><DT>7.5. <A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.externaldifftools.diff3.ex-2">diff3wrap.bat</A></DT><DT>8.1. <A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.layerlib.repos.ex-1">Using the Repository Layer</A></DT><DT>8.2. <A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.usingapi.otherlangs.ex-1">Using the Repository layer with Python</A></DT><DT>8.3. <A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.usingapi.otherlangs.ex-2">A Python status crawler</A></DT></DL></DIV><DIV class="preface" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title"><A id="svn.foreword"></A>Foreword</H2></DIV><DIV><DIV class="author"><H3 class="author"><SPAN class="firstname">Karl</SPAN> <SPAN class="surname">Fogel</SPAN></H3></DIV></DIV><DIV><P class="pubdate">Chicago, March 14, 2004.</P></DIV></DIV></DIV><P>A bad Frequently Asked Questions (FAQ) sheet is one that is
    composed not of the questions people actually ask, but of the
    questions the FAQ's author <SPAN class="emphasis"><EM>wishes</EM></SPAN> people
    would ask.  Perhaps you've seen the type before:</P><DIV class="blockquote"><BLOCKQUOTE class="blockquote"><P>Q: How can I use Glorbosoft XYZ to maximize team
      productivity?</P></BLOCKQUOTE></DIV><DIV class="blockquote"><BLOCKQUOTE class="blockquote"><P>A: Many of our customers want to know how they can
      maximize productivity through our patented office groupware
      innovations.  The answer is simple.  First, click on the
      <CODE class="literal">File</CODE> menu, scroll down to
      <CODE class="literal">Increase&nbsp;Productivity</CODE>,
      thenâ¦</P></BLOCKQUOTE></DIV><P>The problem with such FAQs is that they are not, in a
    literal sense, FAQs at all.  No one ever called the tech support
    line and asked, â<SPAN class="quote">How can we maximize
    productivity?</SPAN>â  Rather, people asked highly specific
    questions, such as â<SPAN class="quote">How can we change the calendaring system
    to send reminders two days in advance instead of one?</SPAN>â
    and so on.  But it's a lot easier to make up imaginary
    Frequently Asked Questions than it is to discover the real ones.
    Compiling a true FAQ sheet requires a sustained, organized
    effort: over the lifetime of the software, incoming questions
    must be tracked, responses monitored, and all gathered into a
    coherent, searchable whole that reflects the collective
    experience of users in the wild.  It calls for the patient,
    observant attitude of a field naturalist.  No grand
    hypothesizing, no visionary pronouncements hereâopen eyes
    and accurate note-taking are what's needed most.</P><P>What I love about this book is that it grew out of just such
    a process, and shows it on every page.  It is the direct result
    of the authors' encounters with users.  It began with Ben
    Collins-Sussman's observation that people were asking the same
    basic questions over and over on the Subversion mailing lists:
    what are the standard workflows to use with Subversion?  Do
    branches and tags work the same way as in other version control
    systems?  How can I find out who made a particular change?</P><P>Frustrated at seeing the same questions day after day, Ben
    worked intensely over a month in the summer of 2002 to write
    <EM class="citetitle">The Subversion Handbook</EM>, a 60-page
    manual that covered all the basics of using Subversion.  The
    manual made no pretense of being complete, but it was
    distributed with Subversion and got users over that initial hump
    in the learning curve.  When O'Reilly decided to
    publish a full-length Subversion book, the path of least
    resistance was obvious: just expand the Subversion
    handbook.</P><P>The three coauthors of the new book were thus presented
    with an unusual opportunity.  Officially, their task was to
    write a book top-down, starting from a table of contents and an
    initial draft.  But they also had access to a steady
    streamâindeed, an uncontrollable geyserâof bottom-up
    source material.  Subversion was already in the hands of
    thousands of early adopters, and those users were giving tons of
    feedback, not only about Subversion, but also about its existing
    documentation.</P><P>During the entire time they wrote this book, Ben, Mike, and
    Brian haunted the Subversion mailing lists and chat rooms
    incessantly, carefully noting the problems users were having in
    real-life situations.  Monitoring such feedback was part of their
    job descriptions at CollabNet anyway, and it gave them a huge
    advantage when they set out to document Subversion.  The book
    they produced is grounded firmly in the bedrock of experience,
    not in the shifting sands of wishful thinking; it combines the
    best aspects of user manual and FAQ sheet.  This duality might
    not be noticeable on a first reading.  Taken in order, front to
    back, the book is simply a straightforward description of a
    piece of software.  There's the overview, the obligatory guided
    tour, the chapter on administrative configuration, some advanced
    topics, and of course, a command reference and troubleshooting
    guide.  Only when you come back to it later, seeking the
    solution to some specific problem, does its authenticity shine
    out: the telling details that can only result from encounters
    with the unexpected, the examples honed from genuine use cases,
    and most of all the sensitivity to the user's needs and the
    user's point of view.</P><P>Of course, no one can promise that this book will answer
    every question you have about Subversion.  Sometimes the
    precision with which it anticipates your questions will seem
    eerily telepathic; yet occasionally, you will stumble into a
    hole in the community's knowledge and come away empty-handed.
    When this happens, the best thing you can do is email
    <CODE class="email">&lt;<A class="email" href="mailto:users@subversion.tigris.org">users@subversion.tigris.org</A>&gt;</CODE> and present your
    problem.  The authors are still there and still watching, and the
    authors include not just the three listed on the cover, but many others
    who contributed corrections and original material.  From the
    community's point of view, solving your problem is merely a
    pleasant side effect of a much larger projectânamely,
    slowly adjusting this book, and ultimately Subversion itself, to
    more closely match the way people actually use it.  They are
    eager to hear from you, not only because they can help you, but
    because you can help them.  With Subversion, as with all active
    free software projects, <SPAN class="emphasis"><EM>you are not
    alone</EM></SPAN>.</P><P>Let this book be your first companion.</P></DIV><DIV class="preface" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title"><A id="svn.preface"></A>Preface</H2></DIV></DIV></DIV><DIV class="toc"><P><B>Table of Contents</B></P><DL><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.preface.audience">Audience</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.preface.howread">How to Read This Book</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.preface.conventions">Conventions Used in This Book</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.preface.organization">Organization of This Book</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.preface.free">This Book Is Free</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.preface.acks">Acknowledgments</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.preface.acks.sussman">From Ben Collins-Sussman</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.preface.acks.fitz">From Brian W. Fitzpatrick</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.preface.acks.cmpilato">From C. Michael Pilato</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.intro.whatis">What Is Subversion?</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.intro.righttool">Is Subversion the Right Tool?</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.intro.history">Subversion's History</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.intro.architecture">Subversion's Architecture</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.intro.components">Subversion's Components</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.intro.whatsnew">What's New in Subversion</A></SPAN></DT></DL></DD></DL></DIV><DIV class="blockquote"><TABLE border="0" width="100&percnt;" cellspacing="0" cellpadding="0" class="blockquote" summary="Block quote"><TBODY><TR><TD width="10&percnt;" valign="top">&nbsp;</TD><TD width="80&percnt;" valign="top"><P>â<SPAN class="quote">It is important not to let the perfect become the
      enemy of the good, even when you can agree on what perfect is.
      Doubly so when you can't.  As unpleasant as it is to be trapped by
      past mistakes, you can't make any progress by being afraid of your
      own shadow during design.</SPAN>â</P></TD><TD width="10&percnt;" valign="top">&nbsp;</TD></TR><TR><TD width="10&percnt;" valign="top">&nbsp;</TD><TD colspan="2" align="right" valign="top">--<SPAN class="attribution">Greg Hudson, Subversion developer</SPAN></TD></TR></TBODY></TABLE></DIV><P>
    <A id="id446080" class="indexterm"></A>

    In the world of open source software, the Concurrent Versions
    System (CVS) was the tool of choice for version control for many
    years.  And rightly so.  CVS was open source software itself, and
    its nonrestrictive modus operandi and support for networked
    operation allowed dozens of geographically dispersed programmers
    to share their work.  It fit the collaborative nature of the
    open source world very well.  CVS and its semi-chaotic development
    model have since become cornerstones of open source
    culture.</P><P>But CVS was not without its flaws, and simply fixing those
    flaws promised to be an enormous effort.  Enter Subversion.
    Subversion was designed to be a successor to CVS, and its originators set
    out to win the hearts of CVS users in two waysâby creating
    an open source system with a design (and â<SPAN class="quote">look and
    feel</SPAN>â) similar to CVS, and by attempting to avoid most of
    CVS's noticeable flaws.  While the result isn't necessarily the
    next great evolution in version control design, Subversion
    <SPAN class="emphasis"><EM>is</EM></SPAN> very powerful, very usable, and very
    flexible.  And for the most part, almost all newly started
    open source projects now choose Subversion instead of CVS.</P><P>This book is written to document the 1.5 series of the
    Subversion version control system.  We have made every attempt to
    be thorough in our coverage.  However, Subversion has a thriving
    and energetic development community, so already a number
    of features and improvements are planned for future versions that may
    change some of the commands and specific notes in this
    book.</P><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.preface.audience"></A>Audience</H2></DIV></DIV></DIV><P>This book is written for computer-literate folk who want to
      use Subversion to manage their data.  While Subversion runs on a
      number of different operating systems, its primary user
      interface is command-line-based.  That command-line tool
      (<SPAN class="command"><STRONG>svn</STRONG></SPAN>), and some auxiliary programs, are the
      focus of this book.</P><P>For consistency, the examples in this book assume that the reader
      is using a Unix-like operating system and is relatively comfortable
      with Unix and command-line interfaces.  That said, the
      <SPAN class="command"><STRONG>svn</STRONG></SPAN> program also runs on non-Unix platforms
      such as Microsoft Windows.  With a few minor exceptions, such as
      the use of backward slashes (<CODE class="literal">\</CODE>) instead of
      forward slashes (<CODE class="literal">/</CODE>) for path separators, the
      input to and output from this tool when run on Windows are
      identical to its Unix counterpart.</P><P>Most readers are probably programmers or system
      administrators who need to track changes to source code.  This
      is the most common use for Subversion, and therefore it is the
      scenario underlying all of the book's examples.  But Subversion
      can be used to manage changes to any sort of
      informationâimages, music, databases, documentation, and
      so on.  To Subversion, all data is just data.</P><P>While this book is written with the assumption that the
      reader has never used a version control system, we've also tried
      to make it easy for users of CVS (and other systems) to make a
      painless leap into Subversion.  Special sidebars may mention
      other version control systems from time to time, and Appendix B
      summarizes many of the differences between CVS and
      Subversion.</P><P>Note also that the source code examples used throughout the
      book are only examples.  While they will compile with the proper
      compiler incantations, they are intended to illustrate a
      particular scenario and not necessarily to serve as examples of good
      programming style or practices.</P></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.preface.howread"></A>How to Read This Book</H2></DIV></DIV></DIV><P>Technical books always face a certain dilemma: whether to
      cater to <EM class="firstterm">top-down</EM>
      or to <EM class="firstterm">bottom-up</EM> learners.  A top-down
      learner prefers to read or skim documentation, getting a large
      overview of how the system works; only then does she actually
      start using the software.  A bottom-up learner is a â<SPAN class="quote">learn by
      doing</SPAN>â personâsomeone who just wants to dive into the
      software and figure it out as she goes, referring to book
      sections when necessary.  Most books tend to be written for one
      type of person or the other, and this book is undoubtedly biased
      toward top-down learners.  (And if you're actually reading this
      section, you're probably already a top-down learner yourself!)
      However, if you're a bottom-up person, don't despair.  While the
      book may be laid out as a broad survey of Subversion topics, the
      content of each section tends to be heavy with specific
      examples that you can try-by-doing.  For the impatient folks who
      just want to get going, you can jump right to
      <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.intro" title="Appendix&nbsp;A.&nbsp;Subversion Quick-Start Guide">Appendix&nbsp;A, <I>Subversion Quick-Start Guide</I></A>.</P><P>Regardless of your learning style, this book aims to be
      useful to people of widely different backgroundsâfrom
      those with no previous experience in version control to
      experienced system administrators.  Depending on your own
      background, certain chapters may be more or less important to
      you.  The following can be considered a
      â<SPAN class="quote">recommended reading list</SPAN>â for various types of
      readers:</P><DIV class="variablelist"><DL><DT><SPAN class="term">Experienced system administrators</SPAN></DT><DD><P>The assumption here is that you've probably used
            version control before and are dying to get a
            Subversion server up and running ASAP.
            <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin" title="Chapter&nbsp;5.&nbsp;Repository Administration">Chapter&nbsp;5, <I>Repository Administration</I></A> and
            <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig" title="Chapter&nbsp;6.&nbsp;Server Configuration">Chapter&nbsp;6, <I>Server Configuration</I></A> will show you how to
            create your first repository and make it available over
            the network.  After that's done,
            <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour" title="Chapter&nbsp;2.&nbsp;Basic Usage">Chapter&nbsp;2, <I>Basic Usage</I></A> and
            <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.forcvs" title="Appendix&nbsp;B.&nbsp;Subversion for CVS Users">Appendix&nbsp;B, <I>Subversion for CVS Users</I></A> are the fastest routes to
            learning the Subversion client.</P></DD><DT><SPAN class="term">New users</SPAN></DT><DD><P>Your administrator has probably set up Subversion
            already, and you need to learn how to use the client.  If
            you've never used a version control system, then
            <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic" title="Chapter&nbsp;1.&nbsp;Fundamental Concepts">Chapter&nbsp;1, <I>Fundamental Concepts</I></A> is a vital introduction to the
            ideas behind version control.  <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour" title="Chapter&nbsp;2.&nbsp;Basic Usage">Chapter&nbsp;2, <I>Basic Usage</I></A>
            is a guided tour of the Subversion client.</P></DD><DT><SPAN class="term">Advanced users</SPAN></DT><DD><P>Whether you're a user or administrator, eventually
            your project will grow larger.  You're going to want to
            learn how to do more advanced things with Subversion, such
            as how to use Subversion's property support
            (<A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced" title="Chapter&nbsp;3.&nbsp;Advanced Topics">Chapter&nbsp;3, <I>Advanced Topics</I></A>), how to use branches and
            perform merges (<A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge" title="Chapter&nbsp;4.&nbsp;Branching and Merging">Chapter&nbsp;4, <I>Branching and Merging</I></A>), how to
            configure runtime options
            (<A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.customization" title="Chapter&nbsp;7.&nbsp;Customizing Your Subversion Experience">Chapter&nbsp;7, <I>Customizing Your Subversion Experience</I></A>), and other things.
            These chapters aren't critical at first, but be sure to
            read them once you're comfortable with the basics.</P></DD><DT><SPAN class="term">Developers</SPAN></DT><DD><P>Presumably, you're already familiar with Subversion,
            and now want to either extend it or build new software on
            top of its many APIs.  <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer" title="Chapter&nbsp;8.&nbsp;Embedding Subversion">Chapter&nbsp;8, <I>Embedding Subversion</I></A> is
            just for you.</P></DD></DL></DIV><P>The book ends with reference materialâ<A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref" title="Chapter&nbsp;9.&nbsp;Subversion Complete Reference">Chapter&nbsp;9, <I>Subversion Complete Reference</I></A> is a reference guide for all Subversion
      commands, and the appendixes cover a number of useful topics.
      These are the chapters you're mostly likely to come back to
      after you've finished the book.</P></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.preface.conventions"></A>Conventions Used in This Book</H2></DIV></DIV></DIV><P>The following typographic conventions are used in this 
      book:</P><DIV class="variablelist"><DL><DT><SPAN class="term">
          <STRONG class="userinput"><CODE>Constant width</CODE></STRONG>
        </SPAN></DT><DD><P>Used for literal user input, command output, and
            command-line options</P></DD><DT><SPAN class="term">
          <CODE class="filename">Italic</CODE>
        </SPAN></DT><DD><P>Used for program and Subversion tool subcommand
            names, file and directory names, and new terms</P></DD><DT><SPAN class="term">
          <EM class="replaceable"><CODE>Constant width italic</CODE></EM>
        </SPAN></DT><DD><P>Used for replaceable items in code and text</P></DD></DL></DIV><P>Also, we sprinkled especially helpful or important bits of
      information throughout the book (in contextually relevant
      locations), set off visually so they're easy to find.  Look for
      the following icons as you read:</P><DIV class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Note</H3><P>This icon designates a special point of interest.</P></DIV><DIV class="tip" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Tip</H3><P>This icon designates a helpful tip or recommended best
        practice.</P></DIV><DIV class="warning" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Warning</H3><P>This icon designates a warning.  Pay close attention to
        these to avoid running into problems.</P></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.preface.organization"></A>Organization of This Book</H2></DIV></DIV></DIV><P>The chapters that follow and their contents are listed
      here:</P><DIV class="variablelist"><DL><DT><SPAN class="term"><A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic" title="Chapter&nbsp;1.&nbsp;Fundamental Concepts">Chapter&nbsp;1, <I>Fundamental Concepts</I></A></SPAN></DT><DD><P>Explains the basics of version control and different
              versioning models, along with Subversion's repository,
              working copies, and revisions.</P></DD><DT><SPAN class="term"><A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour" title="Chapter&nbsp;2.&nbsp;Basic Usage">Chapter&nbsp;2, <I>Basic Usage</I></A></SPAN></DT><DD><P>Walks you through a day in the life of a Subversion
              user.  It demonstrates how to use a Subversion client to
              obtain, modify, and commit data.</P></DD><DT><SPAN class="term"><A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced" title="Chapter&nbsp;3.&nbsp;Advanced Topics">Chapter&nbsp;3, <I>Advanced Topics</I></A></SPAN></DT><DD><P>Covers more complex features that regular users will
              eventually come into contact with, such as versioned
              metadata, file locking, and peg revisions.</P></DD><DT><SPAN class="term"><A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge" title="Chapter&nbsp;4.&nbsp;Branching and Merging">Chapter&nbsp;4, <I>Branching and Merging</I></A></SPAN></DT><DD><P>Discusses branches, merges, and tagging, including
              best practices for branching and merging, common
              use cases, how to undo changes, and how to easily swing
              from one branch to the next.</P></DD><DT><SPAN class="term"><A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin" title="Chapter&nbsp;5.&nbsp;Repository Administration">Chapter&nbsp;5, <I>Repository Administration</I></A></SPAN></DT><DD><P>Describes the basics of the Subversion repository,
              how to create, configure, and maintain a repository, and
              the tools you can use to do all of this.</P></DD><DT><SPAN class="term"><A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig" title="Chapter&nbsp;6.&nbsp;Server Configuration">Chapter&nbsp;6, <I>Server Configuration</I></A></SPAN></DT><DD><P>Explains how to configure your Subversion server and
              offers different ways to access your repository:
              <CODE class="literal">HTTP</CODE>, the <CODE class="literal">svn</CODE>
              protocol, and local disk access.  It also covers the details
              of authentication, authorization and anonymous
              access.</P></DD><DT><SPAN class="term"><A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.customization" title="Chapter&nbsp;7.&nbsp;Customizing Your Subversion Experience">Chapter&nbsp;7, <I>Customizing Your Subversion Experience</I></A></SPAN></DT><DD><P>Explores the Subversion client configuration files,
              the handling of internationalized text, and how to make
              external tools cooperate with Subversion.</P></DD><DT><SPAN class="term"><A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer" title="Chapter&nbsp;8.&nbsp;Embedding Subversion">Chapter&nbsp;8, <I>Embedding Subversion</I></A></SPAN></DT><DD><P>Describes the internals of Subversion, the
              Subversion filesystem, and the working copy
              administrative areas from a programmer's point of view.
              It also demonstrates how to use the public APIs to write a
              program that uses Subversion.</P></DD><DT><SPAN class="term"><A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref" title="Chapter&nbsp;9.&nbsp;Subversion Complete Reference">Chapter&nbsp;9, <I>Subversion Complete Reference</I></A></SPAN></DT><DD><P>Explains in great detail every subcommand of
              <SPAN class="command"><STRONG>svn</STRONG></SPAN>, <SPAN class="command"><STRONG>svnadmin</STRONG></SPAN>, and
              <SPAN class="command"><STRONG>svnlook</STRONG></SPAN> with plenty of examples for
              the whole family!</P></DD><DT><SPAN class="term"><A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.intro" title="Appendix&nbsp;A.&nbsp;Subversion Quick-Start Guide">Appendix&nbsp;A, <I>Subversion Quick-Start Guide</I></A></SPAN></DT><DD><P>For the impatient, a whirlwind explanation of how to
              install Subversion and start using it immediately.  You
              have been warned.</P></DD><DT><SPAN class="term"><A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.forcvs" title="Appendix&nbsp;B.&nbsp;Subversion for CVS Users">Appendix&nbsp;B, <I>Subversion for CVS Users</I></A></SPAN></DT><DD><P>Covers the similarities and differences between
              Subversion and CVS, with numerous suggestions on how to
              break all the bad habits you picked up from years of
              using CVS.  Included are descriptions of Subversion
              revision numbers, versioned directories, offline
              operations, <SPAN class="command"><STRONG>update</STRONG></SPAN>
              versus <SPAN class="command"><STRONG>status</STRONG></SPAN>, branches, tags, metadata,
              conflict resolution, and authentication.</P></DD><DT><SPAN class="term"><A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.webdav" title="Appendix&nbsp;C.&nbsp;WebDAV and Autoversioning">Appendix&nbsp;C, <I>WebDAV and Autoversioning</I></A></SPAN></DT><DD><P>Describes the details of WebDAV and DeltaV and how
              you can configure your Subversion repository to be
              mounted read/write as a DAV share.</P></DD><DT><SPAN class="term"><A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.copyright" title="Appendix&nbsp;D.&nbsp;Copyright">Appendix&nbsp;D, <I>Copyright</I></A></SPAN></DT><DD><P>A copy of the Creative Commons Attribution License,
              under which this book is licensed.</P></DD></DL></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.preface.free"></A>This Book Is Free</H2></DIV></DIV></DIV><P>This book started out as bits of documentation written by
      Subversion project developers, which were then coalesced into a
      single work and rewritten.  As such, it has always been under a
      free license (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.copyright" title="Appendix&nbsp;D.&nbsp;Copyright">Appendix&nbsp;D, <I>Copyright</I></A>).  In fact,
      the book was written in the public eye, originally as part of
      the Subversion project itself.  This means two things:</P><DIV class="itemizedlist"><UL type="disc"><LI><P>You will always find the latest version of this book in
          the book's own Subversion repository.</P></LI><LI><P>You can make changes to this book and redistribute it
          however you wishâit's under a free license.  Your only
          obligation is to maintain proper attribution to the original
          authors.  Of course, we'd much rather you send feedback and
          patches to the Subversion developer community, instead of 
          distributing your private version of this book.</P></LI></UL></DIV><P>The online home of this book's development and most of the
      volunteer-driven translation efforts regarding it is
      <A class="ulink" href="http://svnbook.red-bean.com/" target="_top">http://svnbook.red-bean.com</A>.  There you can find
      links to the latest releases and tagged versions of the book in
      various formats, as well as instructions for accessing the
      book's Subversion repository (where its DocBook XML source
      code lives).  Feedback is welcomedâencouraged, even.  Please
      submit all comments, complaints, and patches against the book
      sources to <CODE class="email">&lt;<A class="email" href="mailto:svnbook-dev@red-bean.com">svnbook-dev@red-bean.com</A>&gt;</CODE>.</P></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.preface.acks"></A>Acknowledgments</H2></DIV></DIV></DIV><P>This book would not be possible (nor very useful) if
      Subversion did not exist.  For that, the authors would like to
      thank Brian Behlendorf and CollabNet for the vision to fund such
      a risky and ambitious new open source project; Jim Blandy for
      the original Subversion name and designâwe love you, Jim;
      and Karl Fogel for being such a good friend and a great
      community leader, in that order.
      <SUP>[<A id="id492010" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id492010" class="footnote">1</A>]</SUP>
    </P><P>Thanks to O'Reilly and our various editors: Chuck Toporek, Linda
      Mui, Tatiana Apandi, Mary Brady, and Mary Treseler.  Their patience and support
      has been tremendous.</P><P>Finally, we thank the countless people who contributed to
      this book with informal reviews, suggestions, and patches.
      While this is undoubtedly not a complete list, this book would
      be incomplete and incorrect without their help: 

      Bhuvaneswaran A,
      David Alber,
      C. Scott Ananian,
      David Anderson,
      Ariel Arjona,
      Seth Arnold,
      Jani Averbach,
      Charles Bailey,
      Ryan Barrett,
      Francois Beausoleil,
      Brian R. Becker,
      Yves Bergeron,
      Karl Berry,
      Jennifer Bevan,
      Matt Blais,
      Jim Blandy,
      Phil Bordelon,
      Sietse Brouwer,
      Tom Brown,
      Zack Brown,
      Martin Buchholz,
      Paul Burba,
      Sean Callan-Hinsvark,
      Branko Cibej,
      Archie Cobbs,
      Jason Cohen,
      Ryan Cresawn,
      John R. Daily,
      Peter Davis,
      Olivier Davy,
      Robert P. J. Day,
      Mo DeJong,
      Brian Denny,
      Joe Drew,
      Markus Dreyer,
      Nick Duffek,
      Boris Dusek,
      Ben Elliston,
      Justin Erenkrantz,
      Jens M. Felderhoff,
      Kyle Ferrio,
      Shlomi Fish,
      Julian Foad,
      Chris Foote,
      Martin Furter,
      Vlad Georgescu,
      Peter Gervai,
      Dave Gilbert,
      Eric Gillespie,
      David Glasser,
      Marcel Gosselin,
      Lieven Govaerts,
      Steve Greenland,
      Matthew Gregan,
      Tom Gregory,
      Maverick Grey,
      Art Haas,
      Mark E. Hamilton,
      Eric Hanchrow,
      Liam Healy,
      Malte Helmert,
      Michael Henderson,
      Ãyvind A. Holm,
      Greg Hudson,
      Alexis Huxley,
      Auke Jilderda,
      Toby Johnson,
      Jens B. Jorgensen,
      Tez Kamihira,
      David Kimdon,
      Mark Benedetto King,
      Robert Kleemann,
      Erik Kline,
      Josh Knowles,
      Andreas J. Koenig,
      Axel Kollmorgen,
      Nuutti Kotivuori,
      Kalin Kozhuharov,
      Matt Kraai,
      Regis Kuckaertz,
      Stefan Kueng,
      Steve Kunkee,
      Scott Lamb,
      Wesley J. Landaker,
      Benjamin Landsteiner,
      Vincent Lefevre,
      Morten Ludvigsen,
      Dennis Lundberg,
      Paul Lussier,
      Bruce A. Mah,
      Jonathon Mah,
      Karl Heinz Marbaise,
      Philip Martin,
      Feliciano Matias,
      Neil Mayhew,
      Patrick Mayweg,
      Gareth McCaughan,
      Craig McElroy,
      Simon McKenna,
      Christophe Meresse,
      Jonathan Metillon,
      Jean-Francois Michaud,
      Jon Middleton,
      Robert Moerland,
      Marcel Molina Jr.,
      Tim Moloney,
      Alexander Mueller,
      Tabish Mustufa,
      Christopher Ness,
      Roman Neuhauser,
      Mats Nilsson,
      Greg Noel,
      Joe Orton,
      Eric Paire,
      Dimitri Papadopoulos-Orfanos,
      Jerry Peek,
      Chris Pepper,
      Amy Lyn Pilato,
      Kevin Pilch-Bisson,
      Hans Polak,
      Dmitriy Popkov,
      Michael Price,
      Mark Proctor,
      Steffen Prohaska,
      Daniel Rall,
      Srinivasa Ramanujan,
      Jack Repenning,
      Tobias Ringstrom,
      Jason Robbins,
      Garrett Rooney,
      Joel Rosdahl,
      Christian Sauer,
      Ryan Schmidt,
      Jochem Schulenklopper,
      Jens Seidel,
      Daniel Shahaf,
      Larry Shatzer,
      Danil Shopyrin,
      Erik Sjoelund,
      Joey Smith,
      W. Snyder,
      Stefan Sperling,
      Robert Spier,
      M. S. Sriram,
      Russell Steicke,
      David Steinbrunner,
      Sander Striker,
      David Summers,
      Johan Sundstroem,
      Ed Swierk,
      John Szakmeister,
      Arfrever Frehtes Taifersar Arahesis,
      Robert Tasarz,
      Michael W. Thelen,
      Mason Thomas,
      Erik van der Kolk,
      Joshua Varner,
      Eric Wadsworth,
      Chris Wagner,
      Colin Watson,
      Alex Waugh,
      Chad Whitacre,
      Andy Whitcroft,
      Josef Wolf,
      Luke Worth,
      Hyrum Wright,
      Blair Zajac,
      Florian Zumbiehl,

      and the entire Subversion community.</P><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.preface.acks.sussman"></A>From Ben Collins-Sussman</H3></DIV></DIV></DIV><P>Thanks to my wife Frances, who, for many months, got to
        hear â<SPAN class="quote">But honey, I'm still working on the book,</SPAN>â
        rather than the usual â<SPAN class="quote">But honey, I'm still doing
        email.</SPAN>â  I don't know where she gets all that patience!
        She's my perfect counterbalance.</P><P>Thanks to my extended family and friends for their sincere
        encouragement, despite having no actual interest in the
        subject.  (You know, the ones who say, â<SPAN class="quote">Ooh, you wrote a
        book?</SPAN>â and then when you tell them it's a computer
        book, sort of glaze over.)</P><P>Thanks to all my close friends, who make me a rich, rich man.
        Don't look at me that wayâyou know who you are.</P><P>Thanks to my parents for the perfect low-level formatting
        and being unbelievable role models.  Thanks to my kids for the
        opportunity to pass that on.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.preface.acks.fitz"></A>From Brian W. Fitzpatrick</H3></DIV></DIV></DIV><P>Huge thanks to my wife Marie for being incredibly
        understanding, supportive, and most of all, patient.  Thank
        you to my brother Eric who first introduced me to Unix
        programming way back when.  Thanks to my Mom and Grandmother
        for all their support, not to mention enduring a Christmas
        holiday where I came home and promptly buried my head in my
        laptop to work on the book.</P><P>To Mike and Ben:  it was a pleasure working with you on the
        book.  Heck, it's a pleasure working with you at work!</P><P>To everyone in the Subversion community and the Apache
        Software Foundation, thanks for having me.  Not a day goes by
        where I don't learn something from at least one of you.
      </P><P>Lastly, thanks to my grandfather, who always told me that
        â<SPAN class="quote">freedom equals responsibility.</SPAN>â I couldn't agree
        more.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.preface.acks.cmpilato"></A>From C. Michael Pilato</H3></DIV></DIV></DIV><P>Special thanks to Amy, my best friend and wife of more than
        ten incredible years, for her love and patient support, for
        putting up with the late nights, and for graciously enduring
        the version control processes I've imposed on her.  Don't
        worry, sweetheartâyou'll be a TortoiseSVN wizard in no
        time!</P><P>Gavin, you're able to read half of the words in this book
        yourself now; sadly, it's the other half that provide the key
        concepts.  And sorry, Aidan â I couldn't find a way to
        work Disney/Pixar characters into the text.  But Daddy loves
        you both, and can't wait to teach you about programming.</P><P>Mom and Dad, thanks for your constant support and
        enthusiasm.  Mom- and Dad-in-law, thanks for all of the same
        <SPAN class="emphasis"><EM>plus</EM></SPAN> your fabulous daughter.</P><P>Hats off to Shep Kendall, through whom the world of
        computers was first opened to me; Ben Collins-Sussman, my
        tour guide through the open source world; Karl Fogel, you
        <SPAN class="emphasis"><EM>are</EM></SPAN> my <CODE class="filename">.emacs</CODE>; Greg
        Stein, for oozing practical programming know-how; and Brian
        Fitzpatrick, for sharing this writing experience with me.
        To the many folks from whom I am constantly picking up new
        knowledgeâkeep dropping it!</P><P>Finally, to the One who perfectly demonstrates creative
        excellenceâthank You.</P></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.intro.whatis"></A>What Is Subversion?</H2></DIV></DIV></DIV><P>Subversion is a free/open source version control system.
      That is, Subversion manages files and directories, and the
      changes made to them, over time.  This allows you to recover
      older versions of your data or examine the history of how your
      data changed.  In this regard, many people think of a version
      control system as a sort of â<SPAN class="quote">time machine.</SPAN>â</P><P>Subversion can operate across networks, which allows it to
      be used by people on different computers.  At some level, the
      ability for various people to modify and manage the same set of
      data from their respective locations fosters collaboration.
      Progress can occur more quickly without a single conduit through
      which all modifications must occur.  And because the work is
      versioned, you need not fear that quality is the trade-off for
      losing that conduitâif some incorrect change is made to
      the data, just undo that change.</P><P>Some version control systems are also software configuration
      management (SCM) systems.  These systems are specifically
      tailored to manage trees of source code and have many features
      that are specific to software developmentâsuch as natively
      understanding programming languages, or supplying tools for
      building software.  Subversion, however, is not one of these
      systems.  It is a general system that can be used to manage
      <SPAN class="emphasis"><EM>any</EM></SPAN> collection of files.  For you, those
      files might be source codeâfor others, anything from
      grocery shopping lists to digital video mixdowns and
      beyond.</P><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.intro.righttool"></A>Is Subversion the Right Tool?</H3></DIV></DIV></DIV><P>If you're a user or system administrator pondering the use
        of Subversion, the first question you should ask yourself is:
        "Is this the right tool for the job?"  Subversion is a
        fantastic hammer, but be careful not to view every problem as
        a nail.</P><P>If you need to archive old versions of files and
        directories, possibly resurrect them, or examine logs of how
        they've changed over time, then Subversion is exactly the
        right tool for you.  If you need to collaborate with people on
        documents (usually over a network) and keep track of who made
        which changes, then Subversion is also appropriate.  This is
        why Subversion is so often used in software development
        environmentsâ working on a development team is an inherently social
        activity, and Subversion makes it easy to collaborate with
        other programmers.  Of course, there's a cost to using
        Subversion as well: administrative overhead.  You'll need to
        manage a data repository to store the information and all its
        history, and be diligent about backing it up.  When working
        with the data on a daily basis, you won't be able to copy,
        move, rename, or delete files the way you usually do.
        Instead, you'll have to do all of those things through
        Subversion.</P><P>Assuming you're fine with the extra workflow, you should
        still make sure you're not using Subversion to solve a problem
        that other tools solve better.  For example, because
        Subversion replicates data to all the collaborators involved,
        a common misuse is to treat it as a generic distribution
        system.  People will sometimes use Subversion to distribute
        huge collections of photos, digital music, or software
        packages.  The problem is that this sort of data usually isn't
        changing at all.  The collection itself grows over time, but
        the individual files within the collection aren't being
        changed.  In this case, using Subversion
        is â<SPAN class="quote">overkill.</SPAN>â
        <SUP>[<A id="id492409" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id492409" class="footnote">2</A>]</SUP> 
        There are simpler tools that
        efficiently replicate data <SPAN class="emphasis"><EM>without</EM></SPAN> the
        overhead of tracking changes, such as <SPAN class="command"><STRONG>rsync</STRONG></SPAN>
        or <SPAN class="command"><STRONG>unison</STRONG></SPAN>.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.intro.history"></A>Subversion's History</H3></DIV></DIV></DIV><P>
        <A id="id492446" class="indexterm"></A>

        In early 2000, CollabNet, Inc. (<A class="ulink" href="http://www.collab.net/" target="_top">http://www.collab.net</A>) began seeking developers to
        write a replacement for CVS.  CollabNet offers a collaboration
        software suite called CollabNet Enterprise Edition (CEE), of
        which one component is version control.  Although CEE used CVS
        as its initial version control system, CVS's limitations were
        obvious from the beginning, and CollabNet knew it would
        eventually have to find something better.  Unfortunately, CVS
        had become the de facto standard in the open source world
        largely because there <SPAN class="emphasis"><EM>wasn't</EM></SPAN> anything
        better, at least not under a free license.  So CollabNet
        determined to write a new version control system from scratch,
        retaining the basic ideas of CVS, but without the bugs and
        misfeatures.</P><P>In February 2000, they contacted Karl Fogel, the author of
        <EM class="citetitle">Open Source Development with CVS</EM>
        (Coriolis, 1999), and asked if he'd like to work on this new
        project.  Coincidentally, at the time Karl was already
        discussing a design for a new version control system with his
        friend Jim Blandy.  In 1995, the two had started Cyclic
        Software, a company providing CVS support contracts, and
        although they later sold the business, they still used CVS every
        day at their jobs.  Their frustration with CVS had led Jim to
        think carefully about better ways to manage versioned data, and
        he'd already come up with not only the name
        â<SPAN class="quote">Subversion,</SPAN>â but also the basic design of
        the Subversion data store.  When CollabNet called, Karl
        immediately agreed to work on the project, and Jim got his
        employer, Red Hat Software, to essentially donate him to the
        project for an indefinite period of time.  CollabNet hired
        Karl and Ben Collins-Sussman, and detailed design work began
        in May 2000.  With the help of some well-placed prods from
        Brian Behlendorf and Jason Robbins of CollabNet, and from Greg
        Stein (at the time an independent developer active in the
        WebDAV/DeltaV specification process), Subversion quickly
        attracted a community of active developers.  It turned out
        that many people had encountered the same frustrating
        experiences with CVS and welcomed the chance to finally do
        something about it.</P><P>The original design team settled on some simple goals.  They
        didn't want to break new ground in version control methodology,
        they just wanted to fix CVS.  They decided that Subversion would
        match CVS's features and preserve the same development model,
        but not duplicate CVS's most obvious flaws.  And although it did
        not need to be a drop-in replacement for CVS, it should be
        similar enough that any CVS user could make the switch with
        little effort.</P><P>After 14 months of coding, Subversion became
        â<SPAN class="quote">self-hosting</SPAN>â on August 31, 2001.  That is,
        Subversion developers stopped using CVS to manage Subversion's
        own source code and started using Subversion instead.</P><P>While CollabNet started the project, and still funds a large
        chunk of the work (it pays the salaries of a few full-time
        Subversion developers), Subversion is run like most open source
        projects, governed by a loose, transparent set of rules that
        encourage meritocracy.  CollabNet's copyright license is fully
        compliant with the Debian Free Software Guidelines.  In other
        words, anyone is free to download, modify, and redistribute
        Subversion as he pleases; no permission from CollabNet or anyone
        else is required.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.intro.architecture"></A>Subversion's Architecture</H3></DIV></DIV></DIV><P><A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.intro.architecture.dia-1" title="Figure&nbsp;1.&nbsp;Subversion&#39;s architecture">Figure&nbsp;1, âSubversion's architectureâ</A> illustrates
        a â<SPAN class="quote">mile-high</SPAN>â view of Subversion's
        design.</P><DIV class="figure"><A id="svn.intro.architecture.dia-1"></A><P class="title"><B>Figure&nbsp;1.&nbsp;Subversion's architecture</B></P><DIV class="figure-contents"><DIV><IMG src="./0101 Version Control with Subversion_files/ch01dia1.png" alt="Subversion&#39;s architecture"></DIV></DIV></DIV><BR class="figure-break"><P>On one end is a Subversion repository that holds all of your
        versioned data.  On the other end is your Subversion client
        program, which manages local reflections of portions of that
        versioned data (called â<SPAN class="quote">working copies</SPAN>â).  Between
        these extremes are multiple routes through various Repository
        Access (RA) layers.  Some of these routes go across computer
        networks and through network servers which then access the
        repository.  Others bypass the network altogether and access the
        repository directly.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.intro.components"></A>Subversion's Components</H3></DIV></DIV></DIV><P>Subversion, once installed, has a number of different
        pieces.  The following is a quick overview of what you get.
        Don't be alarmed if the brief descriptions leave you scratching
        your headâ<SPAN class="emphasis"><EM>plenty</EM></SPAN> more pages
        in this book are devoted to alleviating that confusion.</P><DIV class="variablelist"><DL><DT><SPAN class="term">svn</SPAN></DT><DD><P>The command-line client program</P></DD><DT><SPAN class="term">svnversion</SPAN></DT><DD><P>A program for reporting the state (in terms of
              revisions of the items present) of a working copy</P></DD><DT><SPAN class="term">svnlook</SPAN></DT><DD><P>A tool for directly inspecting a Subversion repository</P></DD><DT><SPAN class="term">svnadmin</SPAN></DT><DD><P>A tool for creating, tweaking, or repairing a Subversion
              repository</P></DD><DT><SPAN class="term">mod_dav_svn</SPAN></DT><DD><P>A plug-in module for the Apache HTTP Server, used to
              make your repository available to others over a
              network</P></DD><DT><SPAN class="term">svnserve</SPAN></DT><DD><P>A custom standalone server program, runnable as a
              daemon process or invokable by SSH; another way to make
              your repository available to others over a network.</P></DD><DT><SPAN class="term">svndumpfilter</SPAN></DT><DD><P>A program for filtering Subversion repository dump
              streams</P></DD><DT><SPAN class="term">svnsync</SPAN></DT><DD><P>A program for incrementally mirroring one
            repository to another over a network</P></DD></DL></DIV></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.intro.whatsnew"></A>What's New in Subversion</H3></DIV></DIV></DIV><P>The first edition of this book was released in 2004,
        shortly after Subversion had reached 1.0.  Over the following
        four years Subversion released five major new versions, fixing
        bugs and adding major new features.  While we've managed to
        keep the online version of this book up to date, we're
        thrilled that the second edition from O'Reilly now covers
        Subversion up through release 1.5, a major milestone for the
        project.  Here's a quick summary of major new changes since
        Subversion 1.0.  Note that this is not a complete list; for
        full details, please visit Subversion's web site at
        <A class="ulink" href="http://subversion.tigris.org/" target="_top">http://subversion.tigris.org</A>.</P><DIV class="variablelist"><DL><DT><SPAN class="term">Subversion 1.1 (September 2004)</SPAN></DT><DD><P>Release 1.1 introduced FSFS, a flat-file repository
              storage option for the repository.  While the Berkeley DB
              backend is still widely used and supported, FSFS has
              since become the default choice for
              newly created repositories due to its low barrier to
              entry and minimal maintenance requirements.  Also in
              this release came the ability to put symbolic links
              under version control, auto-escaping of URLs, and a
              localized user interface.</P></DD><DT><SPAN class="term">Subversion 1.2 (May 2005)</SPAN></DT><DD><P>Release 1.2 introduced the ability to create
              server-side locks on files, thus serializing commit
              access to certain resources.  While Subversion is still
              a fundamentally concurrent version control system,
              certain types of binary files (e.g. art assets)
              cannot be merged together.  The locking feature fulfills
              the need to version and protect such resources.  With
              locking also came a complete WebDAV auto-versioning
              implementation, allowing Subversion repositories to be
              mounted as network folders.  Finally, Subversion 1.2
              began using a new, faster binary-differencing algorithm
              to compress and retrieve old versions of files.</P></DD><DT><SPAN class="term">Subversion 1.3 (December 2005)</SPAN></DT><DD><P>Release 1.3 brought path-based authorization
              controls to the <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> server,
              matching a feature formerly found only in the Apache
              server.  The Apache server, however, gained some new
              logging features of its own, and Subversion's API
              bindings to other languages also made great leaps
              forward.</P></DD><DT><SPAN class="term">Subversion 1.4 (September 2006)</SPAN></DT><DD><P>Release 1.4 introduced a whole new
              toolâ<SPAN class="command"><STRONG>svnsync</STRONG></SPAN>âfor doing
              one-way repository replication over a network.  Major
              parts of the working copy metadata were revamped to no
              longer use XML (resulting in client-side speed gains),
              while the Berkeley DB repository backend gained the
              ability to automatically recover itself after a server
              crash.</P></DD><DT><SPAN class="term">Subversion 1.5 (June 2008)</SPAN></DT><DD><P>Release 1.5 took much longer to finish than prior
              releases, but the headliner feature was gigantic:
              semi-automated tracking of branching and merging.  This
              was a huge boon for users, and pushed Subversion far
              beyond the abilities of CVS and into the ranks of
              commercial competitors such as Perforce and ClearCase.
              Subversion 1.5 also introduced a bevy of other
              user-focused features, such as interactive resolution of
              file conflicts, partial checkouts, client-side
              management of changelists, powerful new syntax for
              externals definitions, and SASL authentication support for
              the <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> server.</P></DD></DL></DIV></DIV></DIV><DIV class="footnotes"><BR><HR width="100" align="left"><DIV class="footnote"><P><SUP>[<A id="ftn.id492010" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id492010" class="para">1</A>] </SUP>Oh, and thanks, Karl, for being too overworked to write
          this book yourself.</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id492409" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id492409" class="para">2</A>] </SUP>Or as a friend puts it, â<SPAN class="quote">swatting a fly with a
            Buick.</SPAN>â</P></DIV></DIV></DIV><DIV class="chapter" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title"><A id="svn.basic"></A>Chapter&nbsp;1.&nbsp;Fundamental Concepts</H2></DIV></DIV></DIV><DIV class="toc"><P><B>Table of Contents</B></P><DL><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.repository">The Repository</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.vsn-models">Versioning Models</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.vsn-models.problem-sharing">The Problem of File Sharing</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.vsn-models.lock-unlock">The Lock-Modify-Unlock Solution</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.vsn-models.copy-merge">The Copy-Modify-Merge Solution</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.in-action">Subversion in Action</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.reposurls">Subversion Repository URLs</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.in-action.wc">Working Copies</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.in-action.revs">Revisions</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.in-action.track-repos">How Working Copies Track the Repository</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.in-action.mixedrevs">Mixed Revision Working Copies</A></SPAN></DT><DD><DL><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.in-action.mixedrevs.update-commit">Updates and commits are separate</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.in-action.mixedrevs.normal">Mixed revisions are normal</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.in-action.mixedrevs.useful">Mixed revisions are useful</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.in-action.mixedrevs.limits">Mixed revisions have limitations</A></SPAN></DT></DL></DD></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.summary">Summary</A></SPAN></DT></DL></DIV><P>This chapter is a short, casual introduction to Subversion.
    If you're new to version control, this chapter is definitely for
    you.  We begin with a discussion of general version control
    concepts, work our way into the specific ideas behind
    Subversion, and show some simple examples of Subversion in
    use.</P><P>Even though the examples in this chapter show people sharing
    collections of program source code, keep in mind that Subversion
    can manage any sort of file collectionâit's not limited to
    helping computer programmers.</P><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.basic.repository"></A>The Repository</H2></DIV></DIV></DIV><P>Subversion is a centralized system for sharing information.
      At its core is a repository, which is a central store of data.
      The repository stores information in the form of a
      <EM class="firstterm">filesystem tree</EM>âa typical hierarchy
      of files and directories.  Any number of
      <EM class="firstterm">clients</EM> connect to the repository, and
      then read or write to these files.  By writing data, a client
      makes the information available to others; by reading data, the
      client receives information from others.  <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.repository.dia-1" title="Figure&nbsp;1.1.&nbsp;A typical client/server system">Figure&nbsp;1.1, âA typical client/server systemâ</A> illustrates this.</P><DIV class="figure"><A id="svn.basic.repository.dia-1"></A><P class="title"><B>Figure&nbsp;1.1.&nbsp;A typical client/server system</B></P><DIV class="figure-contents"><DIV><IMG src="./0101 Version Control with Subversion_files/ch02dia1.png" alt="A typical client/server system"></DIV></DIV></DIV><BR class="figure-break"><P>So why is this interesting?  So far, this sounds like the
      definition of a typical file server.  And indeed, the repository
      <SPAN class="emphasis"><EM>is</EM></SPAN> a kind of file server, but it's not your
      usual breed.  What makes the Subversion repository special is
      that <SPAN class="emphasis"><EM>it remembers every change</EM></SPAN> ever written
      to itâevery change to every file, and even changes to the
      directory tree itself, such as the addition, deletion, and
      rearrangement of files and directories.</P><P>When a client reads data from the repository, it normally
      sees only the latest version of the filesystem tree.  But the
      client also has the ability to view
      <SPAN class="emphasis"><EM>previous</EM></SPAN> states of the filesystem.  For
      example, a client can ask historical questions such
      as â<SPAN class="quote">What did this directory contain last
      Wednesday?</SPAN>â and â<SPAN class="quote">Who was the last person to change
      this file, and what changes did he make?</SPAN>â These are the
      sorts of questions that are at the heart of
      any <EM class="firstterm">version control system</EM>: systems that
      are designed to track changes to data over time.
    </P></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.basic.vsn-models"></A>Versioning Models</H2></DIV></DIV></DIV><P>The core mission of a version control system is to enable
      collaborative editing and sharing of data.  But different
      systems use different strategies to achieve this.  It's
      important to understand these different strategies, for a couple
      of reasons.  First, it will help you compare and contrast
      existing version control systems, in case you encounter other
      systems similar to Subversion.  Beyond that, it will also help
      you make more effective use of Subversion, since Subversion
      itself supports a couple of different ways of working.</P><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.basic.vsn-models.problem-sharing"></A>The Problem of File Sharing</H3></DIV></DIV></DIV><P>All version control systems have to solve the same
        fundamental problem: how will the system allow users to share
        information, but prevent them from accidentally stepping on
        each other's feet?  It's all too easy for users to
        accidentally overwrite each other's changes in the
        repository.</P><P>Consider the scenario shown in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.vsn-models.problem-sharing.dia-1" title="Figure&nbsp;1.2.&nbsp;The problem to avoid">Figure&nbsp;1.2, âThe problem to avoidâ</A>.
        Suppose we have two coworkers, Harry and Sally.  They each
        decide to edit the same repository file at the same time.  If
        Harry saves his changes to the repository first, it's
        possible that (a few moments later) Sally could accidentally
        overwrite them with her own new version of the file.  While
        Harry's version of the file won't be lost forever (because the
        system remembers every change), any changes Harry made
        <SPAN class="emphasis"><EM>won't</EM></SPAN> be present in Sally's newer version
        of the file, because she never saw Harry's changes to begin
        with.  Harry's work is still effectively lostâor at
        least missing from the latest version of the fileâand
        probably by accident.  This is definitely a situation we want
        to avoid!</P><DIV class="figure"><A id="svn.basic.vsn-models.problem-sharing.dia-1"></A><P class="title"><B>Figure&nbsp;1.2.&nbsp;The problem to avoid</B></P><DIV class="figure-contents"><DIV><IMG src="./0101 Version Control with Subversion_files/ch02dia2.png" alt="The problem to avoid"></DIV></DIV></DIV><BR class="figure-break"></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.basic.vsn-models.lock-unlock"></A>The Lock-Modify-Unlock Solution</H3></DIV></DIV></DIV><P>Many version control systems use a
        <EM class="firstterm">lock-modify-unlock</EM> model to address the
        problem of many authors clobbering each other's work.  In this
        model, the repository allows only one person to change a file
        at a time.  This exclusivity policy is managed using locks.
        Harry must â<SPAN class="quote">lock</SPAN>â a file before he can begin
        making changes to it.  If Harry has locked a file, Sally
        cannot also lock it, and therefore cannot make any changes to
        that file.  All she can do is read the file and wait for
        Harry to finish his changes and release his lock.  After Harry
        unlocks the file, Sally can take her turn by locking and
        editing the file.  <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.vsn-models.lock-unlock.dia-1" title="Figure&nbsp;1.3.&nbsp;The lock-modify-unlock solution">Figure&nbsp;1.3, âThe lock-modify-unlock solutionâ</A>
        demonstrates this simple solution.</P><DIV class="figure"><A id="svn.basic.vsn-models.lock-unlock.dia-1"></A><P class="title"><B>Figure&nbsp;1.3.&nbsp;The lock-modify-unlock solution</B></P><DIV class="figure-contents"><DIV><IMG src="./0101 Version Control with Subversion_files/ch02dia3.png" alt="The lock-modify-unlock solution"></DIV></DIV></DIV><BR class="figure-break"><P>The problem with the lock-modify-unlock model is that it's
        a bit restrictive and often becomes a roadblock for
        users:</P><DIV class="itemizedlist"><UL type="disc"><LI><P><SPAN class="emphasis"><EM>Locking may cause administrative
            problems.</EM></SPAN>

            Sometimes Harry will lock a file and then forget about it.
            Meanwhile, because Sally is still waiting to edit the file,
            her hands are tied.  And then Harry goes on vacation.  Now
            Sally has to get an administrator to release Harry's lock.
            The situation ends up causing a lot of unnecessary delay
            and wasted time.</P></LI><LI><P><SPAN class="emphasis"><EM>Locking may cause unnecessary
            serialization.</EM></SPAN>

            What if Harry is editing the beginning of a text file,
            and Sally simply wants to edit the end of the same file?
            These changes don't overlap at all.  They could easily
            edit the file simultaneously, and no great harm would
            come, assuming the changes were properly merged together.
            There's no need for them to take turns in this
            situation.</P></LI><LI><P><SPAN class="emphasis"><EM>Locking may create a false sense of
            security.</EM></SPAN>

            Suppose Harry locks and edits file A, while Sally
            simultaneously locks and edits file B.  But what if A and
            B depend on one another, and the changes made to each are
            semantically incompatible?  Suddenly A and B don't work
            together anymore.  The locking system was powerless to
            prevent the problemâyet it somehow provided a false
            sense of security.  It's easy for Harry and Sally to
            imagine that by locking files, each is beginning a safe,
            insulated task, and thus they need not bother discussing
            their incompatible changes early on.  Locking often
            becomes a substitute for real communication.</P></LI></UL></DIV></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.basic.vsn-models.copy-merge"></A>The Copy-Modify-Merge Solution</H3></DIV></DIV></DIV><P>Subversion, CVS, and many other version control systems
        use a <EM class="firstterm">copy-modify-merge</EM> model as an
        alternative to locking.  In this model, each user's client
        contacts the project repository and creates a personal
        <EM class="firstterm">working copy</EM>âa local reflection
        of the repository's files and directories.  Users then work
        simultaneously and independently, modifying their private
        copies.  Finally, the private copies are merged together into
        a new, final version.  The version control system often
        assists with the merging, but ultimately, a human being is
        responsible for making it happen correctly.</P><P>Here's an example.  Say that Harry and Sally each create
        working copies of the same project, copied from the
        repository.  They work concurrently and make changes to the
        same file A within their copies.  Sally saves her changes to
        the repository first.  When Harry attempts to save his changes
        later, the repository informs him that his file A is
        <EM class="firstterm">out of date</EM>.  In other words, file
        A in the repository has somehow changed since he last copied
        it.  So Harry asks his client to <EM class="firstterm">merge</EM>
        any new changes from the repository into his working copy of
        file A.  Chances are that Sally's changes don't overlap with
        his own; once he has both sets of changes integrated, he
        saves his working copy back to the repository.  <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.vsn-models.copy-merge.dia-1" title="Figure&nbsp;1.4.&nbsp;The copy-modify-merge solution">Figure&nbsp;1.4, âThe copy-modify-merge solutionâ</A> and <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.vsn-models.copy-merge.dia-2" title="Figure&nbsp;1.5.&nbsp;The copy-modify-merge solution (continued)">Figure&nbsp;1.5, âThe copy-modify-merge solution (continued)â</A> show this
        process.</P><DIV class="figure"><A id="svn.basic.vsn-models.copy-merge.dia-1"></A><P class="title"><B>Figure&nbsp;1.4.&nbsp;The copy-modify-merge solution</B></P><DIV class="figure-contents"><DIV><IMG src="./0101 Version Control with Subversion_files/ch02dia4.png" alt="The copy-modify-merge solution"></DIV></DIV></DIV><BR class="figure-break"><DIV class="figure"><A id="svn.basic.vsn-models.copy-merge.dia-2"></A><P class="title"><B>Figure&nbsp;1.5.&nbsp;The copy-modify-merge solution (continued)</B></P><DIV class="figure-contents"><DIV><IMG src="./0101 Version Control with Subversion_files/ch02dia5.png" alt="The copy-modify-merge solution (continued)"></DIV></DIV></DIV><BR class="figure-break"><P>But what if Sally's changes <SPAN class="emphasis"><EM>do</EM></SPAN> overlap
        with Harry's changes?  What then?  This situation is called a
        <EM class="firstterm">conflict</EM>, and it's usually not much of
        a problem.  When Harry asks his client to merge the latest
        repository changes into his working copy, his copy of file A
        is somehow flagged as being in a state of conflict: he'll be
        able to see both sets of conflicting changes and manually
        choose between them.  Note that software can't automatically
        resolve conflicts; only humans are capable of understanding
        and making the necessary intelligent choices.  Once Harry has
        manually resolved the overlapping changesâperhaps after
        a discussion with Sallyâhe can safely save the
        merged file back to the repository.</P><P>The copy-modify-merge model may sound a bit chaotic, but
        in practice, it runs extremely smoothly.  Users can work in
        parallel, never waiting for one another.  When they work on
        the same files, it turns out that most of their concurrent
        changes don't overlap at all; conflicts are infrequent.  And
        the amount of time it takes to resolve conflicts is usually
        far less than the time lost by a locking system.</P><P>In the end, it all comes down to one critical factor: user
        communication.  When users communicate poorly, both syntactic
        and semantic conflicts increase.  No system can force users to
        communicate perfectly, and no system can detect semantic
        conflicts.  So there's no point in being lulled into a false
        sense of security that a locking system will somehow prevent
        conflicts; in practice, locking seems to inhibit productivity
        more than anything else.</P><DIV class="sidebar"><A id="svn.basic.vsn-models.copy-merge.sb-1"></A><P class="title"><B>When Locking Is Necessary</B></P><P>While the lock-modify-unlock model is considered
          generally harmful to collaboration, sometimes
          locking is appropriate.</P><P>The copy-modify-merge model is based on the assumption
          that files are contextually mergeableâthat is, that the
          majority of the files in the repository are line-based text
          files (such as program source code).  But for files with
          binary formats, such as artwork or sound, it's often
          impossible to merge conflicting changes.  In these
          situations, it really is necessary for users to take strict
          turns when changing the file.  Without serialized access,
          somebody ends up wasting time on changes that are ultimately
          discarded.</P><P>While Subversion is primarily a copy-modify-merge
          system, it still recognizes the need to lock an occasional
          file, and thus provides mechanisms for this.  We discuss
          this feature in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.locking" title="Locking">the section called âLockingâ</A>.</P></DIV></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.basic.in-action"></A>Subversion in Action</H2></DIV></DIV></DIV><P>It's time to move from the abstract to the concrete.  In
      this section, we'll show real examples of Subversion being
      used.</P><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.advanced.reposurls"></A>Subversion Repository URLs</H3></DIV></DIV></DIV><P>Throughout this book, Subversion uses URLs to identify
        versioned files and directories in Subversion repositories.
        For the most part, these URLs use the standard syntax,
        allowing for server names and port numbers to be specified as
        part of the URL:</P><PRE class="screen">$ svn checkout http://svn.example.com:9834/repos
â¦
</PRE><P>But there are some nuances in Subversion's handling of URLs
        that are notable.  For example, URLs containing the
        <CODE class="literal">file://</CODE> access method (used for local
        repositories) must, in accordance with convention, have either a
        server name of <CODE class="literal">localhost</CODE> or no server name at
        all:</P><PRE class="screen">$ svn checkout file:///var/svn/repos
â¦
$ svn checkout file://localhost/var/svn/repos
â¦
</PRE><P>Also, users of the <CODE class="literal">file://</CODE> scheme on
        Windows platforms will need to use an unofficially
        â<SPAN class="quote">standard</SPAN>â syntax for accessing repositories
        that are on the same machine, but on a different drive than
        the client's current working drive.  Either of the two
        following URL path syntaxes will work, where
        <CODE class="literal">X</CODE> is the drive on which the repository
        resides:</P><PRE class="screen">C:\&gt; svn checkout file:///X:/var/svn/repos
â¦
C:\&gt; svn checkout "file:///X|/var/svn/repos"
â¦
</PRE><P>In the second syntax, you need to quote the URL so that the
        vertical bar character is not interpreted as a pipe.  Also, note
        that a URL uses forward slashes even though the native
        (non-URL) form of a path on Windows uses backslashes.</P><DIV class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Note</H3><P>You cannot use Subversion's <CODE class="literal">file://</CODE> URLs
          in a regular web browser the way typical
          <CODE class="literal">file://</CODE> URLs can.  When you attempt to view
          a <CODE class="literal">file://</CODE> URL in a regular web browser, it
          reads and displays the contents of the file at that location
          by examining the filesystem directly.  However, Subversion's
          resources exist in a virtual filesystem (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.layerlib.repos" title="Repository Layer">the section called âRepository Layerâ</A>), and your browser
          will not understand how to interact with that
          filesystem.</P></DIV><P>Finally, it should be noted that the Subversion client will
        automatically encode URLs as necessary, just like a web browser
        does.  For example, if a URL contains a space or upper-ASCII
        character as in the following:</P><PRE class="screen">$ svn checkout "http://host/path with space/project/espaÃ±a"
</PRE><P>then Subversion will escape the unsafe characters
        and behave as though you had typed:</P><PRE class="screen">$ svn checkout http://host/path%20with%20space/project/espa%C3%B1a
</PRE><P>If the URL contains spaces, be sure to place it within quotation
        marks so that your shell treats the whole thing as a single
        argument to the <SPAN class="command"><STRONG>svn</STRONG></SPAN> program.</P><DIV class="sidebar"><A id="svn.basic.in-action.wc.sb-1"></A><P class="title"><B>Repository URLs</B></P><P>You can access Subversion repositories through many
          different methodsâon local disk or through various
          network protocols, depending on how your administrator has
          set things up for you.  A repository location, however, is
          always a URL.
          <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.in-action.wc.tbl-1" title="Table&nbsp;1.1.&nbsp;Repository access URLs">Table&nbsp;1.1, âRepository access URLsâ</A> describes how
          different URL schemes map to the available access
          methods.</P><DIV class="table"><A id="svn.basic.in-action.wc.tbl-1"></A><P class="title"><B>Table&nbsp;1.1.&nbsp;Repository access URLs</B></P><DIV class="table-contents"><TABLE summary="Repository access URLs" border="1"><COLGROUP><COL><COL></COLGROUP><THEAD><TR><TH>Schema</TH><TH>Access method</TH></TR></THEAD><TBODY><TR><TD><CODE class="literal">file:///</CODE></TD><TD>Direct repository access (on local disk)</TD></TR><TR><TD><CODE class="literal">http://</CODE></TD><TD>Access via WebDAV protocol to Subversion-aware
                  Apache server</TD></TR><TR><TD><CODE class="literal">https://</CODE></TD><TD>Same as <CODE class="literal">http://</CODE>, but with
                  SSL encryption.</TD></TR><TR><TD><CODE class="literal">svn://</CODE></TD><TD>Access via custom protocol to an
                  <CODE class="literal">svnserve</CODE> server</TD></TR><TR><TD><CODE class="literal">svn+ssh://</CODE></TD><TD>Same as <CODE class="literal">svn://</CODE>, but through
                  an SSH tunnel.</TD></TR></TBODY></TABLE></DIV></DIV><BR class="table-break"><P>For more information on how Subversion parses URLs, see
        <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.reposurls" title="Subversion Repository URLs">the section called âSubversion Repository URLsâ</A>.  For more
        information on the different types of network servers
        available for Subversion, see
        <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig" title="Chapter&nbsp;6.&nbsp;Server Configuration">Chapter&nbsp;6, <I>Server Configuration</I></A>.</P></DIV></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.basic.in-action.wc"></A>Working Copies</H3></DIV></DIV></DIV><P>You've already read about working copies; now we'll
        demonstrate how the Subversion client creates and uses
        them.</P><P>A Subversion working copy is an ordinary directory tree on
        your local system, containing a collection of files.  You can
        edit these files however you wish, and if they're source code
        files, you can compile your program from them in the usual
        way.  Your working copy is your own private work area:
        Subversion will never incorporate other people's changes, nor
        make your own changes available to others, until you
        explicitly tell it to do so.  You can even have multiple
        working copies of the same project.</P><P>After you've made some changes to the files in your
        working copy and verified that they work properly, Subversion
        provides you with commands to â<SPAN class="quote">publish</SPAN>â your
        changes to the other people working with you on your project
        (by writing to the repository).  If other people publish their
        own changes, Subversion provides you with commands to merge
        those changes into your working copy (by reading from the
        repository).</P><P>A working copy also contains some extra files, created and
        maintained by Subversion, to help it carry out these commands.
        In particular, each directory in your working copy contains a
        subdirectory named <CODE class="filename">.svn</CODE>, also known as
        the working copy's <EM class="firstterm">administrative
        directory</EM>.  The files in each administrative
        directory help Subversion recognize which files contain
        unpublished changes, and which files are out of date with
        respect to others' work.</P><P>A typical Subversion repository often holds the files (or
        source code) for several projects; usually, each project is a
        subdirectory in the repository's filesystem tree.  In this
        arrangement, a user's working copy will usually correspond to
        a particular subtree of the repository.</P><P>For example, suppose you have a repository that contains
        two software projects, <CODE class="literal">paint</CODE> and
        <CODE class="literal">calc</CODE>.  Each project lives in its own
        top-level subdirectory, as shown in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.in-action.wc.dia-1" title="Figure&nbsp;1.6.&nbsp;The repository&#39;s filesystem">Figure&nbsp;1.6, âThe repository's filesystemâ</A>.</P><DIV class="figure"><A id="svn.basic.in-action.wc.dia-1"></A><P class="title"><B>Figure&nbsp;1.6.&nbsp;The repository's filesystem</B></P><DIV class="figure-contents"><DIV><IMG src="./0101 Version Control with Subversion_files/ch02dia6.png" alt="The repository&#39;s filesystem"></DIV></DIV></DIV><BR class="figure-break"><P>To get a working copy, you must <EM class="firstterm">check
        out</EM> some subtree of the repository.  (The term
        <SPAN class="emphasis"><EM>check out</EM></SPAN> may sound like it has something to do
        with locking or reserving resources, but it doesn't; it simply
        creates a private copy of the project for you.) For example,
        if you check out <CODE class="filename">/calc</CODE>, you will get a
        working copy like this:</P><PRE class="screen">$ svn checkout http://svn.example.com/repos/calc
A    calc/Makefile
A    calc/integer.c
A    calc/button.c
Checked out revision 56.

$ ls -A calc
Makefile  button.c integer.c .svn/
</PRE><P>The list of letter <CODE class="literal">A</CODE>s in the left
        margin indicates that Subversion is adding a number of items
        to your working copy.  You now have a personal copy of the
        repository's <CODE class="filename">/calc</CODE> directory, with one
        additional entryâ<CODE class="filename">.svn</CODE>âwhich
        holds the extra information needed by Subversion, as mentioned
        earlier.</P><P>Suppose you make changes to <CODE class="filename">button.c</CODE>.
        Since the <CODE class="filename">.svn</CODE> directory remembers the
        file's original modification date and contents, Subversion can
        tell that you've changed the file.  However, Subversion does
        not make your changes public until you explicitly tell it to.
        The act of publishing your changes is more commonly known as
        <EM class="firstterm">committing</EM> (or <EM class="firstterm">checking
        in</EM>) changes to the repository.</P><P>To publish your changes to others, you can use
        Subversion's <SPAN class="command"><STRONG>svn commit</STRONG></SPAN> command:</P><PRE class="screen">$ svn commit button.c -m "Fixed a typo in button.c."
Sending        button.c
Transmitting file data .
Committed revision 57.
</PRE><P>Now your changes to <CODE class="filename">button.c</CODE> have
        been committed to the repository, with a note describing your
        change (namely, that you fixed a typo).  If another user
        checks out a working copy of <CODE class="filename">/calc</CODE>, she
        will see your changes in the latest version of the
        file.</P><P>Suppose you have a collaborator, Sally, who checked out a
        working copy of <CODE class="filename">/calc</CODE> at the same time
        you did.  When you commit your change to
        <CODE class="filename">button.c</CODE>, Sally's working copy is left
        unchanged; Subversion modifies working copies only at the
        user's request.</P><P>To bring her project up to date, Sally can ask Subversion
        to <EM class="firstterm">update</EM> her working copy, by using
        the <SPAN class="command"><STRONG>svn update</STRONG></SPAN> command.  This will incorporate
        your changes into her working copy, as well as any others that
        have been committed since she checked it out.</P><PRE class="screen">$ pwd
/home/sally/calc

$ ls -A
Makefile button.c integer.c .svn/

$ svn update
U    button.c
Updated to revision 57.
</PRE><P>The output from the <SPAN class="command"><STRONG>svn update</STRONG></SPAN> command
        indicates that Subversion updated the contents of
        <CODE class="filename">button.c</CODE>.  Note that Sally didn't need to
        specify which files to update; Subversion uses the information
        in the <CODE class="filename">.svn</CODE> directory as well as further
        information in the repository, to decide which files need to
        be brought up to date.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.basic.in-action.revs"></A>Revisions</H3></DIV></DIV></DIV><P>An <SPAN class="command"><STRONG>svn commit</STRONG></SPAN> operation publishes
        changes to any number of files and directories as a single
        atomic transaction.  In your working copy, you can change
        files' contents; create, delete, rename, and copy files and
        directories; and then commit a complete set of changes as an
        atomic transaction.</P><P>By atomic transaction, we mean simply this: either all of
        the changes happen in the repository, or none of them happens.
        Subversion tries to retain this atomicity in the face of
        program crashes, system crashes, network problems, and other
        users' actions.</P><P>Each time the repository accepts a commit, this creates a
        new state of the filesystem tree, called a
        <EM class="firstterm">revision</EM>.  Each revision is assigned a
        unique natural number, one greater than the number of the
        previous revision.  The initial revision of a freshly created
        repository is numbered 0 and consists of nothing but an
        empty root directory.</P><P><A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.in-action.revs.dia-1" title="Figure&nbsp;1.7.&nbsp;The repository">Figure&nbsp;1.7, âThe repositoryâ</A> illustrates a nice way to
        visualize the repository.  Imagine an array of revision
        numbers, starting at 0, stretching from left to right.  Each
        revision number has a filesystem tree hanging below it, and
        each tree is a â<SPAN class="quote">snapshot</SPAN>â of the way the
        repository looked after a commit.</P><DIV class="figure"><A id="svn.basic.in-action.revs.dia-1"></A><P class="title"><B>Figure&nbsp;1.7.&nbsp;The repository</B></P><DIV class="figure-contents"><DIV><IMG src="./0101 Version Control with Subversion_files/ch02dia7.png" alt="The repository"></DIV></DIV></DIV><BR class="figure-break"><DIV class="sidebar"><P class="title"><B>Global Revision Numbers</B></P><P>Unlike most version control systems, Subversion's
          revision numbers apply to <SPAN class="emphasis"><EM>entire trees</EM></SPAN>,
          not individual files.  Each revision number selects an
          entire tree, a particular state of the repository after some
          committed change.  Another way to think about it is that
          revision N represents the state of the repository filesystem
          after the Nth commit.  When Subversion users talk
          about â<SPAN class="quote">revision 5 of
          <CODE class="filename">foo.c</CODE>,</SPAN>â they really mean
          â<SPAN class="quote"><CODE class="filename">foo.c</CODE> as it appears in revision
          5.</SPAN>â Notice that in general, revisions N and M of a
          file do <SPAN class="emphasis"><EM>not</EM></SPAN> necessarily differ!  Many
          other version control systems use per-file revision numbers,
          so this concept may seem unusual at first. (Former CVS users
          might want to see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.forcvs" title="Appendix&nbsp;B.&nbsp;Subversion for CVS Users">Appendix&nbsp;B, <I>Subversion for CVS Users</I></A> for more
          details.)</P></DIV><P>It's important to note that working copies do not always
        correspond to any single revision in the repository; they may
        contain files from several different revisions.  For example,
        suppose you check out a working copy from a repository whose
        most recent revision is 4:</P><PRE class="screen">calc/Makefile:4
     integer.c:4
     button.c:4
</PRE><P>At the moment, this working directory corresponds exactly
        to revision 4 in the repository.  However, suppose you make a
        change to <CODE class="filename">button.c</CODE>, and commit that
        change.  Assuming no other commits have taken place, your
        commit will create revision 5 of the repository, and your
        working copy will now look like this:</P><PRE class="screen">calc/Makefile:4
     integer.c:4
     button.c:5
</PRE><P>Suppose that, at this point, Sally commits a change to
        <CODE class="filename">integer.c</CODE>, creating revision 6.  If you
        use <SPAN class="command"><STRONG>svn update</STRONG></SPAN> to bring your working copy
        up to date, it will look like this:</P><PRE class="screen">calc/Makefile:6
     integer.c:6
     button.c:6
</PRE><P>Sally's change to <CODE class="filename">integer.c</CODE> will
        appear in your working copy, and your change will still be
        present in <CODE class="filename">button.c</CODE>.  In this example,
        the text of <CODE class="filename">Makefile</CODE> is identical in
        revisions 4, 5, and 6, but Subversion will mark your working
        copy of <CODE class="filename">Makefile</CODE> with revision 6 to
        indicate that it is still current.  So, after you do a clean
        update at the top of your working copy, it will generally
        correspond to exactly one revision in the repository.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.basic.in-action.track-repos"></A>How Working Copies Track the Repository</H3></DIV></DIV></DIV><P>For each file in a working directory, Subversion records
        two essential pieces of information in the
        <CODE class="filename">.svn/</CODE> administrative area:</P><DIV class="itemizedlist"><UL type="disc"><LI><P>What revision your working file is based on (this is
            called the file's <EM class="firstterm">working
            revision</EM>)</P></LI><LI><P>A timestamp recording when the local copy was last
            updated by the repository</P></LI></UL></DIV><P>Given this information, by talking to the repository,
        Subversion can tell which of the following four states a
        working file is in:</P><DIV class="variablelist"><DL><DT><SPAN class="term">Unchanged, and current</SPAN></DT><DD><P>The file is unchanged in the working directory, and
              no changes to that file have been committed to the
              repository since its working revision.  An <SPAN class="command"><STRONG>svn
              commit</STRONG></SPAN> of the file will do nothing, and an
              <SPAN class="command"><STRONG>svn update</STRONG></SPAN> of the file will do
              nothing.</P></DD><DT><SPAN class="term">Locally changed, and current</SPAN></DT><DD><P>The file has been changed in the working directory,
              and no changes to that file have been committed to the
              repository since you last updated.  There are local
              changes that have not been committed to the repository;
              thus an <SPAN class="command"><STRONG>svn commit</STRONG></SPAN> of the file will
              succeed in publishing your changes, and an <SPAN class="command"><STRONG>svn
              update</STRONG></SPAN> of the file will do nothing.</P></DD><DT><SPAN class="term">Unchanged, and out of date</SPAN></DT><DD><P>The file has not been changed in the working
              directory, but it has been changed in the repository.
              The file should eventually be updated in order to make
              it current with the latest public revision.
              An <SPAN class="command"><STRONG>svn commit</STRONG></SPAN> of the file will do
              nothing, and an
              <SPAN class="command"><STRONG>svn update</STRONG></SPAN> of the file will fold the
              latest changes into your working copy.</P></DD><DT><SPAN class="term">Locally changed, and out of date</SPAN></DT><DD><P>The file has been changed both in the working
              directory and in the repository.  An <SPAN class="command"><STRONG>svn
              commit</STRONG></SPAN> of the file will fail with an
              â<SPAN class="quote">out-of-date</SPAN>â error.  The file should be
              updated first; an <SPAN class="command"><STRONG>svn update</STRONG></SPAN> command
              will attempt to merge the public changes with the local
              changes.  If Subversion can't complete the merge in a
              plausible way automatically, it leaves it to the user to
              resolve the conflict.</P></DD></DL></DIV><P>This may sound like a lot to keep track of, but the
        <SPAN class="command"><STRONG>svn status</STRONG></SPAN> command will show you the state
        of any item in your working copy.  For more information on
        that command, see
        <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.examine.status" title="See an overview of your changes">the section called âSee an overview of your changesâ</A>.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.basic.in-action.mixedrevs"></A>Mixed Revision Working Copies</H3></DIV></DIV></DIV><P>As a general principle, Subversion tries to be as flexible
        as possible.  One special kind of flexibility is the ability
        to have a working copy containing files and directories with a
        mix of different working revision numbers.  Unfortunately,
        this flexibility tends to confuse a number of new users.  If
        the earlier example showing mixed revisions perplexed you,
        here's a primer on why the feature exists and how to make
        use of it.</P><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.basic.in-action.mixedrevs.update-commit"></A>Updates and commits are separate</H4></DIV></DIV></DIV><P>One of the fundamental rules of Subversion is that
          a â<SPAN class="quote">push</SPAN>â action does not cause
          a â<SPAN class="quote">pull,</SPAN>â nor vice versa.  Just
          because you're ready to submit new changes to the repository
          doesn't mean you're ready to receive changes from other
          people.  And if you have new changes still in progress,
          <SPAN class="command"><STRONG>svn update</STRONG></SPAN> should gracefully merge
          repository changes into your own, rather than forcing you to
          publish them.</P><P>The main side effect of this rule is that it means a
          working copy has to do extra bookkeeping to track mixed
          revisions as well as be tolerant of the mixture.  It's made
          more complicated by the fact that directories themselves are
          versioned.</P><P>For example, suppose you have a working copy entirely at
          revision 10.  You edit the
          file <CODE class="filename">foo.html</CODE> and then perform
          an <SPAN class="command"><STRONG>svn commit</STRONG></SPAN>, which creates revision 15
          in the repository.  After the commit succeeds, many new
          users would expect the working copy to be entirely at
          revision 15, but that's not the case!  Any number of changes
          might have happened in the repository between revisions 10
          and 15.  The client knows nothing of those changes in the
          repository, since you haven't yet run <SPAN class="command"><STRONG>svn
          update</STRONG></SPAN>, and <SPAN class="command"><STRONG>svn commit</STRONG></SPAN> doesn't
          pull down new changes.  If, on the other hand,
          <SPAN class="command"><STRONG>svn commit</STRONG></SPAN> were to automatically download
          the newest changes, it would be possible to set the
          entire working copy to revision 15âbut then we'd be
          breaking the fundamental rule of â<SPAN class="quote">push</SPAN>â
          and â<SPAN class="quote">pull</SPAN>â remaining separate actions.
          Therefore, the only safe thing the Subversion client can do
          is mark the one
          fileâ<CODE class="filename">foo.html</CODE>âas being at
          revision 15.  The rest of the working copy remains at
          revision 10.  Only by running <SPAN class="command"><STRONG>svn update</STRONG></SPAN>
          can the latest changes be downloaded and the whole working
          copy be marked as revision 15.</P></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.basic.in-action.mixedrevs.normal"></A>Mixed revisions are normal</H4></DIV></DIV></DIV><P>The fact is, <SPAN class="emphasis"><EM>every time</EM></SPAN> you run
          <SPAN class="command"><STRONG>svn commit</STRONG></SPAN> your working copy ends up
          with some mixture of revisions.  The things you just
          committed are marked as having larger working revisions than
          everything else.  After several commits (with no updates
          in between), your working copy will contain a whole mixture
          of revisions.  Even if you're the only person using the
          repository, you will still see this phenomenon.  To examine
          your mixture of working revisions, use the <SPAN class="command"><STRONG>svn
          status</STRONG></SPAN> command with the <CODE class="option">--verbose</CODE> option (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.examine.status" title="See an overview of your changes">the section called âSee an overview of your changesâ</A> for more
          information).</P><P>Often, new users are completely unaware that their
          working copy contains mixed revisions.  This can be
          confusing, because many client commands are sensitive to the
          working revision of the item they're examining.  For
          example, the <SPAN class="command"><STRONG>svn log</STRONG></SPAN> command is used to
          display the history of changes to a file or directory (see
          <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.history.log" title="Generating a List of Historical Changes">the section called âGenerating a List of Historical Changesâ</A>).  When the user
          invokes this command on a working copy object, he expects
          to see the entire history of the object.  But if the
          object's working revision is quite old (often because
          <SPAN class="command"><STRONG>svn update</STRONG></SPAN> hasn't been run in a long
          time), the history of the <SPAN class="emphasis"><EM>older</EM></SPAN>
          version of the object is shown.</P></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.basic.in-action.mixedrevs.useful"></A>Mixed revisions are useful</H4></DIV></DIV></DIV><P>If your project is sufficiently complex, you'll discover
          that it's sometimes nice to
          forcibly <EM class="firstterm">backdate</EM> (or update to a
          revision older than the one you already have) portions of
          your working copy to an earlier revision; you'll learn how
          to do that in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour" title="Chapter&nbsp;2.&nbsp;Basic Usage">Chapter&nbsp;2, <I>Basic Usage</I></A>.  Perhaps you'd
          like to test an earlier version of a submodule contained in
          a subdirectory, or perhaps you'd like to figure out when a
          bug first came into existence in a specific file.  This is
          the â<SPAN class="quote">time machine</SPAN>â aspect of a version control
          systemâthe feature that allows you to move any
          portion of your working copy forward and backward in
          history.</P></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.basic.in-action.mixedrevs.limits"></A>Mixed revisions have limitations</H4></DIV></DIV></DIV><P>However you make use of mixed revisions in your working
          copy, there are limitations to this flexibility.</P><P>First, you cannot commit the deletion of a file or
          directory that isn't fully up to date.  If a newer version
          of the item exists in the repository, your attempt to delete
          will be rejected to prevent you from accidentally
          destroying changes you've not yet seen.</P><P>Second, you cannot commit a metadata change to a
          directory unless it's fully up to date.  You'll learn about
          attaching â<SPAN class="quote">properties</SPAN>â to items in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced" title="Chapter&nbsp;3.&nbsp;Advanced Topics">Chapter&nbsp;3, <I>Advanced Topics</I></A>.  A directory's working revision
          defines a specific set of entries and properties, and thus
          committing a property change to an out-of-date directory may
          destroy properties you've not yet seen.</P></DIV></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.basic.summary"></A>Summary</H2></DIV></DIV></DIV><P>We covered a number of fundamental Subversion concepts in
      this chapter:</P><DIV class="itemizedlist"><UL type="disc"><LI><P>We introduced the notions of the central repository,
          the client working copy, and the array of repository
          revision trees.</P></LI><LI><P>We saw some simple examples of how two collaborators
          can use Subversion to publish and receive changes from one
          another, using the â<SPAN class="quote">copy-modify-merge</SPAN>â
          model.</P></LI><LI><P>We talked a bit about the way Subversion tracks and
          manages information in a working copy.</P></LI></UL></DIV><P>At this point, you should have a good idea of how Subversion
      works in the most general sense.  Armed with this knowledge, you
      should now be ready to move into the next chapter, which is a
      detailed tour of Subversion's commands and features.</P></DIV></DIV><DIV class="chapter" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title"><A id="svn.tour"></A>Chapter&nbsp;2.&nbsp;Basic Usage</H2></DIV></DIV></DIV><DIV class="toc"><P><B>Table of Contents</B></P><DL><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.help">Help!</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.importing">Getting Data into Your Repository</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.importing.import">svn import</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.importing.layout">Recommended Repository Layout</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.initial">Initial Checkout</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.initial.disabling-password-caching">Disabling Password Caching</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.initial.different-user">Authenticating As a Different User</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle">Basic Work Cycle</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.update">Update Your Working Copy</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.edit">Make Changes to Your Working Copy</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.examine">Examine Your Changes</A></SPAN></DT><DD><DL><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.examine.status">See an overview of your changes</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.examine.diff">Examine the details of your local modifications</A></SPAN></DT></DL></DD><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.revert">Undoing Working Changes</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.resolve">Resolve Conflicts (Merging Others' Changes)</A></SPAN></DT><DD><DL><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.resolve.diff">Viewing conflict differences interactively</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.resolve.resolve">Resolving conflict differences interactively</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.resolve.pending">Postponing conflict resolution</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.resolve.byhand">Merging conflicts by hand</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.resolve.theirsfull">Discarding your changes in favor of a newly fetched revision</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.resolve.revert">Punting: Using svn revert</A></SPAN></DT></DL></DD><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.commit">Commit Your Changes</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.history">Examining History</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.history.log">Generating a List of Historical Changes</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.history.diff">Examining the Details of Historical Changes</A></SPAN></DT><DD><DL><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.history.diff.local">Examining local changes</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.history.diff.wcrepos">Comparing working copy to repository</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.history.diff.reposrepos">Comparing repository revisions</A></SPAN></DT></DL></DD><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.history.browsing">Browsing the Repository</A></SPAN></DT><DD><DL><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.history.browsing.cat">svn cat</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.history.browsing.list">svn list</A></SPAN></DT></DL></DD><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.history.snapshots">Fetching Older Repository Snapshots</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cleanup">Sometimes You Just Need to Clean Up</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cleanup.disposal">Disposing of a Working Copy</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cleanup.interruption">Recovering from an Interruption</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.summary">Summary</A></SPAN></DT></DL></DIV><P>Now we will go into the details of using Subversion.  By the
    time you reach the end of this chapter, you will be able to
    perform all the tasks you need to use Subversion in a normal day's
    work.  You'll start with getting your files into Subversion,
    followed by an initial checkout of your code.  We'll then walk you
    through making changes and examining those changes.  You'll also
    see how to bring changes made by others into your working copy,
    examine them, and work through any conflicts that might
    arise.</P><P>Note that this chapter is not meant to be an exhaustive list
    of all of Subversion's commandsârather, it's a conversational
    introduction to the most common Subversion tasks that you'll
    encounter.  This chapter assumes that you've read and understood
    <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic" title="Chapter&nbsp;1.&nbsp;Fundamental Concepts">Chapter&nbsp;1, <I>Fundamental Concepts</I></A> and are familiar with the general
    model of Subversion.  For a complete reference of all commands,
    see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref" title="Chapter&nbsp;9.&nbsp;Subversion Complete Reference">Chapter&nbsp;9, <I>Subversion Complete Reference</I></A>.</P><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.tour.help"></A>Help!</H2></DIV></DIV></DIV><P>Before reading on, here is the most important command you'll
      ever need when using Subversion: <SPAN class="command"><STRONG>svn help</STRONG></SPAN>.
      The Subversion command-line client is self-documentingâat
      any time, a quick <STRONG class="userinput"><CODE>svn help
      <EM class="replaceable"><CODE>subcommand</CODE></EM></CODE></STRONG> will describe
      the syntax, options, and behavior of the subcommand.</P><PRE class="screen">$ svn help import
import: Commit an unversioned file or tree into the repository.
usage: import [PATH] URL

  Recursively commit a copy of PATH to URL.
  If PATH is omitted '.' is assumed.
  Parent directories are created as necessary in the repository.
  If PATH is a directory, the contents of the directory are added
  directly under URL.
  Unversionable items such as device files and pipes are ignored
  if --force is specified.

Valid options:
  -q [--quiet]             : print nothing, or only summary information
  -N [--non-recursive]     : obsolete; try --depth=files or --depth=immediates
  --depth ARG              : limit operation by depth ARG ('empty', 'files',
                             'immediates', or 'infinity')
â¦
</PRE><DIV class="sidebar"><P class="title"><B>Options and Switches and Flags, Oh My!</B></P><P>The Subversion command-line client has numerous command
          modifiers (which we call options), but there are two
          distinct kinds of options:  short options
          are a single hyphen followed by a single letter, and
          long options consist of two hyphens
          followed by a number of letters (e.g., <CODE class="literal">-s</CODE>
          and <CODE class="literal">--this-is-a-long-option</CODE>,
          respectively).  Every option has a long format, but only
          certain options have an additional short format (these are
          typically options that are frequently used).  To
          maintain clarity, we <SPAN class="emphasis"><EM>usually</EM></SPAN> use the
          long form in code examples, but when describing options, if
          there's a short form, we'll provide the long form (to
          improve clarity) and the short form (to make it easier to
          remember).  You should use whichever one you're more
          comfortable with, but don't try to use both.</P></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.tour.importing"></A>Getting Data into Your Repository</H2></DIV></DIV></DIV><P>You can get new files into your Subversion
      repository in two ways: <SPAN class="command"><STRONG>svn import</STRONG></SPAN> and <SPAN class="command"><STRONG>svn
      add</STRONG></SPAN>.  We'll discuss <SPAN class="command"><STRONG>svn import</STRONG></SPAN> now
      and will discuss <SPAN class="command"><STRONG>svn add</STRONG></SPAN> later in this
      chapter when we review a typical day with Subversion.</P><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.tour.importing.import"></A>svn import</H3></DIV></DIV></DIV><P>The <SPAN class="command"><STRONG>svn import</STRONG></SPAN> command is a quick way to
        copy an unversioned tree of files into a repository, creating
        intermediate directories as necessary.  <SPAN class="command"><STRONG>svn
        import</STRONG></SPAN> doesn't require a working copy, and your files
        are immediately committed to the repository.  You typically
        use this when you have an existing tree of files that you want to
        begin tracking in your Subversion repository.  For example:</P><PRE class="screen">$ svnadmin create /var/svn/newrepos
$ svn import mytree file:///var/svn/newrepos/some/project \
             -m "Initial import"
Adding         mytree/foo.c
Adding         mytree/bar.c
Adding         mytree/subdir
Adding         mytree/subdir/quux.h

Committed revision 1.
</PRE><P>The previous example copied the contents of directory
        <CODE class="filename">mytree</CODE> under the directory
        <CODE class="filename">some/project</CODE> in the repository:</P><PRE class="screen">$ svn list file:///var/svn/newrepos/some/project
bar.c
foo.c
subdir/
</PRE><P>Note that after the import is finished, the original tree
        is <SPAN class="emphasis"><EM>not</EM></SPAN> converted into a working copy.  To
        start working, you still need to <SPAN class="command"><STRONG>svn
        checkout</STRONG></SPAN> a fresh working copy of the tree.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.tour.importing.layout"></A>Recommended Repository Layout</H3></DIV></DIV></DIV><P>While Subversion's flexibility allows you to lay out your
      repository in any way that you choose, we recommend that you
      create a <CODE class="filename">trunk</CODE> directory to hold the
      â<SPAN class="quote">main line</SPAN>â of development, a
      <CODE class="filename">branches</CODE> directory to contain branch
      copies, and a <CODE class="filename">tags</CODE> directory to contain tag
      copies.  For example:</P><PRE class="screen">$ svn list file:///var/svn/repos
/trunk
/branches
/tags
</PRE><P>You'll learn more about tags and branches in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge" title="Chapter&nbsp;4.&nbsp;Branching and Merging">Chapter&nbsp;4, <I>Branching and Merging</I></A>.  For details and how to set up
      multiple projects, see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.maint.layout" title="Repository Layout">the section called âRepository Layoutâ</A> and <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.projects.chooselayout" title="Planning Your Repository Organization">the section called âPlanning Your Repository Organizationâ</A> to read more
      about project roots.</P></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.tour.initial"></A>Initial Checkout</H2></DIV></DIV></DIV><P>Most of the time, you will start using a Subversion
      repository by doing a <EM class="firstterm">checkout</EM> of your
      project.  Checking out a repository creates a â<SPAN class="quote">working
      copy</SPAN>â of it on your local machine.  This copy contains
      the <CODE class="literal">HEAD</CODE> (latest revision) of the Subversion
      repository that you specify on the command line:</P><PRE class="screen">$ svn checkout http://svn.collab.net/repos/svn/trunk
A    trunk/Makefile.in
A    trunk/ac-helpers
A    trunk/ac-helpers/install.sh
A    trunk/ac-helpers/install-sh
A    trunk/build.conf
â¦
Checked out revision 8810.
</PRE><DIV class="sidebar"><P class="title"><B>What's in a Name?</B></P><P>Subversion tries hard not to limit the type of data you
        can place under version control.  The contents of files and
        property values are stored and transmitted as binary data, and
        <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.special.mime-type" title="File Content Type">the section called âFile Content Typeâ</A>
        tells you how to give Subversion a hint that
        â<SPAN class="quote">textual</SPAN>â operations don't make sense for a
        particular file.  There are a few places, however, where
        Subversion places restrictions on information it
        stores.</P><P>Subversion internally handles certain bits of
        dataâfor example, property names, pathnames, and log
        messagesâas UTF-8-encoded Unicode.  This is not to say
        that all your interactions with Subversion must involve UTF-8,
        though.  As a general rule, Subversion clients will gracefully
        and transparently handle conversions between UTF-8 and the
        encoding system in use on your computer, if such a conversion
        can meaningfully be done (which is the case for most common
        encodings in use today).</P><P>In WebDAV exchanges and older versions of some of
        Subversion's administrative files, paths are used as XML
        attribute values, and property names in XML tag names.  This
        means that pathnames can contain only legal XML (1.0)
        characters, and properties are further limited to ASCII
        characters.  Subversion also prohibits <CODE class="literal">TAB</CODE>,
        <CODE class="literal">CR</CODE>, and <CODE class="literal">LF</CODE> characters in
        path names to prevent paths from being broken up in diffs or
        in the output of commands such as <SPAN class="command"><STRONG>svn log</STRONG></SPAN>
        or <SPAN class="command"><STRONG>svn status</STRONG></SPAN>.</P><P>While it may seem like a lot to remember, in practice
        these limitations are rarely a problem.  As long as your
        locale settings are compatible with UTF-8 and you don't use
        control characters in path names, you should have no trouble
        communicating with Subversion.  The command-line client adds
        an extra bit of helpâto create
        â<SPAN class="quote">legally correct</SPAN>â versions for internal
        use it will automatically escape illegal
        path characters as needed in URLs that you type.</P></DIV><P>Although the preceding example checks out the trunk directory,
      you can just as easily check out any deep subdirectory of a
      repository by specifying the subdirectory in the checkout
      URL:</P><PRE class="screen">$ svn checkout \
      http://svn.collab.net/repos/svn/trunk/subversion/tests/cmdline/
A    cmdline/revert_tests.py
A    cmdline/diff_tests.py
A    cmdline/autoprop_tests.py
A    cmdline/xmltests
A    cmdline/xmltests/svn-test.sh
â¦
Checked out revision 8810.
</PRE><P>Since Subversion uses a copy-modify-merge
      model instead of lock-modify-unlock (see
      <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.vsn-models" title="Versioning Models">the section called âVersioning Modelsâ</A>), you can immediately
      make changes to the files and directories in your working
      copy.  Your working copy is just like any other collection of
      files and directories on your system.  You can edit and change
      it, move it around, even delete the entire working copy and
      forget about it.</P><DIV class="warning" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Warning</H3><P>While your working copy is â<SPAN class="quote">just like any other
          collection of files and directories on your system,</SPAN>â
          you can edit files at will, but you must tell Subversion
          about <SPAN class="emphasis"><EM>everything else</EM></SPAN> that you do.  For
          example, if you want to copy or move an item in a working
          copy, you should use <SPAN class="command"><STRONG>svn copy</STRONG></SPAN> or
          <SPAN class="command"><STRONG>svn move</STRONG></SPAN> instead of the copy and move
          commands provided by your operating system.  We'll talk more
          about them later in this chapter.</P></DIV><P>Unless you're ready to commit the addition of a new file or
      directory or changes to existing ones, there's no need to
      further notify the Subversion server that you've done
      anything.</P><DIV class="sidebar"><P class="title"><B>What's with the .svn Directory?</B></P><P>Every directory in a working copy contains an
        administrative areaâa subdirectory named
        <CODE class="filename">.svn</CODE>.  Usually, directory listing
        commands won't show this subdirectory, but it is nevertheless
        an important directory.  Whatever you do, don't delete or
        change anything in the administrative area!  Subversion
        depends on it to manage your working copy.</P><P>If you accidentally remove the <CODE class="filename">.svn</CODE>
        subdirectory, the easiest way to fix the problem is to remove
        the entire containing directory (a normal system deletion,
        not <SPAN class="command"><STRONG>svn delete</STRONG></SPAN>), then run <STRONG class="userinput"><CODE>svn
        update</CODE></STRONG> from a parent directory.  The Subversion
        client will download the directory you've deleted, with a
        new <CODE class="filename">.svn</CODE> area as well.</P></DIV><P>While you can certainly check out a working copy with the
      URL of the repository as the only argument, you can also specify
      a directory after your repository URL.  This places your working
      copy in the new directory that you name.  For example:</P><PRE class="screen">$  svn checkout http://svn.collab.net/repos/svn/trunk subv
A    subv/Makefile.in
A    subv/ac-helpers
A    subv/ac-helpers/install.sh
A    subv/ac-helpers/install-sh
A    subv/build.conf
â¦
Checked out revision 8810.
</PRE><P>That will place your working copy in a directory named
      <CODE class="literal">subv</CODE> instead of a directory named
      <CODE class="literal">trunk</CODE> as we did previously.  The directory
      <CODE class="literal">subv</CODE> will be created if it doesn't already
      exist.</P><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.tour.initial.disabling-password-caching"></A>Disabling Password Caching</H3></DIV></DIV></DIV><P>When you perform a Subversion operation that requires you
        to authenticate, by default Subversion caches your
        authentication credentials on disk.  This is done for
        convenience so that you don't have to continually reenter
        your password for future operations.  If you're concerned
        about caching your Subversion passwords,
        <SUP>[<A id="id498074" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id498074" class="footnote">3</A>]</SUP>
        you can disable caching either permanently or on a
        case-by-case basis.</P><P>To disable password caching for a particular one-time
        command, pass the <CODE class="option">--no-auth-cache</CODE> option on
        the command line.  To permanently disable caching, you can add
        the line <CODE class="literal">store-passwords = no</CODE> to your local
        machine's Subversion configuration file.  See <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.netmodel.credcache" title="Client Credentials Caching">the section called âClient Credentials Cachingâ</A> for
        details.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.tour.initial.different-user"></A>Authenticating As a Different User</H3></DIV></DIV></DIV><P>Since Subversion caches auth credentials by default (both
        username and password), it conveniently remembers who you were
        acting as the last time you modified your working copy.  But
        sometimes that's not helpfulâparticularly if you're
        working in a shared working copy such as a system
        configuration directory or a web server document root.  In this
        case, just pass the <CODE class="option">--username</CODE> option on the
        command line, and Subversion will attempt to authenticate as
        that user, prompting you for a password if necessary.</P></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.tour.cycle"></A>Basic Work Cycle</H2></DIV></DIV></DIV><P>Subversion has numerous features, options, bells, and
      whistles, but on a day-to-day basis, odds are that you will use
      only a few of them.  In this section, we'll run through the most
      common things that you might find yourself doing with Subversion
      in the course of a day's work.</P><P>The typical work cycle looks like this:</P><DIV class="orderedlist"><OL type="1"><LI><P>Update your working copy.</P><DIV class="itemizedlist"><UL type="disc"><LI><P><SPAN class="command"><STRONG>svn update</STRONG></SPAN></P></LI></UL></DIV></LI><LI><P>Make changes.</P><DIV class="itemizedlist"><UL type="disc"><LI><P><SPAN class="command"><STRONG>svn add</STRONG></SPAN></P></LI><LI><P><SPAN class="command"><STRONG>svn delete</STRONG></SPAN></P></LI><LI><P><SPAN class="command"><STRONG>svn copy</STRONG></SPAN></P></LI><LI><P><SPAN class="command"><STRONG>svn move</STRONG></SPAN></P></LI></UL></DIV></LI><LI><P>Examine your changes.</P><DIV class="itemizedlist"><UL type="disc"><LI><P><SPAN class="command"><STRONG>svn status</STRONG></SPAN></P></LI><LI><P><SPAN class="command"><STRONG>svn diff</STRONG></SPAN></P></LI></UL></DIV></LI><LI><P>Possibly undo some changes.</P><DIV class="itemizedlist"><UL type="disc"><LI><P><SPAN class="command"><STRONG>svn revert</STRONG></SPAN></P></LI></UL></DIV></LI><LI><P>Resolve conflicts (merge others' changes).</P><DIV class="itemizedlist"><UL type="disc"><LI><P><SPAN class="command"><STRONG>svn update</STRONG></SPAN></P></LI><LI><P><SPAN class="command"><STRONG>svn resolve</STRONG></SPAN></P></LI></UL></DIV></LI><LI><P>Commit your changes.</P><DIV class="itemizedlist"><UL type="disc"><LI><P><SPAN class="command"><STRONG>svn commit</STRONG></SPAN></P></LI></UL></DIV></LI></OL></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.tour.cycle.update"></A>Update Your Working Copy</H3></DIV></DIV></DIV><P>When working on a project with a team, you'll want to
        update your working copy to receive any changes other developers 
        on the project have made since your last update.  Use
        <SPAN class="command"><STRONG>svn update</STRONG></SPAN> to bring your working copy into
        sync with the latest revision in the repository:</P><PRE class="screen">$ svn update
U  foo.c
U  bar.c
Updated to revision 2.
</PRE><P>In this case, it appears that someone checked in
        modifications to both <CODE class="filename">foo.c</CODE>
        and <CODE class="filename">bar.c</CODE> since the last time you
        updated, and Subversion has updated your working copy to
        include those changes.</P><P>When the server sends changes to your working copy via
        <SPAN class="command"><STRONG>svn update</STRONG></SPAN>, a letter code is displayed next
        to each item to let you know what actions Subversion performed
        to bring your working copy up to date.  To find out what these
        letters mean, run <STRONG class="userinput"><CODE>svn help update</CODE></STRONG>.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.tour.cycle.edit"></A>Make Changes to Your Working Copy</H3></DIV></DIV></DIV><P>Now you can get to work and make changes in your working
        copy.  It's usually most convenient to decide on a discrete
        change (or set of changes) to make, such as writing a new
        feature, fixing a bug, and so on.  The Subversion commands that you
        will use here are <SPAN class="command"><STRONG>svn add</STRONG></SPAN>, <SPAN class="command"><STRONG>svn
        delete</STRONG></SPAN>, <SPAN class="command"><STRONG>svn copy</STRONG></SPAN>, <SPAN class="command"><STRONG>svn
        move</STRONG></SPAN>, and <SPAN class="command"><STRONG>svn mkdir</STRONG></SPAN>.  However, if
        you are merely editing files that are already in Subversion,
        you may not need to use any of these commands until you
        commit.</P><P>You can make two kinds of changes to your
        working copy: <EM class="firstterm">file changes</EM>
        and <EM class="firstterm">tree changes</EM>.  You don't need to
        tell Subversion that you intend to change a file; just make
        your changes using your text editor, word processor, graphics
        program, or whatever tool you would normally use.  Subversion
        automatically detects which files have been changed, and in
        addition, it handles binary files just as easily as it handles
        text filesâand just as efficiently, too.  For tree
        changes, you can ask Subversion to â<SPAN class="quote">mark</SPAN>â files
        and directories for scheduled removal, addition, copying, or
        moving.  These changes may take place immediately in your
        working copy, but no additions or removals will happen in the
        repository until you commit them.</P><DIV class="sidebar"><P class="title"><B>Versioning Symbolic Links</B></P><P>On non-Windows platforms, Subversion is able to version
          files of the special type <EM class="firstterm">symbolic
          link</EM> (or â<SPAN class="quote">symlink</SPAN>â).  A symlink is
          a file that acts as a sort of transparent reference to some
          other object in the filesystem, allowing programs to read
          and write to those objects indirectly by way of performing
          operations on the symlink itself.</P><P>When a symlink is committed into a Subversion
          repository, Subversion remembers that the file was in fact a
          symlink, as well as the object to which the symlink
          â<SPAN class="quote">points.</SPAN>â  When that symlink is checked out to
          another working copy on a non-Windows system, Subversion
          reconstructs a real filesystem-level symbolic link from the
          versioned symlink.  But that doesn't in any way limit the
          usability of working copies on systems such as Windows that
          do not support symlinks.  On such systems, Subversion simply
          creates a regular text file whose contents are the path to
          which to the original symlink pointed.  While that file
          can't be used as a symlink on a Windows system, it also
          won't prevent Windows users from performing their other
          Subversion-related activities.</P></DIV><P>Here is an overview of the five Subversion subcommands
        that you'll use most often to make tree changes:</P><DIV class="variablelist"><DL><DT><SPAN class="term"><STRONG class="userinput"><CODE>svn add foo</CODE></STRONG></SPAN></DT><DD><P>Schedule file, directory, or symbolic link
              <CODE class="filename">foo</CODE> to be added to the repository.
              When you next commit, <CODE class="filename">foo</CODE> will
              become a child of its parent directory.  Note that if
              <CODE class="filename">foo</CODE> is a directory, everything
              underneath <CODE class="filename">foo</CODE> will be scheduled
              for addition.  If you want only to add
              <CODE class="filename">foo</CODE> itself, pass the
              <CODE class="option">--depth empty</CODE> option.</P></DD><DT><SPAN class="term"><STRONG class="userinput"><CODE>svn delete foo</CODE></STRONG></SPAN></DT><DD><P>Schedule file, directory, or symbolic link
              <CODE class="filename">foo</CODE> to be deleted from the
              repository.  If <CODE class="filename">foo</CODE> is a file or
              link, it is immediately deleted from your working copy.
              If <CODE class="filename">foo</CODE> is a directory, it is not
              deleted, but Subversion schedules it for deletion.  When
              you commit your changes, <CODE class="filename">foo</CODE> will
              be entirely removed from your working copy and the
              repository.
              <SUP>[<A id="id498568" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id498568" class="footnote">4</A>]</SUP>
            </P></DD><DT><SPAN class="term"><STRONG class="userinput"><CODE>svn copy foo bar</CODE></STRONG></SPAN></DT><DD><P>Create a new item <CODE class="filename">bar</CODE> as a
              duplicate of <CODE class="filename">foo</CODE> and automatically
              schedule <CODE class="filename">bar</CODE> for addition.  When
              <CODE class="filename">bar</CODE> is added to the repository on
              the next commit, its copy history is recorded (as having
              originally come from <CODE class="filename">foo</CODE>).
              <SPAN class="command"><STRONG>svn copy</STRONG></SPAN> does not create intermediate
              directories unless you pass the
              <CODE class="option">--parents</CODE> option.</P></DD><DT><SPAN class="term"><STRONG class="userinput"><CODE>svn move foo bar</CODE></STRONG></SPAN></DT><DD><P>This command is exactly the same as running
              <STRONG class="userinput"><CODE>svn copy foo bar; svn delete foo</CODE></STRONG>.
              That is, <CODE class="filename">bar</CODE> is scheduled for
              addition as a copy of <CODE class="filename">foo</CODE>, and
              <CODE class="filename">foo</CODE> is scheduled for removal.
              <SPAN class="command"><STRONG>svn move</STRONG></SPAN> does not create intermediate
              directories unless you pass the
              <CODE class="option">--parents</CODE> option.</P></DD><DT><SPAN class="term"><STRONG class="userinput"><CODE>svn mkdir blort</CODE></STRONG></SPAN></DT><DD><P>This command is exactly the same as running
              <STRONG class="userinput"><CODE>mkdir blort; svn add blort</CODE></STRONG>.  That is,
              a new directory named <CODE class="filename">blort</CODE> is
              created and scheduled for addition.</P></DD></DL></DIV><DIV class="sidebar"><P class="title"><B>Changing the Repository Without a Working Copy</B></P><P>There <SPAN class="emphasis"><EM>are</EM></SPAN> some use cases that
          immediately commit tree changes to the repository.  This
          happens only when a subcommand is operating directly on a
          URL, rather than on a working-copy path.  In particular,
          specific uses of <SPAN class="command"><STRONG>svn mkdir</STRONG></SPAN>, <SPAN class="command"><STRONG>svn
          copy</STRONG></SPAN>, <SPAN class="command"><STRONG>svn move</STRONG></SPAN>, and
          <SPAN class="command"><STRONG>svn delete</STRONG></SPAN> can work with URLs (and don't
          forget that <SPAN class="command"><STRONG>svn import</STRONG></SPAN> always makes
          changes to a URL).</P><P>URL operations behave in this manner because commands
          that operate on a working copy can use the working copy as a
          sort of â<SPAN class="quote">staging area</SPAN>â to set up your changes
          before committing them to the repository.  Commands that
          operate on URLs don't have this luxury, so when you operate
          directly on a URL, any of the aforementioned actions represents an
          immediate commit.</P></DIV></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.tour.cycle.examine"></A>Examine Your Changes</H3></DIV></DIV></DIV><P>Once you've finished making changes, you need to commit
        them to the repository, but before you do so, it's usually a
        good idea to take a look at exactly what you've changed.  By
        examining your changes before you commit, you can make a more
        accurate log message.  You may also discover that you've
        inadvertently changed a file, and this gives you a chance to
        revert those changes before committing.  Additionally, this is
        a good opportunity to review and scrutinize changes before
        publishing them.  You can see an overview of the changes
        you've made by using <SPAN class="command"><STRONG>svn status</STRONG></SPAN>, and dig
        into the details of those changes by using <SPAN class="command"><STRONG>svn
        diff</STRONG></SPAN>.</P><DIV class="sidebar"><P class="title"><B>Look Ma! No Network!</B></P><P>You can use the commands <SPAN class="command"><STRONG>svn status</STRONG></SPAN>,
          <SPAN class="command"><STRONG>svn diff</STRONG></SPAN>, and <SPAN class="command"><STRONG>svn
          revert</STRONG></SPAN> without any network access even
          if your repository <SPAN class="emphasis"><EM>is</EM></SPAN> across the
          network.  This makes it easy to manage your
          changes-in-progress when you are somewhere without a network
          connection, such as traveling on an airplane, riding a
          commuter train, or hacking on the beach.
          <SUP>[<A id="id498832" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id498832" class="footnote">5</A>]</SUP>
        </P><P>Subversion does this by keeping private caches of
          pristine versions of each versioned file inside the
          <CODE class="filename">.svn</CODE> administrative areas.  This allows
          Subversion to reportâand revertâlocal
          modifications to those files <SPAN class="emphasis"><EM>without network
          access</EM></SPAN>.  This cache (called the
          â<SPAN class="quote">text-base</SPAN>â) also allows Subversion to send the
          user's local modifications during a commit to the server as
          a compressed <EM class="firstterm">delta</EM> (or
          â<SPAN class="quote">difference</SPAN>â) against the pristine version.
          Having this cache is a tremendous benefitâeven if you
          have a fast Internet connection, it's much faster to send only a
          file's changes rather than the whole file to the
          server.</P></DIV><P>Subversion has been optimized to help you with this task,
        and it is able to do many things without communicating with
        the repository.  In particular, your working copy contains a
        hidden cached â<SPAN class="quote">pristine</SPAN>â copy of each version-controlled
        file within the <CODE class="filename">.svn</CODE> area.
        Because of this, Subversion can quickly show you how your
        working files have changed or even allow you to undo your
        changes without contacting the repository.</P><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.tour.cycle.examine.status"></A>See an overview of your changes</H4></DIV></DIV></DIV><P>To get an overview of your changes, you'll use the
          <SPAN class="command"><STRONG>svn status</STRONG></SPAN> command.  You'll probably use
          <SPAN class="command"><STRONG>svn status</STRONG></SPAN> more than any other Subversion
          command.</P><DIV class="sidebar"><P class="title"><B>CVS Users: Hold That Update!</B></P><P>You're probably used to using <SPAN class="command"><STRONG>cvs
            update</STRONG></SPAN> to see what changes you've made to your
            working copy.  <SPAN class="command"><STRONG>svn status</STRONG></SPAN> will give you
            all the information you need regarding what has changed in
            your working copyâwithout accessing the repository
            or potentially incorporating new changes published by
            other users.</P><P>In Subversion, <SPAN class="command"><STRONG>svn update</STRONG></SPAN> does just
            thatâit updates your working copy with any changes
            committed to the repository since the last time you
            updated your working copy.  You may have to break the
            habit of using the <SPAN class="command"><STRONG>update</STRONG></SPAN> command to
            see what local modifications you've made.</P></DIV><P>If you run <SPAN class="command"><STRONG>svn status</STRONG></SPAN> at the top of
          your working copy with no arguments, it will detect all file
          and tree changes you've made.  Here are a few examples of
          the most common status codes that <SPAN class="command"><STRONG>svn
          status</STRONG></SPAN> can return.  (Note that the text following
          <CODE class="literal">#</CODE> is not
          actually printed by <SPAN class="command"><STRONG>svn status</STRONG></SPAN>.)</P><PRE class="screen">?       scratch.c           # file is not under version control
A       stuff/loot/bloo.h   # file is scheduled for addition
C       stuff/loot/lump.c   # file has textual conflicts from an update
D       stuff/fish.c        # file is scheduled for deletion
M       bar.c               # the content in bar.c has local modifications
</PRE><P>In this output format, <SPAN class="command"><STRONG>svn status</STRONG></SPAN>
          prints six columns of characters, followed by several
          whitespace characters, followed by a file or directory name.
          The first column tells the status of a file or directory
          and/or its contents.  The codes we listed are:</P><DIV class="variablelist"><DL><DT><SPAN class="term"><CODE class="computeroutput">A      item</CODE></SPAN></DT><DD><P>The file, directory, or symbolic link
                <CODE class="filename">item</CODE> has been scheduled for
                addition into the repository.</P></DD><DT><SPAN class="term"><CODE class="computeroutput">C      item</CODE></SPAN></DT><DD><P>The file <CODE class="filename">item</CODE> is in a state
                of conflict.  That is, changes received from the
                server during an update overlap with local changes
                that you have in your working copy (and weren't
                resolved during the update).  You must resolve this
                conflict before committing your changes to the
                repository.</P></DD><DT><SPAN class="term"><CODE class="computeroutput">D      item</CODE></SPAN></DT><DD><P>The file, directory, or symbolic link
                <CODE class="filename">item</CODE> has been scheduled for
                deletion from the repository.</P></DD><DT><SPAN class="term"><CODE class="computeroutput">M      item</CODE></SPAN></DT><DD><P>The contents of the file <CODE class="filename">item</CODE>
                have been modified.</P></DD></DL></DIV><P>If you pass a specific path to <SPAN class="command"><STRONG>svn
          status</STRONG></SPAN>, you get information about that item
          alone:</P><PRE class="screen">$ svn status stuff/fish.c
D      stuff/fish.c
</PRE><P><SPAN class="command"><STRONG>svn status</STRONG></SPAN> also has a
          <CODE class="option">--verbose</CODE> (<CODE class="option">-v</CODE>) option,
          which will show you the status of <SPAN class="emphasis"><EM>every</EM></SPAN>
          item in your working copy, even if it has not been
          changed:</P><PRE class="screen">$ svn status -v
M               44        23    sally     README
                44        30    sally     INSTALL
M               44        20    harry     bar.c
                44        18    ira       stuff
                44        35    harry     stuff/trout.c
D               44        19    ira       stuff/fish.c
                44        21    sally     stuff/things
A                0         ?     ?        stuff/things/bloo.h
                44        36    harry     stuff/things/gloo.c
</PRE><P>This is the â<SPAN class="quote">long form</SPAN>â output of
          <SPAN class="command"><STRONG>svn status</STRONG></SPAN>.  The letters in the first
          column mean the same as before, but the second column shows
          the working revision of the item.  The third and fourth
          columns show the revision in which the item last changed,
          and who changed it.</P><P>None of the prior invocations to <SPAN class="command"><STRONG>svn
          status</STRONG></SPAN> contact the repositoryâinstead, they
          compare the metadata in the <CODE class="filename">.svn</CODE>
          directory with the working copy.  Finally, there is the
          <CODE class="option">--show-updates</CODE> (<CODE class="option">-u</CODE>)
          option, which contacts the repository and adds information
          about things that are out of date:</P><PRE class="screen">$ svn status -u -v
M      *        44        23    sally     README
M               44        20    harry     bar.c
       *        44        35    harry     stuff/trout.c
D               44        19    ira       stuff/fish.c
A                0         ?     ?        stuff/things/bloo.h
Status against revision:   46
</PRE><P>Notice the two asterisks: if you were to run
          <STRONG class="userinput"><CODE>svn update</CODE></STRONG> at this point, you would
          receive changes to <CODE class="filename">README</CODE>
          and <CODE class="filename">trout.c</CODE>.  This tells you some very
          useful informationâyou'll need to update and get the
          server changes on <CODE class="filename">README</CODE> before you
          commit, or the repository will reject your commit for being
          out of date (more on this subject later).</P><P><SPAN class="command"><STRONG>svn status</STRONG></SPAN> can display much more
            information about the files and directories in your
            working copy than we've shown hereâfor an exhaustive
            description of <SPAN class="command"><STRONG>svn status</STRONG></SPAN> and its
            output, see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.status" title="svn status">svn status</A>.</P></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.tour.cycle.examine.diff"></A>Examine the details of your local modifications</H4></DIV></DIV></DIV><P>Another way to examine your changes is with the
          <SPAN class="command"><STRONG>svn diff</STRONG></SPAN> command.  You can find out
          <SPAN class="emphasis"><EM>exactly</EM></SPAN> how you've modified things by
          running <STRONG class="userinput"><CODE>svn diff</CODE></STRONG> with no arguments, which
          prints out file changes in <EM class="firstterm">unified diff
          format</EM>:</P><PRE class="screen">$ svn diff
Index: bar.c
===================================================================
--- bar.c	(revision 3)
+++ bar.c	(working copy)
@@ -1,7 +1,12 @@
+#include &lt;sys/types.h&gt;
+#include &lt;sys/stat.h&gt;
+#include &lt;unistd.h&gt;
+
+#include &lt;stdio.h&gt;

 int main(void) {
-  printf("Sixty-four slices of American Cheese...\n");
+  printf("Sixty-five slices of American Cheese...\n");
 return 0;
 }

Index: README
===================================================================
--- README	(revision 3)
+++ README	(working copy)
@@ -193,3 +193,4 @@
+Note to self:  pick up laundry.

Index: stuff/fish.c
===================================================================
--- stuff/fish.c	(revision 1)
+++ stuff/fish.c	(working copy)
-Welcome to the file known as 'fish'.
-Information on fish will be here soon.

Index: stuff/things/bloo.h
===================================================================
--- stuff/things/bloo.h	(revision 8)
+++ stuff/things/bloo.h	(working copy)
+Here is a new file to describe
+things about bloo.
</PRE><P>The <SPAN class="command"><STRONG>svn diff</STRONG></SPAN> command produces this
          output by comparing your working files against the cached
          â<SPAN class="quote">pristine</SPAN>â copies within the
          <CODE class="filename">.svn</CODE> area.  Files scheduled for
          addition are displayed as all added text, and files
          scheduled for deletion are displayed as all deleted
          text.</P><P>Output is displayed in unified diff format.  That is,
          removed lines are prefaced with <CODE class="literal">-</CODE>, and
          added lines are prefaced with
          <CODE class="literal">+</CODE>.  <SPAN class="command"><STRONG>svn diff</STRONG></SPAN> also
          prints filename and offset information useful to the
          <SPAN class="command"><STRONG>patch</STRONG></SPAN> program, so you can generate
          â<SPAN class="quote">patches</SPAN>â by redirecting the diff output to a
          file:</P><PRE class="screen">$ svn diff &gt; patchfile
</PRE><P>You could, for example, email the patch file to another
          developer for review or testing prior to a commit.</P><P>Subversion uses its internal diff engine, which produces
          unified diff format, by default.  If you want diff output in
          a different format, specify an external diff program using
          <CODE class="option">--diff-cmd</CODE> and pass any flags you'd like to
          it using the <CODE class="option">--extensions</CODE>
          (<CODE class="option">-x</CODE>) option.  For example, to see local
          differences in file <CODE class="filename">foo.c</CODE> in context
          output format while ignoring case differences, you might run
          <STRONG class="userinput"><CODE>svn diff --diff-cmd /usr/bin/diff --extensions '-i'
          foo.c</CODE></STRONG>.</P></DIV></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.tour.cycle.revert"></A>Undoing Working Changes</H3></DIV></DIV></DIV><P>Suppose while viewing the output of <SPAN class="command"><STRONG>svn
        diff</STRONG></SPAN> you determine that all the changes you made to
        a particular file are mistakes.  Maybe you shouldn't have
        changed the file at all, or perhaps it would be easier to make
        different changes starting from scratch.</P><P>This is a perfect opportunity to use <SPAN class="command"><STRONG>svn
        revert</STRONG></SPAN>:</P><PRE class="screen">$ svn revert README
Reverted 'README'
</PRE><P>Subversion reverts the file to its premodified state by
        overwriting it with the cached â<SPAN class="quote">pristine</SPAN>â copy
        from the <CODE class="filename">.svn</CODE> area.  But also note that
        <SPAN class="command"><STRONG>svn revert</STRONG></SPAN> can undo
        <SPAN class="emphasis"><EM>any</EM></SPAN> scheduled operationsâfor
        example, you might decide that you don't want to add a new
        file after all:</P><PRE class="screen">$ svn status foo
?      foo

$ svn add foo
A         foo

$ svn revert foo
Reverted 'foo'

$ svn status foo
?      foo
</PRE><DIV class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Note</H3><P><STRONG class="userinput"><CODE>svn revert <EM class="replaceable"><CODE>item</CODE></EM></CODE></STRONG> has exactly the same
          effect as deleting <EM class="replaceable"><CODE>item</CODE></EM> from
          your working copy and then running <STRONG class="userinput"><CODE>svn update -r
          BASE <EM class="replaceable"><CODE>item</CODE></EM></CODE></STRONG>.  However,
          if you're reverting a file, <SPAN class="command"><STRONG>svn revert</STRONG></SPAN>
          has one very noticeable differenceâit doesn't have
          to communicate with the repository to restore your
          file.</P></DIV><P>Or perhaps you mistakenly removed a file from version
        control:</P><PRE class="screen">$ svn status README

$ svn delete README
D         README

$ svn revert README
Reverted 'README'

$ svn status README
</PRE></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.tour.cycle.resolve"></A>Resolve Conflicts (Merging Others' Changes)</H3></DIV></DIV></DIV><P>We've already seen how <STRONG class="userinput"><CODE>svn status -u</CODE></STRONG>
        can predict conflicts.  Suppose you run <STRONG class="userinput"><CODE>svn
        update</CODE></STRONG> and some interesting things occur:</P><PRE class="screen">$ svn update
U  INSTALL
G  README
Conflict discovered in 'bar.c'.
Select: (p) postpone, (df) diff-full, (e) edit,
        (h) help for more options:
</PRE><P>The <CODE class="computeroutput">U</CODE> and
        <CODE class="computeroutput">G</CODE> codes are no cause for
        concern; those files cleanly absorbed changes from the
        repository.  The files marked with
        <CODE class="computeroutput">U</CODE> contained no local changes
        but were <CODE class="computeroutput">U</CODE>pdated with changes
        from the repository.  The <CODE class="computeroutput">G</CODE>
        stands for mer<CODE class="computeroutput">G</CODE>ed, which
        means that the file had local changes to begin with, but the
        changes coming from the repository didn't overlap with the local
        changes.</P><P>But the next two lines are part of a feature (new in
        Subversion 1.5) called <EM class="firstterm">interactive conflict
        resolution</EM>.  This means that the changes from the
        server overlapped with your own, and you have the opportunity
        to resolve this conflict.  The most commonly used options are
        displayed, but you can see all of the options by
        typing <EM class="replaceable"><CODE>h</CODE></EM>:</P><PRE class="screen">â¦
  (p)  postpone    - mark the conflict to be resolved later
  (df) diff-full   - show all changes made to merged file
  (e)  edit        - change merged file in an editor
  (r)  resolved    - accept merged version of file
  (mf) mine-full   - accept my version of entire file (ignore their changes)
  (tf) theirs-full - accept their version of entire file (lose my changes)
  (l)  launch      - launch external tool to resolve conflict
  (h)  help        - show this list
</PRE><P>Let's briefly review each of these options before we go
        into detail on what each option means.</P><DIV class="variablelist"><DL><DT><SPAN class="term">(<CODE class="computeroutput">p</CODE>)ostpone</SPAN></DT><DD><P>Leave the file in a conflicted state for you to
              resolve after your update is complete.</P></DD><DT><SPAN class="term">(<CODE class="computeroutput">d</CODE>)iff</SPAN></DT><DD><P>Display the differences between the base revision
              and the conflicted file itself in unified diff format.</P></DD><DT><SPAN class="term">(<CODE class="computeroutput">e</CODE>)dit</SPAN></DT><DD><P>Open the file in conflict with your favorite editor,
              as set in the environment variable
              <CODE class="literal">EDITOR</CODE>.</P></DD><DT><SPAN class="term">(<CODE class="computeroutput">r</CODE>)esolved</SPAN></DT><DD><P>After editing a file, tell
              <SPAN class="command"><STRONG>svn</STRONG></SPAN> that you've resolved the
              conflicts in the file and that it should accept the
              current contentsâbasically that you've
              â<SPAN class="quote">resolved</SPAN>â the conflict.</P></DD><DT><SPAN class="term">(<CODE class="computeroutput">m</CODE>)ine-(<CODE class="computeroutput">f</CODE>)ull</SPAN></DT><DD><P>Discard the newly received changes from the server
              and use only your local changes for the file under review.</P></DD><DT><SPAN class="term">(<CODE class="computeroutput">t</CODE>)heirs-(<CODE class="computeroutput">f</CODE>)ull</SPAN></DT><DD><P>Discard your local changes to the file under review
              and use only the newly received changes from the
              server.</P></DD><DT><SPAN class="term">(<CODE class="computeroutput">l</CODE>)aunch</SPAN></DT><DD><P>Launch an external program to perform the conflict
            resolution.  This requires a bit of preparation
            beforehand.</P></DD><DT><SPAN class="term">(<CODE class="computeroutput">h</CODE>)elp</SPAN></DT><DD><P>Show the list of all possible commands you can use
            in interactive conflict resolution.</P></DD></DL></DIV><P>We'll cover these commands in more detail now, grouping
        them together by related functionality.</P><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.tour.cycle.resolve.diff"></A>Viewing conflict differences interactively</H4></DIV></DIV></DIV><P>Before deciding how to attack a conflict interactively,
          odds are that you'd like to see exactly what is in conflict,
          and the <EM class="firstterm">diff</EM> command
          (<STRONG class="userinput"><CODE>d</CODE></STRONG>) is what you'll use for this:</P><PRE class="screen">â¦
Select: (p) postpone, (df) diff-full, (e) edit,
        (h)elp for more options : d
--- .svn/text-base/sandwich.txt.svn-base      Tue Dec 11 21:33:57 2007
+++ .svn/tmp/tempfile.32.tmp     Tue Dec 11 21:34:33 2007
@@ -1 +1,5 @@
-Just buy a sandwich.
+&lt;&lt;&lt;&lt;&lt;&lt;&lt; .mine
+Go pick up a cheesesteak.
+=======
+Bring me a taco!
+&gt;&gt;&gt;&gt;&gt;&gt;&gt; .r32
â¦
</PRE><P>The first line of the diff content shows the previous
          contents of the working copy (the <CODE class="literal">BASE</CODE>
          revision), the next content line is your change, and the
          last content line is the change that was just received from
          the server (<SPAN class="emphasis"><EM>usually</EM></SPAN> the
          <CODE class="literal">HEAD</CODE> revision).  With this information in
          hand, you're ready to move on to the next action.</P></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.tour.cycle.resolve.resolve"></A>Resolving conflict differences interactively</H4></DIV></DIV></DIV><P>There are four different ways to resolve conflicts
          interactivelyâtwo of which allow you to selectively
          merge and edit changes, and two of which allow you to simply
          pick a version of the file and move along.</P><P>If you wish to choose some combination of your local
          changes, you can use the â<SPAN class="quote">edit</SPAN>â command
          (<STRONG class="userinput"><CODE>e</CODE></STRONG>) to manually edit the file with
          conflict markers in a text editor (determined by the
          <CODE class="literal">EDITOR</CODE> environment variable).  Editing
          the file by hand in your favorite text editor is a somewhat
          low-tech way of remedying conflicts (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.resolve.byhand" title="Merging conflicts by hand">the section called âMerging conflicts by handâ</A> for a
          walkthrough), so some people like to use fancy graphical
          merge tools instead.</P><P>To use a merge tool, you need to either set the
          <CODE class="literal">SVN_MERGE</CODE> environment variable or define
          the <CODE class="literal">merge-tool-cmd</CODE> option in your
          Subversion configuration file (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.confarea.opts" title="Configuration Options">the section called âConfiguration Optionsâ</A> for more details).
          Subversion will pass four arguments to the merge tool: the
          <CODE class="literal">BASE</CODE> revision of the file, the revision
          of the file received from the server as part of the update,
          the copy of the file containing your local edits, and
          the merged copy of the file (which contains conflict
          markers).  If your merge tool is expecting arguments in a
          different order or format, you'll need to write a wrapper
          script for Subversion to invoke.  After you've edited the
          file, if you're satisfied with the changes you've made, you
          can tell Subversion that the edited file is no longer in
          conflict by using the â<SPAN class="quote">resolve</SPAN>â command
          (<CODE class="literal">r</CODE>).</P><P>If you decide that you don't need to merge any changes,
          but just want to accept one version of the file or the
          other, you can either choose your changes (a.k.a.
          â<SPAN class="quote">mine</SPAN>â) by using the â<SPAN class="quote">mine-full</SPAN>â
          command (<STRONG class="userinput"><CODE>mf</CODE></STRONG>) or choose theirs by using the
          â<SPAN class="quote">theirs-full</SPAN>â command
          (<STRONG class="userinput"><CODE>tf</CODE></STRONG>).</P></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.tour.cycle.resolve.pending"></A>Postponing conflict resolution</H4></DIV></DIV></DIV><P>This may sound like an appropriate section for avoiding
          marital disagreements, but it's actually still about
          Subversion, so read on.  If you're doing an update and
          encounter a conflict that you're not prepared to review or
          resolve, you can type <STRONG class="userinput"><CODE>p</CODE></STRONG> to postpone
          resolving a conflict on a file-by-file basis when you run
          <STRONG class="userinput"><CODE>svn update</CODE></STRONG>.  If you're running an update
          and don't want to resolve any conflicts, you can pass the
          <CODE class="option">--non-interactive</CODE> option to <SPAN class="command"><STRONG>svn
          update</STRONG></SPAN>, and any file in conflict will be marked
          with a <CODE class="computeroutput">C</CODE>
          automatically.</P><P>The <CODE class="computeroutput">C</CODE> stands for
          <CODE class="computeroutput">c</CODE>onflict.  This means that
          the changes from the server overlapped with your own, and
          now you have to manually choose between them after the
          update has completed.  When you postpone a conflict
          resolution, <SPAN class="command"><STRONG>svn</STRONG></SPAN> typically does three
          things to assist you in noticing and resolving that
          conflict:</P><DIV class="itemizedlist"><UL type="disc"><LI><P>Subversion prints a <CODE class="computeroutput">C</CODE>
              during the update and remembers that the file is in a
              state of conflict.</P></LI><LI><P>If Subversion considers the file to be mergeable, it
              places <EM class="firstterm">conflict
              markers</EM>âspecial strings of text that
              delimit the â<SPAN class="quote">sides</SPAN>â of the
              conflictâinto the file to visibly demonstrate the
              overlapping areas.  (Subversion uses the
              <CODE class="literal">svn:mime-type</CODE> property to decide whether a
              file is capable of contextual, line-based merging.  See
              <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.special.mime-type" title="File Content Type">the section called âFile Content Typeâ</A>
              to learn more.)</P></LI><LI><P>For every conflicted file, Subversion places three
              extra unversioned files in your working copy:</P><DIV class="variablelist"><DL><DT><SPAN class="term"><CODE class="filename">filename.mine</CODE></SPAN></DT><DD><P>This is your file as it existed in your working
                    copy before you updated your working copyâthat
                    is, without conflict markers.  This file has only
                    your latest changes in it.  (If Subversion considers
                    the file to be unmergeable, the
                    <CODE class="filename">.mine</CODE> file isn't created, since
                    it would be identical to the working file.)</P></DD><DT><SPAN class="term"><CODE class="filename">filename.r<EM class="replaceable"><CODE>OLDREV</CODE></EM>
                      </CODE></SPAN></DT><DD><P>This is the file that was the
                    <CODE class="literal">BASE</CODE> revision before you updated
                    your working copy.  That is, the file that you
                    checked out before you made your latest
                    edits.</P></DD><DT><SPAN class="term"><CODE class="filename">filename.r<EM class="replaceable"><CODE>NEWREV</CODE></EM>
                      </CODE></SPAN></DT><DD><P>This is the file that your Subversion client
                    just received from the server when you updated your
                    working copy.  This file corresponds to the
                    <CODE class="literal">HEAD</CODE> revision of the
                    repository.</P></DD></DL></DIV><P>Here <EM class="replaceable"><CODE>OLDREV</CODE></EM> is the revision number
              of the file in your <CODE class="filename">.svn</CODE> directory,
              and <EM class="replaceable"><CODE>NEWREV</CODE></EM> is the revision number of
              the repository <CODE class="literal">HEAD</CODE>.</P></LI></UL></DIV><P>For example, Sally makes changes to the file
          <CODE class="filename">sandwich.txt</CODE>, but does not yet commit
          those changes.  Meanwhile, Harry commits changes to that
          same file.  Sally updates her working copy before committing
          and she gets a conflict, which she postpones:</P><PRE class="screen">$ svn update
Conflict discovered in 'sandwich.txt'.
Select: (p) postpone, (df) diff-full, (e) edit,
        (h)elp for more options : p
C  sandwich.txt
Updated to revision 2.
$ ls -1
sandwich.txt
sandwich.txt.mine
sandwich.txt.r1
sandwich.txt.r2
</PRE><P>At this point, Subversion will <SPAN class="emphasis"><EM>not</EM></SPAN>
          allow Sally to commit the file
          <CODE class="filename">sandwich.txt</CODE> until the three temporary
          files are removed:</P><PRE class="screen">$ svn commit -m "Add a few more things"
svn: Commit failed (details follow):
svn: Aborting commit: '/home/sally/svn-work/sandwich.txt' remains in conflict
</PRE><P>If you've postponed a conflict, you need to resolve the
          conflict before Subversion will allow you to commit your
          changes.  You'll do this with the <SPAN class="command"><STRONG>svn
          resolve</STRONG></SPAN> command and one of several arguments to
          the <CODE class="option">--accept</CODE> option.</P><P>If you want to choose the version of the file that you
          last checked out before making your edits, choose
          the <EM class="replaceable"><CODE>base</CODE></EM> argument.</P><P>If you want to choose the version that contains only
          your edits, choose the <EM class="replaceable"><CODE>mine-full</CODE></EM>
          argument.</P><P>If you want to choose the version that your most recent
          update pulled from the server (and thus discarding your
          edits entirely), choose
          the <EM class="replaceable"><CODE>theirs-full</CODE></EM> argument.</P><P>However, if you want to pick and choose from your
          changes and the changes that your update fetched from the
          server, merge the conflicted text â<SPAN class="quote">by hand</SPAN>â (by
          examining and editing the conflict markers within the file)
          and then choose the <EM class="replaceable"><CODE>working</CODE></EM>
          argument.</P><P><SPAN class="command"><STRONG>svn resolve</STRONG></SPAN> removes the three
          temporary files and accepts the version of the file that you
          specified with the <CODE class="option">--accept</CODE> option, and
          Subversion no longer considers the file to be in a state of
          conflict:</P><PRE class="screen">$ svn resolve --accept working sandwich.txt
Resolved conflicted state of 'sandwich.txt'
</PRE></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.tour.cycle.resolve.byhand"></A>Merging conflicts by hand</H4></DIV></DIV></DIV><P>Merging conflicts by hand can be quite intimidating the
          first time you attempt it, but with a little practice, it
          can become as easy as falling off a bike.</P><P>Here's an example.  Due to a miscommunication, you and
          Sally, your collaborator, both edit the file
          <CODE class="filename">sandwich.txt</CODE> at the same time.  Sally
          commits her changes, and when you go to update your working
          copy, you get a conflict and you're going to have to edit
          <CODE class="filename">sandwich.txt</CODE> to resolve the conflict.
          First, let's take a look at the file:</P><PRE class="screen">$ cat sandwich.txt
Top piece of bread
Mayonnaise
Lettuce
Tomato
Provolone
&lt;&lt;&lt;&lt;&lt;&lt;&lt; .mine
Salami
Mortadella
Prosciutto
=======
Sauerkraut
Grilled Chicken
&gt;&gt;&gt;&gt;&gt;&gt;&gt; .r2
Creole Mustard
Bottom piece of bread
</PRE><P>The strings of less-than signs, equals signs, and
          greater-than signs are conflict markers and are not part of
          the actual data in conflict.  You generally want to ensure
          that those are removed from the file before your next
          commit.  The text between the first two sets of markers is
          composed of the changes you made in the conflicting
          area:</P><PRE class="screen">&lt;&lt;&lt;&lt;&lt;&lt;&lt; .mine
Salami
Mortadella
Prosciutto
=======
</PRE><P>The text between the second and third sets of conflict
          markers is the text from Sally's commit:</P><PRE class="screen">=======
Sauerkraut
Grilled Chicken
&gt;&gt;&gt;&gt;&gt;&gt;&gt; .r2
</PRE><P>Usually you won't want to just delete the conflict
          markers and Sally's changesâshe's going to be awfully
          surprised when the sandwich arrives and it's not what she
          wanted.  This is where you pick up the phone or walk
          across the office and explain to Sally that you can't get
          sauerkraut from an Italian deli.
          <SUP>[<A id="id500042" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id500042" class="footnote">6</A>]</SUP>
          Once you've agreed on the changes you will commit, edit
          your file and remove the conflict markers:</P><PRE class="screen">Top piece of bread
Mayonnaise
Lettuce
Tomato
Provolone
Salami
Mortadella
Prosciutto
Creole Mustard
Bottom piece of bread
</PRE><P>Now use <SPAN class="command"><STRONG>svn resolve</STRONG></SPAN>, and you're
          ready to commit your changes:</P><PRE class="screen">$ svn resolve --accept working sandwich.txt
Resolved conflicted state of 'sandwich.txt'
$ svn commit -m "Go ahead and use my sandwich, discarding Sally's edits."
</PRE><P>Note that <SPAN class="command"><STRONG>svn resolve</STRONG></SPAN>, unlike most of
          the other commands we deal with in this chapter, requires
          that you explicitly list any filenames that you wish to
          resolve.  In any case, you want to be careful and use
          <SPAN class="command"><STRONG>svn resolve</STRONG></SPAN> only when you're certain that
          you've fixed the conflict in your fileâonce the
          temporary files are removed, Subversion will let you commit
          the file even if it still contains conflict markers.</P><P>If you ever get confused while editing the conflicted
          file, you can always consult the three files that Subversion
          creates for you in your working copyâincluding your
          file as it was before you updated.  You can even use a
          third-party interactive merging tool to examine those three
          files.</P></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.tour.cycle.resolve.theirsfull"></A>Discarding your changes in favor of a newly fetched revision</H4></DIV></DIV></DIV><P>If you get a conflict and decide that you want to throw
          out your changes, you can run <STRONG class="userinput"><CODE>svn resolve --accept
          theirs-full <EM class="replaceable"><CODE>CONFLICTED-PATH</CODE></EM></CODE></STRONG> and Subversion will discard your edits
          and remove the temporary files:</P><PRE class="screen">$ svn update
Conflict discovered in 'sandwich.txt'.
Select: (p) postpone, (df) diff-full, (e) edit,
        (h) help for more options: p
C    sandwich.txt
Updated to revision 2.
$ ls sandwich.*
sandwich.txt  sandwich.txt.mine  sandwich.txt.r2  sandwich.txt.r1
$ svn resolve --accept theirs-full sandwich.txt
Resolved conflicted state of 'sandwich.txt'
</PRE></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.tour.cycle.resolve.revert"></A>Punting: Using svn revert</H4></DIV></DIV></DIV><P>If you decide that you want to throw out your changes
          and start your edits again (whether this occurs after a
          conflict or anytime), just revert your changes:</P><PRE class="screen">$ svn revert sandwich.txt
Reverted 'sandwich.txt'
$ ls sandwich.*
sandwich.txt
</PRE><P>Note that when you revert a conflicted file, you don't
          have to use <SPAN class="command"><STRONG>svn resolve</STRONG></SPAN>.</P></DIV></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.tour.cycle.commit"></A>Commit Your Changes</H3></DIV></DIV></DIV><P>Finally!  Your edits are finished, you've merged all
        changes from the server, and you're ready to commit your
        changes to the repository.</P><P>The <SPAN class="command"><STRONG>svn commit</STRONG></SPAN> command sends all of
        your changes to the repository.  When you commit a change, you
        need to supply a <EM class="firstterm">log message</EM>
        describing your change.  Your log message will be attached to
        the new revision you create.  If your log message is brief,
        you may wish to supply it on the command line using the
        <CODE class="option">--message</CODE> (or <CODE class="option">-m</CODE>)
        option:</P><PRE class="screen">$ svn commit -m "Corrected number of cheese slices."
Sending        sandwich.txt
Transmitting file data .
Committed revision 3.
</PRE><P>However, if you've been composing your log message as you
        work, you may want to tell Subversion to get the message from
        a file by passing the filename with the
        <CODE class="option">--file</CODE> (<CODE class="option">-F</CODE>) option:</P><PRE class="screen">$ svn commit -F logmsg
Sending        sandwich.txt
Transmitting file data .
Committed revision 4.
</PRE><P>If you fail to specify either the
        <CODE class="option">--message</CODE> or <CODE class="option">--file</CODE> option,
        Subversion will automatically launch your favorite editor
        (see the information on <CODE class="literal">editor-cmd</CODE> in
        <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.confarea.opts.config" title="Config">the section called âConfigâ</A>) for composing a log
        message.</P><DIV class="tip" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Tip</H3><P>If you're in your editor writing a commit message and
          decide that you want to cancel your commit, you can just
          quit your editor without saving changes.  If you've already
          saved your commit message, simply delete the text, save
          again, and then abort:</P><PRE class="screen">$ svn commit
Waiting for Emacs...Done

Log message unchanged or not specified
(a)bort, (c)ontinue, (e)dit
a
$
</PRE></DIV><P>The repository doesn't know or care whether your changes make
        any sense as a whole; it checks only to make sure nobody
        else has changed any of the same files that you did when you
        weren't looking.  If somebody <SPAN class="emphasis"><EM>has</EM></SPAN> done
        that, the entire commit will fail with a message informing you
        that one or more of your files are out of date:</P><PRE class="screen">$ svn commit -m "Add another rule"
Sending        rules.txt
svn: Commit failed (details follow):
svn: File '/sandwich.txt' is out of date
â¦
</PRE><P>(The exact wording of this error message depends on the
        network protocol and server you're using, but the idea is the
        same in all cases.)</P><P>At this point, you need to run <STRONG class="userinput"><CODE>svn
        update</CODE></STRONG>, deal with any merges or conflicts that
        result, and attempt your commit again.</P><P>That covers the basic work cycle for using Subversion.
        Subversion offers many other features that you can use
        to manage your repository and working copy, but most of your
        day-to-day use of Subversion will involve only the commands
        that we've discussed so far in this chapter.  We will,
        however, cover a few more commands that you'll use fairly
        often.</P></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.tour.history"></A>Examining History</H2></DIV></DIV></DIV><P>Your Subversion repository is like a time machine.  It keeps
      a record of every change ever committed and allows you to
      explore this history by examining previous versions of files and
      directories as well as the metadata that accompanies them.  With
      a single Subversion command, you can check out the repository
      (or restore an existing working copy) exactly as it was at any
      date or revision number in the past.  However, sometimes you
      just want to <SPAN class="emphasis"><EM>peer into</EM></SPAN> the past instead of
      <SPAN class="emphasis"><EM>going into</EM></SPAN> it.</P><P>Several commands can provide you with
      historical data from the repository:</P><DIV class="variablelist"><DL><DT><SPAN class="term"><SPAN class="command"><STRONG>svn log</STRONG></SPAN></SPAN></DT><DD><P>Shows you broad information: log messages with date
              and author information attached to revisions and which
              paths changed in each revision</P></DD><DT><SPAN class="term"><SPAN class="command"><STRONG>svn diff</STRONG></SPAN></SPAN></DT><DD><P>Shows line-level details of a particular change</P></DD><DT><SPAN class="term"><SPAN class="command"><STRONG>svn cat</STRONG></SPAN></SPAN></DT><DD><P>Retrieves a file as it existed in a particular
              revision number and displays it on your screen</P></DD><DT><SPAN class="term"><SPAN class="command"><STRONG>svn list</STRONG></SPAN></SPAN></DT><DD><P>Displays the files in a directory for any given
              revision</P></DD></DL></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.tour.history.log"></A>Generating a List of Historical Changes</H3></DIV></DIV></DIV><P>To find information about the history of a file or
        directory, use the <SPAN class="command"><STRONG>svn log</STRONG></SPAN>
        command. <SPAN class="command"><STRONG>svn log</STRONG></SPAN> will provide you with a
        record of who made changes to a file or directory, at what
        revision it changed, the time and date of that revision,
        andâif it was providedâthe log message that accompanied
        the commit:</P><PRE class="screen">$ svn log
------------------------------------------------------------------------
r3 | sally | 2008-05-15 23:09:28 -0500 (Thu, 15 May 2008) | 1 line

Added include lines and corrected # of cheese slices.
------------------------------------------------------------------------
r2 | harry | 2008-05-14 18:43:15 -0500 (Wed, 14 May 2008) | 1 line

Added main() methods.
------------------------------------------------------------------------
r1 | sally | 2008-05-10 19:50:31 -0500 (Sat, 10 May 2008) | 1 line

Initial import
------------------------------------------------------------------------
</PRE><P>Note that the log messages are printed in
        <SPAN class="emphasis"><EM>reverse chronological order</EM></SPAN> by default.
        If you wish to see a different range of revisions in a
        particular order or just a single revision, pass the
        <CODE class="option">--revision</CODE> (<CODE class="option">-r</CODE>)
        option:</P><PRE class="screen">$ svn log -r 5:19    # shows logs 5 through 19 in chronological order

$ svn log -r 19:5    # shows logs 5 through 19 in reverse order

$ svn log -r 8       # shows log for revision 8
</PRE><P>You can also examine the log history of a single file or
        directory.  For example:</P><PRE class="screen">$ svn log foo.c
â¦
$ svn log http://foo.com/svn/trunk/code/foo.c
â¦
</PRE><P>These will display log messages <SPAN class="emphasis"><EM>only</EM></SPAN>
        for those revisions in which the working file (or URL)
        changed.</P><DIV class="sidebar"><P class="title"><B>Why Does svn log Not Show Me What I
          Just Committed?</B></P><P>If you make a commit and immediately type <STRONG class="userinput"><CODE>svn
          log</CODE></STRONG> with no arguments, you may notice that your
          most recent commit doesn't show up in the list of log
          messages.  This is due to a combination of the behavior of
          <SPAN class="command"><STRONG>svn commit</STRONG></SPAN> and the default behavior of
          <SPAN class="command"><STRONG>svn log</STRONG></SPAN>.  First, when you commit changes
          to the repository, <SPAN class="command"><STRONG>svn</STRONG></SPAN> bumps only the
          revision of files (and directories) that it commits, so
          usually the parent directory remains at the older revision
          (See
          <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.in-action.mixedrevs.update-commit" title="Updates and commits are separate">the section called âUpdates and commits are separateâ</A>
          for an explanation of why).  <SPAN class="command"><STRONG>svn log</STRONG></SPAN> then
          defaults to fetching the history of the directory at its
          current revision, and thus you don't see the newly committed
          changes.  The solution here is to either update your working
          copy or explicitly provide a revision number to <SPAN class="command"><STRONG>svn
          log</STRONG></SPAN> by using the <CODE class="option">--revision</CODE>
          (<CODE class="option">-r</CODE>) option.</P></DIV><P>If you want even more information about a file or
        directory, <SPAN class="command"><STRONG>svn log</STRONG></SPAN> also takes a
        <CODE class="option">--verbose</CODE> (<CODE class="option">-v</CODE>) option.
        Because Subversion allows you to move and copy files and
        directories, it is important to be able to track path changes
        in the filesystem. So, in verbose mode, <SPAN class="command"><STRONG>svn
        log</STRONG></SPAN> will include a list of changed paths in a
        revision in its output:</P><PRE class="screen">$ svn log -r 8 -v
------------------------------------------------------------------------
r8 | sally | 2008-05-21 13:19:25 -0500 (Wed, 21 May 2008) | 1 line
Changed paths:
   M /trunk/code/foo.c
   M /trunk/code/bar.h
   A /trunk/code/doc/README

Frozzled the sub-space winch.

------------------------------------------------------------------------
</PRE><P>
        <SPAN class="command"><STRONG>svn log</STRONG></SPAN> also takes a <CODE class="option">--quiet</CODE>
        (<CODE class="option">-q</CODE>) option, which suppresses the body of the
        log message.  When combined with <CODE class="option">--verbose</CODE>, it
        gives just the names of the changed files.</P><DIV class="sidebar"><P class="title"><B>Why Does svn log Give Me an Empty
          Response?</B></P><P>After working with Subversion for a bit, most users will
          come across something like this:</P><PRE class="screen">$ svn log -r 2
------------------------------------------------------------------------
$
</PRE><P>At first glance, this seems like an error.  But recall
          that while revisions are repository-wide, <SPAN class="command"><STRONG>svn
          log</STRONG></SPAN> operates on a path in the repository.  If you
          supply no path, Subversion uses the current working
          directory as the default target.  As a result, if you're
          operating in a subdirectory of your working copy and attempt
          to see the log of a revision in which neither that directory
          nor any of its children was changed, Subversion will show you
          an empty log.  If you want to see what changed in that
          revision, try pointing <SPAN class="command"><STRONG>svn log</STRONG></SPAN> directly at
          the topmost URL of your repository, as in <STRONG class="userinput"><CODE>svn log -r 2
          http://svn.collab.net/repos/svn</CODE></STRONG>.</P></DIV></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.tour.history.diff"></A>Examining the Details of Historical Changes</H3></DIV></DIV></DIV><P>We've already seen <SPAN class="command"><STRONG>svn diff</STRONG></SPAN>
        beforeâit displays file differences in unified diff
        format; we used it to show the local modifications made to
        our working copy before committing to the repository.</P><P>In fact, it turns out that there are
        <SPAN class="emphasis"><EM>three</EM></SPAN> distinct uses of <SPAN class="command"><STRONG>svn
        diff</STRONG></SPAN>:</P><DIV class="itemizedlist"><UL type="disc"><LI><P>Examining local changes</P></LI><LI><P>Comparing your working copy to the repository</P></LI><LI><P>Comparing repository revisions</P></LI></UL></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.tour.history.diff.local"></A>Examining local changes</H4></DIV></DIV></DIV><P>As we've seen, invoking <STRONG class="userinput"><CODE>svn diff</CODE></STRONG> with
          no options will compare your working files to the cached
          â<SPAN class="quote">pristine</SPAN>â copies in
          the <CODE class="filename">.svn</CODE> area:</P><PRE class="screen">$ svn diff
Index: rules.txt
===================================================================
--- rules.txt	(revision 3)
+++ rules.txt	(working copy)
@@ -1,4 +1,5 @@
 Be kind to others
 Freedom = Responsibility
 Everything in moderation
-Chew with your mouth open
+Chew with your mouth closed
+Listen when others are speaking
$
</PRE></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.tour.history.diff.wcrepos"></A>Comparing working copy to repository</H4></DIV></DIV></DIV><P>If a single <CODE class="option">--revision</CODE>
          (<CODE class="option">-r</CODE>) number is passed, your
          working copy is compared to the specified revision in the
          repository:</P><PRE class="screen">$ svn diff -r 3 rules.txt
Index: rules.txt
===================================================================
--- rules.txt	(revision 3)
+++ rules.txt	(working copy)
@@ -1,4 +1,5 @@
 Be kind to others
 Freedom = Responsibility
 Everything in moderation
-Chew with your mouth open
+Chew with your mouth closed
+Listen when others are speaking
$
</PRE></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.tour.history.diff.reposrepos"></A>Comparing repository revisions</H4></DIV></DIV></DIV><P>If two revision numbers, separated by a colon, are
          passed via <CODE class="option">--revision</CODE>
          (<CODE class="option">-r</CODE>), the two revisions are directly
          compared:</P><PRE class="screen">$ svn diff -r 2:3 rules.txt
Index: rules.txt
===================================================================
--- rules.txt	(revision 2)
+++ rules.txt	(revision 3)
@@ -1,4 +1,4 @@
 Be kind to others
-Freedom = Chocolate Ice Cream
+Freedom = Responsibility
 Everything in moderation
 Chew with your mouth open
$
</PRE><P>A more convenient way of comparing one revision to the
          previous revision is to use the <CODE class="option">--change</CODE>
          (<CODE class="option">-c</CODE>) option:</P><PRE class="screen">$ svn diff -c 3 rules.txt
Index: rules.txt
===================================================================
--- rules.txt	(revision 2)
+++ rules.txt	(revision 3)
@@ -1,4 +1,4 @@
 Be kind to others
-Freedom = Chocolate Ice Cream
+Freedom = Responsibility
 Everything in moderation
 Chew with your mouth open
$
</PRE><P>Lastly, you can compare repository revisions even when
          you don't have a working copy on your local machine, just by
          including the appropriate URL on the command line:</P><PRE class="screen">$ svn diff -c 5 http://svn.example.com/repos/example/trunk/text/rules.txt
â¦
$
</PRE></DIV></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.tour.history.browsing"></A>Browsing the Repository</H3></DIV></DIV></DIV><P>Using <SPAN class="command"><STRONG>svn cat</STRONG></SPAN> and <SPAN class="command"><STRONG>svn
        list</STRONG></SPAN>, you can view various revisions of files and
        directories without changing the working revision of your
        working copy.  In fact, you don't even need a working copy to
        use either one.</P><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.tour.history.browsing.cat"></A>svn cat</H4></DIV></DIV></DIV><P>If you want to examine an earlier version of a file and
          not necessarily the differences between two files, you can use
          <SPAN class="command"><STRONG>svn cat</STRONG></SPAN>:</P><PRE class="screen">$ svn cat -r 2 rules.txt
Be kind to others
Freedom = Chocolate Ice Cream
Everything in moderation
Chew with your mouth open
$
</PRE><P>You can also redirect the output directly into a
          file:</P><PRE class="screen">$ svn cat -r 2 rules.txt &gt; rules.txt.v2
$
</PRE></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.tour.history.browsing.list"></A>svn list</H4></DIV></DIV></DIV><P>The <SPAN class="command"><STRONG>svn list</STRONG></SPAN> command shows you what
          files are in a repository directory without actually
          downloading the files to your local machine:</P><PRE class="screen">$ svn list http://svn.collab.net/repos/svn
README
branches/
clients/
tags/
trunk/
</PRE><P>If you want a more detailed listing, pass the
          <CODE class="option">--verbose</CODE> (<CODE class="option">-v</CODE>) flag to get
          output like this:</P><PRE class="screen">$ svn list -v http://svn.collab.net/repos/svn
  20620 harry            1084 Jul 13  2006 README
  23339 harry                 Feb 04 01:40 branches/
  21282 sally                 Aug 27 09:41 developer-resources/
  23198 harry                 Jan 23 17:17 tags/
  23351 sally                 Feb 05 13:26 trunk/
</PRE><P>The columns tell you the revision at which the file or
          directory was last modified, the user who modified it, the size
          if it is a file, the date it was last modified, and the item's
          name.</P><DIV class="warning" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Warning</H3><P>The <STRONG class="userinput"><CODE>svn list</CODE></STRONG> command with no arguments
          defaults to the <SPAN class="emphasis"><EM>repository URL</EM></SPAN> of the
          current working directory, <SPAN class="emphasis"><EM>not</EM></SPAN> the
          local working copy directory.  After all, if you want a
          listing of your local directory, you could use just plain
          <SPAN class="command"><STRONG>ls</STRONG></SPAN> (or any reasonable non-Unixy
          equivalent).</P></DIV></DIV></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.tour.history.snapshots"></A>Fetching Older Repository Snapshots</H3></DIV></DIV></DIV><P>In addition to all of the previous commands, you can use
        <SPAN class="command"><STRONG>svn update</STRONG></SPAN> and <SPAN class="command"><STRONG>svn
        checkout</STRONG></SPAN> with the <CODE class="option">--revision</CODE> option
        to take an entire working copy â<SPAN class="quote">back in time</SPAN>â:
        <SUP>[<A id="id501238" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id501238" class="footnote">7</A>]</SUP>
        </P><PRE class="screen">$ svn checkout -r 1729 # Checks out a new working copy at r1729
â¦
$ svn update -r 1729 # Updates an existing working copy to r1729
â¦
</PRE><DIV class="tip" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Tip</H3><P>Many Subversion newcomers attempt to use the preceding
          <SPAN class="command"><STRONG>svn update</STRONG></SPAN> example to â<SPAN class="quote">undo</SPAN>â
          committed changes, but this won't work as you can't commit
          changes that you obtain from backdating a working copy if
          the changed files have newer revisions.  See <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.basicmerging.resurrect" title="Resurrecting Deleted Items">the section called âResurrecting Deleted Itemsâ</A> for a
          description of how to â<SPAN class="quote">undo</SPAN>â a commit.</P></DIV><P>Lastly, if you're building a release and wish to bundle up
        your files from Subversion but don't want those
        pesky <CODE class="filename">.svn</CODE> directories in the way,
        you can use <SPAN class="command"><STRONG>svn export</STRONG></SPAN> to create a local
        copy of all or part of your repository
        sans <CODE class="filename">.svn</CODE> directories.  As
        with <SPAN class="command"><STRONG>svn update</STRONG></SPAN> and
        <SPAN class="command"><STRONG>svn checkout</STRONG></SPAN>, you can also pass the
        <CODE class="option">--revision</CODE> option to <SPAN class="command"><STRONG>svn
        export</STRONG></SPAN>:</P><PRE class="screen">$ svn export http://svn.example.com/svn/repos1 # Exports latest revision
â¦
$ svn export http://svn.example.com/svn/repos1 -r 1729
# Exports revision r1729
â¦
</PRE></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.tour.cleanup"></A>Sometimes You Just Need to Clean Up</H2></DIV></DIV></DIV><P>Now that we've covered the day-to-day tasks that you'll
      frequently use Subversion for, we'll review a few administrative
      tasks relating to your working copy.</P><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.tour.cleanup.disposal"></A>Disposing of a Working Copy</H3></DIV></DIV></DIV><P>Subversion doesn't track either the state or the existence of
        working copies on the server, so there's no server overhead to
        keeping working copies around.  Likewise, there's no need to
        let the server know that you're going to delete a working
        copy.</P><P>If you're likely to use a working copy again, there's
        nothing wrong with just leaving it on disk until you're ready
        to use it again, at which point all it takes is an
        <SPAN class="command"><STRONG>svn update</STRONG></SPAN> to bring it up to date and ready
        for use.</P><P>However, if you're definitely not going to use a working
        copy again, you can safely delete the entire thing, but you'd
        be well served to take a look through the working copy for
        unversioned files.  To find these files, run <STRONG class="userinput"><CODE>svn
        status</CODE></STRONG> and review any files that are prefixed with a
        <CODE class="literal">?</CODE> to make certain that they're not of
        importance.  After you're done reviewing, you can safely
        delete your working copy.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.tour.cleanup.interruption"></A>Recovering from an Interruption</H3></DIV></DIV></DIV><P>When Subversion modifies your working copy (or any
        information within <CODE class="filename">.svn</CODE>), it tries to do
        so as safely as possible.  Before changing the working copy,
        Subversion writes its intentions to a logfile.  Next, it
        executes the commands in the logfile to apply the requested
        change, holding a lock on the relevant part of the working
        copy while it worksâto prevent other Subversion clients
        from accessing the working copy mid-change.  Finally,
        Subversion removes the logfile.  Architecturally, this is
        similar to a journaled filesystem.  If a Subversion operation
        is interrupted (e.g, if the process is killed or if the machine
        crashes), the logfiles remain on disk.  By
        reexecuting the logfiles, Subversion can complete the
        previously started operation, and your working copy can get
        itself back into a consistent state.</P><P>And this is exactly what <SPAN class="command"><STRONG>svn cleanup</STRONG></SPAN>
        does: it searches your working copy and runs any leftover
        logs, removing working copy locks in the process.
        If Subversion ever tells you that some part of your working copy
        is â<SPAN class="quote">locked,</SPAN>â this is the command that you
        should run.  Also, <SPAN class="command"><STRONG>svn status</STRONG></SPAN> will display
        an <CODE class="literal">L</CODE> next to locked items:</P><PRE class="screen">$ svn status
  L    somedir
M      somedir/foo.c

$ svn cleanup
$ svn status
M      somedir/foo.c
</PRE><P>Don't confuse these working copy locks with the ordinary
        locks that Subversion users create when using
        the lock-modify-unlock model of concurrent
        version control; see the sidebar
        <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.locking.meanings" title="The Three Meanings of &ldquo;Lock&rdquo;">The Three Meanings of â<SPAN class="quote">Lock</SPAN>â</A> for
        clarification.</P></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.tour.summary"></A>Summary</H2></DIV></DIV></DIV><P>Now we've covered most of the Subversion client commands.
        Notable exceptions are those dealing with branching and
        merging (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge" title="Chapter&nbsp;4.&nbsp;Branching and Merging">Chapter&nbsp;4, <I>Branching and Merging</I></A>) and properties (see
        <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props" title="Properties">the section called âPropertiesâ</A>).  However, you may want to
        take a moment to skim through <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref" title="Chapter&nbsp;9.&nbsp;Subversion Complete Reference">Chapter&nbsp;9, <I>Subversion Complete Reference</I></A> to
        get an idea of all the different commands that Subversion
        hasâand how you can use them to make your work
        easier.</P></DIV><DIV class="footnotes"><BR><HR width="100" align="left"><DIV class="footnote"><P><SUP>[<A id="ftn.id498074" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id498074" class="para">3</A>] </SUP>Of course, you're not terribly worriedâfirst
            because you know that you can't
            <SPAN class="emphasis"><EM>really</EM></SPAN> delete anything from
            Subversion, and second because your Subversion password
            isn't the same as any of the other 3 million passwords
            you have, right?  Right?</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id498568" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id498568" class="para">4</A>] </SUP>Of course, nothing is ever totally deleted from
                  the repositoryâjust from the
                  <CODE class="literal">HEAD</CODE> of the repository.  You can
                  get back anything you delete by checking out (or
                  updating your working copy to) a revision earlier
                  than the one in which you deleted it. Also see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.basicmerging.resurrect" title="Resurrecting Deleted Items">the section called âResurrecting Deleted Itemsâ</A>.</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id498832" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id498832" class="para">5</A>] </SUP>And you don't have a WLAN card.  Thought
              you got us, huh?</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id500042" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id500042" class="para">6</A>] </SUP>And if you ask them for it, they may very well ride
              you out of town on a rail.</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id501238" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id501238" class="para">7</A>] </SUP>See?  We told you that Subversion was a time machine.</P></DIV></DIV></DIV><DIV class="chapter" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title"><A id="svn.advanced"></A>Chapter&nbsp;3.&nbsp;Advanced Topics</H2></DIV></DIV></DIV><DIV class="toc"><P><B>Table of Contents</B></P><DL><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.revs.specifiers">Revision Specifiers</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.revs.keywords">Revision Keywords</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.revs.dates">Revision Dates</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props">Properties</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.why">Why Properties?</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.manip">Manipulating Properties</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.workflow">Properties and the Subversion Workflow</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.auto">Automatic Property Setting</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.file-portability">File Portability</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.special.mime-type">File Content Type</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.special.executable">File Executability</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.special.eol-style">End-of-Line Character Sequences</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.special.ignore">Ignoring Unversioned Items</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.special.keywords">Keyword Substitution</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.sparsedirs">Sparse Directories</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.locking">Locking</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.locking.creation">Creating Locks</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.locking.discovery">Discovering Locks</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.locking.break-steal">Breaking and Stealing Locks</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.locking.lock-communication">Lock Communication</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.externals">Externals Definitions</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.pegrevs">Peg and Operative Revisions</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.changelists">Changelists</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.changelists.creating">Creating and Modifying Changelists</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.changelists.asfilters">Changelists As Operation Filters</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.changelists.limitations">Changelist Limitations</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.netmodel">Network Model</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.netmodel.reqresp">Requests and Responses</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.netmodel.credcache">Client Credentials Caching</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.summary">Summary</A></SPAN></DT></DL></DIV><P>If you've been reading this book chapter by chapter, from
    start to finish, you should by now have acquired enough
    knowledge to use the Subversion client to perform the most
    common version control operations.  You understand how to
    check out a working copy from a Subversion repository.  You are
    comfortable with submitting and receiving changes using the
    <SPAN class="command"><STRONG>svn commit</STRONG></SPAN> and <SPAN class="command"><STRONG>svn update</STRONG></SPAN>
    operations.  You've probably even developed a reflex that causes
    you to run the <SPAN class="command"><STRONG>svn status</STRONG></SPAN> command almost
    unconsciously.  For all intents and purposes, you are ready to
    use Subversion in a typical environment.</P><P>But the Subversion feature set doesn't stop at â<SPAN class="quote">common
    version control operations.</SPAN>â  It has other bits of
    functionality besides just communicating file and
    directory changes to and from a central repository.</P><P>This chapter highlights some of Subversion's features that,
    while important, aren't part of the typical user's daily routine.
    It assumes that you are familiar with Subversion's basic file and
    directory versioning capabilities.  If you aren't, you'll want to
    first read <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic" title="Chapter&nbsp;1.&nbsp;Fundamental Concepts">Chapter&nbsp;1, <I>Fundamental Concepts</I></A> and <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour" title="Chapter&nbsp;2.&nbsp;Basic Usage">Chapter&nbsp;2, <I>Basic Usage</I></A>.  Once you've mastered those basics and
    consumed this chapter, you'll be a Subversion power user!</P><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.tour.revs.specifiers"></A>Revision Specifiers</H2></DIV></DIV></DIV><P>As we described in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.in-action.revs" title="Revisions">the section called âRevisionsâ</A>, revision numbers in Subversion are pretty
      straightforwardâintegers that keep getting larger as you
      commit more changes to your versioned data.  Still, it doesn't
      take long before you can no longer remember exactly what
      happened in each and every revision.  Fortunately, the typical
      Subversion workflow doesn't often demand that you supply
      arbitrary revisions to the Subversion operations you perform.
      For operations that <SPAN class="emphasis"><EM>do</EM></SPAN> require a revision
      specifier, you generally supply a revision number that you saw
      in a commit email, in the output of some other Subversion
      operation, or in some other context that would give meaning to
      that particular number.</P><P>But occasionally, you need to pinpoint a moment in time for
      which you don't already have a revision number memorized or
      handy.  So besides the integer revision numbers,
      <SPAN class="command"><STRONG>svn</STRONG></SPAN> allows as input some additional forms of
      revision specifiers: <EM class="firstterm">revision keywords</EM>
      and revision dates.</P><DIV class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Note</H3><P>The various forms of Subversion revision specifiers can be
        mixed and matched when used to specify revision ranges.  For
        example, you can use <CODE class="option">-r
        <EM class="replaceable"><CODE>REV1</CODE></EM>:<EM class="replaceable"><CODE>REV2</CODE></EM></CODE>
        where <EM class="replaceable"><CODE>REV1</CODE></EM> is a revision keyword
        and <EM class="replaceable"><CODE>REV2</CODE></EM> is a revision number, or
        where <EM class="replaceable"><CODE>REV1</CODE></EM> is a date and
        <EM class="replaceable"><CODE>REV2</CODE></EM> is a revision keyword, and so
        on.  The individual revision specifiers are independently
        evaluated, so you can put whatever you want on the opposite
        sides of that colon.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.tour.revs.keywords"></A>Revision Keywords</H3></DIV></DIV></DIV><A id="id505590" class="indexterm"></A><A id="id505602" class="indexterm"></A><A id="id505610" class="indexterm"></A><A id="id505618" class="indexterm"></A><A id="id505627" class="indexterm"></A><P>The Subversion client understands a number of revision
        keywords.  These keywords can be used instead of integer
        arguments to the <CODE class="option">--revision</CODE>
        (<CODE class="option">-r</CODE>) option, and are resolved into specific
        revision numbers by Subversion:</P><DIV class="variablelist"><DL><DT><SPAN class="term"><CODE class="literal">HEAD</CODE></SPAN></DT><DD><P>The latest (or â<SPAN class="quote">youngest</SPAN>â) revision in
              the repository.</P></DD><DT><SPAN class="term"><CODE class="literal">BASE</CODE></SPAN></DT><DD><P>The revision number of an item in a working copy.
              If the item has been locally modified, this refers to
              the way the item appears without those local
              modifications.</P></DD><DT><SPAN class="term"><CODE class="literal">COMMITTED</CODE></SPAN></DT><DD><P>The most recent revision prior to, or equal to,
              <CODE class="literal">BASE</CODE>, in which an item changed.</P></DD><DT><SPAN class="term"><CODE class="literal">PREV</CODE></SPAN></DT><DD><P>The revision immediately <SPAN class="emphasis"><EM>before</EM></SPAN>
              the last revision in which an item changed.
              Technically, this boils down to
              <CODE class="literal">COMMITTED</CODE>â1.</P></DD></DL></DIV><P>As can be derived from their descriptions, the
        <CODE class="literal">PREV</CODE>, <CODE class="literal">BASE</CODE>, and
        <CODE class="literal">COMMITTED</CODE> revision keywords are used only
        when referring to a working copy pathâthey don't apply
        to repository URLs.  <CODE class="literal">HEAD</CODE>, on the other
        hand, can be used in conjunction with both of these path
        types.</P><P>Here are some examples of revision keywords in
        action:</P><PRE class="screen">$ svn diff -r PREV:COMMITTED foo.c
# shows the last change committed to foo.c

$ svn log -r HEAD
# shows log message for the latest repository commit

$ svn diff -r HEAD
# compares your working copy (with all of its local changes) to the
# latest version of that tree in the repository

$ svn diff -r BASE:HEAD foo.c
# compares the unmodified version of foo.c with the latest version of
# foo.c in the repository

$ svn log -r BASE:HEAD
# shows all commit logs for the current versioned directory since you
# last updated

$ svn update -r PREV foo.c
# rewinds the last change on foo.c, decreasing foo.c's working revision

$ svn diff -r BASE:14 foo.c
# compares the unmodified version of foo.c with the way foo.c looked
# in revision 14
</PRE></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.tour.revs.dates"></A>Revision Dates</H3></DIV></DIV></DIV><A id="id505791" class="indexterm"></A><P>Revision numbers reveal nothing about the world outside
        the version control system, but sometimes you need to
        correlate a moment in real time with a moment in version
        history.  To facilitate this, the <CODE class="option">--revision</CODE>
        (<CODE class="option">-r</CODE>) option can also accept as input date
        specifiers wrapped in curly braces (<CODE class="literal">{</CODE> and
        <CODE class="literal">}</CODE>).  Subversion accepts the standard
        ISO-8601 date and time formats, plus a few others.  Here are
        some examples.  (Remember to use quotes around any date that
        contains spaces.)</P><PRE class="screen">$ svn checkout -r {2006-02-17}
$ svn checkout -r {15:30}
$ svn checkout -r {15:30:00.200000}
$ svn checkout -r {"2006-02-17 15:30"}
$ svn checkout -r {"2006-02-17 15:30 +0230"}
$ svn checkout -r {2006-02-17T15:30}
$ svn checkout -r {2006-02-17T15:30Z}
$ svn checkout -r {2006-02-17T15:30-04:00}
$ svn checkout -r {20060217T1530}
$ svn checkout -r {20060217T1530Z}
$ svn checkout -r {20060217T1530-0500}
â¦
</PRE><P>When you specify a date, Subversion resolves that date to
        the most recent revision of the repository as of that date,
        and then continues to operate against that resolved revision
        number:</P><PRE class="screen">$ svn log -r {2006-11-28}
------------------------------------------------------------------------
r12 | ira | 2006-11-27 12:31:51 -0600 (Mon, 27 Nov 2006) | 6 lines
â¦
</PRE><DIV class="sidebar"><P class="title"><B>Is Subversion a Day Early?</B></P><P>If you specify a single date as a revision without
          specifying a time of day (for example
          <CODE class="literal">2006-11-27</CODE>), you may think that Subversion
          should give you the last revision that took place on the
          27th of November.  Instead, you'll get back a revision from
          the 26th, or even earlier.  Remember that Subversion will
          find the <SPAN class="emphasis"><EM>most recent revision of the
          repository</EM></SPAN> as of the date you give.  If you give
          a date without a timestamp, such as
          <CODE class="literal">2006-11-27</CODE>, Subversion assumes a time of
          00:00:00, so looking for the most recent revision won't
          return anything on the 27th.</P><P>If you want to include the 27th in your search, you can
          either specify the 27th with the time (<CODE class="literal">{"2006-11-27
          23:59"}</CODE>), or just specify the next day
          (<CODE class="literal">{2006-11-28}</CODE>).</P></DIV><P>You can also use a range of dates.  Subversion will find
        all revisions between both dates, inclusive:</P><PRE class="screen">$ svn log -r {2006-11-20}:{2006-11-29}
â¦
</PRE><DIV class="warning" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Warning</H3><P>Since the timestamp of a revision is stored as an
          unversioned, modifiable property of the revision (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props" title="Properties">the section called âPropertiesâ</A>), revision timestamps can be
          changed to represent complete falsifications of true
          chronology, or even removed altogether.  Subversion's
          ability to correctly convert revision dates into real
          revision numbers depends on revision datestamps maintaining
          a sequential orderingâthe younger the revision, the
          younger its timestamp.  If this ordering isn't maintained,
          you will likely find that trying to use dates to specify
          revision ranges in your repository doesn't always return the
          data you might have expected.</P></DIV></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.advanced.props"></A>Properties</H2></DIV></DIV></DIV><A id="id505936" class="indexterm"></A><P>We've already covered in detail how Subversion stores and
      retrieves various versions of files and directories in its
      repository.  Whole chapters have been devoted to this most
      fundamental piece of functionality provided by the tool.  And
      if the versioning support stopped there, Subversion would still
      be complete from a version control perspective.</P><P>But it doesn't stop there.</P><P>In addition to versioning your directories and files,
      Subversion provides interfaces for adding, modifying, and
      removing versioned metadata on each of your versioned
      directories and files.  We refer to this metadata as
      <EM class="firstterm">properties</EM>, and they can be thought of as
      two-column tables that map property names to arbitrary values
      attached to each item in your working copy.  Generally speaking,
      the names and values of the properties can be whatever you want
      them to be, with the constraint that the names must contain only
      ASCII characters.  And the best part about these properties is
      that they, too, are versioned, just like the textual contents of
      your files.  You can modify, commit, and revert property changes
      as easily as you can file content changes.  And the sending and
      receiving of property changes occurs as part of your typical
      commit and update operationsâyou don't have to change your
      basic processes to accommodate them.</P><DIV class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Note</H3><P>Subversion has reserved the set of properties whose names
        begin with <CODE class="literal">svn:</CODE> as its own.  While there
        are only a handful of such properties in use today, you should
        avoid creating custom properties for your own needs whose names
        begin with this prefix.  Otherwise, you run the risk that a
        future release of Subversion will grow support for a feature
        or behavior driven by a property of the same name but with
        perhaps an entirely different interpretation.</P></DIV><P>Properties show up elsewhere in Subversion, too.  Just as
      files and directories may have arbitrary property names and
      values attached to them, each revision as a whole may have
      arbitrary properties attached to it.  The same constraints
      applyâhuman-readable names and anything-you-want binary
      values.  The main difference is that revision properties are not
      versioned.  In other words, if you change the value of, or
      delete, a revision property, there's no way, within the scope of
      Subversion's functionality, to recover the previous value.</P><P>Subversion has no particular policy regarding the use of
      properties.  It asks only that you not use property names that
      begin with the prefix <CODE class="literal">svn:</CODE>.  That's the
      namespace that it sets aside for its own use.  And Subversion
      does, in fact, use propertiesâboth the versioned and
      unversioned variety.  Certain versioned properties have special
      meaning or effects when found on files and directories, or they
      house a particular bit of information about the revisions on
      which they are found.  Certain revision properties are
      automatically attached to revisions by Subversion's commit
      process, and they carry information about the revision.  Most of
      these properties are mentioned elsewhere in this or other
      chapters as part of the more general topics to which they are
      related.  For an exhaustive list of Subversion's predefined
      properties, see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.properties" title="Subversion Properties">the section called âSubversion Propertiesâ</A>.</P><P>In this section, we will examine the utilityâboth to
      users of Subversion and to Subversion itselfâof property
      support.  You'll learn about the property-related
      <SPAN class="command"><STRONG>svn</STRONG></SPAN> subcommands and how property
      modifications affect your normal Subversion workflow.</P><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.advanced.props.why"></A>Why Properties?</H3></DIV></DIV></DIV><P>Just as Subversion uses properties to store extra
        information about the files, directories, and revisions that
        it contains, you might also find properties to be of similar
        use.  You might find it useful to have a place
        close to your versioned data to hang custom metadata about
        that data.</P><P>Say you wish to design a web site that houses many digital
        photos and displays them with captions and a datestamp.  Now,
        your set of photos is constantly changing, so you'd like to
        have as much of this site automated as possible.  These photos
        can be quite large, so as is common with sites of this nature,
        you want to provide smaller thumbnail images to your site
        visitors.</P><P>Now, you can get this functionality using traditional
        files.  That is, you can have your
        <CODE class="filename">image123.jpg</CODE> and an
        <CODE class="filename">image123-thumbnail.jpg</CODE> side by side in a
        directory.  Or if you want to keep the filenames the same, you
        might have your thumbnails in a different directory, such as
        <CODE class="filename">thumbnails/image123.jpg</CODE>.  You can also
        store your captions and datestamps in a similar fashion, again
        separated from the original image file.  But the problem here
        is that your collection of files multiplies with each new
        photo added to the site.</P><P>Now consider the same web site deployed in a way that
        makes use of Subversion's file properties.  Imagine having a
        single image file, <CODE class="filename">image123.jpg</CODE>, with
        properties set on that file that are named
        <CODE class="literal">caption</CODE>, <CODE class="literal">datestamp</CODE>, and
        even <CODE class="literal">thumbnail</CODE>.  Now your working copy
        directory looks much more manageableâin fact, it looks
        to the casual browser like there are nothing but image files
        in it.  But your automation scripts know better.  They know
        that they can use <SPAN class="command"><STRONG>svn</STRONG></SPAN> (or better yet, they
        can use the Subversion language bindingsâsee <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.usingapi" title="Using the APIs">the section called âUsing the APIsâ</A>) to dig out the extra
        information that your site needs to display without having to
        read an index file or play path manipulation games.</P><DIV class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Note</H3><P>While Subversion places few restrictions on the names
          and values you use for properties, it has not been designed
          to optimally carry large property values or large sets of
          properties on a given file or directory.  Subversion
          commonly holds all the property names and values associated
          with a single item in memory at the same time, which can
          cause detrimental performance or failed operations when
          extremely large property sets are used.</P></DIV><P>Custom revision properties are also frequently used.  One
        common such use is a property whose value contains an issue
        tracker ID with which the revision is associated, perhaps
        because the change made in that revision fixes a bug filed in
        the tracker issue with that ID.  Other uses include hanging
        more friendly names on the revisionâit might be hard to
        remember that revision 1935 was a fully tested revision.  But
        if there's, say, a <CODE class="literal">test-results</CODE> property on
        that revision with the value <CODE class="literal">all passing</CODE>,
        that's meaningful information to have.</P><DIV class="sidebar"><P class="title"><B>Searchability (or, Why <SPAN class="emphasis"><EM>Not</EM></SPAN>
          Properties)</B></P><P>For all their utility, Subversion propertiesâor,
          more accurately, the available interfaces to themâhave
          a major shortcoming: while it is a simple matter to
          <SPAN class="emphasis"><EM>set</EM></SPAN> a custom property,
          <SPAN class="emphasis"><EM>finding</EM></SPAN> that property later is a whole
          different ball of wax.</P><P>Trying to locate a custom revision property generally
          involves performing a linear walk across all the revisions
          of the repository, asking of each revision, "Do you have the
          property I'm looking for?"  Trying to find a custom
          versioned property is painful, too, and often involves a
          recursive <SPAN class="command"><STRONG>svn propget</STRONG></SPAN> across an entire
          working copy.  In your situation, that might not be as bad
          as a linear walk across all revisions.  But it certainly
          leaves much to be desired in terms of both performance and
          likelihood of success, especially if the scope of your
          search would require a working copy from the root of your
          repository.</P><P>For this reason, you might chooseâespecially in
          the revision property use caseâto simply add your
          metadata to the revision's log message using some
          policy-driven (and perhaps programmatically enforced)
          formatting that is designed to be quickly parsed from the
          output of <SPAN class="command"><STRONG>svn log</STRONG></SPAN>.  It is quite common to
          see the following in Subversion log messages:</P><PRE class="programlisting">Issue(s): IZ2376, IZ1919
Reviewed by:  sally

This fixes a nasty segfault in the wort frabbing process
â¦
</PRE><P>But here again lies some misfortune.  Subversion doesn't
          yet provide a log message templating mechanism, which would
          go a long way toward helping users be consistent with the
          formatting of their log-embedded revision metadata.</P></DIV></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.advanced.props.manip"></A>Manipulating Properties</H3></DIV></DIV></DIV><P>The <SPAN class="command"><STRONG>svn</STRONG></SPAN> program affords a few ways to
        add or modify file and directory properties.  For properties
        with short, human-readable values, perhaps the simplest way to
        add a new property is to specify the property name and value
        on the command line of the <SPAN class="command"><STRONG>svn propset</STRONG></SPAN>
        subcommand:</P><PRE class="screen">$ svn propset copyright '(c) 2006 Red-Bean Software' calc/button.c
property 'copyright' set on 'calc/button.c'
$
</PRE><P>But we've been touting the flexibility that Subversion
        offers for your property values.  And if you are planning to
        have a multiline textual, or even binary, property value, you
        probably do not want to supply that value on the command line.
        So the <SPAN class="command"><STRONG>svn propset</STRONG></SPAN> subcommand takes a
        <CODE class="option">--file</CODE> (<CODE class="option">-F</CODE>) option for
        specifying the name of a file that contains the new property
        value.</P><PRE class="screen">$ svn propset license -F /path/to/LICENSE calc/button.c
property 'license' set on 'calc/button.c'
$
</PRE><P>There are some restrictions on the names you can use for
        properties.  A property name must start with a letter, a colon
        (<CODE class="literal">:</CODE>), or an underscore
        (<CODE class="literal">_</CODE>); after that, you can also use digits,
        hyphens (<CODE class="literal">-</CODE>), and periods
        (<CODE class="literal">.</CODE>).
          <SUP>[<A id="id506283" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id506283" class="footnote">8</A>]</SUP>
      </P><P>In addition to the <SPAN class="command"><STRONG>propset</STRONG></SPAN> command, the
        <SPAN class="command"><STRONG>svn</STRONG></SPAN> program supplies the
        <SPAN class="command"><STRONG>propedit</STRONG></SPAN> command.  This command uses the
        configured editor program (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.confarea.opts.config" title="Config">the section called âConfigâ</A>) to add or
        modify properties.  When you run the command,
        <SPAN class="command"><STRONG>svn</STRONG></SPAN> invokes your editor program on a
        temporary file that contains the current value of the property
        (or that is empty, if you are adding a new property).  Then,
        you just modify that value in your editor program until it
        represents the new value you wish to store for the property,
        save the temporary file, and then exit the editor program.  If
        Subversion detects that you've actually changed the existing
        value of the property, it will accept that as the new property
        value.  If you exit your editor without making any changes, no
        property modification will occur:</P><PRE class="screen">$ svn propedit copyright calc/button.c  ### exit the editor without changes
No changes to property 'copyright' on 'calc/button.c'
$
</PRE><P>We should note that, as with other <SPAN class="command"><STRONG>svn</STRONG></SPAN>
        subcommands, those related to properties can act on multiple
        paths at once.  This enables you to modify properties on whole
        sets of files with a single command.  For example, we could
        have done the following:</P><PRE class="screen">$ svn propset copyright '(c) 2006 Red-Bean Software' calc/*
property 'copyright' set on 'calc/Makefile'
property 'copyright' set on 'calc/button.c'
property 'copyright' set on 'calc/integer.c'
â¦
$
</PRE><P>All of this property adding and editing isn't really very
        useful if you can't easily get the stored property value.  So
        the <SPAN class="command"><STRONG>svn</STRONG></SPAN> program supplies two subcommands
        for displaying the names and values of properties stored on
        files and directories.  The <SPAN class="command"><STRONG>svn proplist</STRONG></SPAN>
        command will list the names of properties that exist on a
        path.  Once you know the names of the properties on the node,
        you can request their values individually using <SPAN class="command"><STRONG>svn
        propget</STRONG></SPAN>.  This command will, given a property name and a path (or set of
        paths), print the value of the property to
        the standard output stream.</P><PRE class="screen">$ svn proplist calc/button.c
Properties on 'calc/button.c':
  copyright
  license
$ svn propget copyright calc/button.c
(c) 2006 Red-Bean Software
</PRE><P>There's even a variation of the
        <SPAN class="command"><STRONG>proplist</STRONG></SPAN> command that will list both the
        name and the value for all of the properties.  Simply supply the
        <CODE class="option">--verbose</CODE> (<CODE class="option">-v</CODE>) option.</P><PRE class="screen">$ svn proplist -v calc/button.c
Properties on 'calc/button.c':
  copyright : (c) 2006 Red-Bean Software
  license : ================================================================
Copyright (c) 2006 Red-Bean Software.  All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions 
are met:

1. Redistributions of source code must retain the above copyright
notice, this list of conditions, and the recipe for Fitz's famous
red-beans-and-rice.
â¦
</PRE><P>The last property-related subcommand is
        <SPAN class="command"><STRONG>propdel</STRONG></SPAN>.  Since Subversion allows you to
        store properties with empty values, you can't remove a
        property altogether using <SPAN class="command"><STRONG>svn propedit</STRONG></SPAN> or
        <SPAN class="command"><STRONG>svn propset</STRONG></SPAN>.  For example, this command will
        <SPAN class="emphasis"><EM>not</EM></SPAN> yield the desired effect:</P><PRE class="screen">$ svn propset license '' calc/button.c
property 'license' set on 'calc/button.c'
$ svn proplist -v calc/button.c
Properties on 'calc/button.c':
  copyright : (c) 2006 Red-Bean Software
  license : 
$
</PRE><P>You need to use the <SPAN class="command"><STRONG>propdel</STRONG></SPAN> subcommand
        to delete properties altogether.  The syntax is similar to the
        other property commands:</P><PRE class="screen">$ svn propdel license calc/button.c
property 'license' deleted from 'calc/button.c'.
$ svn proplist -v calc/button.c
Properties on 'calc/button.c':
  copyright : (c) 2006 Red-Bean Software
$
</PRE><P>Remember those unversioned revision properties?  You can
        modify those, too, using the same <SPAN class="command"><STRONG>svn</STRONG></SPAN>
        subcommands that we just described.  Simply add the
        <CODE class="option">--revprop</CODE> command-line parameter and specify
        the revision whose property you wish to modify.  Since
        revisions are global, you don't need to specify a target path
        to these property-related commands so long as you are
        positioned in a working copy of the repository whose
        revision property you wish to modify.  Otherwise, you can
        simply provide the URL of any path in the repository of
        interest (including the repository's root URL).  For example,
        you might want to replace the commit log message of an
        existing revision.
        <SUP>[<A id="id506471" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id506471" class="footnote">9</A>]</SUP>
        If your current working directory is part of a working copy of
        your repository, you can simply run the
        <SPAN class="command"><STRONG>svn propset</STRONG></SPAN> command with no target path:</P><PRE class="screen">$ svn propset svn:log '* button.c: Fix a compiler warning.' -r11 --revprop
property 'svn:log' set on repository revision '11'
$
</PRE><P>But even if you haven't checked out a working copy from
        that repository, you can still effect the property change by
        providing the repository's root URL:</P><PRE class="screen">$ svn propset svn:log '* button.c: Fix a compiler warning.' -r11 --revprop \
              http://svn.example.com/repos/project
property 'svn:log' set on repository revision '11'
$
</PRE><P>Note that the ability to modify these unversioned
        properties must be explicitly added by the repository
        administrator (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.setlog" title="Commit Log Message Correction">the section called âCommit Log Message Correctionâ</A>).
        That's because the properties aren't versioned, so you run the risk of
        losing information if you aren't careful with your edits.
        The repository administrator can set up methods to protect
        against this loss, and by default, modification of
        unversioned properties is disabled.</P><DIV class="tip" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Tip</H3><P>Users should, where possible, use <SPAN class="command"><STRONG>svn
          propedit</STRONG></SPAN> instead of <SPAN class="command"><STRONG>svn
          propset</STRONG></SPAN>.  While the end result of the commands is
          identical, the former will allow them to see the current
          value of the property that they are about to change, which helps
          them to verify that they are, in fact, making the change
          they think they are making.  This is especially true when
          modifying unversioned revision properties.  Also, it is
          significantly easier to modify multiline property values in
          a text editor than at the command line.</P></DIV></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.advanced.props.workflow"></A>Properties and the Subversion Workflow</H3></DIV></DIV></DIV><P>Now that you are familiar with all of the
        property-related <SPAN class="command"><STRONG>svn</STRONG></SPAN> subcommands, let's see
        how property modifications affect the usual Subversion
        workflow.  As we mentioned earlier, file and directory
        properties are versioned, just like your file contents.  As a
        result, Subversion provides the same opportunities for
        mergingâcleanly or with conflictsâsomeone
        else's modifications into your own.</P><P>As with file contents, your property changes are local
        modifications, made permanent only when you commit them to the
        repository with <SPAN class="command"><STRONG>svn commit</STRONG></SPAN>.  Your property
        changes can be easily unmade, tooâthe <SPAN class="command"><STRONG>svn
        revert</STRONG></SPAN> command will restore your files and
        directories to their unedited statesâcontents, properties,
        and all.  Also, you can receive interesting information about
        the state of your file and directory properties by using the
        <SPAN class="command"><STRONG>svn status</STRONG></SPAN> and <SPAN class="command"><STRONG>svn diff</STRONG></SPAN>
        commands.</P><PRE class="screen">$ svn status calc/button.c
 M     calc/button.c
$ svn diff calc/button.c
Property changes on: calc/button.c
___________________________________________________________________
Name: copyright
   + (c) 2006 Red-Bean Software

$
</PRE><P>Notice how the <SPAN class="command"><STRONG>status</STRONG></SPAN> subcommand
        displays <CODE class="literal">M</CODE> in the second column instead of
        the first.  That is because we have modified the properties on
        <CODE class="filename">calc/button.c</CODE>, but not its textual
        contents.  Had we changed both, we would have seen
        <CODE class="literal">M</CODE> in the first column, too.  (We cover
        <SPAN class="command"><STRONG>svn status</STRONG></SPAN> in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.examine.status" title="See an overview of your changes">the section called âSee an overview of your changesâ</A>).</P><DIV class="sidebar"><P class="title"><B>Property Conflicts</B></P><P>As with file contents, local property modifications can
          conflict with changes committed by someone else.  If you
          update your working copy directory and receive property
          changes on a versioned object that clash with your own,
          Subversion will report that the object is in a conflicted
          state.</P><PRE class="screen">$ svn update calc
M  calc/Makefile.in
Conflict for property 'linecount' discovered on 'calc/button.c'.
Select: (p) postpone, (df) diff-full, (e) edit,
        (s) show all options: p
 C calc/button.c
Updated to revision 143.
$ 
</PRE><P>Subversion will also create, in the same directory as
          the conflicted object, a file with a
          <CODE class="filename">.prej</CODE> extension that contains the
          details of the conflict.  You should examine the contents of
          this file so you can decide how to resolve the conflict.
          Until the conflict is resolved, you will see a
          <CODE class="literal">C</CODE> in the second column of <SPAN class="command"><STRONG>svn
          status</STRONG></SPAN> output for that object, and attempts to
          commit your local modifications will fail.</P><PRE class="screen">$ svn status calc
 C     calc/button.c
?      calc/button.c.prej
$ cat calc/button.c.prej 
Trying to change property 'linecount' from '1267' to '1301',
but property has been locally changed from '1267' to '1256'.
$
</PRE><P>To resolve property conflicts, simply ensure that the
          conflicting properties contain the values that they should,
          and then use the <SPAN class="command"><STRONG>svn resolved</STRONG></SPAN> command to
          alert Subversion that you have manually resolved the
          problem.</P></DIV><P>You might also have noticed the nonstandard way that
        Subversion currently displays property differences.  You can
        still use <SPAN class="command"><STRONG>svn diff</STRONG></SPAN> and redirect its output
        to create a usable patch file.  The <SPAN class="command"><STRONG>patch</STRONG></SPAN>
        program will ignore property patchesâas a rule, it
        ignores any noise it can't understand.  This does,
        unfortunately, mean that to fully apply a patch generated by
        <SPAN class="command"><STRONG>svn diff</STRONG></SPAN>, any property modifications will
        need to be applied by hand.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.advanced.props.auto"></A>Automatic Property Setting</H3></DIV></DIV></DIV><P>Properties are a powerful feature of Subversion, acting as
        key components of many Subversion features discussed elsewhere
        in this and other chaptersâtextual diff and merge
        support, keyword substitution, newline translation, and so on.  But
        to get the full benefit of properties, they must be set on the
        right files and directories.  Unfortunately, that
        step can be easily forgotten in the routine of things, especially
        since failing to set a property doesn't usually result in an
        obvious error (at least compared to, say, failing to
        add a file to version control).  To help your properties get
        applied to the places that need them, Subversion provides a
        couple of simple but useful features.</P><P>Whenever you introduce a file to version control using the
        <SPAN class="command"><STRONG>svn add</STRONG></SPAN> or <SPAN class="command"><STRONG>svn import</STRONG></SPAN>
        commands, Subversion tries to assist by setting some common
        file properties automatically.  First, on operating systems
        whose filesystems support an execute permission bit,
        Subversion will automatically set the
        <CODE class="literal">svn:executable</CODE> property on newly added or
        imported files whose execute bit is enabled.  (See <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.special.executable" title="File Executability">the section called âFile Executabilityâ</A> later in
        this chapter for more about this property.)</P><P>Second, Subversion tries to determine the file's MIME
        type.  If you've configured a
        <CODE class="literal">mime-types-files</CODE> runtime configuration
        parameter, Subversion will try to find a MIME type mapping in
        that file for your file's extension.  If it finds such a
        mapping, it will set your file's
        <CODE class="literal">svn:mime-type</CODE> property to the MIME type it
        found.  If no mapping file is configured, or no mapping for
        your file's extension could be found, Subversion runs a very
        basic heuristic to determine whether the file contains nontextual
        content.  If so, it automatically sets the
        <CODE class="literal">svn:mime-type</CODE> property on that file to
        <CODE class="literal">application/octet-stream</CODE> (the generic
        â<SPAN class="quote">this is a collection of bytes</SPAN>â MIME type).  Of
        course, if Subversion guesses incorrectly, or if you wish to
        set the <CODE class="literal">svn:mime-type</CODE> property to something
        more preciseâperhaps <CODE class="literal">image/png</CODE> or
        <CODE class="literal">application/x-shockwave-flash</CODE>âyou can
        always remove or edit that property.  (For more on
        Subversion's use of MIME types, see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.special.mime-type" title="File Content Type">the section called âFile Content Typeâ</A> later in
        this chapter.)</P><P>Subversion also provides, via its runtime configuration
        system (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.confarea" title="Runtime Configuration Area">the section called âRuntime Configuration Areaâ</A>), a more
        flexible automatic property setting feature that allows you
        to create mappings of filename patterns to property names and
        values.  Once again, these mappings affect adds and imports,
        and can not only override the default MIME type decision made
        by Subversion during those operations, but can also set
        additional Subversion or custom properties, too.  For example,
        you might create a mapping that says that anytime you add
        JPEG filesâones whose names match the pattern
        <CODE class="literal">*.jpg</CODE>âSubversion should automatically
        set the <CODE class="literal">svn:mime-type</CODE> property on those
        files to <CODE class="literal">image/jpeg</CODE>.  Or perhaps any files
        that match <CODE class="literal">*.cpp</CODE> should have
        <CODE class="literal">svn:eol-style</CODE> set to
        <CODE class="literal">native</CODE>, and <CODE class="literal">svn:keywords</CODE>
        set to <CODE class="literal">Id</CODE>.  Automatic property support is
        perhaps the handiest property-related tool in the Subversion
        toolbox.  See <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.confarea.opts.config" title="Config">the section called âConfigâ</A> for more about
        configuring that support.</P></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.advanced.props.file-portability"></A>File Portability</H2></DIV></DIV></DIV><P>Fortunately for Subversion users who routinely find
      themselves on different computers with different operating
      systems, Subversion's command-line program behaves almost
      identically on all those systems.  If you know how to wield
      <SPAN class="command"><STRONG>svn</STRONG></SPAN> on one platform, you know how to wield it
      everywhere.</P><P>However, the same is not always true of other general classes
      of software or of the actual files you keep in Subversion.  For
      example, on a Windows machine, the definition of a â<SPAN class="quote">text
      file</SPAN>â would be similar to that used on a Linux box, but
      with a key differenceâthe character sequences used to mark
      the ends of the lines of those files.  There are other
      differences, too.  Unix platforms have (and Subversion supports)
      symbolic links; Windows does not.  Unix platforms use filesystem
      permission to determine executability; Windows uses filename
      extensions.</P><P>Because Subversion is in no position to unite the whole
      world in common definitions and implementations of all of these
      things, the best it can do is to try to help make your life
      simpler when you need to work with your versioned files and
      directories on multiple computers and operating systems.  This
      section describes some of the ways Subversion does this.</P><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.advanced.props.special.mime-type"></A>File Content Type</H3></DIV></DIV></DIV><P>Subversion joins the ranks of the many applications that
        recognize and make use of Multipurpose Internet Mail
        Extensions (MIME) content types.  Besides being a
        general-purpose storage location for a file's content type,
        the value of the <CODE class="literal">svn:mime-type</CODE> file
        property determines some behavioral characteristics of
        Subversion itself.</P><DIV class="sidebar"><P class="title"><B>Identifying File Types</B></P><P>Various programs on most modern operating systems make
          assumptions about the type and format of the contents of a
          file by the file's name, specifically its file extension.
          For example, files whose names end in
          <CODE class="filename">.txt</CODE> are generally assumed to be
          human-readable; that is, able to be understood by simple perusal
          rather than requiring complex processing to decipher.  Files
          whose names end in <CODE class="filename">.png</CODE>, on the other
          hand, are assumed to be of the Portable Network Graphics
          typeânot human-readable at all, and sensible only when
          interpreted by software that understands the PNG format and
          can render the information in that format as a raster
          image.</P><P>Unfortunately, some of those extensions have changed
          their meanings over time.  When personal computers first appeared,
          a file named <CODE class="filename">README.DOC</CODE> would have
          almost certainly been a plain-text file, just like today's
          <CODE class="filename">.txt</CODE> files.  But by the mid-1990s, you
          could almost bet that a file of that name would not be a
          plain-text file at all, but instead a Microsoft Word document
          in a proprietary, non-human-readable format.  But this
          change didn't occur overnightâthere was certainly a
          period of confusion for computer users over what exactly
          they had in hand when they saw a <CODE class="filename">.DOC</CODE>
          file.
          <SUP>[<A id="id507006" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id507006" class="footnote">10</A>]</SUP>
        </P><P>The popularity of computer networking cast still more
          doubt on the mapping between a file's name and its content.
          With information being served across networks and generated
          dynamically by server-side scripts, there was often no real
          file per se, and therefore no filename.  Web
          servers, for example, needed some other way to tell browsers
          what they were downloading so that the browser could do something
          intelligent with that information, whether that was to
          display the data using a program registered to handle that
          datatype or to prompt the user for where on the client
          machine to store the downloaded data.</P><P>Eventually, a standard emerged for, among other things,
          describing the contents of a data stream.  In 1996, RFC 2045
          was published.  It was the first of five RFCs describing
          MIME.  It describes the concept of media types and subtypes
          and recommends a syntax for the representation of those
          types.  Today, MIME media typesâor â<SPAN class="quote">MIME
          types</SPAN>ââare used almost universally across
          email applications, web servers, and other software as the
          de facto mechanism for clearing up the file content
          confusion.</P></DIV><P>For example, one of the benefits that Subversion typically
        provides is contextual, line-based merging of changes received
        from the server during an update into your working file.  But
        for files containing nontextual data, there is often no
        concept of a â<SPAN class="quote">line.</SPAN>â  So, for versioned files
        whose <CODE class="literal">svn:mime-type</CODE> property is set to a
        nontextual MIME type (generally, something that doesn't begin
        with <CODE class="literal">text/</CODE>, though there are exceptions),
        Subversion does not attempt to perform contextual merges
        during updates.  Instead, any time you have locally modified a
        binary working copy file that is also being updated, your file
        is left untouched and Subversion creates two new files.  One
        file has a <CODE class="filename">.oldrev</CODE> extension and contains
        the BASE revision of the file.  The other file has a
        <CODE class="filename">.newrev</CODE> extension and contains the
        contents of the updated revision of the file.  This behavior
        is really for the protection of the user against failed
        attempts at performing contextual merges on files that simply
        cannot be contextually merged.</P><DIV class="warning" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Warning</H3><P>The <CODE class="literal">svn:mime-type</CODE> property, when set
          to a value that does not indicate textual file contents, can
          cause some unexpected behaviors with respect to other
          properties.  For example, since the idea of line endings
          (and therefore, line-ending conversion) makes no sense when
          applied to nontextual files, Subversion will prevent you
          from setting the <CODE class="literal">svn:eol-style</CODE> property
          on such files.  This is obvious when attempted on a single
          file targetâ<SPAN class="command"><STRONG>svn propset</STRONG></SPAN> will error
          out.  But it might not be as clear if you perform a
          recursive property set, where Subversion will silently skip
          over files that it deems unsuitable for a given
          property.</P></DIV><P>Beginning in Subversion 1.5, users can configure a new
        <CODE class="literal">mime-types-file</CODE> runtime configuration
        parameter, which identifies the location of a MIME types
        mapping file.  Subversion will consult this mapping file to
        determine the MIME type of newly added and imported
        files.</P><P>Also, if the <CODE class="literal">svn:mime-type</CODE> property is
        set, then the Subversion Apache module will use its value to
        populate the <CODE class="literal">Content-type:</CODE> HTTP header when
        responding to GET requests.  This gives your web browser a
        crucial clue about how to display a file when you use it to
        peruse your Subversion repository's contents.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.advanced.props.special.executable"></A>File Executability</H3></DIV></DIV></DIV><P>On many operating systems, the ability to execute a file
        as a command is governed by the presence of an execute
        permission bit.  This bit usually defaults to being disabled,
        and must be explicitly enabled by the user for each file that
        needs it.  But it would be a monumental hassle to have to
        remember exactly which files in a freshly checked-out working
        copy were supposed to have their executable bits toggled on,
        and then to have to do that toggling.  So, Subversion provides
        the <CODE class="literal">svn:executable</CODE> property as a way to
        specify that the executable bit for the file on which that
        property is set should be enabled, and Subversion honors that
        request when populating working copies with such files.</P><P>This property has no effect on filesystems that have no
        concept of an executable permission bit, such as FAT32 and
        NTFS.
        <SUP>[<A id="id507164" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id507164" class="footnote">11</A>]</SUP>
        Also, although it has no defined values, Subversion will force
        its value to <CODE class="literal">*</CODE> when setting this property.
        Finally, this property is valid only on files, not on
        directories.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.advanced.props.special.eol-style"></A>End-of-Line Character Sequences</H3></DIV></DIV></DIV><P>Unless otherwise noted using a versioned file's
        <CODE class="literal">svn:mime-type</CODE> property, Subversion
        assumes the file contains human-readable data.  Generally
        speaking, Subversion uses this knowledge only to determine
        whether contextual difference reports for that file are
        possible.  Otherwise, to Subversion, bytes are bytes.</P><P>This means that by default, Subversion doesn't pay any
        attention to the type of <EM class="firstterm">end-of-line (EOL)
        markers</EM> used in your files.  Unfortunately,
        different operating systems have different conventions about
        which character sequences represent the end of a line of text
        in a file.  For example, the usual line-ending token used by
        software on the Windows platform is a pair of ASCII control
        charactersâa carriage return (<CODE class="literal">CR</CODE>)
        followed by a line feed (<CODE class="literal">LF</CODE>).  Unix
        software, however, just uses the <CODE class="literal">LF</CODE>
        character to denote the end of a line.</P><P>Not all of the various tools on these operating systems
        understand files that contain line endings in a format that
        differs from the <EM class="firstterm">native line-ending
        style</EM> of the operating system on which they are
        running.  So, typically, Unix programs treat the
        <CODE class="literal">CR</CODE> character present in Windows files as a
        regular character (usually rendered as <CODE class="literal">^M</CODE>),
        and Windows programs combine all of the lines of a Unix file
        into one giant line because no carriage return-linefeed (or
        <CODE class="literal">CRLF</CODE>) character combination was found to
        denote the ends of the lines.</P><P>This sensitivity to foreign EOL markers can be
        frustrating for folks who share a file across different
        operating systems.  For example, consider a source code
        file, and developers that edit this file on both Windows and
        Unix systems.  If all the developers always use tools that
        preserve the line-ending style of the file, no problems
        occur.</P><P>But in practice, many common tools either fail to
        properly read a file with foreign EOL markers, or
        convert the file's line endings to the native style when the
        file is saved.  If the former is true for a developer, he
        has to use an external conversion utility (such as
        <SPAN class="command"><STRONG>dos2unix</STRONG></SPAN> or its companion,
        <SPAN class="command"><STRONG>unix2dos</STRONG></SPAN>) to prepare the file for
        editing.  The latter case requires no extra preparation.
        But both cases result in a file that differs from the
        original quite literally on every line!  Prior to committing
        his changes, the user has two choices.  Either he can use a
        conversion utility to restore the modified file to the same
        line-ending style that it was in before his edits were made,
        or he can simply commit the fileânew EOL markers and
        all.</P><P>The result of scenarios like these include wasted time
        and unnecessary modifications to committed files.  Wasted
        time is painful enough.  But when commits change every line
        in a file, this complicates the job of determining which of
        those lines were changed in a nontrivial way.  Where was
        that bug really fixed?  On what line was a syntax error
        introduced?</P><P>The solution to this problem is the
        <CODE class="literal">svn:eol-style</CODE> property.  When this
        property is set to a valid value, Subversion uses it to
        determine what special processing to perform on the file so
        that the file's line-ending style isn't flip-flopping with
        every commit that comes from a different operating
        system.  The valid values are:</P><DIV class="variablelist"><DL><DT><SPAN class="term"><CODE class="literal">native</CODE></SPAN></DT><DD><P>This causes the file to contain the EOL markers
              that are native to the operating system on which
              Subversion was run.  In other words, if a user on a
              Windows machine checks out a working copy that
              contains a file with an
              <CODE class="literal">svn:eol-style</CODE> property set to
              <CODE class="literal">native</CODE>, that file will contain
              <CODE class="literal">CRLF</CODE> EOL markers.  A Unix user
              checking out a working copy that contains the same
              file will see <CODE class="literal">LF</CODE> EOL markers in his
              copy of the file.</P><P>Note that Subversion will actually store the file
              in the repository using normalized
              <CODE class="literal">LF</CODE> EOL markers regardless of the
              operating system.  This is basically transparent to
              the user, though.</P></DD><DT><SPAN class="term"><CODE class="literal">CRLF</CODE></SPAN></DT><DD><P>This causes the file to contain
              <CODE class="literal">CRLF</CODE> sequences for EOL markers,
              regardless of the operating system in use.</P></DD><DT><SPAN class="term"><CODE class="literal">LF</CODE></SPAN></DT><DD><P>This causes the file to contain
              <CODE class="literal">LF</CODE> characters for EOL markers,
              regardless of the operating system in use.</P></DD><DT><SPAN class="term"><CODE class="literal">CR</CODE></SPAN></DT><DD><P>This causes the file to contain
              <CODE class="literal">CR</CODE> characters for EOL markers,
              regardless of the operating system in use.  This
              line-ending style is not very common.</P></DD></DL></DIV></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.advanced.props.special.ignore"></A>Ignoring Unversioned Items</H2></DIV></DIV></DIV><P>In any given working copy, there is a good chance that
      alongside all those versioned files and directories are other
      files and directories that are neither versioned nor intended
      to be.  Text editors litter directories with backup files.
      Software compilers generate intermediateâor even
      finalâfiles that you typically wouldn't bother to
      version.  And users themselves drop various other files and
      directories wherever they see fit, often in version control
      working copies.</P><P>It's ludicrous to expect Subversion working copies to be
      somehow impervious to this kind of clutter and impurity.  In
      fact, Subversion counts it as a <SPAN class="emphasis"><EM>feature</EM></SPAN>
      that its working copies are just typical directories, just like
      unversioned trees.  But these not-to-be-versioned files and
      directories can cause some annoyance for Subversion users.  For
      example, because the <SPAN class="command"><STRONG>svn add</STRONG></SPAN> and <SPAN class="command"><STRONG>svn
      import</STRONG></SPAN> commands act recursively by default and don't
      know which files in a given tree you do and don't wish to
      version, it's easy to accidentally add stuff to version control
      that you didn't mean to.  And because <SPAN class="command"><STRONG>svn
      status</STRONG></SPAN> reports, by default, every item of interest in
      a working copyâincluding unversioned files and
      directoriesâits output can get quite noisy where many of
      these things exist.</P><P>So Subversion provides two ways for telling it which files
      you would prefer that it simply disregard.  One of the ways
      involves the use of Subversion's runtime configuration system
      (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.confarea" title="Runtime Configuration Area">the section called âRuntime Configuration Areaâ</A>), and therefore
      applies to all the Subversion operations that make use of that
      runtime configurationâgenerally those performed on a particular
      computer or by a particular user of a computer.  The other way
      makes use of Subversion's directory property support and is more
      tightly bound to the versioned tree itself, and therefore
      affects everyone who has a working copy of that tree.  Both of
      the mechanisms use <EM class="firstterm">file patterns</EM> (strings
      of literal and special wildcard characters used to match against
      filenames) to decide which files to ignore.</P><P>The Subversion runtime configuration system provides an
      option, <CODE class="literal">global-ignores</CODE>, whose value is a
      whitespace-delimited collection of file patterns.  The
      Subversion client checks these patterns against the names of the
      files that are candidates for addition to version control, as
      well as to unversioned files that the <SPAN class="command"><STRONG>svn
      status</STRONG></SPAN> command notices.  If any file's name matches
      one of the patterns, Subversion will basically act as if the
      file didn't exist at all.  This is really useful for the kinds
      of files that you almost never want to version, such as editor
      backup files such as Emacs' <CODE class="literal">*~</CODE> and
      <CODE class="literal">.*~</CODE> files.</P><DIV class="sidebar"><P class="title"><B>File Patterns in Subversion</B></P><P>File patterns (also called <EM class="firstterm">globs</EM> or
        <EM class="firstterm">shell wildcard patterns</EM>) are strings of
        characters that are intended to be matched against filenames,
        typically for the purpose of quickly selecting some subset of
        similar files from a larger grouping without having to
        explicitly name each file.  The patterns contain two types of
        characters:  regular characters, which are compared explicitly
        against potential matches, and special wildcard characters,
        which are interpreted differently for matching
        purposes.</P><P>There are different types of file pattern syntaxes, but
        Subversion uses the one most commonly found in Unix systems
        implemented as the <CODE class="function">fnmatch</CODE> system
        function.  It supports the following wildcards, described here
        simply for your convenience:</P><DIV class="variablelist"><DL><DT><SPAN class="term"><CODE class="literal">?</CODE></SPAN></DT><DD><P>Matches any single character</P></DD><DT><SPAN class="term"><CODE class="literal">*</CODE></SPAN></DT><DD><P>Matches any string of characters, including the
              empty string</P></DD><DT><SPAN class="term"><CODE class="literal">[</CODE></SPAN></DT><DD><P>Begins a character class definition terminated by
              <CODE class="literal">]</CODE>, used for matching a subset of
              characters</P></DD></DL></DIV><P>You can see this same pattern matching behavior at a Unix
        shell prompt.  The following are some examples of patterns
        being used for various things:</P><PRE class="screen">$ ls   ### the book sources
appa-quickstart.xml             ch06-server-configuration.xml
appb-svn-for-cvs-users.xml      ch07-customizing-svn.xml
appc-webdav.xml                 ch08-embedding-svn.xml
book.xml                        ch09-reference.xml
ch00-preface.xml                ch10-world-peace-thru-svn.xml
ch01-fundamental-concepts.xml   copyright.xml
ch02-basic-usage.xml            foreword.xml
ch03-advanced-topics.xml        images/
ch04-branching-and-merging.xml  index.xml
ch05-repository-admin.xml       styles.css
$ ls ch*   ### the book chapters
ch00-preface.xml                ch06-server-configuration.xml
ch01-fundamental-concepts.xml   ch07-customizing-svn.xml
ch02-basic-usage.xml            ch08-embedding-svn.xml
ch03-advanced-topics.xml        ch09-reference.xml
ch04-branching-and-merging.xml  ch10-world-peace-thru-svn.xml
ch05-repository-admin.xml
$ ls ch?0-*   ### the book chapters whose numbers end in zero
ch00-preface.xml  ch10-world-peace-thru-svn.xml
$ ls ch0[3578]-*   ### the book chapters that Mike is responsible for
ch03-advanced-topics.xml   ch07-customizing-svn.xml
ch05-repository-admin.xml  ch08-embedding-svn.xml
$
</PRE><P>File pattern matching is a bit more complex than what
        we've described here, but this basic usage level tends to suit
        the majority of Subversion users.</P></DIV><P>When found on a versioned directory, the
      <CODE class="literal">svn:ignore</CODE> property is expected to contain a
      list of newline-delimited file patterns that Subversion should
      use to determine ignorable objects in that same directory.
      These patterns do not override those found in the
      <CODE class="literal">global-ignores</CODE> runtime configuration option,
      but are instead appended to that list.  And it's worth noting
      again that, unlike the <CODE class="literal">global-ignores</CODE> option,
      the patterns found in the <CODE class="literal">svn:ignore</CODE>
      property apply only to the directory on which that property is
      set, and not to any of its subdirectories.  The
      <CODE class="literal">svn:ignore</CODE> property is a good way to tell
      Subversion to ignore files that are likely to be present in
      every user's working copy of that directory, such as compiler
      output orâto use an example more appropriate to this
      bookâthe HTML, PDF, or PostScript files generated as the
      result of a conversion of some source DocBook XML files to a
      more legible output format.</P><DIV class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Note</H3><P>Subversion's support for ignorable file patterns extends
        only to the one-time process of adding unversioned
        files and directories to version control.  Once an object is
        under Subversion's control, the ignore pattern mechanisms no
        longer apply to it.  In other words, don't expect Subversion
        to avoid committing changes you've made to a versioned file
        simply because that file's name matches an ignore
        patternâSubversion <SPAN class="emphasis"><EM>always</EM></SPAN> notices
        all of its versioned objects.</P></DIV><DIV class="sidebar"><P class="title"><B>Ignore Patterns for CVS Users</B></P><P>The Subversion <CODE class="literal">svn:ignore</CODE> property is
        very similar in syntax and function to the CVS
        <CODE class="filename">.cvsignore</CODE> file.  In fact, if you are
        migrating a CVS working copy to Subversion, you can directly
        migrate the ignore patterns by using the
        <CODE class="filename">.cvsignore</CODE> file as input file to the
        <SPAN class="command"><STRONG>svn propset</STRONG></SPAN> command:</P><PRE class="screen">$ svn propset svn:ignore -F .cvsignore .
property 'svn:ignore' set on '.'
$
</PRE><P>There are, however, some differences in the ways that CVS
        and Subversion handle ignore patterns.  The two systems use
        the ignore patterns at some different times, and there are
        slight discrepancies in what the ignore patterns apply to.
        Also, Subversion does not recognize the use of the
        <CODE class="literal">!</CODE> pattern as a reset back to having no
        ignore patterns at all.</P></DIV><P>The global list of ignore patterns tends to be more a
      matter of personal taste and ties more closely to a user's
      particular tool chain than to the details of any particular
      working copy's needs.  So, the rest of this section will focus
      on the <CODE class="literal">svn:ignore</CODE> property and its
      uses.</P><P>Say you have the following output from <SPAN class="command"><STRONG>svn
      status</STRONG></SPAN>:</P><PRE class="screen">$ svn status calc
 M     calc/button.c
?      calc/calculator
?      calc/data.c
?      calc/debug_log
?      calc/debug_log.1
?      calc/debug_log.2.gz
?      calc/debug_log.3.gz
</PRE><P>In this example, you have made some property modifications
      to <CODE class="filename">button.c</CODE>, but in your working copy, you
      also have some unversioned files: the latest
      <CODE class="filename">calculator</CODE> program that you've compiled
      from your source code, a source file named
      <CODE class="filename">data.c</CODE>, and a set of debugging output logfiles.
      Now, you know that your build system always results in
      the <CODE class="filename">calculator</CODE> program being generated.
      <SUP>[<A id="id507808" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id507808" class="footnote">12</A>]</SUP>
      And you know that your test suite always leaves those debugging
      logfiles lying around.  These facts are true for all working
      copies of this project, not just your own.  And you know that
      you aren't interested in seeing those things every time you run
      <SPAN class="command"><STRONG>svn status</STRONG></SPAN>, and you are pretty sure that
      nobody else is interested in them either.  So you use
      <STRONG class="userinput"><CODE>svn propedit svn:ignore calc</CODE></STRONG> to add some
      ignore patterns to the <CODE class="filename">calc</CODE> directory.  For
      example, you might add this as the new value of the
      <CODE class="literal">svn:ignore</CODE> property:</P><PRE class="programlisting">calculator
debug_log*
</PRE><P>After you've added this property, you will now have a local
      property modification on the <CODE class="filename">calc</CODE>
      directory.  But notice what else is different about your
      <SPAN class="command"><STRONG>svn status</STRONG></SPAN> output:</P><PRE class="screen">$ svn status
 M     calc
 M     calc/button.c
?      calc/data.c
</PRE><P>Now, all that cruft is missing from the output!  Your
      <CODE class="filename">calculator</CODE> compiled program and all those
      logfiles are still in your working copy; Subversion just isn't
      constantly reminding you that they are present and unversioned.
      And now with all the uninteresting noise removed from the
      display, you are left with more intriguing itemsâsuch as
      that source code file <CODE class="filename">data.c</CODE> that you
      probably forgot to add to version control.</P><P>Of course, this less-verbose report of your working copy
      status isn't the only one available.  If you actually want to
      see the ignored files as part of the status report, you can pass
      the <CODE class="option">--no-ignore</CODE> option to Subversion:</P><PRE class="screen">$ svn status --no-ignore
 M     calc
 M     calc/button.c
I      calc/calculator
?      calc/data.c
I      calc/debug_log
I      calc/debug_log.1
I      calc/debug_log.2.gz
I      calc/debug_log.3.gz
</PRE><P>As mentioned earlier, the list of file patterns to ignore is
      also used by <SPAN class="command"><STRONG>svn add</STRONG></SPAN> and <SPAN class="command"><STRONG>svn
      import</STRONG></SPAN>.  Both of these operations involve asking
      Subversion to begin managing some set of files and directories.
      Rather than force the user to pick and choose which files in a
      tree she wishes to start versioning, Subversion uses the ignore
      patternsâboth the global and the per-directory
      listsâto determine which files should not be swept into
      the version control system as part of a larger recursive
      addition or import operation.  And here again, you can use the
      <CODE class="option">--no-ignore</CODE> option to tell Subversion ignore
      its ignores list and operate on all the files and directories
      present.</P><DIV class="tip" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Tip</H3><P>Even if <CODE class="literal">svn:ignore</CODE> is set, you may run
        into problems if you use shell wildcards in a command.  Shell
        wildcards are expanded into an explicit list of targets before
        Subversion operates on them, so running <STRONG class="userinput"><CODE>svn
        <EM class="replaceable"><CODE>SUBCOMMAND</CODE></EM> *</CODE></STRONG> is just like
        running <STRONG class="userinput"><CODE>svn <EM class="replaceable"><CODE>SUBCOMMAND</CODE></EM>
        file1 file2 file3 â¦</CODE></STRONG>.  In the case of the
        <SPAN class="command"><STRONG>svn add</STRONG></SPAN> command, this has an effect similar
        to passing the <CODE class="option">--no-ignore</CODE> option.  So
        instead of using a wildcard, use <STRONG class="userinput"><CODE>svn add --force
        .</CODE></STRONG> to do a bulk scheduling of unversioned things for
        addition.  The explicit target will ensure that the current
        directory isn't overlooked because of being already under
        version control, and the <CODE class="option">--force</CODE> option will
        cause Subversion to crawl through that directory, adding
        unversioned files while still honoring the
        <CODE class="literal">svn:ignore</CODE> property and
        <CODE class="literal">global-ignores</CODE> runtime configuration
        variable.  Be sure to also provide the <CODE class="option">--depth
        files</CODE> option to the <SPAN class="command"><STRONG>svn add</STRONG></SPAN>
        command if you don't want a fully recursive crawl for things
        to add.</P></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.advanced.props.special.keywords"></A>Keyword Substitution</H2></DIV></DIV></DIV><P>Subversion has the ability to substitute
      <EM class="firstterm">keywords</EM>âpieces of useful,
      dynamic information about a versioned fileâinto the
      contents of the file itself.  Keywords generally provide
      information about the last modification made to the file.
      Because this information changes each time the
      file changes, and more importantly, just
      <SPAN class="emphasis"><EM>after</EM></SPAN> the file changes, it is a hassle
      for any process except the version control system to keep
      the data completely up to date.  Left to human authors, the
      information would inevitably grow stale.</P><P>For example, say you have a document in which you would
      like to display the last date on which it was modified.  You
      could burden every author of that document to, just before
      committing their changes, also tweak the part of the
      document that describes when it was last changed.  But
      sooner or later, someone would forget to do that.  Instead,
      simply ask Subversion to perform keyword substitution on the
      <CODE class="literal">LastChangedDate</CODE> keyword.  You control
      where the keyword is inserted into your document by placing
      a <EM class="firstterm">keyword anchor</EM> at the desired
      location in the file.  This anchor is just a string of text
      formatted as
      <CODE class="literal">$</CODE><EM class="replaceable"><CODE>KeywordName</CODE></EM><CODE class="literal">$</CODE>.</P><P>All keywords are case-sensitive where they appear as
      anchors in files: you must use the correct capitalization
      for the keyword to be expanded.  You should consider the
      value of the <CODE class="literal">svn:keywords</CODE> property to be
      case-sensitive, tooâcertain keyword names will be recognized
      regardless of case, but this behavior is deprecated.</P><P>Subversion defines the list of keywords available for
      substitution.  That list contains the following five keywords, 
      some of which have aliases that you can also use:</P><DIV class="variablelist"><DL><DT><SPAN class="term"><CODE class="literal">Date</CODE></SPAN></DT><DD><P>This keyword describes the last time the file was
            known to have been changed in the repository, and is of
            the form <CODE class="literal">$Date: 2006-07-22 21:42:37 -0700 (Sat,
            22 Jul 2006) $</CODE>.  It may also be specified as
            <CODE class="literal">LastChangedDate</CODE>.  Unlike the
            <CODE class="literal">Id</CODE> keyword, which uses UTC, the
            <CODE class="literal">Date</CODE> keyword displays dates using the
            local time zone.</P></DD><DT><SPAN class="term"><CODE class="literal">Revision</CODE></SPAN></DT><DD><P>This keyword describes the last known revision in
            which this file changed in the repository, and looks
            something like <CODE class="literal">$Revision: 144 $</CODE>.  
            It may also be specified as
            <CODE class="literal">LastChangedRevision</CODE> or
            <CODE class="literal">Rev</CODE>.</P></DD><DT><SPAN class="term"><CODE class="literal">Author</CODE></SPAN></DT><DD><P>This keyword describes the last known user to
            change this file in the repository, and looks
            something like <CODE class="literal">$Author: harry $</CODE>.  
            It may also be specified as 
            <CODE class="literal">LastChangedBy</CODE>.</P></DD><DT><SPAN class="term"><CODE class="literal">HeadURL</CODE></SPAN></DT><DD><P>This keyword describes the full URL to the latest
            version of the file in the repository, and looks
            something like <CODE class="literal">$HeadURL:
            http://svn.collab.net/repos/trunk/README $</CODE>.
            It may be abbreviated as
            <CODE class="literal">URL</CODE>.</P></DD><DT><SPAN class="term"><CODE class="literal">Id</CODE></SPAN></DT><DD><P>This keyword is a compressed combination of the other
            keywords.  Its substitution looks something like
            <CODE class="literal">$Id: calc.c 148 2006-07-28 21:30:43Z sally
            $</CODE>, and is interpreted to mean that the file
            <CODE class="filename">calc.c</CODE> was last changed in revision
            148 on the evening of July 28, 2006 by the user
            <CODE class="literal">sally</CODE>.  The date displayed by this
            keyword is in UTC, unlike that of the
            <CODE class="literal">Date</CODE> keyword (which uses the local time
            zone).</P></DD></DL></DIV><P>Several of the preceding descriptions use the phrase
      â<SPAN class="quote">last known</SPAN>â or similar wording.  Keep in mind that
      keyword expansion is a client-side operation, and your client
      â<SPAN class="quote">knows</SPAN>â only about changes that have occurred in
      the repository when you update your working copy to include
      those changes.  If you never update your working copy, your
      keywords will never expand to different values even if those
      versioned files are being changed regularly in the
      repository.</P><P>Simply adding keyword anchor text to your file does
      nothing special.  Subversion will never attempt to perform
      textual substitutions on your file contents unless
      explicitly asked to do so.  After all, you might be writing
      a document
      <SUP>[<A id="id508298" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id508298" class="footnote">13</A>]</SUP> 
      about how to use keywords, and you don't want Subversion to
      substitute your beautiful examples of unsubstituted keyword
      anchors!</P><P>To tell Subversion whether to substitute keywords
      on a particular file, we again turn to the property-related
      subcommands.  The <CODE class="literal">svn:keywords</CODE> property,
      when set on a versioned file, controls which keywords will
      be substituted on that file.  The value is a space-delimited
      list of keyword names or aliases.</P><P>For example, say you have a versioned file named
      <CODE class="filename">weather.txt</CODE> that looks like
      this:</P><PRE class="programlisting">Here is the latest report from the front lines.
$LastChangedDate$
$Rev$
Cumulus clouds are appearing more frequently as summer approaches.
</PRE><P>With no <CODE class="literal">svn:keywords</CODE> property set on
      that file, Subversion will do nothing special.  Now, let's
      enable substitution of the
      <CODE class="literal">LastChangedDate</CODE> keyword.</P><PRE class="screen">$ svn propset svn:keywords "Date Author" weather.txt
property 'svn:keywords' set on 'weather.txt'
$
</PRE><P>Now you have made a local property modification on the
      <CODE class="filename">weather.txt</CODE> file.  You will see no
      changes to the file's contents (unless you made some of your
      own prior to setting the property).  Notice that the file
      contained a keyword anchor for the <CODE class="literal">Rev</CODE>
      keyword, yet we did not include that keyword in the property
      value we set.  Subversion will happily ignore requests to
      substitute keywords that are not present in the file and
      will not substitute keywords that are not present in the
      <CODE class="literal">svn:keywords</CODE> property value.</P><P>Immediately after you commit this property change,
      Subversion will update your working file with the new
      substitute text.  Instead of seeing your keyword anchor
      <CODE class="literal">$LastChangedDate$</CODE>, you'll see its
      substituted result.  That result also contains the name of
      the keyword and continues to be delimited by the dollar sign
      (<CODE class="literal">$</CODE>) characters.  And as we predicted, the
      <CODE class="literal">Rev</CODE> keyword was not substituted because
      we didn't ask for it to be.</P><P>Note also that we set the <CODE class="literal">svn:keywords</CODE>
      property to <CODE class="literal">Date Author</CODE>, yet the keyword
      anchor used the alias <CODE class="literal">$LastChangedDate$</CODE>
      and still expanded correctly:</P><PRE class="screen">Here is the latest report from the front lines.
$LastChangedDate: 2006-07-22 21:42:37 -0700 (Sat, 22 Jul 2006) $
$Rev$
Cumulus clouds are appearing more frequently as summer approaches.
</PRE><P>If someone else now commits a change to
      <CODE class="filename">weather.txt</CODE>, your copy of that file
      will continue to display the same substituted keyword value
      as beforeâuntil you update your working copy.  At that
      time, the keywords in your <CODE class="filename">weather.txt</CODE>
      file will be resubstituted with information that
      reflects the most recent known commit to that file.</P><DIV class="sidebar"><P class="title"><B>Where's $GlobalRev$?</B></P><P>New users are often confused by how the
        <CODE class="literal">$Rev$</CODE> keyword works.  Since the repository
        has a single, globally increasing revision number, many people
        assume that it is this number that is reflected by the
        <CODE class="literal">$Rev$</CODE> keyword's value.  But
        <CODE class="literal">$Rev$</CODE> expands to show the last revision in
        which the file <SPAN class="emphasis"><EM>changed</EM></SPAN>, not the last
        revision to which it was updated.  Understanding this clears
        the confusion, but frustration often remainsâwithout the
        support of a Subversion keyword to do so, how can you
        automatically get the global revision number into your
        files?</P><P>To do this, you need external processing.  Subversion
        ships with a tool called <SPAN class="command"><STRONG>svnversion</STRONG></SPAN>, which
        was designed for just this purpose.  It crawls your working
        copy and generates as output the revision(s) it finds.  You
        can use this program, plus some additional tooling, to embed
        that revision information into your files.  For more
        information on <SPAN class="command"><STRONG>svnversion</STRONG></SPAN>, see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnversion" title="svnversion">the section called âsvnversionâ</A>.</P></DIV><P>Subversion 1.2 introduced a new variant of the keyword
      syntax, which brought additional, usefulâthough perhaps
      atypicalâfunctionality.  You can now tell Subversion
      to maintain a fixed length (in terms of the number of bytes
      consumed) for the substituted keyword.  By using a
      double colon (<CODE class="literal">::</CODE>) after the keyword name,
      followed by a number of space characters, you define that
      fixed width.  When Subversion goes to substitute your
      keyword for the keyword and its value, it will essentially
      replace only those space characters, leaving the overall
      width of the keyword field unchanged.  If the substituted
      value is shorter than the defined field width, there will be
      extra padding characters (spaces) at the end of the
      substituted field; if it is too long, it is truncated with a
      special hash (<CODE class="literal">#</CODE>) character just before
      the final dollar sign terminator.</P><P>For example, say you have a document in which you have
      some section of tabular data reflecting the document's
      Subversion keywords.  Using the original Subversion keyword
      substitution syntax, your file might look something
      like:</P><PRE class="screen">$Rev$:     Revision of last commit
$Author$:  Author of last commit
$Date$:    Date of last commit
</PRE><P>Now, that looks nice and tabular at the start of things.
      But when you then commit that file (with keyword substitution
      enabled, of course), you see:</P><PRE class="screen">$Rev: 12 $:     Revision of last commit
$Author: harry $:  Author of last commit
$Date: 2006-03-15 02:33:03 -0500 (Wed, 15 Mar 2006) $:    Date of last commit
</PRE><P>The result is not so beautiful.  And you might be
      tempted to then adjust the file after the substitution so
      that it again looks tabular.  But that holds only as long as
      the keyword values are the same width.  If the last
      committed revision rolls into a new place value (say, from
      99 to 100), or if another person with a longer username
      commits the file, stuff gets all crooked again.  However, if
      you are using Subversion 1.2 or later, you can use the new
      fixed-length keyword syntax and define some field widths that
      seem sane, so your file might look like this:</P><PRE class="screen">$Rev::               $:  Revision of last commit
$Author::            $:  Author of last commit
$Date::              $:  Date of last commit
</PRE><P>You commit this change to your file.  This time,
      Subversion notices the new fixed-length keyword syntax and
      maintains the width of the fields as defined by the padding
      you placed between the double colon and the trailing dollar
      sign.  After substitution, the width of the fields is
      completely unchangedâthe short values for
      <CODE class="literal">Rev</CODE> and <CODE class="literal">Author</CODE> are
      padded with spaces, and the long <CODE class="literal">Date</CODE>
      field is truncated by a hash character:</P><PRE class="screen">$Rev:: 13            $:  Revision of last commit
$Author:: harry      $:  Author of last commit
$Date:: 2006-03-15 0#$:  Date of last commit
</PRE><P>The use of fixed-length keywords is especially handy
      when performing substitutions into complex file formats that
      themselves use fixed-length fields for data, or for which
      the stored size of a given data field is overbearingly
      difficult to modify from outside the format's native
      application (such as for Microsoft Office documents).</P><DIV class="warning" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Warning</H3><P>Be aware that because the width of a keyword field is
        measured in bytes, the potential for corruption of
        multibyte values exists.  For example, a username that
        contains some multibyte UTF-8 characters might suffer
        truncation in the middle of the string of bytes that make
        up one of those characters.  The result will be a mere
        truncation when viewed at the byte level, but will likely
        appear as a string with an incorrect or garbled final
        character when viewed as UTF-8 text.  It is conceivable
        that certain applications, when asked to load the file,
        would notice the broken UTF-8 text and deem the entire
        file corrupt, refusing to operate on the file
        altogether.  So, when limiting keywords to a fixed size,
        choose a size that allows for this type of byte-wise
        expansion.</P></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.advanced.sparsedirs"></A>Sparse Directories</H2></DIV></DIV></DIV><P>By default, most Subversion operations on directories act in
      a recursive manner.  For example, <SPAN class="command"><STRONG>svn
      checkout</STRONG></SPAN> creates a working copy with every file and
      directory in the specified area of the repository, descending
      recursively through the repository tree until the entire
      structure is copied to your local disk.  Subversion 1.5
      introduces a feature called <EM class="firstterm">sparse
      directories</EM> (or <EM class="firstterm">shallow
      checkouts</EM>) that allows you to easily check out a
      working copyâor a portion of a working copyâmore
      shallowly than full recursion, with the freedom to bring in
      previously ignored files and subdirectories at a later
      time.</P><P>For example, say we have a repository with a tree of files
      and directories with names of the members of a human family with
      pets.  (It's an odd example, to be sure, but bear with us.)  A
      regular <SPAN class="command"><STRONG>svn checkout</STRONG></SPAN> operation will give us a
      working copy of the whole tree:</P><PRE class="screen">$ svn checkout file:///var/svn/repos mom
A    mom/son
A    mom/son/grandson
A    mom/daughter
A    mom/daughter/granddaughter1
A    mom/daughter/granddaughter1/bunny1.txt
A    mom/daughter/granddaughter1/bunny2.txt
A    mom/daughter/granddaughter2
A    mom/daughter/fishie.txt
A    mom/kitty1.txt
A    mom/doggie1.txt
Checked out revision 1.
$
</PRE><P>Now, let's check out the same tree again, but this time
      we'll ask Subversion to give us only the topmost directory
      with none of its children at all:</P><PRE class="screen">$ svn checkout file:///var/svn/repos mom-empty --depth empty
Checked out revision 1
$
</PRE><P>Notice that we added to our original <SPAN class="command"><STRONG>svn
      checkout</STRONG></SPAN> command line a new <CODE class="option">--depth</CODE>
      option.  This option is present on many of Subversion's
      subcommands and is similar to the
      <CODE class="option">--non-recursive</CODE> (<CODE class="option">-N</CODE>) and
      <CODE class="option">--recursive</CODE> (<CODE class="option">-R</CODE>) options.  In
      fact, it combines, improves upon, supercedes, and ultimately
      obsoletes these two older options.  For starters, it expands the
      supported degrees of depth specification available to users,
      adding some previously unsupported (or inconsistently supported)
      depths.  Here are the depth values that you can request for a
      given Subversion operation:</P><DIV class="variablelist"><DL><DT><SPAN class="term"><CODE class="literal">--depth empty</CODE></SPAN></DT><DD><P>Include only the immediate target of the operation,
            not any of its file or directory children.</P></DD><DT><SPAN class="term"><CODE class="literal">--depth files</CODE></SPAN></DT><DD><P>Include the immediate target of the operation and any
            of its immediate file children.</P></DD><DT><SPAN class="term"><CODE class="literal">--depth immediates</CODE></SPAN></DT><DD><P>Include the immediate target of the operation and any
            of its immediate file or directory children.  The directory
            children will themselves be empty.</P></DD><DT><SPAN class="term"><CODE class="literal">--depth infinity</CODE></SPAN></DT><DD><P>Include the immediate target, its file and directory
            children, its children's children, and so on to full
            recursion.</P></DD></DL></DIV><P>Of course, merely combining two existing options into one
      hardly constitutes a new feature worthy of a whole section in
      our book.  Fortunately, there is more to this story.  This idea
      of depth extends not just to the operations you perform with
      your Subversion client, but also as a description of a working
      copy citizen's <EM class="firstterm">ambient depth</EM>, which is
      the depth persistently recorded by the working copy for that
      item.  Its key strength is this very persistenceâthe fact
      that it is <EM class="firstterm">sticky</EM>.  The working copy
      remembers the depth you've selected for each item in it until
      you later change that depth selection; by default, Subversion
      commands operate on the working copy citizens present,
      regardless of their selected depth settings.</P><DIV class="tip" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Tip</H3><P>You can check the recorded ambient depth of a working copy
        using the <SPAN class="command"><STRONG>svn info</STRONG></SPAN> command.  If the ambient
        depth is anything other than infinite recursion, <SPAN class="command"><STRONG>svn
        info</STRONG></SPAN> will display a line describing that depth
        value:</P><PRE class="screen">$ svn info mom-immediates | grep '^Depth:'
Depth: immediates
$
</PRE></DIV><P>Our previous examples demonstrated checkouts of infinite
      depth (the default for <SPAN class="command"><STRONG>svn checkout</STRONG></SPAN>) and
      empty depth.  Let's look now at examples of the other depth
      values:</P><PRE class="screen">$ svn checkout file:///var/svn/repos mom-files --depth files
A    mom-files/kitty1.txt
A    mom-files/doggie1.txt
Checked out revision 1.
$ svn checkout file:///var/svn/repos mom-immediates --depth immediates
A    mom-immediates/son
A    mom-immediates/daughter
A    mom-immediates/kitty1.txt
A    mom-immediates/doggie1.txt
Checked out revision 1.
$
</PRE><P>As described, each of these depths is something more than
      only the target, but something less than full recursion.</P><P>We've used <SPAN class="command"><STRONG>svn checkout</STRONG></SPAN> as an example
      here, but you'll find the <CODE class="option">--depth</CODE> option
      present on many other Subversion commands, too.  In those other
      commands, depth specification is a way to limit the scope of an
      operation to some depth, much like the way the older
      <CODE class="option">--non-recursive</CODE> (<CODE class="option">-N</CODE>) and
      <CODE class="option">--recursive</CODE> (<CODE class="option">-R</CODE>) options
      behave.  This means that when operating on a working copy of
      some depth, while requesting an operation of a shallower depth,
      the operation is limited to that shallower depth.  In fact, we
      can make an even more general statement: given a working copy of
      any arbitraryâeven mixedâambient depth, and a
      Subversion command with some requested operational depth, the
      command will maintain the ambient depth of the working copy
      members while still limiting the scope of the operation to the
      requested (or default) operational depth.</P><P>In addition to the <CODE class="option">--depth</CODE> option, the
      <SPAN class="command"><STRONG>svn update</STRONG></SPAN> and <SPAN class="command"><STRONG>svn switch</STRONG></SPAN>
      subcommands also accept a second depth-related option:
      <CODE class="option">--set-depth</CODE>.  It is with this option that you
      can change the sticky depth of a working copy item.  Watch what
      happens as we take our empty-depth checkout and gradually
      telescope it deeper using <STRONG class="userinput"><CODE>svn update
      --set-depth <EM class="replaceable"><CODE>NEW-DEPTH</CODE></EM> <EM class="replaceable"><CODE>TARGET</CODE></EM></CODE></STRONG>:</P><PRE class="screen">$ svn update --set-depth files mom-empty
A    mom-empty/kittie1.txt
A    mom-empty/doggie1.txt
Updated to revision 1.
$ svn update --set-depth immediates mom-empty
A    mom-empty/son
A    mom-empty/daughter
Updated to revision 1.
$ svn update --set-depth infinity mom-empty
A    mom-empty/son/grandson
A    mom-empty/daughter/granddaughter1
A    mom-empty/daughter/granddaughter1/bunny1.txt
A    mom-empty/daughter/granddaughter1/bunny2.txt
A    mom-empty/daughter/granddaughter2
A    mom-empty/daughter/fishie1.txt
Updated to revision 1.
$
</PRE><P>As we gradually increased our depth selection, the
      repository gave us more pieces of our tree.</P><P>In our example, we operated only on the root of our working
      copy, changing its ambient depth value.  But we can
      independently change the ambient depth value of
      <SPAN class="emphasis"><EM>any</EM></SPAN> subdirectory inside the working copy,
      too.  Careful use of this ability allows us to flesh out only
      certain portions of the working copy tree, leaving other
      portions absent altogether (hence the â<SPAN class="quote">sparse</SPAN>â bit
      of the feature's name).  Here's an example of how we might build
      out a portion of one branch of our family's tree, enable full
      recursion on another branch, and keep still other pieces pruned
      (absent from disk).</P><PRE class="screen">$ rm -rf mom-empty
$ svn checkout file:///var/svn/repos mom-empty --depth empty
Checked out revision 1.
$ svn update --set-depth empty mom-empty/son
A    mom-empty/son
Updated to revision 1.
$ svn update --set-depth empty mom-empty/daughter
A    mom-empty/daughter
Updated to revision 1.
$ svn update --set-depth infinity mom-empty/daughter/granddaughter1
A    mom-empty/daughter/granddaughter1
A    mom-empty/daughter/granddaughter1/bunny1.txt
A    mom-empty/daughter/granddaughter1/bunny2.txt
Updated to revision 1.
$
</PRE><P>Fortunately, having a complex collection of ambient depths
      in a single working copy doesn't complicate the way you interact
      with that working copy.  You can still make, revert, display,
      and commit local modifications in your working copy without
      providing any new options (including <CODE class="option">--depth</CODE> and
      <CODE class="option">--set-depth</CODE>) to the relevant subcommands.  Even
      <SPAN class="command"><STRONG>svn update</STRONG></SPAN> works as it does elsewhere when no
      specific depth is providedâit updates the working copy
      targets that are present while honoring their sticky
      depths.</P><P>You might at this point be wondering, â<SPAN class="quote">So what?  When
      would I use this?</SPAN>â  One scenario where this feature
      finds utility is tied to a particular repository layout,
      specifically where you have many related or codependent
      projects or software modules living as siblings in a single
      repository location (<CODE class="filename">trunk/project1</CODE>,
      <CODE class="filename">trunk/project2</CODE>,
      <CODE class="filename">trunk/project3</CODE>, etc.).  In such
      scenarios, it might be the case that you personally care 
      about only a handful of those projectsâmaybe some primary
      project and a few other modules on which it depends.  You can
      check out individual working copies of all of these things, but
      those working copies are disjoint and, as a result, it can be
      cumbersome to perform operations across several or all of them
      at the same time.  The alternative is to use the sparse
      directories feature, building out a single working copy that
      contains only the modules you care about.  You'd start with an
      empty-depth checkout of the common parent directory of the
      projects, and then update with infinite depth only the items you
      wish to have, like we demonstrated in the previous example.
      Think of it like an opt-in system for working copy
      citizens.</P><P>Subversion 1.5's implementation of shallow checkouts is
      good but does not support a couple of interesting behaviors.
      First, you cannot de-telescope a working copy item.  Running
      <STRONG class="userinput"><CODE>svn update --set-depth empty</CODE></STRONG> in an
      infinite-depth working copy will not have the effect of
      discarding everything but the topmost directoryâit will
      simply error out.  Second, there is no depth value to indicate
      that you wish an item to be explicitly excluded.  You have to do
      implicit exclusion of an item by including everything
      else.</P></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.advanced.locking"></A>Locking</H2></DIV></DIV></DIV><P>Subversion's copy-modify-merge version control model lives
      and dies on its data merging algorithmsâspecifically on
      how well those algorithms perform when trying to resolve
      conflicts caused by multiple users modifying the same file
      concurrently.  Subversion itself provides only one such
      algorithm:  a three-way differencing algorithm that is smart
      enough to handle data at a granularity of a single line of text.
      Subversion also allows you to supplement its content merge
      processing with external differencing utilities (as described in
      <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.externaldifftools.diff3" title="External diff3">the section called âExternal diff3â</A>), some
      of which may do an even better job, perhaps providing
      granularity of a word or a single character of text.  But common
      among those algorithms is that they generally work only on text
      files.  The landscape starts to look pretty grim when you start
      talking about content merges of nontextual file formats.  And
      when you can't find a tool that can handle that type of merging,
      you begin to run into problems with the copy-modify-merge
      model.</P><P>Let's look at a real-life example of where this model runs
      aground.  Harry and Sally are both graphic designers working on
      the same project, a bit of marketing collateral for an
      automobile mechanic.  Central to the design of a particular
      poster is an image of a car in need of some bodywork, stored in
      a file using the PNG image format.  The poster's layout is
      almost finished, and both Harry and Sally are pleased with the
      particular photo they chose for their damaged carâa baby
      blue 1967 Ford Mustang with an unfortunate bit of crumpling on
      the left front fender.</P><P>Now, as is common in graphic design work, there's a change
      in plans, which causes the car's color to be a concern.  So Sally
      updates her working copy to <CODE class="literal">HEAD</CODE>, fires up
      her photo-editing software, and sets about tweaking the image so
      that the car is now cherry red.  Meanwhile, Harry, feeling
      particularly inspired that day, decides that the image would
      have greater impact if the car also appears to have suffered
      greater impact.  He, too, updates to <CODE class="literal">HEAD</CODE>,
      and then draws some cracks on the vehicle's windshield.  He
      manages to finish his work before Sally finishes hers, and after
      admiring the fruits of his undeniable talent, he commits the
      modified image.  Shortly thereafter, Sally is finished with the
      car's new finish and tries to commit her changes.  But, as
      expected, Subversion fails the commit, informing Sally that
      her version of the image is now out of date.</P><P>Here's where the difficulty sets in.  If Harry and Sally
      were making changes to a text file, Sally would simply update
      her working copy, receiving Harry's changes in the process.  In
      the worst possible case, they would have modified the same
      region of the file, and Sally would have to work out by hand the
      proper resolution to the conflict.  But these aren't text
      filesâthey are binary images.  And while it's a simple
      matter to describe what one would expect the results of this
      content merge to be, there is precious little chance that any
      software exists that is smart enough to examine the common
      baseline image that each of these graphic artists worked
      against, the changes that Harry made, and the changes that Sally
      made, and then spit out an image of a busted-up red Mustang with
      a cracked windshield!</P><P>Of course, things would have gone more smoothly if Harry and
      Sally had serialized their modifications to the imageâif, say,
      Harry had waited to draw his windshield cracks on Sally's
      now-red car, or if Sally had tweaked the color of a car whose
      windshield was already cracked.  As is discussed in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.vsn-models.copy-merge" title="The Copy-Modify-Merge Solution">the section called âThe Copy-Modify-Merge Solutionâ</A>, most of these
      types of problems go away entirely where perfect communication
      between Harry and Sally exists.
      <SUP>[<A id="id509152" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id509152" class="footnote">14</A>]</SUP>
      But as one's version control system is, in fact, one form of
      communication, it follows that having that software facilitate
      the serialization of nonparallelizable editing efforts is no
      bad thing.  This is where Subversion's implementation of the
      lock-modify-unlock model steps into the spotlight.  This is
      where we talk about Subversion's <EM class="firstterm">locking</EM>
      feature, which is similar to the â<SPAN class="quote">reserved
      checkouts</SPAN>â mechanisms of other version control
      systems.</P><P>Subversion's locking feature exists ultimately to minimize
      wasted time and effort.  By allowing a user to programmatically
      claim the exclusive right to change a file in the repository,
      that user can be reasonably confident that any energy he invests
      on unmergeable changes won't be wastedâhis commit of those
      changes will succeed.  Also, because Subversion communicates to
      other users that serialization is in effect for a particular
      versioned object, those users can reasonably expect that the
      object is about to be changed by someone else.  They, too, can
      then avoid wasting their time and energy on unmergeable changes
      that won't be committable due to eventual
      out-of-dateness.</P><P>When referring to Subversion's locking feature, one is
      actually talking about a fairly diverse collection of behaviors,
      which include the ability to lock a versioned file
      <SUP>[<A id="id509186" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id509186" class="footnote">15</A>]</SUP>
      (claiming the exclusive right to modify the file), to unlock
      that file (yielding that exclusive right to modify), to see
      reports about which files are locked and by whom, to annotate
      files for which locking before editing is strongly advised, and
      so on.  In this section, we'll cover all of these facets of the
      larger locking feature.</P><DIV class="sidebar"><A id="svn.advanced.locking.meanings"></A><P class="title"><B>The Three Meanings of â<SPAN class="quote">Lock</SPAN>â</B></P><P>In this section, and almost everywhere in this book, the
        words â<SPAN class="quote">lock</SPAN>â and â<SPAN class="quote">locking</SPAN>â describe
        a mechanism for mutual exclusion between users to avoid
        clashing commits.  Unfortunately, there are two other sorts
        of â<SPAN class="quote">lock</SPAN>â with which Subversion, and therefore
        this book, sometimes needs to be concerned.</P><P>The second is <EM class="firstterm">working copy locks</EM>,
        used internally by Subversion to prevent clashes between
        multiple Subversion clients operating on the same working
        copy.  This is the sort of lock indicated by an
        <CODE class="computeroutput">L</CODE> in the third column of
        <SPAN class="command"><STRONG>svn status</STRONG></SPAN> output, and removed by the
        <SPAN class="command"><STRONG>svn cleanup</STRONG></SPAN> command, as described in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cleanup" title="Sometimes You Just Need to Clean Up">the section called âSometimes You Just Need to Clean Upâ</A>.</P><P>Third, there are <EM class="firstterm">database locks</EM>,
        used internally by the Berkeley DB backend to prevent clashes
        between multiple programs trying to access the database.  This
        is the sort of lock whose unwanted persistence after an error
        can cause a repository to be â<SPAN class="quote">wedged,</SPAN>â as
        described in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.recovery" title="Berkeley DB Recovery">the section called âBerkeley DB Recoveryâ</A>.</P><P>You can generally forget about these other kinds of locks
        until something goes wrong that requires you to care about
        them.  In this book, â<SPAN class="quote">lock</SPAN>â means the first sort
        unless the contrary is either clear from context or explicitly
        stated.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.advanced.locking.creation"></A>Creating Locks</H3></DIV></DIV></DIV><P>In the Subversion repository, a
        <EM class="firstterm">lock</EM> is a piece of metadata that
        grants exclusive access to one user to change a file.  This
        user is said to be the <EM class="firstterm">lock owner</EM>.
        Each lock also has a unique identifier, typically a long
        string of characters, known as the <EM class="firstterm">lock
        token</EM>.  The repository manages locks, ultimately
        handling their creation, enforcement, and removal.  If any
        commit transaction attempts to modify or delete a locked file
        (or delete one of the parent directories of the file), the
        repository will demand two pieces of informationâthat
        the client performing the commit be authenticated as the lock
        owner, and that the lock token has been provided as part of
        the commit process as a form of proof that the client knows which
        lock it is using.</P><P>To demonstrate lock creation, let's refer back to our
        example of multiple graphic designers working on the same
        binary image files.  Harry has decided to change a JPEG image.
        To prevent other people from committing changes to the file
        while he is modifying it (as well as alerting them that he is
        about to change it), he locks the file in the repository using
        the <SPAN class="command"><STRONG>svn lock</STRONG></SPAN> command.</P><PRE class="screen">$ svn lock banana.jpg -m "Editing file for tomorrow's release."
'banana.jpg' locked by user 'harry'.
$
</PRE><P>The preceding example demonstrates a number of new things.
        First, notice that Harry passed the
        <CODE class="option">--message</CODE> (<CODE class="option">-m</CODE>) option to
        <SPAN class="command"><STRONG>svn lock</STRONG></SPAN>.  Similar to <SPAN class="command"><STRONG>svn
        commit</STRONG></SPAN>, the <SPAN class="command"><STRONG>svn lock</STRONG></SPAN> command can
        take commentsâvia either <CODE class="option">--message</CODE>
        (<CODE class="option">-m</CODE>) or <CODE class="option">--file</CODE>
        (<CODE class="option">-F</CODE>)âto describe the reason for locking the
        file.  Unlike <SPAN class="command"><STRONG>svn commit</STRONG></SPAN>, however,
        <SPAN class="command"><STRONG>svn lock</STRONG></SPAN> will not demand a message by
        launching your preferred text editor.  Lock comments are
        optional, but still recommended to aid communication.</P><P>Second, the lock attempt succeeded.  This means that the
        file wasn't already locked, and that Harry had the latest
        version of the file.  If Harry's working copy of the file had
        been out of date, the repository would have rejected the
        request, forcing Harry to <SPAN class="command"><STRONG>svn update</STRONG></SPAN> and
        reattempt the locking command.  The locking command would also
        have failed if the file had already been locked by someone
        else.</P><P>As you can see, the <SPAN class="command"><STRONG>svn lock</STRONG></SPAN> command
        prints confirmation of the successful lock.  At this point,
        the fact that the file is locked becomes apparent in the
        output of the <SPAN class="command"><STRONG>svn status</STRONG></SPAN> and <SPAN class="command"><STRONG>svn
        info</STRONG></SPAN> reporting subcommands.</P><PRE class="screen">$ svn status
     K banana.jpg

$ svn info banana.jpg
Path: banana.jpg
Name: banana.jpg
URL: http://svn.example.com/repos/project/banana.jpg
Repository UUID: edb2f264-5ef2-0310-a47a-87b0ce17a8ec
Revision: 2198
Node Kind: file
Schedule: normal
Last Changed Author: frank
Last Changed Rev: 1950
Last Changed Date: 2006-03-15 12:43:04 -0600 (Wed, 15 Mar 2006)
Text Last Updated: 2006-06-08 19:23:07 -0500 (Thu, 08 Jun 2006)
Properties Last Updated: 2006-06-08 19:23:07 -0500 (Thu, 08 Jun 2006)
Checksum: 3b110d3b10638f5d1f4fe0f436a5a2a5
Lock Token: opaquelocktoken:0c0f600b-88f9-0310-9e48-355b44d4a58e
Lock Owner: harry
Lock Created: 2006-06-14 17:20:31 -0500 (Wed, 14 Jun 2006)
Lock Comment (1 line):
Editing file for tomorrow's release.

$
</PRE><P>The fact that the <SPAN class="command"><STRONG>svn info</STRONG></SPAN> command,
        which does not contact the repository when run against working
        copy paths, can display the lock token reveals an important
        piece of information about those tokens:  they are cached in
        the working copy.  The presence of the lock token is critical.
        It gives the working copy authorization to make use of the
        lock later on.  Also, the <SPAN class="command"><STRONG>svn status</STRONG></SPAN>
        command shows a <CODE class="literal">K</CODE> next to the file (short
        for locKed), indicating that the lock token is present.</P><DIV class="sidebar"><P class="title"><B>Regarding Lock Tokens</B></P><P>A lock token isn't an authentication token, so much as
          an <SPAN class="emphasis"><EM>authorization</EM></SPAN> token.  The token
          isn't a protected secret.  In fact, a lock's unique token is
          discoverable by anyone who runs <STRONG class="userinput"><CODE>svn info
          <EM class="replaceable"><CODE>URL</CODE></EM></CODE></STRONG>.  A lock token is special only when it lives
          inside a working copy.  It's proof that the lock was created
          in that particular working copy, and not somewhere else by
          some other client.  Merely authenticating as the lock owner
          isn't enough to prevent accidents.</P><P>For example, suppose you lock a file using a computer at
          your office, but leave work for the day before you finish
          your changes to that file.  It should not be possible to
          accidentally commit changes to that same file from your home
          computer later that evening simply because you've
          authenticated as the lock's owner.  In other words, the lock
          token prevents one piece of Subversion-related software from
          undermining the work of another.  (In our example, if you
          really need to change the file from an alternative working
          copy, you would need to <EM class="firstterm">break</EM> the lock and relock the
          file.)</P></DIV><P>Now that Harry has locked <CODE class="filename">banana.jpg</CODE>,
        Sally is unable to change or delete that file:</P><PRE class="screen">$ svn delete banana.jpg
D         banana.jpg
$ svn commit -m "Delete useless file."
Deleting       banana.jpg
svn: Commit failed (details follow):
svn: Server sent unexpected return value (423 Locked) in response to DELETE\
 request for '/repos/project/!svn/wrk/64bad3a9-96f9-0310-818a-df4224ddc35d/\
banana.jpg'
$
</PRE><P>But Harry, after touching up the banana's shade of yellow,
        is able to commit his changes to the file.  That's because he
        authenticates as the lock owner and also because his working
        copy holds the correct lock token:</P><PRE class="screen">$ svn status
M    K banana.jpg
$ svn commit -m "Make banana more yellow"
Sending        banana.jpg
Transmitting file data .
Committed revision 2201.
$ svn status
$
</PRE><P>Notice that after the commit is finished, <SPAN class="command"><STRONG>svn
        status</STRONG></SPAN> shows that the lock token is no longer
        present in the working copy.  This is the standard behavior of
        <SPAN class="command"><STRONG>svn commit</STRONG></SPAN>âit searches the working
        copy (or list of targets, if you provide such a list) for
        local modifications and sends all the lock tokens it
        encounters during this walk to the server as part of the
        commit transaction.  After the commit completes successfully,
        all of the repository locks that were mentioned are
        releasedâ<SPAN class="emphasis"><EM>even on files that weren't
        committed</EM></SPAN>.  This is meant to discourage users from
        being sloppy about locking or from holding locks for too long.
        If Harry haphazardly locks 30 files in a directory named
        <CODE class="filename">images</CODE> because he's unsure of which files
        he needs to change, yet changes only four of those files, when he
        runs <STRONG class="userinput"><CODE>svn commit images</CODE></STRONG>, the process will
        still release all 30 locks.</P><P>This behavior of automatically releasing locks can be
        overridden with the <CODE class="option">--no-unlock</CODE> option to
        <SPAN class="command"><STRONG>svn commit</STRONG></SPAN>.  This is best used for those
        times when you want to commit changes, but still plan to make
        more changes and thus need to retain existing locks.  You can
        also make this your default behavior by setting the
        <CODE class="literal">no-unlock</CODE> runtime configuration option (see
        <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.confarea" title="Runtime Configuration Area">the section called âRuntime Configuration Areaâ</A>).</P><P>Of course, locking a file doesn't oblige one to commit a
        change to it.  The lock can be released at any time with a
        simple <SPAN class="command"><STRONG>svn unlock</STRONG></SPAN> command:</P><PRE class="screen">$ svn unlock banana.c
'banana.c' unlocked.
</PRE></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.advanced.locking.discovery"></A>Discovering Locks</H3></DIV></DIV></DIV><P>When a commit fails due to someone else's locks, it's
        fairly easy to learn about them.  The easiest way is to run
        <STRONG class="userinput"><CODE>svn status --show-updates</CODE></STRONG>:</P><PRE class="screen">$ svn status -u
M              23   bar.c
M    O         32   raisin.jpg
       *       72   foo.h
Status against revision:     105
$
</PRE><P>In this example, Sally can see not only that her copy of
        <CODE class="filename">foo.h</CODE> is out of date, but also that one of the
        two modified files she plans to commit is locked in the
        repository.  The <CODE class="literal">O</CODE> symbol stands for
        â<SPAN class="quote">Other,</SPAN>â meaning that a lock exists on the file
        and was created by somebody else.  If she were to attempt a
        commit, the lock on <CODE class="filename">raisin.jpg</CODE> would
        prevent it.  Sally is left wondering who made the lock, when,
        and why.  Once again, <SPAN class="command"><STRONG>svn info</STRONG></SPAN> has the
        answers:</P><PRE class="screen">$ svn info http://svn.example.com/repos/project/raisin.jpg
Path: raisin.jpg
Name: raisin.jpg
URL: http://svn.example.com/repos/project/raisin.jpg
Repository UUID: edb2f264-5ef2-0310-a47a-87b0ce17a8ec
Revision: 105
Node Kind: file
Last Changed Author: sally
Last Changed Rev: 32
Last Changed Date: 2006-01-25 12:43:04 -0600 (Sun, 25 Jan 2006)
Lock Token: opaquelocktoken:fc2b4dee-98f9-0310-abf3-653ff3226e6b
Lock Owner: harry
Lock Created: 2006-02-16 13:29:18 -0500 (Thu, 16 Feb 2006)
Lock Comment (1 line):
Need to make a quick tweak to this image.
$
</PRE><P>Just as you can use <SPAN class="command"><STRONG>svn info</STRONG></SPAN> to examine
        objects in the working copy, you can also use it to examine
        objects in the repository.  If the main argument to
        <SPAN class="command"><STRONG>svn info</STRONG></SPAN> is a working copy path, then all
        of the working copy's cached information is displayed; any
        mention of a lock means that the working copy is holding a
        lock token (if a file is locked by another user or in another
        working copy, <SPAN class="command"><STRONG>svn info</STRONG></SPAN> on a working copy
        path will show no lock information at all).  If the main
        argument to <SPAN class="command"><STRONG>svn info</STRONG></SPAN> is a URL, the
        information reflects the latest version of an object in the
        repository, and any mention of a lock describes the current
        lock on the object.</P><P>So in this particular example, Sally can see that Harry
        locked the file on February 16 to â<SPAN class="quote">make a quick
        tweak.</SPAN>â  It being June, she suspects that he probably
        forgot all about the lock.  She might phone Harry to complain
        and ask him to release the lock.  If he's unavailable, she
        might try to forcibly break the lock herself or ask an
        administrator to do so.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.advanced.locking.break-steal"></A>Breaking and Stealing Locks</H3></DIV></DIV></DIV><P>A repository lock isn't sacredâin Subversion's
        default configuration state, locks can be released not only by
        the person who created them, but by anyone.  When somebody
        other than the original lock creator destroys a lock, we refer
        to this as <EM class="firstterm">breaking the lock</EM>.</P><P>From the administrator's chair, it's simple to break
        locks.  The <SPAN class="command"><STRONG>svnlook</STRONG></SPAN>
        and <SPAN class="command"><STRONG>svnadmin</STRONG></SPAN> programs have the ability to
        display and remove locks directly from the repository.  (For
        more information about these tools, see
        <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.tk" title="An Administrator&#39;s Toolkit">the section called âAn Administrator's Toolkitâ</A>.)</P><PRE class="screen">$ svnadmin lslocks /var/svn/repos
Path: /project2/images/banana.jpg
UUID Token: opaquelocktoken:c32b4d88-e8fb-2310-abb3-153ff1236923
Owner: frank
Created: 2006-06-15 13:29:18 -0500 (Thu, 15 Jun 2006)
Expires: 
Comment (1 line):
Still improving the yellow color.

Path: /project/raisin.jpg
UUID Token: opaquelocktoken:fc2b4dee-98f9-0310-abf3-653ff3226e6b
Owner: harry
Created: 2006-02-16 13:29:18 -0500 (Thu, 16 Feb 2006)
Expires: 
Comment (1 line):
Need to make a quick tweak to this image.

$ svnadmin rmlocks /var/svn/repos /project/raisin.jpg
Removed lock on '/project/raisin.jpg'.
$
</PRE><P>The more interesting option is to allow users to break
        each other's locks over the network.  To do this, Sally simply
        needs to pass the <CODE class="option">--force</CODE> to the <SPAN class="command"><STRONG>svn
        unlock</STRONG></SPAN> command:</P><PRE class="screen">$ svn status -u
M              23   bar.c
M    O         32   raisin.jpg
       *       72   foo.h
Status against revision:     105
$ svn unlock raisin.jpg
svn: 'raisin.jpg' is not locked in this working copy
$ svn info raisin.jpg | grep URL
URL: http://svn.example.com/repos/project/raisin.jpg
$ svn unlock http://svn.example.com/repos/project/raisin.jpg
svn: Unlock request failed: 403 Forbidden (http://svn.example.com)
$ svn unlock --force http://svn.example.com/repos/project/raisin.jpg
'raisin.jpg' unlocked.
$
</PRE><P>Now, Sally's initial attempt to unlock failed because she
        ran <SPAN class="command"><STRONG>svn unlock</STRONG></SPAN> directly on her working copy
        of the file, and no lock token was present.  To remove the
        lock directly from the repository, she needs to pass a URL
        to <SPAN class="command"><STRONG>svn unlock</STRONG></SPAN>.  Her first attempt to unlock
        the URL fails, because she can't authenticate as the lock
        owner (nor does she have the lock token).  But when she
        passes <CODE class="option">--force</CODE>, the authentication and
        authorization requirements are ignored, and the remote lock is
        broken.</P><P>Simply breaking a lock may not be enough.  In
        the running example, Sally may not only want to break Harry's
        long-forgotten lock, but relock the file for her own use.
        She can accomplish this by using <SPAN class="command"><STRONG>svn unlock</STRONG></SPAN>
        with <CODE class="option">--force</CODE> and then <SPAN class="command"><STRONG>svn lock</STRONG></SPAN>
        back-to-back, but there's a small chance that somebody else
        might lock the file between the two commands.  The simpler thing
        to do is to <EM class="firstterm">steal</EM> the lock, which involves
        breaking and relocking the file all in one atomic step.  To
        do this, Sally passes the <CODE class="option">--force</CODE> option
        to <SPAN class="command"><STRONG>svn lock</STRONG></SPAN>:</P><PRE class="screen">$ svn lock raisin.jpg
svn: Lock request failed: 423 Locked (http://svn.example.com)
$ svn lock --force raisin.jpg
'raisin.jpg' locked by user 'sally'.
$
</PRE><P>In any case, whether the lock is broken or stolen, Harry
        may be in for a surprise.  Harry's working copy still contains
        the original lock token, but that lock no longer exists.  The
        lock token is said to be <EM class="firstterm">defunct</EM>.  The
        lock represented by the lock token has either been broken (no
        longer in the repository) or stolen (replaced with a
        different lock).  Either way, Harry can see this by asking
        <SPAN class="command"><STRONG>svn status</STRONG></SPAN> to contact the
        repository:</P><PRE class="screen">$ svn status
     K raisin.jpg
$ svn status -u
     B         32   raisin.jpg
$ svn update
  B  raisin.jpg
$ svn status
$
</PRE><P>If the repository lock was broken, then <STRONG class="userinput"><CODE>svn
        status --show-updates</CODE></STRONG> displays a
        <CODE class="literal">B</CODE> (Broken) symbol next to the file.  If a
        new lock exists in place of the old one, then a
        <CODE class="literal">T</CODE> (sTolen) symbol is shown.  Finally,
        <SPAN class="command"><STRONG>svn update</STRONG></SPAN> notices any defunct lock tokens
        and removes them from the working copy.</P><DIV class="sidebar"><P class="title"><B>Locking Policies</B></P><P>Different systems have different notions of how strict a
          lock should be.  Some folks argue that locks must be
          strictly enforced at all costs, releasable only by the
          original creator or administrator.  They argue that if
          anyone can break a lock, chaos runs rampant and the
          whole point of locking is defeated.  The other side argues
          that locks are first and foremost a communication tool.  If
          users are constantly breaking each other's locks, it
          represents a cultural failure within the team and the
          problem falls outside the scope of software enforcement.</P><P>Subversion defaults to the â<SPAN class="quote">softer</SPAN>â
          approach, but still allows administrators to create stricter
          enforcement policies through the use of hook scripts.  In
          particular, the <CODE class="filename">pre-lock</CODE> and
          <CODE class="filename">pre-unlock</CODE> hooks allow administrators
          to decide when lock creation and lock releases are allowed
          to happen.  Depending on whether a lock already exists,
          these two hooks can decide whether to allow a certain user
          to break or steal a lock.  The
          <CODE class="filename">post-lock</CODE> and
          <CODE class="filename">post-unlock</CODE> hooks are also available,
          and can be used to send email after locking actions.  To
          learn more about repository hooks, see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.create.hooks" title="Implementing Repository Hooks">the section called âImplementing Repository Hooksâ</A>.</P></DIV></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.advanced.locking.lock-communication"></A>Lock Communication</H3></DIV></DIV></DIV><P>We've seen how <SPAN class="command"><STRONG>svn lock</STRONG></SPAN>
        and <SPAN class="command"><STRONG>svn unlock</STRONG></SPAN> can be used to create,
        release, break, and steal locks.  This satisfies the goal of
        serializing commit access to a file.  But what about the
        larger problem of preventing wasted time?</P><P>For example, suppose Harry locks an image file and then
        begins editing it.  Meanwhile, miles away, Sally wants to do
        the same thing.  She doesn't think to run <STRONG class="userinput"><CODE>svn status
        --show-updates</CODE></STRONG>, so she has no idea that Harry has
        already locked the file.  She spends hours editing the file,
        and when she tries to commit her change, she discovers that
        either the file is locked or that she's out of date.
        Regardless, her changes aren't mergeable with Harry's.  One of
        these two people has to throw away his or her work, and a lot of
        time has been wasted.</P><P>Subversion's solution to this problem is to provide a
        mechanism to remind users that a file ought to be locked
        <SPAN class="emphasis"><EM>before</EM></SPAN> the editing begins.  The mechanism
        is a special property:  <CODE class="literal">svn:needs-lock</CODE>.  If
        that property is attached to a file (regardless of its value,
        which is irrelevant), Subversion will try to use
        filesystem-level permissions to make the file read-onlyâunless,
        of course, the user has explicitly locked the file.
        When a lock token is present (as a result of using
        <SPAN class="command"><STRONG>svn lock</STRONG></SPAN>), the file becomes read/write.
        When the lock is released, the file becomes read-only
        again.</P><P>The theory, then, is that if the image file has this
        property attached, Sally would immediately notice
        something is strange when she opens the file for editing:
        many applications alert users immediately when a read-only
        file is opened for editing, and nearly all would
        prevent her from saving changes to the file.  This
        reminds her to lock the file before editing, whereby she
        discovers the preexisting lock:</P><PRE class="screen">$ /usr/local/bin/gimp raisin.jpg
gimp: error: file is read-only!
$ ls -l raisin.jpg
-r--r--r--   1 sally   sally   215589 Jun  8 19:23 raisin.jpg
$ svn lock raisin.jpg
svn: Lock request failed: 423 Locked (http://svn.example.com)
$ svn info http://svn.example.com/repos/project/raisin.jpg | grep Lock
Lock Token: opaquelocktoken:fc2b4dee-98f9-0310-abf3-653ff3226e6b
Lock Owner: harry
Lock Created: 2006-06-08 07:29:18 -0500 (Thu, 08 June 2006)
Lock Comment (1 line):
Making some tweaks.  Locking for the next two hours.
$
</PRE><DIV class="tip" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Tip</H3><P>Users and administrators alike are encouraged to attach
          the <CODE class="literal">svn:needs-lock</CODE> property to any file
          that cannot be contextually merged.  This is the primary
          technique for encouraging good locking habits and preventing
          wasted effort.</P></DIV><P>Note that this property is a communication tool that
        works independently from the locking system.  In other words,
        any file can be locked, whether or not this property is
        present.  And conversely, the presence of this property
        doesn't make the repository require a lock when
        committing.</P><P>Unfortunately, the system isn't flawless.  It's possible
        that even when a file has the property, the read-only reminder
        won't always work.  Sometimes applications misbehave and
        â<SPAN class="quote">hijack</SPAN>â the read-only file, silently allowing
        users to edit and save the file anyway.  There's not much that
        Subversion can do in this situationâat the end of the
        day, there's simply no substitution for good interpersonal
        communication.
        <SUP>[<A id="id510056" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id510056" class="footnote">16</A>]</SUP>
      </P></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.advanced.externals"></A>Externals Definitions</H2></DIV></DIV></DIV><P>Sometimes it is useful to construct a working copy that is
      made out of a number of different checkouts.  For example, you
      may want different subdirectories to come from different
      locations in a repository or perhaps from different
      repositories altogether.  You could certainly set up such a
      scenario by handâusing <SPAN class="command"><STRONG>svn checkout</STRONG></SPAN> to
      create the sort of nested working copy structure you are trying
      to achieve.  But if this layout is important for everyone who
      uses your repository, every other user will need to perform the
      same checkout operations that you did.</P><P>Fortunately, Subversion provides support for
      <EM class="firstterm">externals definitions</EM>.  An externals
      definition is a mapping of a local directory to the
      URLâand ideally a particular revisionâof a versioned
      directory.  In Subversion, you declare externals definitions in
      groups using the <CODE class="literal">svn:externals</CODE> property.  You
      can create or modify this property using <SPAN class="command"><STRONG>svn
      propset</STRONG></SPAN> or <SPAN class="command"><STRONG>svn propedit</STRONG></SPAN> (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.manip" title="Manipulating Properties">the section called âManipulating Propertiesâ</A>).  It can be set on any
      versioned directory, and its value describes both the external
      repository location and the client-side directory to which that
      location should be checked out.</P><P>The convenience of the <CODE class="literal">svn:externals</CODE>
      property is that once it is set on a versioned directory,
      everyone who checks out a working copy with that directory also
      gets the benefit of the externals definition.  In other words,
      once one person has made the effort to define the nested working
      copy structure, no one else has to botherâSubversion will,
      after checking out the original working copy, automatically also
      check out the external working copies.</P><DIV class="warning" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Warning</H3><P>The relative target subdirectories of externals
        definitions <SPAN class="emphasis"><EM>must not</EM></SPAN> already exist on
        your or other users' systemsâSubversion will create them
        when it checks out the external working copy.</P></DIV><P>You also get in the externals definition design all the
      regular benefits of Subversion properties.  The definitions are
      versioned.  If you need to change an externals definition, you
      can do so using the regular property modification subcommands.
      When you commit a change to the <CODE class="literal">svn:externals</CODE>
      property, Subversion will synchronize the checked-out items
      against the changed externals definition when you next run
      <STRONG class="userinput"><CODE>svn update</CODE></STRONG>.  The same thing will happen when
      others update their working copies and receive your changes to
      the externals definition.</P><DIV class="tip" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Tip</H3><P>Because the <CODE class="literal">svn:externals</CODE> property has
        a multiline value, we strongly recommend that you use
        <SPAN class="command"><STRONG>svn propedit</STRONG></SPAN> instead of <SPAN class="command"><STRONG>svn
        propset</STRONG></SPAN>.</P></DIV><P>Subversion releases prior to 1.5 honor an externals
      definition format that is a multiline table of subdirectories
      (relative to the versioned directory on which the property is
      set), optional revision flags, and fully qualified, absolute
      Subversion repository URLs.  An example of this might looks as
      follows:</P><PRE class="screen">$ svn propget svn:externals calc
third-party/sounds             http://svn.example.com/repos/sounds
third-party/skins -r148        http://svn.example.com/skinproj
third-party/skins/toolkit -r21 http://svn.example.com/skin-maker
</PRE><P>When someone checks out a working copy of the
      <CODE class="filename">calc</CODE> directory referred to in the previous
      example, Subversion also continues to check out the items found
      in its externals definition.</P><PRE class="screen">$ svn checkout http://svn.example.com/repos/calc
A  calc
A  calc/Makefile
A  calc/integer.c
A  calc/button.c
Checked out revision 148.

Fetching external item into calc/third-party/sounds
A  calc/third-party/sounds/ding.ogg
A  calc/third-party/sounds/dong.ogg
A  calc/third-party/sounds/clang.ogg
â¦
A  calc/third-party/sounds/bang.ogg
A  calc/third-party/sounds/twang.ogg
Checked out revision 14.

Fetching external item into calc/third-party/skins
â¦
</PRE><P>As of Subversion 1.5, though, a new format of the
      <CODE class="literal">svn:externals</CODE> property is supported.
      Externals definitions are still multiline, but the order and
      format of the various pieces of information have changed.  The
      new syntax more closely mimics the order of arguments you might
      pass to <SPAN class="command"><STRONG>svn checkout</STRONG></SPAN>: the optional revision
      flags come first, then the external Subversion repository URL,
      and finally the relative local subdirectory.  Notice, though,
      that this time we didn't say â<SPAN class="quote">fully qualified, absolute
      Subversion repository URLs.</SPAN>â That's because the new
      format supports relative URLs and URLs that carry peg revisions.
      The previous example of an externals definition might, in
      Subversion 1.5, look like the following:</P><PRE class="screen">$ svn propget svn:externals calc
      http://svn.example.com/repos/sounds third-party/sounds
-r148 http://svn.example.com/skinproj third-party/skins
-r21  http://svn.example.com/skin-maker third-party/skins/toolkit
</PRE><P>Or, making use of the peg revision syntax (which we describe
      in detail in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.pegrevs" title="Peg and Operative Revisions">the section called âPeg and Operative Revisionsâ</A>), it might
      appear as:</P><PRE class="screen">$ svn propget svn:externals calc
http://svn.example.com/repos/sounds third-party/sounds
http://svn.example.com/skinproj@148 third-party/skins
http://svn.example.com/skin-maker@21 third-party/skins/toolkit
</PRE><DIV class="tip" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Tip</H3><P>You should seriously consider using explicit revision
        numbers in all of your externals definitions.  Doing so means
        that you get to decide when to pull down a different snapshot
        of external information, and exactly which snapshot to pull.
        Besides avoiding the surprise of getting changes to
        third-party repositories that you might not have any control
        over, using explicit revision numbers also means that as you
        backdate your working copy to a previous revision, your
        externals definitions will also revert to the way they looked
        in that previous revision, which in turn means that the
        external working copies will be updated to match the way
        <SPAN class="emphasis"><EM>they</EM></SPAN> looked back when your repository was
        at that previous revision.  For software projects, this could
        be the difference between a successful and a failed build of
        an older snapshot of your complex codebase.</P></DIV><P>For most repositories, these three ways of formatting the
      externals definitions have the same ultimate effect.  They all
      bring the same benefits.  Unfortunately, they all bring the same
      annoyances, too.  Since the definitions shown use absolute URLs,
      moving or copying a directory to which they are attached will
      not affect what gets checked out as an external (though the
      relative local target subdirectory will, of course, move with the
      renamed directory).  This can be confusingâeven
      frustratingâin certain situations.  For example, say you
      have a top-level directory named
      <CODE class="filename">my-project</CODE>, and you've created an externals
      definition on one of its subdirectories
      (<CODE class="filename">my-project/some-dir</CODE>) that tracks the
      latest revision of another of its subdirectories
      (<CODE class="filename">my-project/external-dir</CODE>).</P><PRE class="screen">$ svn checkout http://svn.example.com/projects .
A    my-project
A    my-project/some-dir
A    my-project/external-dir
â¦
Fetching external item into 'my-project/some-dir/subdir'
Checked out external at revision 11.

Checked out revision 11.
$ svn propget svn:externals my-project/some-dir
subdir http://svn.example.com/projects/my-project/external-dir

$
</PRE><P>Now you use <SPAN class="command"><STRONG>svn move</STRONG></SPAN> to rename the
      <CODE class="filename">my-project</CODE> directory.  At this point, your
      externals definition will still refer to a path under the
      <CODE class="filename">my-project</CODE> directory, even though that
      directory no longer exists.</P><PRE class="screen">$ svn move -q my-project renamed-project
$ svn commit -m "Rename my-project to renamed-project."
Deleting       my-project
Adding         renamed-project

Committed revision 12.
$ svn update

Fetching external item into 'renamed-project/some-dir/subdir'
svn: Target path does not exist
$
</PRE><P>Also, absolute URLs can cause problems with repositories
      that are available via multiple URL schemes.  For example, if
      your Subversion server is configured to allow everyone to check
      out the repository over <CODE class="literal">http://</CODE> or
      <CODE class="literal">https://</CODE>, but only allow commits to come in
      via <CODE class="literal">https://</CODE>, you have an interesting problem
      on your hands.  If your externals definitions use the
      <CODE class="literal">http://</CODE> form of the repository URLs, you
      won't be able to commit anything from the working copies created
      by those externals.  On the other hand, if they use the
      <CODE class="literal">https://</CODE> form of the URLs, anyone who might
      be checking out via <CODE class="literal">http://</CODE> because his
      client doesn't support <CODE class="literal">https://</CODE> will be
      unable to fetch the external items.  Be aware, too, that if you
      need to reparent your working copy (using <SPAN class="command"><STRONG>svn switch</STRONG></SPAN>
      with the <CODE class="option">--relocate</CODE> option), externals definitions will
      <SPAN class="emphasis"><EM>not</EM></SPAN> also be reparented.</P><P>Subversion 1.5 takes a huge step in relieving these
     frustrations.  As mentioned earlier, the URLs used in the new
     externals definition format can be relative, and Subversion
     provides syntax magic for specifying multiple flavors of URL
     relativity.</P><DIV class="variablelist"><DL><DT><SPAN class="term"><CODE class="literal">../</CODE></SPAN></DT><DD><P>Relative to the URL of the directory on which
          the <CODE class="literal">svn:externals</CODE> property is
          set</P></DD><DT><SPAN class="term"><CODE class="literal">^/</CODE></SPAN></DT><DD><P>Relative to the root of the repository in
          which the <CODE class="literal">svn:externals</CODE> property is
          versioned</P></DD><DT><SPAN class="term"><CODE class="literal">//</CODE></SPAN></DT><DD><P>Relative to the scheme of the URL of the
          directory on which the <CODE class="literal">svn:externals</CODE>
          property is set</P></DD><DT><SPAN class="term"><CODE class="literal">/</CODE></SPAN></DT><DD><P>Relative to the root URL of the server on
          which the <CODE class="literal">svn:externals</CODE> property is
          versioned</P></DD></DL></DIV><P>So, looking a fourth time at our previous externals
      definition example, and making use of the new absolute URL
      syntax in various ways, we might now see:</P><PRE class="screen">$ svn propget svn:externals calc
^/sounds third-party/sounds
/skinproj@148 third-party/skins
//svn.example.com/skin-maker@21 third-party/skins/toolkit
</PRE><P>The support that exists for externals definitions in
      Subversion remains less than ideal, though.  An externals
      definition can point only to directories, not to files.  Also, the
      local subdirectory part of the definition cannot contain
      <CODE class="literal">..</CODE> parent directory indicators (such as
      <CODE class="filename">../../skins/myskin</CODE>).  Perhaps most
      disappointingly, the working copies created via the externals
      definition support are still disconnected from the primary
      working copy (on whose versioned directories the
      <CODE class="literal">svn:externals</CODE> property was actually set).
      And Subversion still truly operates only on nondisjoint working
      copies.  So, for example, if you want to commit changes that
      you've made in one or more of those external working copies, you
      must run <SPAN class="command"><STRONG>svn commit</STRONG></SPAN> explicitly on those
      working copiesâcommitting on the primary working copy will
      not recurse into any external ones.</P><P>We've already mentioned some of the additional shortcomings
      of the old <CODE class="literal">svn:externals</CODE> format and how the
      new Subversion 1.5 format improves upon it.  But be careful when
      making use of the new format that you don't inadvertently cause
      problems for other folks accessing your repository who are using
      older Subversion clients.  While Subversion 1.5 clients will
      continue to recognize and support the original externals
      definition format, older clients will <SPAN class="emphasis"><EM>not</EM></SPAN>
      be able to correctly parse the new format.</P><P>Besides the <SPAN class="command"><STRONG>svn checkout</STRONG></SPAN>, <SPAN class="command"><STRONG>svn
      update</STRONG></SPAN>, <SPAN class="command"><STRONG>svn switch</STRONG></SPAN>, and
      <SPAN class="command"><STRONG>svn export</STRONG></SPAN> commands which actually manage the
      <EM class="firstterm">disjoint</EM> (or disconnected) subdirectories
      into which externals are checked out, the <SPAN class="command"><STRONG>svn
      status</STRONG></SPAN> command also recognizes externals definitions.
      It displays a status code of <CODE class="literal">X</CODE> for the
      disjoint external subdirectories, and then recurses into those
      subdirectories to display the status of the external items
      themselves.  You can pass the
      <CODE class="option">--ignore-externals</CODE> option to any of these
      subcommands to disable externals definition processing.</P></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.advanced.pegrevs"></A>Peg and Operative Revisions</H2></DIV></DIV></DIV><P>We copy, move, rename, and completely replace files and
      directories on our computers all the time.  And your version
      control system shouldn't get in the way of your doing these
      things with your version-controlled files and directories,
      either.  Subversion's file management support is quite
      liberating, affording almost as much flexibility for versioned
      files as you'd expect when manipulating your unversioned ones.
      But that flexibility means that across the lifetime of your
      repository, a given versioned object might have many paths, and
      a given path might represent several entirely different
      versioned objects.  This introduces a certain level of
      complexity to your interactions with those paths and
      objects.</P><P>Subversion is pretty smart about noticing when an object's
      version history includes such â<SPAN class="quote">changes of address.</SPAN>â
      For example, if you ask for the revision history log of a
      particular file that was renamed last week, Subversion happily
      provides all those logsâthe revision in which the rename
      itself happened, plus the logs of relevant revisions both before
      and after that rename.  So, most of the time, you don't even
      have to think about such things.  But occasionally, Subversion
      needs your help to clear up ambiguities.</P><P>The simplest example of this occurs when a directory or file
      is deleted from version control, and then a new directory or
      file is created with the same name and added to version control.
      The thing you deleted and the thing you later added aren't the
      same thing.  They merely happen to have had the same
      pathâ<CODE class="filename">/trunk/object</CODE>, for example.
      What, then, does it mean to ask Subversion about the history of
      <CODE class="filename">/trunk/object</CODE>?  Are you asking about the
      thing currently at that location, or the old thing you deleted
      from that location?  Are you asking about the operations that
      have happened to <SPAN class="emphasis"><EM>all</EM></SPAN> the objects that have
      ever lived at that path?  Subversion needs a hint about what you
      really want.</P><P>And thanks to moves, versioned object history can get far
      more twisted than even that.  For example, you might have a
      directory named <CODE class="filename">concept</CODE>, containing some
      nascent software project you've been toying with.  Eventually,
      though, that project matures to the point that the idea seems to
      actually have some wings, so you do the unthinkable and decide
      to give the project a name.
      <SUP>[<A id="id510777" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id510777" class="footnote">17</A>]</SUP>
      Let's say you called your software Frabnaggilywort.  At this
      point, it makes sense to rename the directory to reflect the
      project's new name, so <CODE class="filename">concept</CODE> is renamed
      to <CODE class="filename">frabnaggilywort</CODE>.  Life goes on,
      Frabnaggilywort releases a 1.0 version and is downloaded and
      used daily by hordes of people aiming to improve their
      lives.</P><P>It's a nice story, really, but it doesn't end there.
      Entrepreneur that you are, you've already got another think in
      the tank.  So you make a new directory,
      <CODE class="filename">concept</CODE>, and the cycle begins again.  In
      fact, the cycle begins again many times over the years, each
      time starting with that old <CODE class="filename">concept</CODE>
      directory, then sometimes seeing that directory renamed as the
      idea cures, sometimes seeing it deleted when you scrap the idea.
      Or, to get really sick, maybe you rename
      <CODE class="filename">concept</CODE> to something else for a while, but
      later rename the thing back to <CODE class="filename">concept</CODE> for
      some reason.</P><P>In scenarios like these, attempting to instruct
      Subversion to work with these reused paths can be a little like
      instructing a motorist in Chicago's West Suburbs to drive east
      down Roosevelt Road and turn left onto Main Street.  In a mere
      20 minutes, you can cross â<SPAN class="quote">Main Street</SPAN>â in
      Wheaton, Glen Ellyn, and Lombard.  And no, they aren't the same
      street.  Our motoristâand our Subversionâneed a
      little more detail to do the right thing.</P><P>In version 1.1, Subversion introduced a way for you to tell
      it exactly which Main Street you meant.  It's called the
      <EM class="firstterm">peg revision</EM>, and it is provided to
      Subversion for the sole purpose of identifying a unique line of
      history.  Because at most, one versioned object may occupy a path
      at any given timeâor, more precisely, in any one
      revisionâthe combination of a path and a peg revision is
      all that is needed to refer to a specific line of history.  Peg
      revisions are specified to the Subversion command-line client
      using <EM class="firstterm">at syntax</EM>, so called because the
      syntax involves appending an â<SPAN class="quote">at sign</SPAN>â
      (<CODE class="literal">@</CODE>) and the peg revision to the end of the
      path with which the revision is associated.</P><P>But what of the <CODE class="option">--revision</CODE>
      (<CODE class="option">-r</CODE>) of which we've spoken so much in this
      book?  That revision (or set of revisions) is called the
      <EM class="firstterm">operative revision</EM> (or
      <EM class="firstterm">operative revision range</EM>).  Once a
      particular line of history has been identified using a path and
      peg revision, Subversion performs the requested operation using
      the operative revision(s).  To map this to our Chicagoland
      streets analogy, if we are told to go to 606 N. Main Street in
      Wheaton,
      <SUP>[<A id="id510891" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id510891" class="footnote">18</A>]</SUP>
      we can think of â<SPAN class="quote">Main Street</SPAN>â as our path and
      â<SPAN class="quote">Wheaton</SPAN>â as our peg revision.  These two pieces of
      information identify a unique path that can be traveled (north or
      south on Main Street), and they keep us from traveling up and
      down the wrong Main Street in search of our destination.  Now we
      throw in â<SPAN class="quote">606 N.</SPAN>â as our operative revision of
      sorts, and we know <SPAN class="emphasis"><EM>exactly</EM></SPAN> where to
      go.</P><DIV class="sidebar"><P class="title"><B>The Peg Revision Algorithm</B></P><P>The Subversion command-line client performs the peg revision
        algorithm any time it needs to resolve possible ambiguities in
        the paths and revisions provided to it.  Here's an example of
        such an invocation:</P><PRE class="screen">$ svn <EM class="replaceable"><CODE>command</CODE></EM> -r <EM class="replaceable"><CODE>OPERATIVE-REV</CODE></EM> item@<EM class="replaceable"><CODE>PEG-REV</CODE></EM>
</PRE><P>If <EM class="replaceable"><CODE>OPERATIVE-REV</CODE></EM> is older than
        <EM class="replaceable"><CODE>PEG-REV</CODE></EM>, the algorithm is as
        follows:</P><DIV class="orderedlist"><OL type="1"><LI><P>Locate <EM class="replaceable"><CODE>item</CODE></EM> in the revision
            identified by <EM class="replaceable"><CODE>PEG-REV</CODE></EM>.  There
            can be only one such object.</P></LI><LI><P>Trace the object's history backwards (through any
            possible renames) to its ancestor in the revision
            <EM class="replaceable"><CODE>OPERATIVE-REV</CODE></EM>.</P></LI><LI><P>Perform the requested action on that ancestor,
            wherever it is located, or whatever its name might
            be or might have been at that time.</P></LI></OL></DIV><P>But what if <EM class="replaceable"><CODE>OPERATIVE-REV</CODE></EM> is
        <SPAN class="emphasis"><EM>younger</EM></SPAN> than
        <EM class="replaceable"><CODE>PEG-REV</CODE></EM>?  Well, that adds some
        complexity to the theoretical problem of locating the path in
        <EM class="replaceable"><CODE>OPERATIVE-REV</CODE></EM>, because the path's
        history could have forked multiple times (thanks to copy
        operations) between <EM class="replaceable"><CODE>PEG-REV</CODE></EM> and
        <EM class="replaceable"><CODE>OPERATIVE-REV</CODE></EM>.  And that's not
        allâSubversion doesn't store enough information to
        performantly trace an object's history forward, anyway.  So
        the algorithm is a little different:</P><DIV class="orderedlist"><OL type="1"><LI><P>Locate <EM class="replaceable"><CODE>item</CODE></EM> in the revision
            identified by <EM class="replaceable"><CODE>OPERATIVE-REV</CODE></EM>.  There
            can be only one such object.</P></LI><LI><P>Trace the object's history backward (through any
            possible renames) to its ancestor in the revision
            <EM class="replaceable"><CODE>PEG-REV</CODE></EM>.</P></LI><LI><P>Verify that the object's location (path-wise) in
            <EM class="replaceable"><CODE>PEG-REV</CODE></EM> is the same as it is in
            <EM class="replaceable"><CODE>OPERATIVE-REV</CODE></EM>.  If that's the
            case, at least the two locations are known to be
            directly related, so perform the requested action on the
            location in <EM class="replaceable"><CODE>OPERATIVE-REV</CODE></EM>.
            Otherwise, relatedness was not established, so error out
            with a loud complaint that no viable location was found.
            (Someday, we expect that Subversion will be able to handle
            this usage scenario with more flexibility and
            grace.)</P></LI></OL></DIV><P>Note that even when you don't explicitly supply a peg
        revision or operative revision, they are still present.  For
        your convenience, the default peg revision is
        <CODE class="literal">BASE</CODE> for working copy items and
        <CODE class="literal">HEAD</CODE> for repository URLs.  And when no
        operative revision is provided, it defaults to being the same
        revision as the peg revision.</P></DIV><P>Say that long ago we created our repository, and in revision 1
      we added our first <CODE class="filename">concept</CODE> directory, plus an
      <CODE class="filename">IDEA</CODE> file in that directory talking about
      the concept.  After several revisions in which real code was
      added and tweaked, we, in revision 20, renamed this directory to
      <CODE class="filename">frabnaggilywort</CODE>.  By revision 27, we had a
      new concept, a new <CODE class="filename">concept</CODE> directory to
      hold it, and a new <CODE class="filename">IDEA</CODE> file to describe
      it.  And then five years and thousands of revisions flew by,
      just like they would in any good romance story.</P><P>Now, years later, we wonder what the
      <CODE class="filename">IDEA</CODE> file looked like back in revision 1.
      But Subversion needs to know whether we are asking about how the
      <SPAN class="emphasis"><EM>current</EM></SPAN> file looked back in revision 1, or
      whether we are asking for the contents of whatever file lived at
      <CODE class="filename">concepts/IDEA</CODE> in revision 1.  Certainly
      those questions have different answers, and because of peg
      revisions, you can ask those questions.  To find out how the
      current <CODE class="filename">IDEA</CODE> file looked in that old
      revision, you run:</P><PRE class="screen">$ svn cat -r 1 concept/IDEA 
svn: Unable to find repository location for 'concept/IDEA' in revision 1
</PRE><P>Of course, in this example, the current
      <CODE class="filename">IDEA</CODE> file didn't exist yet in revision 1,
      so Subversion gives an error.  The previous command is shorthand
      for a longer notation which explicitly lists a peg revision.
      The expanded notation is:</P><PRE class="screen">$ svn cat -r 1 concept/IDEA@BASE
svn: Unable to find repository location for 'concept/IDEA' in revision 1
</PRE><P>And when executed, it has the expected results.</P><P>The perceptive reader is probably wondering at this point whether
      the peg revision syntax causes problems for working copy paths
      or URLs that actually have at signs in them.  After
      all, how does <SPAN class="command"><STRONG>svn</STRONG></SPAN> know whether
      <CODE class="literal">news@11</CODE> is the name of a directory in my
      tree or just a syntax for â<SPAN class="quote">revision 11 of
      <CODE class="filename">news</CODE></SPAN>â?  Thankfully, while
      <SPAN class="command"><STRONG>svn</STRONG></SPAN> will always assume the latter, there is a
      trivial workaround.  You need only append an at sign to the
      end of the path, such as <CODE class="literal">news@11@</CODE>.
      <SPAN class="command"><STRONG>svn</STRONG></SPAN> cares only about the last at sign in
      the argument, and it is not considered illegal to omit a literal
      peg revision specifier after that at sign.  This workaround
      even applies to paths that end in an at signâyou would
      use <CODE class="literal">filename@@</CODE> to talk about a file named
      <CODE class="filename">filename@</CODE>.</P><P>Let's ask the other question, thenâin revision 1, what
      were the contents of whatever file occupied the address
      <CODE class="filename">concepts/IDEA</CODE> at the time?  We'll use an
      explicit peg revision to help us out.</P><PRE class="screen">$ svn cat concept/IDEA@1
The idea behind this project is to come up with a piece of software
that can frab a naggily wort.  Frabbing naggily worts is tricky
business, and doing it incorrectly can have serious ramifications, so
we need to employ over-the-top input validation and data verification
mechanisms.
</PRE><P>Notice that we didn't provide an operative revision this
      time.  That's because when no operative revision is specified,
      Subversion assumes a default operative revision that's the same
      as the peg revision.</P><P>As you can see, the output from our operation appears to be
      correct.  The text even mentions frabbing naggily worts, so this
      is almost certainly the file that describes the software now
      called Frabnaggilywort.  In fact, we can verify this using the
      combination of an explicit peg revision and explicit operative
      revision.  We know that in <CODE class="literal">HEAD</CODE>, the
      Frabnaggilywort project is located in the
      <CODE class="filename">frabnaggilywort</CODE> directory.  So we specify
      that we want to see how the line of history identified in
      <CODE class="literal">HEAD</CODE> as the path
      <CODE class="filename">frabnaggilywort/IDEA</CODE> looked in revision
      1.</P><PRE class="screen">$ svn cat -r 1 frabnaggilywort/IDEA@HEAD
The idea behind this project is to come up with a piece of software
that can frab a naggily wort.  Frabbing naggily worts is tricky
business, and doing it incorrectly can have serious ramifications, so
we need to employ over-the-top input validation and data verification
mechanisms.
</PRE><P>And the peg and operative revisions need not be so trivial,
      either.  For example, say <CODE class="filename">frabnaggilywort</CODE>
      had been deleted from <CODE class="literal">HEAD</CODE>, but we know it
      existed in revision 20, and we want to see the diffs for its
      <CODE class="filename">IDEA</CODE> file between revisions 4 and 10.  We
      can use the peg revision 20 in conjunction with the URL that
      would have held Frabnaggilywort's <CODE class="filename">IDEA</CODE> file
      in revision 20, and then use 4 and 10 as our operative revision
      range.</P><PRE class="screen">$ svn diff -r 4:10 http://svn.red-bean.com/projects/frabnaggilywort/IDEA@20
Index: frabnaggilywort/IDEA
===================================================================
--- frabnaggilywort/IDEA	(revision 4)
+++ frabnaggilywort/IDEA	(revision 10)
@@ -1,5 +1,5 @@
-The idea behind this project is to come up with a piece of software
-that can frab a naggily wort.  Frabbing naggily worts is tricky
-business, and doing it incorrectly can have serious ramifications, so
-we need to employ over-the-top input validation and data verification
-mechanisms.
+The idea behind this project is to come up with a piece of
+client-server software that can remotely frab a naggily wort.
+Frabbing naggily worts is tricky business, and doing it incorrectly
+can have serious ramifications, so we need to employ over-the-top
+input validation and data verification mechanisms.
</PRE><P>Fortunately, most folks aren't faced with such complex
      situations.  But when you are, remember that peg revisions are
      that extra hint Subversion needs to clear up ambiguity.</P></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.advanced.changelists"></A>Changelists</H2></DIV></DIV></DIV><P>It is commonplace for a developer to find himself working at
      any given time on multiple different, distinct changes to a
      particular bit of source code.  This isn't necessarily due to
      poor planning or some form of digital masochism.  A software
      engineer often spots bugs in his peripheral vision while working
      on some nearby chunk of source code.  Or perhaps he's halfway
      through some large change when he realizes the solution he's
      working on is best committed as several smaller logical units.
      Often, these logical units aren't nicely contained in some
      module, safely separated from other changes.  The units might
      overlap, modifying different files in the same module, or even
      modifying different lines in the same file.</P><P>Developers can employ various work methodologies
      to keep these logical changes organized.  Some use
      separate working copies of the same repository to hold each
      individual change in progress.  Others might choose to create
      short-lived feature branches in the repository and use a single
      working copy that is constantly switched to point to one such
      branch or another.  Still others use <SPAN class="command"><STRONG>diff</STRONG></SPAN> and
      <SPAN class="command"><STRONG>patch</STRONG></SPAN> tools to back up and restore uncommitted
      changes to and from patch files associated with each change.
      Each of these methods has its pros and cons, and to a large
      degree, the details of the changes being made heavily influence
      the methodology used to distinguish them.</P><P>Subversion 1.5 brings a new
      <EM class="firstterm">changelists</EM> feature that adds yet
      another method to the mix.  Changelists are basically arbitrary
      labels (currently at most one per file) applied to working copy files for the express purpose of
      associating multiple files together.  Users of many of Google's
      software offerings are familiar with this concept already.  For
      example, <A class="ulink" href="http://mail.google.com/" target="_top">Gmail</A>
      doesn't provide the traditional folders-based email organization
      mechanism.  In Gmail, you apply arbitrary labels to emails, and
      multiple emails can be said to be part of the same group if they
      happen to share a particular label.  Viewing only a group of
      similarly labeled emails then becomes a simple user interface
      trick.  Many other Web 2.0 sites have similar
      mechanismsâconsider the â<SPAN class="quote">tags</SPAN>â used by sites
      such as <A class="ulink" href="http://www.youtube.com/" target="_top">YouTube</A> and
      <A class="ulink" href="http://www.flickr.com/" target="_top">Flickr</A>,
      â<SPAN class="quote">categories</SPAN>â applied to blog posts, and so on.
      Folks understand today that organization of data is critical,
      but that how that data is organized needs to be a flexible
      concept.  The old files-and-folders paradigm is too rigid for
      some applications.</P><P>Subversion's changelist support allows you to create
      changelists by applying labels to files you want to be
      associated with that changelist, remove those labels, and limit
      the scope of the files on which its subcommands operate to only
      those bearing a particular label.  In this section, we'll look
      in detail at how to do these things.</P><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.advanced.changelists.creating"></A>Creating and Modifying Changelists</H3></DIV></DIV></DIV><P>You can create, modify, and delete changelists using the
        <SPAN class="command"><STRONG>svn changelist</STRONG></SPAN> command.  More accurately,
        you use this command to set or unset the changelist
        association of a particular working copy file.  A changelist
        is effectively created the first time you label a file with
        that changelist; it is deleted when you remove that label from
        the last file that had it.  Let's examine a usage scenario
        that demonstrates these concepts.</P><P>Harry is fixing some bugs in the calculator application's
        mathematics logic.  His work leads him to change a couple of
        files:</P><PRE class="screen">$ svn status
M      integer.c
M      mathops.c
$
</PRE><P>While testing his bug fix, Harry notices that his changes
        bring to light a tangentially related bug in the user
        interface logic found in <CODE class="filename">button.c</CODE>.  Harry
        decides that he'll go ahead and fix that bug, too, as a
        separate commit from his math fixes.  Now, in a small working
        copy with only a handful of files and few logical changes,
        Harry can probably keep his two logical change groupings
        mentally organized without any problem.  But today he's going
        to use Subversion's changelists feature as a special favor to
        the authors of this book.</P><P>Harry first creates a changelist and associates with it
        the two files he's already changed.  He does this by using the
        <SPAN class="command"><STRONG>svn changelist</STRONG></SPAN> command to assign the same
        arbitrary changelist name to those files:</P><PRE class="screen">$ svn changelist math-fixes integer.c mathops.c
Path 'integer.c' is now a member of changelist 'math-fixes'.
Path 'mathops.c' is now a member of changelist 'math-fixes'.
$ svn status

--- Changelist 'math-fixes':
M      integer.c
M      mathops.c
$
</PRE><P>As you can see, the output of <SPAN class="command"><STRONG>svn
        status</STRONG></SPAN> reflects this new grouping.</P><P>Harry now sets off to fix the secondary UI problem.  Since
        he knows which file he'll be changing, he assigns that path to
        a changelist, too.  Unfortunately, Harry carelessly assigns this
        third file to the same changelist as the previous two files:</P><PRE class="screen">$ svn changelist math-fixes button.c
Path 'button.c' is now a member of changelist 'math-fixes'.
$ svn status

--- Changelist 'math-fixes':
       button.c
M      integer.c
M      mathops.c
$
</PRE><P>Fortunately, Harry catches his mistake.  At this point, he
        has two options.  He can remove the changelist association
        from <CODE class="filename">button.c</CODE>, and then assign a
        different changelist name:</P><PRE class="screen">$ svn changelist --remove button.c
Path 'button.c' is no longer a member of a changelist.
$ svn changelist ui-fix button.c
Path 'button.c' is now a member of changelist 'ui-fix'.
$
</PRE><P>Or, he can skip the removal and just assign a new
        changelist name.  In this case, Subversion will first warn
        Harry that <CODE class="filename">button.c</CODE> is being removed from
        the first changelist:</P><PRE class="screen">$ svn changelist ui-fix button.c
svn: warning: Removing 'button.c' from changelist 'math-fixes'.
Path 'button.c' is now a member of changelist 'ui-fix'.
$ svn status

--- Changelist 'ui-fix':
       button.c

--- Changelist 'math-fixes':
M      integer.c
M      mathops.c
$
</PRE><P>Harry now has two distinct changelists present in his
        working copy, and <SPAN class="command"><STRONG>svn status</STRONG></SPAN> will group its
        output according to these changelist determinations.  Notice
        that even though Harry hasn't yet modified
        <CODE class="filename">button.c</CODE>, it still shows up in the output
        of <SPAN class="command"><STRONG>svn status</STRONG></SPAN> as interesting because it has
        a changelist assignment.  Changelists can be added to and
        removed from files at any time, regardless of whether they
        contain local modifications.</P><P>Harry now fixes the user interface problem in
        <CODE class="filename">button.c</CODE>.</P><PRE class="screen">$ svn status

--- Changelist 'ui-fix':
M      button.c

--- Changelist 'math-fixes':
M      integer.c
M      mathops.c
$
</PRE></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.advanced.changelists.asfilters"></A>Changelists As Operation Filters</H3></DIV></DIV></DIV><P>The visual grouping that Harry sees in the output of
        <SPAN class="command"><STRONG>svn status</STRONG></SPAN> as shown in our previous section
        is nice, but not entirely useful.  The
        <SPAN class="command"><STRONG>status</STRONG></SPAN> command is but one of many
        operations that he might wish to perform on his working copy.
        Fortunately, many of Subversion's other operations understand
        how to operate on changelists via the use of the
        <CODE class="option">--changelist</CODE> option.</P><P>When provided with a <CODE class="option">--changelist</CODE> option,
        Subversion commands will limit the scope of their operation to
        only those files to which a particular changelist name is
        assigned.  If Harry now wants to see the actual changes he's
        made to the files in his <CODE class="literal">math-fixes</CODE>
        changelist, he <SPAN class="emphasis"><EM>could</EM></SPAN> explicitly list only
        the files that make up that changelist on the <SPAN class="command"><STRONG>svn
        diff</STRONG></SPAN> command line.</P><PRE class="screen">$ svn diff integer.c mathops.c
Index: integer.c
===================================================================
--- integer.c	(revision 1157)
+++ integer.c	(working copy)
â¦
Index: mathops.c
===================================================================
--- mathops.c	(revision 1157)
+++ mathops.c	(working copy)
â¦
$
</PRE><P>That works okay for a few files, but what if Harry's
        change touched 20 or 30 files?  That would be an annoyingly
        long list of explicitly named files.  Now that he's using
        changelists, though, Harry can avoid explicitly listing the
        set of files in his changelist from now on, and instead
        provide just the changelist name:</P><PRE class="screen">$ svn diff --changelist math-fixes
Index: integer.c
===================================================================
--- integer.c	(revision 1157)
+++ integer.c	(working copy)
â¦
Index: mathops.c
===================================================================
--- mathops.c	(revision 1157)
+++ mathops.c	(working copy)
â¦
$
</PRE><P>And when it's time to commit, Harry can again use the
        <CODE class="option">--changelist</CODE> option to limit the scope of the
        commit to files in a certain changelist.  He might commit his
        user interface fix by doing the following:</P><PRE class="screen">$ svn ci -m "Fix a UI bug found while working on math logic." \
      --changelist ui-fix
Sending        button.c
Transmitting file data .
Committed revision 1158.
$
</PRE><P>In fact, the <SPAN class="command"><STRONG>svn commit</STRONG></SPAN> command
        provides a second changelists-related option:
        <CODE class="option">--keep-changelists</CODE>.  Normally, changelist
        assignments are removed from files after they are committed.
        But if <CODE class="option">--keep-changelists</CODE> is provided,
        Subversion will leave the changelist assignment on the
        committed (and now unmodified) files.  In any case, committing
        files assigned to one changelist leaves other changelists
        undisturbed.</P><PRE class="screen">$ svn status

--- Changelist 'math-fixes':
M      integer.c
M      mathops.c
$
</PRE><DIV class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Note</H3><P>The <CODE class="option">--changelist</CODE> option acts only as a
          filter for Subversion command targets, and will not add
          targets to an operation.  For example, on a commit operation
          specified as <STRONG class="userinput"><CODE>svn commit /path/to/dir</CODE></STRONG>, the
          target is the directory <CODE class="filename">/path/to/dir</CODE>
          and its children (to infinite depth).  If you then add a
          changelist specifier to that command, only those files in
          and under <CODE class="filename">/path/to/dir</CODE> that are
          assigned that changelist name will be considered as targets
          of the commitâthe commit will not include files
          located elsewhere (such is in
          <CODE class="filename">/path/to/another-dir</CODE>), regardless of
          their changelist assignment, even if they are part of the
          same working copy as the operation's target(s).</P></DIV><P>Even the <SPAN class="command"><STRONG>svn changelist</STRONG></SPAN> command accepts
        the <CODE class="option">--changelist</CODE> option.  This allows you to
        quickly and easily rename or remove a changelist:</P><PRE class="screen">$ svn changelist math-bugs --changelist math-fixes --depth infinity .
svn: warning: Removing 'integer.c' from changelist 'math-fixes'.
Path 'integer.c' is now a member of changelist 'math-bugs'.
svn: warning: Removing 'mathops.c' from changelist 'math-fixes'.
Path 'mathops.c' is now a member of changelist 'math-bugs'.
$ svn changelist --remove --changelist math-bugs --depth infinity .
Path 'integer.c' is no longer a member of a changelist.
Path 'mathops.c' is no longer a member of a changelist.
$
</PRE><P>Finally, you can specify multiple instances of the
        <CODE class="option">--changelist</CODE> option on a single command
        line.  Doing so limits the operation you are performing to
        files found in any of the specified changesets.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.advanced.changelists.limitations"></A>Changelist Limitations</H3></DIV></DIV></DIV><P>Subversion's changelist feature is a handy tool for
        grouping working copy files, but it does have a few limitations.
        Changelists are artifacts of a particular working copy, which
        means that changelist assignments cannot be propagated to the
        repository or otherwise shared with other users.  Changelists
        can be assigned only to filesâSubversion doesn't
        currently support the use of changelists with directories.
        Finally, you can have at most one changelist assignment on a
        given working copy file.  Here is where the blog post category
        and photo service tag analogies break downâif you find
        yourself needing to assign a file to multiple changelists,
        you're out of luck.</P></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.serverconfig.netmodel"></A>Network Model</H2></DIV></DIV></DIV><P>At some point, you're going to need to understand how your
      Subversion client communicates with its server.  Subversion's
      networking layer is abstracted, meaning that Subversion clients
      exhibit the same general behaviors no matter what sort of server
      they are operating against.  Whether speaking the HTTP protocol
      (<CODE class="literal">http://</CODE>) with the Apache HTTP Server or
      speaking the custom Subversion protocol
      (<CODE class="literal">svn://</CODE>) with <SPAN class="command"><STRONG>svnserve</STRONG></SPAN>,
      the basic network model is the same.  In this section, we'll
      explain the basics of that network model, including how
      Subversion manages authentication and authorization
      matters.</P><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.serverconfig.netmodel.reqresp"></A>Requests and Responses</H3></DIV></DIV></DIV><P>The Subversion client spends most of its time managing
        working copies.  When it needs information from a remote
        repository, however, it makes a network request, and the
        server responds with an appropriate answer.  The details of
        the network protocol are hidden from the userâthe client
        attempts to access a URL, and depending on the URL scheme, a
        particular protocol is used to contact the server (see the sidebar <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.in-action.wc.sb-1" title="Repository URLs">Repository URLs</A>).</P><DIV class="tip" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Tip</H3><P>Run <STRONG class="userinput"><CODE>svn --version</CODE></STRONG> to see
        which URL schemes and protocols the client knows how to
        use.</P></DIV><P>When the server process receives a client request, it
        often demands that the client identify itself.  It issues
        an authentication challenge to the client, and the client
        responds by providing <EM class="firstterm">credentials</EM> back
        to the server.  Once authentication is complete, the server
        responds with the original information that the client asked for.
        Notice that this system is different from systems such as CVS,
        where the client preemptively offers credentials (â<SPAN class="quote">logs
        in</SPAN>â) to the server before ever making a request.  In
        Subversion, the server â<SPAN class="quote">pulls</SPAN>â credentials by
        challenging the client at the appropriate moment, rather than
        the client â<SPAN class="quote">pushing</SPAN>â them.  This makes certain
        operations more elegant.  For example, if a server is
        configured to allow anyone in the world to read a repository,
        the server will never issue an authentication challenge
        when a client attempts to <SPAN class="command"><STRONG>svn checkout</STRONG></SPAN>.</P><P>If the particular network requests issued by the client
        result in a new revision being created in the repository
        (e.g., <SPAN class="command"><STRONG>svn commit</STRONG></SPAN>), Subversion uses the
        authenticated username associated with those requests as the
        author of the revision.  That is, the authenticated user's
        name is stored as the value of the
        <CODE class="literal">svn:author</CODE> property on the new revision
        (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.properties" title="Subversion Properties">the section called âSubversion Propertiesâ</A>).  If
        the client was not authenticated (i.e., if the server
        never issued an authentication challenge), the revision's
        <CODE class="literal">svn:author</CODE> property is empty.
      </P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.serverconfig.netmodel.credcache"></A>Client Credentials Caching</H3></DIV></DIV></DIV><P>Many servers are configured to require authentication on
        every request.  This would be a big annoyance to users if
        they were forced to type their passwords over and over again.
        Fortunately, the Subversion client has a remedy for
        thisâa built-in system for caching authentication
        credentials on disk.  By default, whenever the command-line
        client successfully responds to a server's authentication
        challenge, it saves the credentials in the user's private
        runtime configuration area
        (<CODE class="filename">~/.subversion/auth/</CODE> on Unix-like systems
        or <CODE class="filename">%APPDATA%/Subversion/auth/</CODE> on Windows;
        see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.confarea" title="Runtime Configuration Area">the section called âRuntime Configuration Areaâ</A> for more details
        about the runtime configuration system).  Successful
        credentials are cached on disk and keyed on a combination of the
        server's hostname, port, and authentication realm.</P><P>When the client receives an authentication challenge, it
        first looks for the appropriate credentials in the user's disk
        cache.  If seemingly suitable credentials are not present, or
        if the cached credentials ultimately fail to authenticate,
        the client will, by default, fall back to prompting the
        user for the necessary information.</P><P>The security-conscious reader will suspect immediately
        that there is reason for concern here.  â<SPAN class="quote">Caching
        passwords on disk?  That's terrible!  You should never do
        that!</SPAN>â</P><P>The Subversion developers recognize the legitimacy of such
        concerns, and so Subversion works with available mechanisms
        provided by the operating system and environment to try to
        minimize the risk of leaking this information.  Here's a
        breakdown of what this means for users on the most common
        platforms:</P><DIV class="itemizedlist"><UL type="disc"><LI><P>On Windows 2000 and later, the Subversion client uses
            standard Windows cryptography services to encrypt the
            password on disk.  Because the encryption key is managed
            by Windows and is tied to the user's own login
            credentials, only the user can decrypt the cached
            password.  (Note that if the user's Windows account password
            is reset by an administrator, all of the cached passwords
            become undecipherable.  The Subversion client will behave
            as though they don't exist, prompting for passwords when
            required.)</P></LI><LI><P>Similarly, on Mac OS X, the Subversion client stores
            all repository passwords in the login keyring (managed by
            the Keychain service), which is protected by the user's
            account password.  User preference settings can impose
            additional policies, such as requiring that the user's account
            password be entered each time the Subversion password is
            used.</P></LI><LI><P>For other Unix-like operating systems, no standard
            â<SPAN class="quote">keychain</SPAN>â services exist.  However,
            the <CODE class="filename">auth/</CODE> caching area is still
            permission-protected so that only the user (owner) can
            read data from it, not the world at large.  The operating
            system's own file permissions protect the passwords.</P></LI></UL></DIV><P>Of course, for the truly paranoid, none of these
        mechanisms meets the test of perfection.  So for those folks
        willing to sacrifice convenience for the ultimate in security,
        Subversion provides various ways of disabling its credentials
        caching system altogether.</P><P>To disable caching for a single command, pass the
        <CODE class="option">--no-auth-cache</CODE> option:</P><PRE class="screen">$ svn commit -F log_msg.txt --no-auth-cache
Authentication realm: &lt;svn://host.example.com:3690&gt; example realm
Username:  joe
Password for 'joe':

Adding         newfile
Transmitting file data .
Committed revision 2324.

# password was not cached, so a second commit still prompts us

$ svn delete newfile
$ svn commit -F new_msg.txt
Authentication realm: &lt;svn://host.example.com:3690&gt; example realm
Username:  joe
â¦
</PRE><P>Or, if you want to disable credential caching permanently,
        you can edit the <CODE class="filename">config</CODE> file in your
        runtime configuration area and set the
        <CODE class="option">store-auth-creds</CODE> option to
        <CODE class="literal">no</CODE>.  This will prevent the storing of
        credentials used in any Subversion interactions you perform on
        the affected computer.  This can be extended to cover all
        users on the computer, too, by modifying the system-wide
        runtime configuration area (described in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.confarea.layout" title="Configuration Area Layout">the section called âConfiguration Area Layoutâ</A>).</P><PRE class="screen">[auth]
store-auth-creds = no
</PRE><P>Sometimes users will want to remove specific credentials
        from the disk cache.  To do this, you need to navigate into
        the <CODE class="filename">auth/</CODE> area and manually delete the
        appropriate cache file.  Credentials are cached in individual
        files;  if you look inside each file, you will see keys and
        values.  The <CODE class="literal">svn:realmstring</CODE> key describes
        the particular server realm that the file is associated
        with:</P><PRE class="screen">$ ls ~/.subversion/auth/svn.simple/
5671adf2865e267db74f09ba6f872c28
3893ed123b39500bca8a0b382839198e
5c3c22968347b390f349ff340196ed39

$ cat ~/.subversion/auth/svn.simple/5671adf2865e267db74f09ba6f872c28

K 8
username
V 3
joe
K 8
password
V 4
blah
K 15
svn:realmstring
V 45
&lt;https://svn.domain.com:443&gt; Joe's repository
END
</PRE><P>Once you have located the proper cache file, just delete
        it.</P><P>One last word about <SPAN class="command"><STRONG>svn</STRONG></SPAN>'s
        authentication behavior, specifically regarding the
        <CODE class="option">--username</CODE> and <CODE class="option">--password</CODE>
        options.  Many client subcommands accept these options, but it
        is important to understand that using these options does
        <SPAN class="emphasis"><EM>not</EM></SPAN> automatically send credentials to the
        server.  As discussed earlier, the server â<SPAN class="quote">pulls</SPAN>â
        credentials from the client when it deems necessary; the
        client cannot â<SPAN class="quote">push</SPAN>â them at will.  If a username
        and/or password are passed as options, they will be
        presented to the server only if the server requests them.  These
        options are typically used to authenticate as a different user
        than Subversion would have chosen by default (such as your
        system login name) or when trying to avoid interactive
        prompting (such as when calling <SPAN class="command"><STRONG>svn</STRONG></SPAN> from a
        script).</P><DIV class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Note</H3><P>A common mistake is to misconfigure a server so
          that it never issues an authentication challenge.  When
          users pass <CODE class="option">--username</CODE> and
          <CODE class="option">--password</CODE> options to the client, they're
          surprised to see that they're never used; that is, new
          revisions still appear to have been committed
          anonymously!</P></DIV><P>Here is a final summary that describes how a Subversion
        client behaves when it receives an authentication
        challenge.</P><DIV class="orderedlist"><OL type="1"><LI><P>First, the client checks whether the user specified
            any credentials as command-line options
            (<CODE class="option">--username</CODE> and/or
            <CODE class="option">--password</CODE>).  If so, the client will try
            to use those credentials to authenticate against the
            server.</P></LI><LI><P>If no command-line credentials were provided, or the
            provided ones were invalid, the client looks up the server's
            hostname, port, and realm in the runtime configuration's
            <CODE class="filename">auth/</CODE> area, to see whether appropriate 
            credentials are cached there.  If so, it attempts to use
            those credentials to authenticate.</P></LI><LI><P>Finally, if the previous mechanisms failed to
            successfully authenticate the user against the server, the
            client resorts to interactively prompting the user for
            valid credentials (unless instructed not to do so via the
            <CODE class="option">--non-interactive</CODE> option or its
            client-specific equivalents).</P></LI></OL></DIV><P>If the client successfully authenticates by any of these
        methods, it will attempt to cache the credentials on disk
        (unless the user has disabled this behavior, as mentioned
        earlier).</P></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.advanced.summary"></A>Summary</H2></DIV></DIV></DIV><P>After reading this chapter, you should have a firm grasp on
      some of Subversion's features that, while perhaps not used
      <SPAN class="emphasis"><EM>every</EM></SPAN> time you interact with your version
      control system, are certainly handy to know about.  But don't
      stop here!  Read on to the following chapter, where you'll learn
      about branches, tags, and merging.  Then you'll have nearly full
      mastery of the Subversion client.  Though our lawyers won't
      allow us to promise you anything, this additional knowledge
      could make you measurably more cool.
      <SUP>[<A id="id512428" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id512428" class="footnote">19</A>]</SUP>
    </P></DIV><DIV class="footnotes"><BR><HR width="100" align="left"><DIV class="footnote"><P><SUP>[<A id="ftn.id506283" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id506283" class="para">8</A>] </SUP>If you're familiar with XML, this is pretty much the
            ASCII subset of the syntax for XML "Name".</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id506471" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id506471" class="para">9</A>] </SUP>Fixing spelling errors, grammatical gotchas, and
            â<SPAN class="quote">just-plain-wrongness</SPAN>â in commit log
            messages is perhaps the most common use case for the
            <CODE class="option">--revprop</CODE> option.</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id507006" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id507006" class="para">10</A>] </SUP>You think that was rough?  During that same era,
              WordPerfect also used <CODE class="filename">.DOC</CODE> for their
              proprietary file format's preferred extension!</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id507164" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id507164" class="para">11</A>] </SUP>The Windows filesystems use file extensions (such as
            <CODE class="filename">.EXE</CODE>, <CODE class="filename">.BAT</CODE>, and
            <CODE class="filename">.COM</CODE>) to denote executable
            files.</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id507808" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id507808" class="para">12</A>] </SUP>Isn't that the whole point of a build system?</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id508298" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id508298" class="para">13</A>] </SUP>â¦ or maybe even a section of a book â¦</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id509152" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id509152" class="para">14</A>] </SUP>Communication wouldn't have been such bad medicine for
          Harry and Sally's Hollywood namesakes, either, for that
          matter.</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id509186" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id509186" class="para">15</A>] </SUP>Subversion does not currently allow locks on directories.</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id510056" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id510056" class="para">16</A>] </SUP>Except, perhaps, a classic Vulcan mind-meld.</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id510777" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id510777" class="para">17</A>] </SUP>â<SPAN class="quote">You're not supposed to name it.  Once you name it,
          you start getting attached to it.</SPAN>ââMike
          Wazowski</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id510891" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id510891" class="para">18</A>] </SUP>606 N. Main Street, Wheaton, Illinois, is the home of
          the Wheaton <SPAN class="emphasis"><EM>History</EM></SPAN> Center.  It seemed
          appropriateâ¦.</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id512428" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id512428" class="para">19</A>] </SUP>No purchase necessary.  Certains terms and conditions
          apply.  No guarantee of coolnessâimplicit or 
          otherwiseâexists.  Mileage may vary.</P></DIV></DIV></DIV><DIV class="chapter" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title"><A id="svn.branchmerge"></A>Chapter&nbsp;4.&nbsp;Branching and Merging</H2></DIV></DIV></DIV><DIV class="toc"><P><B>Table of Contents</B></P><DL><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.whatis">What's a Branch?</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.using">Using Branches</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.using.create">Creating a Branch</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.using.work">Working with Your Branch</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.using.concepts">The Key Concepts Behind Branching</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.basicmerging">Basic Merging</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.changesets">Changesets</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchemerge.basicmerging.stayinsync">Keeping a Branch in Sync</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.basicmerging.mergeinfo">Mergeinfo and Previews</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.basicmerging.undo">Undoing Changes</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.basicmerging.resurrect">Resurrecting Deleted Items</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.advanced">Advanced Merging</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.cherrypicking">Cherrypicking</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.advanced.advancedsyntax">Merge Syntax:  Full Disclosure</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.nomergedata">Merges Without Mergeinfo</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.advanced.mergeconflicts">More on Merge Conflicts</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.advanced.blockchanges">Blocking Changes</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.advanced.logblame">Merge-Sensitive Logs and Annotations</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.advanced.ancestry">Noticing or Ignoring Ancestry</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.advanced.moves">Merges and Moves</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.advanced.pre1.5clients">Blocking Merge-Unaware Clients</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.advanced.finalword">The Final Word on Merge Tracking</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.switchwc">Traversing Branches</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.tags">Tags</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.tags.mksimple">Creating a Simple Tag</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.tags.mkcomplex">Creating a Complex Tag</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.maint">Branch Maintenance</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.maint.layout">Repository Layout</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.maint.lifetime">Data Lifetimes</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.commonpatterns">Common Branching Patterns</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.commonpatterns.release">Release Branches</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.commonpatterns.feature">Feature Branches</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.vendorbr">Vendor Branches</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.vendorbr.general">General Vendor Branch Management Procedure</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.vendorbr.svn_load_dirs">svn_load_dirs.pl</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.summary">Summary</A></SPAN></DT></DL></DIV><DIV class="blockquote"><TABLE border="0" width="100&percnt;" cellspacing="0" cellpadding="0" class="blockquote" summary="Block quote"><TBODY><TR><TD width="10&percnt;" valign="top">&nbsp;</TD><TD width="80&percnt;" valign="top"><P>â<SPAN class="quote">åå­å¡æ¬
      (It is upon the Trunk that a gentleman works.)</SPAN>â</P></TD><TD width="10&percnt;" valign="top">&nbsp;</TD></TR><TR><TD width="10&percnt;" valign="top">&nbsp;</TD><TD colspan="2" align="right" valign="top">--<SPAN class="attribution">Confucius</SPAN></TD></TR></TBODY></TABLE></DIV><P>Branching, tagging, and merging are concepts common to
    almost all version control systems.  If you're not familiar with
    these ideas, we provide a good introduction in this chapter.  If
    you are familiar, hopefully you'll find it interesting to
    see how Subversion implements them.</P><P>Branching is a fundamental part of version control.  If
    you're going to allow Subversion to manage your data, this
    is a feature you'll eventually come to depend on.  This chapter
    assumes that you're already familiar with Subversion's basic
    concepts (<A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic" title="Chapter&nbsp;1.&nbsp;Fundamental Concepts">Chapter&nbsp;1, <I>Fundamental Concepts</I></A>).</P><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.branchmerge.whatis"></A>What's a Branch?</H2></DIV></DIV></DIV><P>Suppose it's your job to maintain a document for a division
      in your companyâa handbook of some sort.  One day a different
      division asks you for the same handbook, but with a few parts
      â<SPAN class="quote">tweaked</SPAN>â for them, since they do things slightly
      differently.</P><P>What do you do in this situation?  You do the obvious: make
      a second copy of your document and begin maintaining the two
      copies separately.  As each department asks you to make small
      changes, you incorporate them into one copy or the other.</P><P>You often want to make the same change to both copies.  For
      example, if you discover a typo in the first copy, it's very
      likely that the same typo exists in the second copy.  The two
      documents are almost the same, after all; they differ only in
      small, specific ways.</P><P>This is the basic concept of a
      <EM class="firstterm">branch</EM>ânamely, a line of
      development that exists independently of another line, yet still
      shares a common history if you look far enough back in time.  A
      branch always begins life as a copy of something, and moves on
      from there, generating its own history (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.whatis.dia-1" title="Figure&nbsp;4.1.&nbsp;Branches of development">Figure&nbsp;4.1, âBranches of developmentâ</A>).</P><DIV class="figure"><A id="svn.branchmerge.whatis.dia-1"></A><P class="title"><B>Figure&nbsp;4.1.&nbsp;Branches of development</B></P><DIV class="figure-contents"><DIV><IMG src="./0101 Version Control with Subversion_files/ch04dia1.png" alt="Branches of development"></DIV></DIV></DIV><BR class="figure-break"><P>Subversion has commands to help you maintain parallel
      branches of your files and directories.  It allows you to create
      branches by copying your data, and remembers that the copies are
      related to one another.  It also helps you duplicate changes
      from one branch to another.  Finally, it can make portions of
      your working copy reflect different branches so that you can
      â<SPAN class="quote">mix and match</SPAN>â different lines of development in
      your daily work.</P></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.branchmerge.using"></A>Using Branches</H2></DIV></DIV></DIV><P>At this point, you should understand how each commit creates
      an entirely new filesystem tree (called a â<SPAN class="quote">revision</SPAN>â)
      in the repository.  If you don't, go back and read about revisions in
      <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.in-action.revs" title="Revisions">the section called âRevisionsâ</A>.</P><P>For this chapter, we'll go back to the same example from
      <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic" title="Chapter&nbsp;1.&nbsp;Fundamental Concepts">Chapter&nbsp;1, <I>Fundamental Concepts</I></A>.  Remember that you and your
      collaborator, Sally, are sharing a repository that contains two
      projects, <CODE class="filename">paint</CODE> and
      <CODE class="filename">calc</CODE>.  Notice that in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.using.dia-1" title="Figure&nbsp;4.2.&nbsp;Starting repository layout">Figure&nbsp;4.2, âStarting repository layoutâ</A>, however, each project
      directory now contains subdirectories named
      <CODE class="filename">trunk</CODE> and <CODE class="filename">branches</CODE>.
      The reason for this will soon become clear.</P><DIV class="figure"><A id="svn.branchmerge.using.dia-1"></A><P class="title"><B>Figure&nbsp;4.2.&nbsp;Starting repository layout</B></P><DIV class="figure-contents"><DIV><IMG src="./0101 Version Control with Subversion_files/ch04dia2.png" alt="Starting repository layout"></DIV></DIV></DIV><BR class="figure-break"><P>As before, assume that Sally and you both have working
      copies of the â<SPAN class="quote">calc</SPAN>â project.  Specifically, you
      each have a working copy of <CODE class="filename">/calc/trunk</CODE>.
      All the files for the project are in this subdirectory rather
      than in <CODE class="filename">/calc</CODE> itself, because your team has
      decided that <CODE class="filename">/calc/trunk</CODE> is where the
      â<SPAN class="quote">main line</SPAN>â of development is going to take
      place.</P><P>Let's say that you've been given the task of implementing a
      large software feature.  It will take a long time to write, and
      will affect all the files in the project.  The immediate problem
      is that you don't want to interfere with Sally, who is in the
      process of fixing small bugs here and there.  She's depending on
      the fact that the latest version of the project (in
      <CODE class="filename">/calc/trunk</CODE>) is always usable.  If you
      start committing your changes bit by bit, you'll surely break
      things for Sally (and other team members as well).</P><P>One strategy is to crawl into a hole: you and Sally can stop
      sharing information for a week or two.  That is, start gutting
      and reorganizing all the files in your working copy, but don't
      commit or update until you're completely finished with the task.
      There are a number of problems with this, though.  First, it's
      not very safe.  Most people like to save their work to the
      repository frequently, should something bad accidentally happen
      to their working copy.  Second, it's not very flexible.  If you
      do your work on different computers (perhaps you have a working
      copy of <CODE class="filename">/calc/trunk</CODE> on two different
      machines), you'll need to manually copy your changes back and
      forth or just do all the work on a single computer.  By that
      same token, it's difficult to share your changes in progress
      with anyone else.  A common software development â<SPAN class="quote">best
      practice</SPAN>â is to allow your peers to review your work as
      you go.  If nobody sees your intermediate commits, you lose
      potential feedback and may end up going down the wrong path for
      weeks before another person on your team notices.  Finally, when
      you're finished with all your changes, you might find it very
      difficult to remerge your final work with the rest of the
      company's main body of code.  Sally (or others) may have made
      many other changes in the repository that are difficult to
      incorporate into your working copyâespecially if you
      run <SPAN class="command"><STRONG>svn update</STRONG></SPAN> after weeks of
      isolation.</P><P>The better solution is to create your own branch, or line of
      development, in the repository.  This allows you to save your
      half-broken work frequently without interfering with others, yet
      you can still selectively share information with your
      collaborators.  You'll see exactly how this works as we go.
      </P><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.branchmerge.using.create"></A>Creating a Branch</H3></DIV></DIV></DIV><P>Creating a branch is very simpleâyou make a copy of
        the project in the repository using the <SPAN class="command"><STRONG>svn
        copy</STRONG></SPAN> command.  Subversion is able to copy not only 
        single files, but whole directories as well.  In this case,
        you want to make a copy of the
        <CODE class="filename">/calc/trunk</CODE> directory.  Where should the
        new copy live?  Wherever you wishâit's a matter of
        project policy.  Let's say that your team has a policy of
        creating branches in the <CODE class="filename">/calc/branches</CODE>
        area of the repository, and you want to name your branch
        <CODE class="literal">my-calc-branch</CODE>.  You'll want to create a
        new directory,
        <CODE class="filename">/calc/branches/my-calc-branch</CODE>, which
        begins its life as a copy of
        <CODE class="filename">/calc/trunk</CODE>.</P><P>You may already have seen <SPAN class="command"><STRONG>svn copy</STRONG></SPAN> used
        to copy one file to another within a working copy.  But it can
        also be used to do a â<SPAN class="quote">remote</SPAN>â copy entirely
        within the repository.  Just copy one URL to another:</P><PRE class="screen">$ svn copy http://svn.example.com/repos/calc/trunk \
           http://svn.example.com/repos/calc/branches/my-calc-branch \
      -m "Creating a private branch of /calc/trunk."

Committed revision 341.
</PRE><P>This command causes a near-instantaneous commit in the
        repository, creating a new directory in revision 341.  The new
        directory is a copy of <CODE class="filename">/calc/trunk</CODE>.  This
        is shown in
        <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.using.create.dia-1" title="Figure&nbsp;4.3.&nbsp;Repository with new copy">Figure&nbsp;4.3, âRepository with new copyâ</A>.
        <SUP>[<A id="id520005" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id520005" class="footnote">20</A>]</SUP>

        While it's also possible to create a branch by
        using <SPAN class="command"><STRONG>svn copy</STRONG></SPAN> to duplicate a directory
        within the working copy, this technique isn't recommended.  It
        can be quite slow, in fact!  Copying a directory on the
        client side is a linear-time operation, in that it actually
        has to duplicate every file and subdirectory on the local disk.
        Copying a directory on the server, however, is a constant-time
        operation, and it's the way most people create
        branches.</P><DIV class="figure"><A id="svn.branchmerge.using.create.dia-1"></A><P class="title"><B>Figure&nbsp;4.3.&nbsp;Repository with new copy</B></P><DIV class="figure-contents"><DIV><IMG src="./0101 Version Control with Subversion_files/ch04dia3.png" alt="Repository with new copy"></DIV></DIV></DIV><BR class="figure-break"><DIV class="sidebar"><P class="title"><B>Cheap Copies</B></P><P>Subversion's repository has a special design.  When you
          copy a directory, you don't need to worry about the
          repository growing hugeâSubversion doesn't actually
          duplicate any data.  Instead, it creates a new directory
          entry that points to an <SPAN class="emphasis"><EM>existing</EM></SPAN> tree.
          If you're an experienced Unix user, you'll recognize this as
          the same concept behind a hard link.  As further changes are
          made to files and directories beneath the copied directory,
          Subversion continues to employ this hard link concept where
          it can.  It duplicates data only when it is necessary to
          disambiguate different versions of objects.</P><P>This is why you'll often hear Subversion users talk
          about â<SPAN class="quote">cheap copies.</SPAN>â  It doesn't matter how
          large the directory isâit takes a very tiny, constant
          amount of time and space to make a copy of it.  In fact,
          this feature is the basis of how commits work in Subversion:
          each revision is a â<SPAN class="quote">cheap copy</SPAN>â of the previous
          revision, with a few items lazily changed within.  (To read
          more about this, visit Subversion's web site and read about
          the â<SPAN class="quote">bubble up</SPAN>â method in Subversion's design
          documents.)</P><P>Of course, these internal mechanics of copying and
          sharing data are hidden from the user, who simply sees
          copies of trees.  The main point here is that copies are
          cheap, both in time and in space.  If you create a branch
          entirely within the repository (by running <STRONG class="userinput"><CODE>svn copy
          <EM class="replaceable"><CODE>URL1</CODE></EM> <EM class="replaceable"><CODE>URL2</CODE></EM></CODE></STRONG>), it's a quick, constant-time operation.
          Make branches as often as you want.</P></DIV></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.branchmerge.using.work"></A>Working with Your Branch</H3></DIV></DIV></DIV><P>Now that you've created a branch of the project, you can
        check out a new working copy to start using it:</P><PRE class="screen">$ svn checkout http://svn.example.com/repos/calc/branches/my-calc-branch
A  my-calc-branch/Makefile
A  my-calc-branch/integer.c
A  my-calc-branch/button.c
Checked out revision 341.
</PRE><P>There's nothing special about this working copy; it simply
        mirrors a different directory in the repository.  When you
        commit changes, however, Sally won't see them when she
        updates, because her working copy is of
        <CODE class="filename">/calc/trunk</CODE>.  (Be sure to read <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.switchwc" title="Traversing Branches">the section called âTraversing Branchesâ</A> later in this chapter: the
        <SPAN class="command"><STRONG>svn switch</STRONG></SPAN> command is an alternative way of
        creating a working copy of a branch.)</P><P>Let's pretend that a week goes by, and the following
        commits happen:</P><DIV class="itemizedlist"><UL type="disc"><LI><P>
          You make a change to
          <CODE class="filename">/calc/branches/my-calc-branch/button.c</CODE>,
          which creates revision 342.</P></LI><LI><P>
          You make a change to
          <CODE class="filename">/calc/branches/my-calc-branch/integer.c</CODE>,
          which creates revision 343.</P></LI><LI><P>
          Sally makes a change to
          <CODE class="filename">/calc/trunk/integer.c</CODE>, which creates
          revision 344.</P></LI></UL></DIV><P>Now two independent lines of development (shown
        in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.using.work.dia-1" title="Figure&nbsp;4.4.&nbsp;The branching of one file&#39;s history">Figure&nbsp;4.4, âThe branching of one file's historyâ</A>) are happening on
        <CODE class="filename">integer.c</CODE>.</P><DIV class="figure"><A id="svn.branchmerge.using.work.dia-1"></A><P class="title"><B>Figure&nbsp;4.4.&nbsp;The branching of one file's history</B></P><DIV class="figure-contents"><DIV><IMG src="./0101 Version Control with Subversion_files/ch04dia4.png" alt="The branching of one file&#39;s history"></DIV></DIV></DIV><BR class="figure-break"><P>Things get interesting when you look at the history of
        changes made to your copy of
        <CODE class="filename">integer.c</CODE>:</P><PRE class="screen">$ pwd
/home/user/my-calc-branch

$ svn log -v integer.c
------------------------------------------------------------------------
r343 | user | 2002-11-07 15:27:56 -0600 (Thu, 07 Nov 2002) | 2 lines
Changed paths:
   M /calc/branches/my-calc-branch/integer.c

* integer.c:  frozzled the wazjub.

------------------------------------------------------------------------
r341 | user | 2002-11-03 15:27:56 -0600 (Thu, 07 Nov 2002) | 2 lines
Changed paths:
   A /calc/branches/my-calc-branch (from /calc/trunk:340)

Creating a private branch of /calc/trunk.

------------------------------------------------------------------------
r303 | sally | 2002-10-29 21:14:35 -0600 (Tue, 29 Oct 2002) | 2 lines
Changed paths:
   M /calc/trunk/integer.c

* integer.c:  changed a docstring.

------------------------------------------------------------------------
r98 | sally | 2002-02-22 15:35:29 -0600 (Fri, 22 Feb 2002) | 2 lines
Changed paths:
   A /calc/trunk/integer.c

* integer.c:  adding this file to the project.

------------------------------------------------------------------------
</PRE><P>Notice that Subversion is tracing the history of your
        branch's <CODE class="filename">integer.c</CODE> all the way back
        through time, even traversing the point where it was copied.
        It shows the creation of the branch as an event in the
        history, because <CODE class="filename">integer.c</CODE> was implicitly
        copied when all of <CODE class="filename">/calc/trunk/</CODE> was
        copied.  Now look at what happens when Sally runs the same
        command on her copy of the file:</P><PRE class="screen">$ pwd
/home/sally/calc

$ svn log -v integer.c
------------------------------------------------------------------------
r344 | sally | 2002-11-07 15:27:56 -0600 (Thu, 07 Nov 2002) | 2 lines
Changed paths:
   M /calc/trunk/integer.c

* integer.c:  fix a bunch of spelling errors.

------------------------------------------------------------------------
r303 | sally | 2002-10-29 21:14:35 -0600 (Tue, 29 Oct 2002) | 2 lines
Changed paths:
   M /calc/trunk/integer.c

* integer.c:  changed a docstring.

------------------------------------------------------------------------
r98 | sally | 2002-02-22 15:35:29 -0600 (Fri, 22 Feb 2002) | 2 lines
Changed paths:
   A /calc/trunk/integer.c

* integer.c:  adding this file to the project.

------------------------------------------------------------------------
</PRE><P>Sally sees her own revision 344 change, but not the change
        you made in revision 343.  As far as Subversion is concerned,
        these two commits affected different files in different
        repository locations.  However, Subversion
        <SPAN class="emphasis"><EM>does</EM></SPAN> show that the two files share a
        common history.  Before the branch copy was made in revision
        341, the files used to be the same file.  That's why you and
        Sally both see the changes made in revisions 303 and
        98.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.branchmerge.using.concepts"></A>The Key Concepts Behind Branching</H3></DIV></DIV></DIV><P>You should remember two important lessons
        from this section.  First, Subversion has no internal concept
        of a branchâit knows only how to make copies.  When you
        copy a directory, the resultant directory is only
        a â<SPAN class="quote">branch</SPAN>â because <SPAN class="emphasis"><EM>you</EM></SPAN>
        attach that meaning to it.  You may think of the directory
        differently, or treat it differently, but to Subversion it's
        just an ordinary directory that happens to carry some extra
        historical information.</P><P>Second, because of this copy mechanism, Subversion's
        branches exist as <SPAN class="emphasis"><EM>normal filesystem
        directories</EM></SPAN> in the repository.  This is different
        from other version control systems, where branches are
        typically defined by adding
        extra-dimensional â<SPAN class="quote">labels</SPAN>â to collections of
        files.  The location of your branch directory doesn't matter
        to Subversion.  Most teams follow a convention of putting all
        branches into a <CODE class="filename">/branches</CODE> directory, but
        you're free to invent any policy you wish.</P></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.branchmerge.basicmerging"></A>Basic Merging</H2></DIV></DIV></DIV><P>Now you and Sally are working on parallel branches of the
      project: you're working on a private branch, and Sally is
      working on the <EM class="firstterm">trunk</EM>, or main line of
      development.</P><P>For projects that have a large number of contributors, it's
      common for most people to have working copies of the trunk.
      Whenever someone needs to make a long-running change that is
      likely to disrupt the trunk, a standard procedure is to create a
      private branch and commit changes there until all the work is
      complete.</P><P>So, the good news is that you and Sally aren't interfering
      with each other.  The bad news is that it's very easy to drift
      <SPAN class="emphasis"><EM>too</EM></SPAN> far apart.  Remember that one of the
      problems with the â<SPAN class="quote">crawl in a hole</SPAN>â strategy is
      that by the time you're finished with your branch, it may be
      near-impossible to merge your changes back into the trunk
      without a huge number of conflicts.</P><P>Instead, you and Sally might continue to share changes as
      you work.  It's up to you to decide which changes are worth
      sharing; Subversion gives you the ability to selectively
      â<SPAN class="quote">copy</SPAN>â changes between branches.  And when you're
      completely finished with your branch, your entire set of branch
      changes can be copied back into the trunk.  In Subversion
      terminology, the general act of replicating changes from one
      branch to another is called <EM class="firstterm">merging</EM>, and
      it is performed using various invocations of the <SPAN class="command"><STRONG>svn
      merge</STRONG></SPAN> command.</P><P>In the examples that follow, we're assuming that both your
      Subversion client and server are running Subversion 1.5 (or
      later).  If either client or server is older than version 1.5,
      things are more complicated: the system won't track changes
      automatically, and you'll have to use painful manual methods to
      achieve similar results.  That is, you'll always need to use the
      detailed merge syntax to specify specific ranges of revisions to
      replicate (see
      <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.advanced.advancedsyntax" title="Merge Syntax: Full Disclosure">the section called âMerge Syntax:  Full Disclosureâ</A> later
      in this chapter), and take special care to keep track of what's
      already been merged and what hasn't.  For this reason,
      we <SPAN class="emphasis"><EM>strongly</EM></SPAN> recommend that you make sure your
      client and server are at least at version 1.5.</P><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.branchmerge.changesets"></A>Changesets</H3></DIV></DIV></DIV><P>Before we proceed further, we should warn you that there's
        going to be a lot of discussion of â<SPAN class="quote">changes</SPAN>â in
        the pages ahead.  A lot of people experienced with version
        control systems use the terms â<SPAN class="quote">change</SPAN>â
        and â<SPAN class="quote">changeset</SPAN>â interchangeably, and we should
        clarify what Subversion understands as
        a <EM class="firstterm">changeset</EM>.</P><P>Everyone seems to have a slightly different definition
        of changeset, or at least a different
        expectation of what it means for a version control system to
        have one.  For our purposes, let's say that a changeset is just
        a collection of changes with a unique name.  The changes might
        include textual edits to file contents, modifications to tree
        structure, or tweaks to metadata.  In more common speak, a
        changeset is just a patch with a name you can refer to.</P><P>In Subversion, a global revision number N names a tree in
        the repository: it's the way the repository looked after the
        Nth commit.  It's also the name of an implicit changeset: if
        you compare tree N with tree Nâ1, you can derive the exact
        patch that was committed.  For this reason, it's easy to think
        of revision N as not just a tree, but a changeset as well.  If
        you use an issue tracker to manage bugs, you can use the
        revision numbers to refer to particular patches that fix
        bugsâfor example,
        â<SPAN class="quote">this issue was fixed by r9238.</SPAN>â Somebody
        can then run <STRONG class="userinput"><CODE>svn log -r 9238</CODE></STRONG> to read about
        the exact changeset that fixed the bug, and run
        <STRONG class="userinput"><CODE>svn diff -c 9238</CODE></STRONG> to see the patch itself.
        And (as you'll see shortly)
        Subversion's <SPAN class="command"><STRONG>svn merge</STRONG></SPAN> command is able to use
        revision numbers.  You can merge specific changesets from one
        branch to another by naming them in the merge
        arguments: passing <STRONG class="userinput"><CODE>-c 9238</CODE></STRONG> to <SPAN class="command"><STRONG>svn merge</STRONG></SPAN> would merge
        changeset r9238 into your working copy.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.branchemerge.basicmerging.stayinsync"></A>Keeping a Branch in Sync</H3></DIV></DIV></DIV><P>Continuing with our running example, let's suppose that a
        week has passed since you started working on your private
        branch.  Your new feature isn't finished yet, but at the same
        time you know that other people on your team have continued to
        make important changes in the
        project's <CODE class="filename">/trunk</CODE>.  It's in your best
        interest to replicate those changes to your own branch, just
        to make sure they mesh well with your changes.  In fact, this
        is a best practice: frequently keeping your branch in sync
        with the main development line helps
        prevent â<SPAN class="quote">surprise</SPAN>â conflicts when it comes time
        for you to fold your changes back into the trunk.</P><P>Subversion is aware of the history of your branch and
        knows when it divided away from the trunk.  To replicate the
        latest, greatest trunk changes to your branch, first make sure
        your working copy of the branch
        is â<SPAN class="quote">clean</SPAN>ââthat it has no local
        modifications reported by <SPAN class="command"><STRONG>svn status</STRONG></SPAN>.  Then
        simply run:</P><PRE class="screen">$ pwd
/home/user/my-calc-branch

$ svn merge http://svn.example.com/repos/calc/trunk
--- Merging r345 through r356 into '.':
U    button.c
U    integer.c
</PRE><P>This basic syntaxâ<STRONG class="userinput"><CODE>svn merge
        <EM class="replaceable"><CODE>URL</CODE></EM></CODE></STRONG>âtells Subversion to merge all recent
        changes from the URL to the current working directory (which
        is typically the root of your working copy).  After running
        the prior example, your branch working copy now contains new
        local modifications, and these edits are duplications of all
        of the changes that have happened on the trunk since you first
        created your branch:</P><PRE class="screen">$ svn status
 M     .
M      button.c
M      integer.c
</PRE><P>At this point, the wise thing to do is look at the changes
        carefully with <SPAN class="command"><STRONG>svn diff</STRONG></SPAN>, and then build and
        test your branch.  Notice that the current working directory
        (â<SPAN class="quote"><CODE class="filename">.</CODE></SPAN>â) has also been
        modified; the <SPAN class="command"><STRONG>svn diff</STRONG></SPAN> will show that
        its <CODE class="literal">svn:mergeinfo</CODE> property has been either
        created or modified.  This is important merge-related metadata
        that you should <SPAN class="emphasis"><EM>not</EM></SPAN> touch, since it will
        be needed by future <SPAN class="command"><STRONG>svn merge</STRONG></SPAN> commands.
        (We'll learn more about this metadata later in the
        chapter.)</P><P>After performing the merge, you might also need to resolve
        some conflicts (just as you do with <SPAN class="command"><STRONG>svn
        update</STRONG></SPAN>) or possibly make some small edits to get
        things working properly.  (Remember, just because there are
        no <SPAN class="emphasis"><EM>syntactic</EM></SPAN> conflicts doesn't mean there
        aren't any <SPAN class="emphasis"><EM>semantic</EM></SPAN> conflicts!)  If you
        encounter serious problems, you can always abort the local
        changes by running <STRONG class="userinput"><CODE>svn revert . -R</CODE></STRONG> (which
        will undo all local modifications) and start a
        long â<SPAN class="quote">what's going on?</SPAN>â discussion with your
        collaborators.  If things look good, however, you can
        submit these changes into the repository:</P><PRE class="screen">$ svn commit -m "Merged latest trunk changes to my-calc-branch."
Sending        .
Sending        button.c
Sending        integer.c
Transmitting file data ..
Committed revision 357.
</PRE><P>At this point, your private branch is now â<SPAN class="quote">in
          sync</SPAN>â with the trunk, so you can rest easier knowing
          that as you continue to work in isolation, you're not
          drifting too far away from what everyone else is
          doing.</P><DIV class="sidebar"><P class="title"><B>Why Not Use Patches Instead?</B></P><P>A question may be on your mind, especially if you're a
          Unix user: why bother to use <SPAN class="command"><STRONG>svn merge</STRONG></SPAN> at
          all?  Why not simply use the operating system's
          <SPAN class="command"><STRONG>patch</STRONG></SPAN> command to accomplish the same job?
          For example:</P><PRE class="screen">$ cd my-calc-branch
$ svn diff -r 341:HEAD http://svn.example.com/repos/calc/trunk &gt; patchfile
$ patch -p0  &lt; patchfile
Patching file integer.c using Plan A...
Hunk #1 succeeded at 147.
Hunk #2 succeeded at 164.
Hunk #3 succeeded at 241.
Hunk #4 succeeded at 249.
done
</PRE><P>In this particular example, there really isn't much
          difference.  But <SPAN class="command"><STRONG>svn merge</STRONG></SPAN> has special
          abilities that surpass the <SPAN class="command"><STRONG>patch</STRONG></SPAN> program.
          The file format used by <SPAN class="command"><STRONG>patch</STRONG></SPAN> is quite
          limited; it's able to tweak file contents only.  There's no
          way to represent changes to <SPAN class="emphasis"><EM>trees</EM></SPAN>, such
          as the addition, removal, or renaming of files and
          directories.  Nor can the <SPAN class="command"><STRONG>patch</STRONG></SPAN> program
          notice changes to properties.  If Sally's change had,
          say, added a new directory, the output of <SPAN class="command"><STRONG>svn
          diff</STRONG></SPAN> wouldn't have mentioned it at
          all.  <SPAN class="command"><STRONG>svn diff</STRONG></SPAN> outputs only the limited
          patch format, so there are some ideas it simply can't
          express.</P><P>The <SPAN class="command"><STRONG>svn merge</STRONG></SPAN> command, however, can
          express changes in tree structure and properties by directly
          applying them to your working copy.  Even more important,
          this command records the changes that have been duplicated
          to your branch so that Subversion is aware of exactly which
          changes exist in each location (see
          <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.basicmerging.mergeinfo" title="Mergeinfo and Previews">the section called âMergeinfo and Previewsâ</A>.)
          This is a critical feature that makes branch management
          usable; without it, users would have to manually keep notes
          on which sets of changes have or haven't been merged
          yet.</P></DIV><P>Suppose that another week has passed.  You've committed
        more changes to your branch, and your comrades have continued
        to improve the trunk as well.  Once again, you'd like to
        replicate the latest trunk changes to your branch and bring
        yourself in sync.  Just run the same merge command
        again!</P><PRE class="screen">$ svn merge http://svn.example.com/repos/calc/trunk
--- Merging r357 through r380 into '.':
U    integer.c
U    Makefile
A    README
</PRE><P>Subversion knows which trunk changes you've already
        replicated to your branch, so it carefully replicates only
        those changes you don't yet have.  Once again, you'll have to
        build, test, and <SPAN class="command"><STRONG>svn commit</STRONG></SPAN> the local
        modifications to your branch.</P><P>What happens when you finally finish your work, though?
        Your new feature is done, and you're ready to merge your
        branch changes back to the trunk (so your team can enjoy the
        bounty of your labor).  The process is simple.  First, bring
        your branch in sync with the trunk again, just as you've been
        doing all along:</P><PRE class="screen">$ svn merge http://svn.example.com/repos/calc/trunk
--- Merging r381 through r385 into '.':
U    button.c
U    README

$ # build, test, ...

$ svn commit -m "Final merge of trunk changes to my-calc-branch."
Sending        .
Sending        button.c
Sending        README
Transmitting file data ..
Committed revision 390.
</PRE><P>Now, you use <SPAN class="command"><STRONG>svn merge</STRONG></SPAN> to replicate
        your branch changes back into the trunk.  You'll need an
        up-to-date working copy of <CODE class="filename">/trunk</CODE>.  You
        can do this by either doing an <SPAN class="command"><STRONG>svn
        checkout</STRONG></SPAN>, dredging up an old trunk working copy from
        somewhere on your disk, or using <SPAN class="command"><STRONG>svn 
        switch</STRONG></SPAN> (see
        <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.switchwc" title="Traversing Branches">the section called âTraversing Branchesâ</A>.) However you get a
        trunk working copy, remember that it's a best practice to do
        your merge into a working copy that
        has <SPAN class="emphasis"><EM>no</EM></SPAN> local edits and has been recently
        updated (i.e., is not a mixture of local revisions).  If your
        working copy isn't â<SPAN class="quote">clean</SPAN>â in these ways, you can
        run into some unnecessary conflict-related headaches
        and <SPAN class="command"><STRONG>svn merge</STRONG></SPAN> will likely return an
        error.</P><P>Once you have a clean working copy of the trunk, you're
        ready to merge your branch back into it:</P><PRE class="screen">$ pwd
/home/user/calc-trunk

$ svn update  # (make sure the working copy is up to date)
At revision 390.

$ svn merge --reintegrate http://svn.example.com/repos/calc/branches/my-calc-branch
--- Merging differences between repository URLs into '.':
U    button.c
U    integer.c
U    Makefile
 U   .

$ # build, test, verify, ...

$ svn commit -m "Merge my-calc-branch back into trunk!"
Sending        .
Sending        button.c
Sending        integer.c
Sending        Makefile
Transmitting file data ..
Committed revision 391.
</PRE><P>Congratulations, your branch has now been remerged back
        into the main line of development.  Notice our use of
        the <CODE class="option">--reintegrate</CODE> option this time around.
        The option is critical for reintegrating changes from a branch
        back into its original line of developmentâdon't forget
        it!  It's needed because this sort of â<SPAN class="quote">merge
        back</SPAN>â is a different sort of work than what you've been
        doing up until now.  Previously, we had been
        asking <SPAN class="command"><STRONG>svn merge</STRONG></SPAN> to grab the â<SPAN class="quote">next
        set</SPAN>â of changes from one line of development (the
        trunk) and duplicate them to another (your branch).  This is
        fairly straightforward, and each time Subversion knows how to
        pick up where it left off.  In our prior examples, you can see
        that first it merges the ranges 345:356 from trunk to branch;
        later on, it continues by merging the next contiguously
        available range, 356:380.  When doing the final sync, it
        merges the range 380:385.</P><P>When merging your branch back to the trunk, however, the
        underlying mathematics is quite different.  Your feature
        branch is now a mishmosh of both duplicated trunk changes and
        private branch changes, so there's no simple contiguous range
        of revisions to copy over.  By specifying
        the <CODE class="option">--reintegrate</CODE> option, you're asking
        Subversion to carefully replicate <SPAN class="emphasis"><EM>only</EM></SPAN>
        those changes unique to your branch.  (And in fact, it does
        this by comparing the latest trunk tree with the latest branch
        tree:  the resulting difference is exactly your branch
        changes!)</P><P>Now that your private branch is merged to trunk, you may
        wish to remove it from the repository:</P><PRE class="screen">$ svn delete http://svn.example.com/repos/calc/branches/my-calc-branch \
      -m "Remove my-calc-branch."
Committed revision 392.
</PRE><P>But wait!  Isn't the history of that branch valuable?
        What if somebody wants to audit the evolution of your feature
        someday and look at all of your branch changes?  No need to
        worry.  Remember that even though your branch is no longer
        visible in the <CODE class="filename">/branches</CODE> directory, its
        existence is still an immutable part of the repository's
        history.  A simple <SPAN class="command"><STRONG>svn log</STRONG></SPAN> command on
        the <CODE class="filename">/branches</CODE> URL will show the entire
        history of your branch.  Your branch can even be resurrected
        at some point, should you desire (see
        <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.basicmerging.resurrect" title="Resurrecting Deleted Items">the section called âResurrecting Deleted Itemsâ</A>).</P><P>In Subversion 1.5, once
        a <CODE class="option">--reintegrate</CODE> merge is done from branch to trunk,
        the branch is no longer usable for further work.  It's not
        able to correctly absorb new trunk changes, nor can it be
        properly reintegrated to trunk again.  For this reason, if you
        want to keep working on your feature branch, we recommend
        destroying it and then re-creating it from the trunk:</P><PRE class="screen">$ svn delete http://svn.example.com/repos/calc/branches/my-calc-branch \
      -m "Remove my-calc-branch."
Committed revision 392.

$ svn copy http://svn.example.com/repos/calc/trunk \
           http://svn.example.com/repos/calc/branches/new-branch
      -m "Create a new branch from trunk."
Committed revision 393.

$ cd my-calc-branch

$ svn switch http://svn.example.com/repos/calc/branches/new-branch
Updated to revision 393.
</PRE><P>The final command in the prior exampleâ<SPAN class="command"><STRONG>svn
        switch</STRONG></SPAN>âis a way of updating an existing working
        copy to reflect a different repository directory.  We'll discuss
        this more in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.switchwc" title="Traversing Branches">the section called âTraversing Branchesâ</A>.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.branchmerge.basicmerging.mergeinfo"></A>Mergeinfo and Previews</H3></DIV></DIV></DIV><P>The basic mechanism Subversion uses to track
        changesetsâthat is, which changes have been merged to
        which branchesâis by recording data in properties.
        Specifically, merge data is tracked in
        the <CODE class="literal">svn:mergeinfo</CODE> property attached to
        files and directories.  (If you're not familiar with
        Subversion properties, now is the time to skim
        <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props" title="Properties">the section called âPropertiesâ</A>.)</P><P>You can examine the property, just like any
        other:</P><PRE class="screen">$ cd my-calc-branch
$ svn propget svn:mergeinfo .
/trunk:341-390
</PRE><P>It is <SPAN class="emphasis"><EM>not</EM></SPAN> recommended that you change
        the value of this property yourself, unless you really know
        what you're doing.  This property is automatically maintained
        by Subversion whenever you run <SPAN class="command"><STRONG>svn merge</STRONG></SPAN>.
        Its value indicates which changes (at a given path) have been
        replicated into the directory in question.  In this case, the
        path is <CODE class="filename">/trunk</CODE> and the directory which
        has received the specific changes
        is <CODE class="filename">/branches/my-calc-branch</CODE>.</P><P>There's also a subcommand, <SPAN class="command"><STRONG>svn
        mergeinfo</STRONG></SPAN>, which can be helpful in seeing not only
        which changesets a directory has absorbed, but also which
        changesets it's still eligible to receive.  This gives a sort
        of preview of the next set of changes that <SPAN class="command"><STRONG>svn
        merge</STRONG></SPAN> will replicate to your branch.</P><PRE class="screen">$ cd my-calc-branch

# Which changes have already been merged from trunk to branch?
$ svn mergeinfo http://svn.example.com/repos/calc/trunk
r341
r342
r343
â¦
r388
r389
r390

# Which changes are still eligible to merge from trunk to branch?
$ svn mergeinfo http://svn.example.com/repos/calc/trunk --show-revs eligible
r391
r392
r393
r394
r395
</PRE><P>The <SPAN class="command"><STRONG>svn mergeinfo</STRONG></SPAN> command requires
        a â<SPAN class="quote">source</SPAN>â URL (where the changes would be coming
        from), and takes an optional â<SPAN class="quote">target</SPAN>â URL (where
        the changes would be merged to).  If no target URL is given,
        it assumes that the current working directory is the
        target.  In the prior example, because we're querying our
        branch working copy, the command assumes we're interested in
        receiving changes to <CODE class="filename">/branches/mybranch</CODE>
        from the specified trunk URL.</P><P>Another way to get a more precise preview of a merge
        operation is to use the <CODE class="option">--dry-run</CODE>
        option:</P><PRE class="screen">$ svn merge http://svn.example.com/repos/calc/trunk --dry-run
U    integer.c

$ svn status
#  nothing printed, working copy is still unchanged.
</PRE><P>The <CODE class="option">--dry-run</CODE> option doesn't actually
        apply any local changes to the working copy.  It shows only
        status codes that <SPAN class="emphasis"><EM>would</EM></SPAN> be printed in a
        real merge.  It's useful for getting a â<SPAN class="quote">high-level</SPAN>â
        preview of the potential merge, for those times
        when running <SPAN class="command"><STRONG>svn diff</STRONG></SPAN> gives too much
        detail.</P><DIV class="tip" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Tip</H3><P>After performing a merge operation, but before committing
          the results of the merge, you can use <STRONG class="userinput"><CODE>svn diff
          --depth=empty <EM class="replaceable"><CODE>/path/to/merge/target</CODE></EM></CODE></STRONG> to see only
          the changes to the immediate target of your merge.  If your
          merge target was a directory, only property differences will
          be displayed.  This is a handy way to see the changes to the
          <CODE class="literal">svn:mergeinfo</CODE> property recorded by the
          merge operation, which will remind you about what you've
          just merged.</P></DIV><P>Of course, the best way to preview a merge operation is to
        just do it!  Remember, running <SPAN class="command"><STRONG>svn merge</STRONG></SPAN>
        isn't an inherently risky thing (unless you've made local
        modifications to your working copyâbut we've already
        stressed that you shouldn't be merging into such an
        environment).  If you don't like the results of the merge,
        simply run <STRONG class="userinput"><CODE>svn revert . -R</CODE></STRONG> to revert the changes from
        your working copy and retry the command with different
        options.  The merge isn't final until you
        actually <SPAN class="command"><STRONG>svn commit</STRONG></SPAN> the results.</P><DIV class="tip" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Tip</H3><P>While it's perfectly fine to experiment with merges by
          running <SPAN class="command"><STRONG>svn merge</STRONG></SPAN> and <SPAN class="command"><STRONG>svn
          revert</STRONG></SPAN> over and over, you may run into some
          annoying (but easily bypassed) roadblocks.  For example, if
          the merge operation adds a new file (i.e., schedules it for
          addition), <SPAN class="command"><STRONG>svn revert</STRONG></SPAN> won't actually
          remove the file; it simply unschedules the addition.  You're
          left with an unversioned file.  If you then attempt to run
          the merge again, you may get conflicts due to the
          unversioned file â<SPAN class="quote">being in the way.</SPAN>â Solution?
          After performing a revert, be sure to clean up the working
          copy and remove unversioned files and directories.  The
          output of <SPAN class="command"><STRONG>svn status</STRONG></SPAN> should be as clean
          as possible, ideally showing no output.</P></DIV></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.branchmerge.basicmerging.undo"></A>Undoing Changes</H3></DIV></DIV></DIV><P>An extremely common use for <SPAN class="command"><STRONG>svn merge</STRONG></SPAN>
        is to roll back a change that has already been committed.
        Suppose you're working away happily on a working copy of
        <CODE class="filename">/calc/trunk</CODE>, and you discover that the
        change made way back in revision 303, which changed
        <CODE class="filename">integer.c</CODE>, is completely wrong.  It never
        should have been committed.  You can use <SPAN class="command"><STRONG>svn
        merge</STRONG></SPAN> to â<SPAN class="quote">undo</SPAN>â the change in your
        working copy, and then commit the local modification to the
        repository.  All you need to do is to specify a
        <SPAN class="emphasis"><EM>reverse</EM></SPAN> difference.  (You can do this by
        specifying <CODE class="option">--revision 303:302</CODE>, or by an
        equivalent <CODE class="option">--change -303</CODE>.)</P><PRE class="screen">$ svn merge -c -303 http://svn.example.com/repos/calc/trunk
--- Reverse-merging r303 into 'integer.c':
U    integer.c

$ svn status
 M     .
M      integer.c

$ svn diff
â¦
# verify that the change is removed
â¦

$ svn commit -m "Undoing change committed in r303."
Sending        integer.c
Transmitting file data .
Committed revision 350.
</PRE><P>As we mentioned earlier, one way to think about a
        repository revision is as a specific changeset.  By using the
        <CODE class="option">-r</CODE> option, you can ask <SPAN class="command"><STRONG>svn
        merge</STRONG></SPAN> to apply a changeset, or a whole range of
        changesets, to your working copy.  In our case of undoing a
        change, we're asking <SPAN class="command"><STRONG>svn merge</STRONG></SPAN> to apply
        changeset #303 to our working copy
        <SPAN class="emphasis"><EM>backward</EM></SPAN>.</P><P>Keep in mind that rolling back a change like this is just
        like any other <SPAN class="command"><STRONG>svn merge</STRONG></SPAN> operation, so you
        should use <SPAN class="command"><STRONG>svn status</STRONG></SPAN> and <SPAN class="command"><STRONG>svn
        diff</STRONG></SPAN> to confirm that your work is in the state you
        want it to be in, and then use <SPAN class="command"><STRONG>svn commit</STRONG></SPAN>
        to send the final version to the repository.  After
        committing, this particular changeset is no longer reflected
        in the <CODE class="literal">HEAD</CODE> revision.</P><P>Again, you may be thinking: well, that really didn't undo
        the commit, did it?  The change still exists in revision 303.
        If somebody checks out a version of the
        <CODE class="filename">calc</CODE> project between revisions 303 and
        349, she'll still see the bad change, right?</P><P>Yes, that's true.  When we talk about
        â<SPAN class="quote">removing</SPAN>â a change, we're really talking about
        removing it from the <CODE class="literal">HEAD</CODE> revision.  The
        original change still exists in the repository's history.  For
        most situations, this is good enough.  Most people are only
        interested in tracking the <CODE class="literal">HEAD</CODE> of a
        project anyway.  There are special cases, however, where you
        really might want to destroy all evidence of the commit.
        (Perhaps somebody accidentally committed a confidential
        document.)  This isn't so easy, it turns out, because
        Subversion was deliberately designed to never lose
        information.  Revisions are immutable trees that build upon
        one another.  Removing a revision from history would cause a
        domino effect, creating chaos in all subsequent revisions and
        possibly invalidating all working copies.
        <SUP>[<A id="id521506" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id521506" class="footnote">21</A>]</SUP>
      </P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.branchmerge.basicmerging.resurrect"></A>Resurrecting Deleted Items</H3></DIV></DIV></DIV><P>The great thing about version control systems is that
        information is never lost.  Even when you delete a file or
        directory, it may be gone from the <CODE class="literal">HEAD</CODE>
        revision, but the object still exists in earlier revisions.
        One of the most common questions new users ask is, â<SPAN class="quote">How
        do I get my old file or directory back?</SPAN>â</P><P>The first step is to define
        exactly <SPAN class="emphasis"><EM>which</EM></SPAN> item you're
        trying to resurrect.  Here's a useful metaphor: you can think
        of every object in the repository as existing in a sort of
        two-dimensional coordinate system.  The first coordinate is a
        particular revision tree, and the second coordinate is a path
        within that tree.  So every version of your file or directory
        can be defined by a specific coordinate pair.  (Remember the
        â<SPAN class="quote">peg revision</SPAN>â
        syntaxâfoo.c@224âmentioned back in
        <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.pegrevs" title="Peg and Operative Revisions">the section called âPeg and Operative Revisionsâ</A>.) </P><P>First, you might need to use <SPAN class="command"><STRONG>svn log</STRONG></SPAN> to
        discover the exact coordinate pair you wish to resurrect.  A
        good strategy is to run <STRONG class="userinput"><CODE>svn log --verbose</CODE></STRONG>
        in a directory that used to contain your deleted item.  The
        <CODE class="option">--verbose</CODE> (<CODE class="option">-v</CODE>) option shows
        a list of all changed items in each revision; all you need to
        do is find the revision in which you deleted the file or
        directory.  You can do this visually, or by using another tool
        to examine the log output (via <SPAN class="command"><STRONG>grep</STRONG></SPAN>, or
        perhaps via an incremental search in an editor).</P><PRE class="screen">$ cd parent-dir
$ svn log -v
â¦
------------------------------------------------------------------------
r808 | joe | 2003-12-26 14:29:40 -0600 (Fri, 26 Dec 2003) | 3 lines
Changed paths:
   D /calc/trunk/real.c
   M /calc/trunk/integer.c

Added fast fourier transform functions to integer.c.
Removed real.c because code now in double.c.
â¦
</PRE><P>In the example, we're assuming that you're looking for a
        deleted file <CODE class="filename">real.c</CODE>.  By looking through
        the logs of a parent directory, you've spotted that this file
        was deleted in revision 808.  Therefore, the last version of
        the file to exist was in the revision right before that.
        Conclusion: you want to resurrect the path
        <CODE class="filename">/calc/trunk/real.c</CODE> from revision
        807.</P><P>That was the hard partâthe research.  Now that you
        know what you want to restore, you have two different
        choices.</P><P>One option is to use <SPAN class="command"><STRONG>svn merge</STRONG></SPAN> to apply
        revision 808 â<SPAN class="quote">in reverse.</SPAN>â (We already
        discussed how to undo changes in
        <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.basicmerging.undo" title="Undoing Changes">the section called âUndoing Changesâ</A>.)  This
        would have the effect of re-adding <CODE class="filename">real.c</CODE>
        as a local modification.  The file would be scheduled for
        addition, and after a commit, the file would again exist
        in <CODE class="literal">HEAD</CODE>.</P><P>In this particular example, however, this is probably not
        the best strategy.  Reverse-applying revision 808 would not
        only schedule <CODE class="filename">real.c</CODE> for addition, but
        the log message indicates that it would also undo certain
        changes to <CODE class="filename">integer.c</CODE>, which you don't
        want.  Certainly, you could reverse-merge revision 808 and
        then <SPAN class="command"><STRONG>svn revert</STRONG></SPAN> the local modifications to
        <CODE class="filename">integer.c</CODE>, but this technique doesn't
        scale well.  What if 90 files were changed in revision
        808?</P><P>A second, more targeted strategy is not to use
        <SPAN class="command"><STRONG>svn merge</STRONG></SPAN> at all, but rather to use the
        <SPAN class="command"><STRONG>svn copy</STRONG></SPAN> command.  Simply copy the exact
        revision and path â<SPAN class="quote">coordinate pair</SPAN>â from the
        repository to your working copy:</P><PRE class="screen">$ svn copy http://svn.example.com/repos/calc/trunk/real.c@807 ./real.c

$ svn status
A  +   real.c

$ svn commit -m "Resurrected real.c from revision 807, /calc/trunk/real.c."
Adding         real.c
Transmitting file data .
Committed revision 1390.
</PRE><P>The plus sign in the status output indicates that the item
        isn't merely scheduled for addition, but scheduled for
        addition â<SPAN class="quote">with history.</SPAN>â  Subversion remembers
        where it was copied from.  In the future, running <SPAN class="command"><STRONG>svn
        log</STRONG></SPAN> on this file will traverse back through the
        file's resurrection and through all the history it had prior
        to revision 807.  In other words, this new
        <CODE class="filename">real.c</CODE> isn't really new; it's a direct
        descendant of the original, deleted file.  This is usually
        considered a good and useful thing.  If, however, you wanted
        to resurrect the file <SPAN class="emphasis"><EM>without</EM></SPAN>
        maintaining a historical link to the old file, this technique
        works just as well:</P><PRE class="screen">$ svn cat http://svn.example.com/repos/calc/trunk/real.c@807 &gt; ./real.c

$ svn add real.c
A         real.c

$ svn commit -m "Re-created real.c from revision 807."
Adding         real.c
Transmitting file data .
Committed revision 1390.
</PRE><P>Although our example shows us resurrecting a file, note
        that these same techniques work just as well for resurrecting
        deleted directories.  Also note that a resurrection doesn't
        have to happen in your working copyâit can happen
        entirely in the repository:</P><PRE class="screen">$ svn copy http://svn.example.com/repos/calc/trunk/real.c@807 \
           http://svn.example.com/repos/calc/trunk/ \
      -m "Resurrect real.c from revision 807."
Committed revision 1390.

$ svn update
A    real.c
Updated to revision 1390.
</PRE></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.branchmerge.advanced"></A>Advanced Merging</H2></DIV></DIV></DIV><P>Here ends the automated magic.  Sooner or later, once you
      get the hang of branching and merging, you're going to have to
      ask Subversion to merge <SPAN class="emphasis"><EM>specific</EM></SPAN> changes
      from one place to another.  To do this, you're going to
      have to start passing more complicated arguments to <SPAN class="command"><STRONG>svn
      merge</STRONG></SPAN>.  The next section describes the fully expanded
      syntax of the command and discusses a number of common
      scenarios that require it.</P><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.branchmerge.cherrypicking"></A>Cherrypicking</H3></DIV></DIV></DIV><P>Just as the term â<SPAN class="quote">changeset</SPAN>â is often used in
        version control systems, so is the term
        <EM class="firstterm">cherrypicking</EM>.  This word refers to
        the act of choosing <SPAN class="emphasis"><EM>one</EM></SPAN> specific
        changeset from a branch and replicating it to another.
        Cherrypicking may also refer to the act of duplicating a
        particular set of (not necessarily contiguous!) changesets
        from one branch to another.  This is in contrast to more
        typical merging scenarios, where the â<SPAN class="quote">next</SPAN>â
        contiguous range of revisions is duplicated
        automatically.</P><P>Why would people want to replicate just a single change?
        It comes up more often than you'd think.  For example, let's
        go back in time and imagine that you haven't yet merged your
        private feature branch back to the trunk.  At the
        water cooler, you get word that Sally made an interesting
        change to <CODE class="filename">integer.c</CODE> on the trunk.
        Looking over the history of commits to the trunk, you see that
        in revision 355 she fixed a critical bug that directly
        impacts the feature you're working on.  You might not be ready
        to merge all the trunk changes to your branch just yet, but
        you certainly need that particular bug fix in order to continue
        your work.</P><PRE class="screen">$ svn diff -c 355 http://svn.example.com/repos/calc/trunk

Index: integer.c
===================================================================
--- integer.c	(revision 354)
+++ integer.c	(revision 355)
@@ -147,7 +147,7 @@
     case 6:  sprintf(info-&gt;operating_system, "HPFS (OS/2 or NT)"); break;
     case 7:  sprintf(info-&gt;operating_system, "Macintosh"); break;
     case 8:  sprintf(info-&gt;operating_system, "Z-System"); break;
-    case 9:  sprintf(info-&gt;operating_system, "CP/MM");
+    case 9:  sprintf(info-&gt;operating_system, "CP/M"); break;
     case 10:  sprintf(info-&gt;operating_system, "TOPS-20"); break;
     case 11:  sprintf(info-&gt;operating_system, "NTFS (Windows NT)"); break;
     case 12:  sprintf(info-&gt;operating_system, "QDOS"); break;
</PRE><P>Just as you used <SPAN class="command"><STRONG>svn diff</STRONG></SPAN> in the prior
        example to examine revision 355, you can pass the same option
        to <SPAN class="command"><STRONG>svn merge</STRONG></SPAN>:</P><PRE class="screen">$ svn merge -c 355 http://svn.example.com/repos/calc/trunk
U    integer.c

$ svn status
M      integer.c
</PRE><P>You can now go through the usual testing procedures before
        committing this change to your branch.  After the commit,
        Subversion marks r355 as having been merged to the branch so
        that future â<SPAN class="quote">magic</SPAN>â merges that synchronize your
        branch with the trunk know to skip over r355.  (Merging the
        same change to the same branch almost always results in a
        conflict!)</P><PRE class="screen">$ cd my-calc-branch

$ svn propget svn:mergeinfo .
/trunk:341-349,355

# Notice that r355 isn't listed as "eligible" to merge, because
# it's already been merged.
$ svn mergeinfo http://svn.example.com/repos/calc/trunk --show-revs eligible
r350
r351
r352
r353
r354
r356
r357
r358
r359
r360

$ svn merge http://svn.example.com/repos/calc/trunk
--- Merging r350 through r354 into '.':
 U   .
U    integer.c
U    Makefile
--- Merging r356 through r360 into '.':
 U   .
U    integer.c
U    button.c
</PRE><P>This use case of replicating
        (or <EM class="firstterm">backporting</EM>) bug fixes from one
        branch to another is perhaps the most popular reason for
        cherrypicking changes; it comes up all the time, for example,
        when a team is maintaining a â<SPAN class="quote">release branch</SPAN>â of
        software.  (We discuss this pattern in
        <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.commonpatterns.release" title="Release Branches">the section called âRelease Branchesâ</A>.)</P><DIV class="warning" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Warning</H3><P>Did you notice how, in the last example, the merge
          invocation caused two distinct ranges of merges to be
          applied?  The <SPAN class="command"><STRONG>svn merge</STRONG></SPAN> command applied
          two independent patches to your working copy to
          skip over changeset 355, which your branch already
          contained.  There's nothing inherently wrong with this,
          except that it has the potential to make conflict resolution
          trickier.  If the first range of changes creates
          conflicts, you <SPAN class="emphasis"><EM>must</EM></SPAN> resolve them
          interactively for the merge process to continue and
          apply the second range of changes.  If you postpone a
          conflict from the first wave of changes, the whole merge
          command will bail out with an error message.
          <SUP>[<A id="id521965" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id521965" class="footnote">22</A>]</SUP> 
        </P></DIV><P>A word of warning: while <SPAN class="command"><STRONG>svn diff</STRONG></SPAN> and
        <SPAN class="command"><STRONG>svn merge</STRONG></SPAN> are very similar in concept, they
        do have different syntax in many cases.  Be sure to read about
        them in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref" title="Chapter&nbsp;9.&nbsp;Subversion Complete Reference">Chapter&nbsp;9, <I>Subversion Complete Reference</I></A> for details, or ask
        <SPAN class="command"><STRONG>svn help</STRONG></SPAN>.  For example, <SPAN class="command"><STRONG>svn
        merge</STRONG></SPAN> requires a working copy path as a target, that is,
        a place where it should apply the generated patch.  If the
        target isn't specified, it assumes you are trying to perform
        one of the following common operations:</P><DIV class="itemizedlist"><UL type="disc"><LI><P>You want to merge directory changes into your current
            working directory.</P></LI><LI><P>You want to merge the changes in a specific file into
            a file by the same name that exists in your current working
            directory.</P></LI></UL></DIV><P>If you are merging a directory and haven't specified a
        target path, <SPAN class="command"><STRONG>svn merge</STRONG></SPAN> assumes the first
        case and tries to apply the changes into your current
        directory.  If you are merging a file, and that file (or a
        file by the same name) exists in your current working
        directory,
        <SPAN class="command"><STRONG>svn merge</STRONG></SPAN> assumes the second case and tries
        to apply the changes to a local file with the same name.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.branchmerge.advanced.advancedsyntax"></A>Merge Syntax:  Full Disclosure</H3></DIV></DIV></DIV><P>You've now seen some examples of the <SPAN class="command"><STRONG>svn
        merge</STRONG></SPAN> command, and you're about to see several more.
        If you're feeling confused about exactly how merging works,
        you're not alone.  Many users (especially those new to version
        control) are initially perplexed about the proper syntax of
        the command and about how and when the feature should be
        used.  But fear not, this command is actually much simpler
        than you think!  There's a very easy technique for
        understanding exactly how <SPAN class="command"><STRONG>svn merge</STRONG></SPAN>
        behaves.</P><P>The main source of confusion is the
        <SPAN class="emphasis"><EM>name</EM></SPAN> of the command.  The term
        â<SPAN class="quote">merge</SPAN>â somehow denotes that branches are
        combined together, or that some sort of mysterious
        blending of data is going on.  That's not the case.  A better
        name for the command might have been <SPAN class="command"><STRONG>svn
        diff-and-apply</STRONG></SPAN>, because that's all that happens:
        two repository trees are compared, and the differences are
        applied to a working copy.</P><P>If you're using <SPAN class="command"><STRONG>svn merge</STRONG></SPAN> to do basic
        copying of changes between branches, it will generally do the
        right thing automatically.  For example, a command such as the
        following:</P><PRE class="screen">$ svn merge http://svn.example.com/repos/calc/some-branch
</PRE><P>will attempt to duplicate any changes made
        on <CODE class="filename">some-branch</CODE> into your current working
        directory, which is presumably a working copy that shares some
        historical connection to the branch.  The command is smart
        enough to only duplicate changes that your working copy
        doesn't yet have.  If you repeat this command once a week, it
        will only duplicate the â<SPAN class="quote">newest</SPAN>â branch changes
        that happened since you last merged.</P><P>If you choose to use the <SPAN class="command"><STRONG>svn merge</STRONG></SPAN>
        command in all its full glory by giving it specific revision
        ranges to duplicate, the command takes three main
        arguments:</P><DIV class="orderedlist"><OL type="1"><LI><P>An initial repository tree (often called the
        <EM class="firstterm">left side</EM> of the
        comparison)</P></LI><LI><P>A final repository tree (often called the
        <EM class="firstterm">right side</EM> of the
        comparison)</P></LI><LI><P>A working copy to accept the differences as
        local changes (often called the <EM class="firstterm">target</EM>
        of the merge)</P></LI></OL></DIV><P>Once these three arguments are specified, the two trees
        are compared, and the differences are applied to the
        target working copy as local modifications.  When the command
        is done, the results are no different than if you had
        hand-edited the files or run various <SPAN class="command"><STRONG>svn
        add</STRONG></SPAN> or <SPAN class="command"><STRONG>svn delete</STRONG></SPAN> commands
        yourself.  If you like the results, you can commit them.  If
        you don't like the results, you can simply <SPAN class="command"><STRONG>svn
        revert</STRONG></SPAN> all of the changes.</P><P>The syntax of <SPAN class="command"><STRONG>svn merge</STRONG></SPAN> allows you to
        specify the three necessary arguments rather flexibly.  Here
        are some examples:</P><PRE class="screen">$ svn merge http://svn.example.com/repos/branch1@150 \
            http://svn.example.com/repos/branch2@212 \
            my-working-copy

$ svn merge -r 100:200 http://svn.example.com/repos/trunk my-working-copy

$ svn merge -r 100:200 http://svn.example.com/repos/trunk
</PRE><P>The first syntax lays out all three arguments explicitly,
        naming each tree in the form <SPAN class="emphasis"><EM>URL@REV</EM></SPAN> and
        naming the working copy target.  The second syntax can be used
        as a shorthand for situations when you're comparing two
        different revisions of the same URL.  The last syntax shows
        how the working copy argument is optional; if omitted, it
        defaults to the current directory.</P><P>While the first example shows the â<SPAN class="quote">full</SPAN>â
        syntax of <SPAN class="command"><STRONG>svn merge</STRONG></SPAN>, it needs to be used
        very carefully;  it can result in merges which do not record
        any <CODE class="literal">svn:mergeinfo</CODE> metadata at all.  The
        next section talks a bit more about this.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.branchmerge.nomergedata"></A>Merges Without Mergeinfo</H3></DIV></DIV></DIV><P>Subversion tries to generate merge metadata whenever it
        can, to make future invocations of <SPAN class="command"><STRONG>svn
        merge</STRONG></SPAN> smarter.  There are still situations, however,
        where <CODE class="literal">svn:mergeinfo</CODE> data is not created or
        changed.  Remember to be a bit wary of these scenarios:</P><DIV class="variablelist"><DL><DT><SPAN class="term">Merging unrelated sources</SPAN></DT><DD><P>If you
            ask <SPAN class="command"><STRONG>svn merge</STRONG></SPAN> to compare two URLs that
            aren't related to each other, a patch will still be
            generated and applied to your working copy, but no merging
            metadata will be created.  There's no common history
            between the two sources, and future â<SPAN class="quote">smart</SPAN>â
            merges depend on that common history.</P></DD><DT><SPAN class="term">Merging from foreign repositories</SPAN></DT><DD><P>While it's possible to run a
            command such as <STRONG class="userinput"><CODE>svn merge -r 100:200
            <EM class="replaceable"><CODE>http://svn.foreignproject.com/repos/trunk</CODE></EM></CODE></STRONG>, the
            resultant patch will also lack any historical merge
            metadata.  At time of this writing, Subversion has no way of
            representing different repository URLs within
            the <CODE class="literal">svn:mergeinfo</CODE> property.</P></DD><DT><SPAN class="term">Using <CODE class="option">--ignore-ancestry</CODE></SPAN></DT><DD><P>If this option is passed to <SPAN class="command"><STRONG>svn
            merge</STRONG></SPAN>, it causes the merging logic to mindlessly
            generate differences the same way that <SPAN class="command"><STRONG>svn
            diff</STRONG></SPAN> does, ignoring any historical
            relationships.  We discuss this later in the chapter in
            <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.advanced.ancestry" title="Noticing or Ignoring Ancestry">the section called âNoticing or Ignoring Ancestryâ</A>.</P></DD><DT><SPAN class="term">Applying reverse merges to a target's natural history</SPAN></DT><DD><P>Earlier in this chapter 
                (<A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.basicmerging.undo" title="Undoing Changes">the section called âUndoing Changesâ</A>)
                we discussed how to use <SPAN class="command"><STRONG>svn merge</STRONG></SPAN>
                to apply a â<SPAN class="quote">reverse patch</SPAN>â as a way of
                rolling back changes.  If this technique is used to
                undo a change to an object's personal history (e.g.,
                commit r5 to the trunk, then immediately roll back r5
                using <STRONG class="userinput"><CODE>svn merge . -c -5</CODE></STRONG>), this
                sort of merge doesn't affect the recorded mergeinfo.
            <SUP>[<A id="id522412" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id522412" class="footnote">23</A>]</SUP>
            </P></DD></DL></DIV></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.branchmerge.advanced.mergeconflicts"></A>More on Merge Conflicts</H3></DIV></DIV></DIV><P>Just like the <SPAN class="command"><STRONG>svn update</STRONG></SPAN> command,
        <SPAN class="command"><STRONG>svn merge</STRONG></SPAN> applies changes to your working
        copy.  And therefore it's also capable of creating
        conflicts.  The conflicts produced by <SPAN class="command"><STRONG>svn
          merge</STRONG></SPAN>, however, are sometimes different, and this
        section explains those differences.</P><P>To begin with, assume that your working copy has no
        local edits.  When you <SPAN class="command"><STRONG>svn update</STRONG></SPAN> to a
        particular revision, the changes sent by the server will
        always apply â<SPAN class="quote">cleanly</SPAN>â to your working copy.
        The server produces the delta by comparing two trees: a
        virtual snapshot of your working copy, and the revision tree
        you're interested in.  Because the left hand side of the
        comparison is exactly equal to what you already have, the
        delta is guaranteed to correctly convert your working copy
        into the right hand tree.</P><P>But <SPAN class="command"><STRONG>svn merge</STRONG></SPAN> has no such guarantees
        and can be much more chaotic: the advanced user can ask the
        server to compare <SPAN class="emphasis"><EM>any</EM></SPAN> two trees at all,
        even ones that are unrelated to the working copy!  This means
        there's large potential for human error.  Users will sometimes
        compare the wrong two trees, creating a delta that doesn't
        apply cleanly.  <SPAN class="command"><STRONG>svn merge</STRONG></SPAN> will do its best
        to apply as much of the delta as possible, but some parts may
        be impossible.  Just as the Unix
        <SPAN class="command"><STRONG>patch</STRONG></SPAN> command sometimes complains about
        â<SPAN class="quote">failed hunks,</SPAN>â <SPAN class="command"><STRONG>svn merge</STRONG></SPAN> will
        similarly complain about â<SPAN class="quote">skipped
        targets</SPAN>â:</P><PRE class="screen">$ svn merge -r 1288:1351 http://svn.example.com/repos/branch
U    foo.c
U    bar.c
Skipped missing target: 'baz.c'
U    glub.c
U    sputter.h

Conflict discovered in 'glorb.h'.
Select: (p) postpone, (df) diff-full, (e) edit,
        (h) help for more options:
</PRE><P>In the previous example, it might be the case that
        <CODE class="filename">baz.c</CODE> exists in both snapshots of the
        branch being compared, and the resultant delta wants to
        change the file's contents, but the file doesn't exist in
        the working copy.  Whatever the case, the
        â<SPAN class="quote">skipped</SPAN>â message means that the user is most
        likely comparing the wrong two trees; it's the classic
        sign of user error.  When this happens, it's easy to
        recursively revert all the changes created by the merge
        (<STRONG class="userinput"><CODE>svn revert . --recursive</CODE></STRONG>), delete any
        unversioned files or directories left behind after the
        revert, and rerun <SPAN class="command"><STRONG>svn merge</STRONG></SPAN> with
        different arguments.</P><P>Also notice that the preceeding example shows a conflict
        happening on <CODE class="filename">glorb.h</CODE>.  We already
        stated that the working copy has no local edits: how can a
        conflict possibly happen?  Again, because the user can use
        <SPAN class="command"><STRONG>svn merge</STRONG></SPAN> to define and apply any old
        delta to the working copy, that delta may contain textual
        changes that don't cleanly apply to a working file, even if
        the file has no local modifications.</P><P>Another small difference between <SPAN class="command"><STRONG>svn
          update</STRONG></SPAN> and <SPAN class="command"><STRONG>svn merge</STRONG></SPAN> is the
        names of the full-text files created when a conflict
        happens.  In <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.resolve" title="Resolve Conflicts (Merging Others&#39; Changes)">the section called âResolve Conflicts (Merging Others' Changes)â</A>, we saw
        that an update produces files named
        <CODE class="filename">filename.mine</CODE>,
        <CODE class="filename">filename.rOLDREV</CODE>, and
        <CODE class="filename">filename.rNEWREV</CODE>.  When <SPAN class="command"><STRONG>svn
          merge</STRONG></SPAN> produces a conflict, though, it creates
        three files named <CODE class="filename">filename.working</CODE>,
        <CODE class="filename">filename.left</CODE>, and
        <CODE class="filename">filename.right</CODE>.  In this case, the
        terms â<SPAN class="quote">left</SPAN>â and â<SPAN class="quote">right</SPAN>â are
        describing which side of the double-tree comparison the file
        came from.  In any case, these differing names will help you
        distinguish between conflicts that happened as a result of an
        update and ones that happened as a result of a
        merge.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.branchmerge.advanced.blockchanges"></A>Blocking Changes</H3></DIV></DIV></DIV><P>Sometimes there's a particular changeset that you don't
        want to be automatically merged.  For example, perhaps your
        team's policy is to do new development work on
        <CODE class="filename">/trunk</CODE>, but to be more conservative about
        backporting changes to a stable branch you use for releasing
        to the public.  On one extreme, you can manually cherrypick
        single changesets from the trunk to the branchâjust the
        changes that are stable enough to pass muster.  Maybe things
        aren't quite that strict, though; perhaps most of the time
        you'd like to just let <SPAN class="command"><STRONG>svn merge</STRONG></SPAN>
        automatically merge most changes from trunk to branch.  In
        this case, you'd like a way to mask a few specific changes
        out, that is, prevent them from ever being automatically
        merged.</P><P>In Subversion 1.5, the only way to block a changeset is to
        make the system believe that the change has
        <SPAN class="emphasis"><EM>already</EM></SPAN> been merged.  To do this, one can
        invoke a merge command with the <CODE class="option">--record-only</CODE>
        option:</P><PRE class="screen">$ cd my-calc-branch

$ svn propget svn:mergeinfo .
/trunk:1680-3305

# Let's make the metadata list r3328 as already merged.
$ svn merge -c 3328 --record-only http://svn.example.com/repos/calc/trunk

$ svn status
M     .

$ svn propget svn:mergeinfo .
/trunk:1680-3305,3328

$ svn commit -m "Block r3328 from being merged to the branch."
â¦
</PRE><P>This technique works, but it's also a little bit
        dangerous.  The main problem is that we're not clearly
        differentiating between the ideas of â<SPAN class="quote">I already have this
        change</SPAN>â and â<SPAN class="quote">I don't have this change.</SPAN>â
        We're effectively lying to the system, making it think that
        the change was previously merged.  This puts the
        responsibility on youâthe userâto remember that
        the change wasn't actually merged, it just wasn't wanted.
        There's no way to ask Subversion for a list of â<SPAN class="quote">blocked
        changelists.</SPAN>â If you want to track them (so that you
        can unblock them someday). you'll need to record them in a
        text file somewhere, or perhaps in an invented property.  In
        Subversion 1.5, unfortunately, this is the only way to manage
        blocked revisions; the plans are to make a better interface
        for this in future versions.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.branchmerge.advanced.logblame"></A>Merge-Sensitive Logs and Annotations</H3></DIV></DIV></DIV><P>One of the main features of any version control system is
        to keep track of who changed what, and when they did it.
        The <SPAN class="command"><STRONG>svn log</STRONG></SPAN> and <SPAN class="command"><STRONG>svn
        blame</STRONG></SPAN> commands are just the tools for this: when
        invoked on individual files, they show not only the history of
        changesets that affected the file, but also exactly which user
        wrote which line of code, and when she did it.</P><P>When changes start getting replicated between branches,
        however, things start to get complicated.  For example, if you
        were to ask <SPAN class="command"><STRONG>svn log</STRONG></SPAN> about the history of
        your feature branch, it would show exactly every revision that ever
        affected the branch:</P><PRE class="screen">$ cd my-calc-branch
$ svn log -q
------------------------------------------------------------------------
r390 | user | 2002-11-22 11:01:57 -0600 (Fri, 22 Nov 2002) | 1 line
------------------------------------------------------------------------
r388 | user | 2002-11-21 05:20:00 -0600 (Thu, 21 Nov 2002) | 2 lines
------------------------------------------------------------------------
r381 | user | 2002-11-20 15:07:06 -0600 (Wed, 20 Nov 2002) | 2 lines
------------------------------------------------------------------------
r359 | user | 2002-11-19 19:19:20 -0600 (Tue, 19 Nov 2002) | 2 lines
------------------------------------------------------------------------
r357 | user | 2002-11-15 14:29:52 -0600 (Fri, 15 Nov 2002) | 2 lines
------------------------------------------------------------------------
r343 | user | 2002-11-07 13:50:10 -0600 (Thu, 07 Nov 2002) | 2 lines
------------------------------------------------------------------------
r341 | user | 2002-11-03 07:17:16 -0600 (Sun, 03 Nov 2002) | 2 lines
------------------------------------------------------------------------
r303 | sally | 2002-10-29 21:14:35 -0600 (Tue, 29 Oct 2002) | 2 lines
------------------------------------------------------------------------
r98 | sally | 2002-02-22 15:35:29 -0600 (Fri, 22 Feb 2002) | 2 lines
------------------------------------------------------------------------
</PRE><P>But is this really an accurate picture of all the changes
        that happened on the branch?  What's being left out here is
        the fact that revisions 390, 381, and 357 were actually the
        results of merging changes from the trunk.  If you look at one
        of these logs in detail, the multiple trunk changesets that
        comprised the branch change are nowhere to be seen:</P><PRE class="screen">$ svn log -v -r 390
------------------------------------------------------------------------
r390 | user | 2002-11-22 11:01:57 -0600 (Fri, 22 Nov 2002) | 1 line
Changed paths:
   M /branches/my-calc-branch/button.c
   M /branches/my-calc-branch/README

Final merge of trunk changes to my-calc-branch.
</PRE><P>We happen to know that this merge to the branch was
        nothing but a merge of trunk changes.  How can we see those
        trunk changes as well?  The answer is to use the
        <CODE class="option">--use-merge-history</CODE> (<CODE class="option">-g</CODE>)
        option.  This option expands those â<SPAN class="quote">child</SPAN>â
        changes that were part of the merge.</P><PRE class="screen">$ svn log -v -r 390 -g
------------------------------------------------------------------------
r390 | user | 2002-11-22 11:01:57 -0600 (Fri, 22 Nov 2002) | 1 line
Changed paths:
   M /branches/my-calc-branch/button.c
   M /branches/my-calc-branch/README

Final merge of trunk changes to my-calc-branch.
------------------------------------------------------------------------
r383 | sally | 2002-11-21 03:19:00 -0600 (Thu, 21 Nov 2002) | 2 lines
Changed paths:
   M /branches/my-calc-branch/button.c
Merged via: r390

Fix inverse graphic error on button.
------------------------------------------------------------------------
r382 | sally | 2002-11-20 16:57:06 -0600 (Wed, 20 Nov 2002) | 2 lines
Changed paths:
   M /branches/my-calc-branch/README
Merged via: r390

Document my last fix in README.
</PRE><P>By making the log operation use merge history, we see not
        just the revision we queried (r390), but also the two revisions
        that came along on the ride with itâa couple of changes
        made by Sally to the trunk.  This is a much more complete
        picture of history!</P><P>The <SPAN class="command"><STRONG>svn blame</STRONG></SPAN> command also takes the
        <CODE class="option">--use-merge-history</CODE> (<CODE class="option">-g</CODE>)
        option.  If this option is neglected, somebody looking at
        a line-by-line annotation of <CODE class="filename">button.c</CODE> may
        get the mistaken impression that you were responsible for the
        lines that fixed a certain error:</P><PRE class="screen">$ svn blame button.c
â¦
   390    user    retval = inverse_func(button, path);
   390    user    return retval;
   390    user    }
â¦
</PRE><P>And while it's true that you did actually commit those
        three lines in revision 390, two of them were actually written
        by Sally back in revision 383:</P><PRE class="screen">$ svn blame button.c -g
â¦
G    383    sally   retval = inverse_func(button, path);
G    383    sally   return retval;
     390    user    }
â¦
</PRE><P>Now we know who to <SPAN class="emphasis"><EM>really</EM></SPAN> blame for
        those two lines of code!</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.branchmerge.advanced.ancestry"></A>Noticing or Ignoring Ancestry</H3></DIV></DIV></DIV><P>When conversing with a Subversion developer, you might
        very likely hear reference to the term
        <EM class="firstterm">ancestry</EM>.  This word is used to
        describe the relationship between two objects in a
        repository: if they're related to each other, one
        object is said to be an ancestor of the other.</P><P>For example, suppose you commit revision 100, which
        includes a change to a file <CODE class="filename">foo.c</CODE>.
        Then <CODE class="filename">foo.c@99</CODE> is an
        â<SPAN class="quote">ancestor</SPAN>â of <CODE class="filename">foo.c@100</CODE>.
        On the other hand, suppose you commit the deletion of
        <CODE class="filename">foo.c</CODE> in revision 101, and then add a
        new file by the same name in revision 102.  In this case,
        <CODE class="filename">foo.c@99</CODE> and
        <CODE class="filename">foo.c@102</CODE> may appear to be related
        (they have the same path), but in fact are completely
        different objects in the repository.  They share no history
        or â<SPAN class="quote">ancestry.</SPAN>â</P><P>The reason for bringing this up is to point out an
        important difference between <SPAN class="command"><STRONG>svn diff</STRONG></SPAN> and
        <SPAN class="command"><STRONG>svn merge</STRONG></SPAN>.  The former command ignores
        ancestry, while the latter command is quite sensitive to it.
        For example, if you asked <SPAN class="command"><STRONG>svn diff</STRONG></SPAN> to
        compare revisions 99 and 102 of <CODE class="filename">foo.c</CODE>,
        you would see line-based diffs; the <SPAN class="command"><STRONG>diff</STRONG></SPAN>
        command is blindly comparing two paths.  But if you asked
        <SPAN class="command"><STRONG>svn merge</STRONG></SPAN> to compare the same two objects,
        it would notice that they're unrelated and first attempt to
        delete the old file, then add the new file;  the output would
        indicate a deletion followed by an add:</P><PRE class="screen">D    foo.c
A    foo.c
      </PRE><P>Most merges involve comparing trees that are ancestrally
        related to one another; therefore, <SPAN class="command"><STRONG>svn
        merge</STRONG></SPAN> defaults to this behavior.  Occasionally,
        however, you may want the <SPAN class="command"><STRONG>merge</STRONG></SPAN> command to
        compare two unrelated trees.  For example, you may have
        imported two source-code trees representing different vendor
        releases of a software project (see
        <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.vendorbr" title="Vendor Branches">the section called âVendor Branchesâ</A>).  If you ask
        <SPAN class="command"><STRONG>svn merge</STRONG></SPAN> to compare the two trees, you'd
        see the entire first tree being deleted, followed by an add
        of the entire second tree!  In these situations, you'll want
        <SPAN class="command"><STRONG>svn merge</STRONG></SPAN> to do a path-based comparison
        only, ignoring any relations between files and directories.
        Add the <CODE class="option">--ignore-ancestry</CODE> option to your
        <SPAN class="command"><STRONG>merge</STRONG></SPAN> command, and it will behave just
          like <SPAN class="command"><STRONG>svn diff</STRONG></SPAN>.  (And conversely, the
        <CODE class="option">--notice-ancestry</CODE> option will cause
        <SPAN class="command"><STRONG>svn diff</STRONG></SPAN> to behave like the
        <SPAN class="command"><STRONG>svn merge</STRONG></SPAN> command.)</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.branchmerge.advanced.moves"></A>Merges and Moves</H3></DIV></DIV></DIV><P>A common desire is to refactor source code, especially
        in Java-based software projects.  Files and directories are
        shuffled around and renamed, often causing great disruption
        to everyone working on the project.  Sounds like a perfect
        case to use a branch, doesn't it?  Just create a branch,
        shuffle things around, and then merge the branch back to the
        trunk, right?</P><P>Alas, this scenario doesn't work so well right now and
        is considered one of Subversion's current weak spots.  The
        problem is that Subversion's <SPAN class="command"><STRONG>svn update</STRONG></SPAN>
        command isn't as robust as it should be, particularly when
        dealing with copy and move operations.</P><P>When you use <SPAN class="command"><STRONG>svn copy</STRONG></SPAN> to duplicate a
        file, the repository remembers where the new file came from,
        but it fails to transmit that information to the client which
        is running <SPAN class="command"><STRONG>svn update</STRONG></SPAN> or <SPAN class="command"><STRONG>svn
        merge</STRONG></SPAN>.  Instead of telling the client, â<SPAN class="quote">Copy
        that file you already have to this new location,</SPAN>â it
        sends down an entirely new file.  This can lead to
        problems, especially because the same thing happens with
        renamed files.  A lesser-known fact about Subversion is that
        it lacks â<SPAN class="quote">true renames</SPAN>ââthe <SPAN class="command"><STRONG>svn
        move</STRONG></SPAN> command is nothing more than an aggregation
        of <SPAN class="command"><STRONG>svn copy</STRONG></SPAN> and <SPAN class="command"><STRONG>svn
        delete</STRONG></SPAN>.</P><P>For example, suppose that while working on your private
        branch, you rename <CODE class="filename">integer.c</CODE>
        to <CODE class="filename">whole.c</CODE>.  Effectively you've created
        a new file in your branch that is a copy of the original
        file, and deleted the original file.  Meanwhile, back
        on <CODE class="filename">trunk</CODE>, Sally has committed some
        improvements to <CODE class="filename">integer.c</CODE>.  Now you
        decide to merge your branch to the trunk:</P><PRE class="screen">$ cd calc/trunk

$ svn merge --reintegrate http://svn.example.com/repos/calc/branches/my-calc-branch
--- Merging differences between repository URLs into '.':
D   integer.c
A   whole.c
U   .
      </PRE><P>This doesn't look so bad at first glance, but it's also
        probably not what you or Sally expected.  The merge operation
        has deleted the latest version of
        the <CODE class="filename">integer.c</CODE> file (the one containing
        Sally's latest changes), and blindly added your
        new <CODE class="filename">whole.c</CODE> fileâwhich is a
        duplicate of the <SPAN class="emphasis"><EM>older</EM></SPAN> version
        of <CODE class="filename">integer.c</CODE>.  The net effect is that
        merging your â<SPAN class="quote">rename</SPAN>â to the branch has removed
        Sally's recent changes from the latest revision!</P><P>This isn't true data loss.  Sally's changes are still in
        the repository's history, but it may not be immediately
        obvious that this has happened.  The moral of this story is
        that until Subversion improves, be very careful about
        merging copies and renames from one branch to
        another.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.branchmerge.advanced.pre1.5clients"></A>Blocking Merge-Unaware Clients</H3></DIV></DIV></DIV><P>If you've just upgraded your server to Subversion 1.5 or
        later, there's a significant risk that pre-1.5 Subversion
        clients can mess up your automated merge tracking.  Why is
        this?  When a pre-1.5 Subversion client performs <SPAN class="command"><STRONG>svn
        merge</STRONG></SPAN>, it doesn't modify the value of
        the <CODE class="literal">svn:mergeinfo</CODE> property at all.  So the
        subsequent commit, despite being the result of a merge,
        doesn't tell the repository about the duplicated
        changesâthat information is lost.  Later on,
        when â<SPAN class="quote">merge-aware</SPAN>â clients attempt automatic
        merging, they're likely to run into all sorts of conflicts
        resulting from repeated merges.</P><P>If you and your team are relying on the merge-tracking
        features of Subversion, you may want to configure your
        repository to prevent older clients from committing changes.
        The easy way to do this is by inspecting
        the â<SPAN class="quote">capabilities</SPAN>â parameter in
        the <CODE class="literal">start-commit</CODE> hook script.  If the
        client reports itself as having <CODE class="literal">mergeinfo</CODE>
        capabilities, the hook script can allow the commit to start.
        If the client doesn't report that capability, have the hook
        deny the commit.  We'll learn more about hook scripts in the
        next chapter; see
        <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.create.hooks" title="Implementing Repository Hooks">the section called âImplementing Repository Hooksâ</A> and
        <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.reposhooks.start-commit" title="start-commit">start-commit</A> for
        details.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.branchmerge.advanced.finalword"></A>The Final Word on Merge Tracking</H3></DIV></DIV></DIV><P>The bottom line is that Subversion's merge-tracking
        feature has an extremely complex internal implementation, and
        the <CODE class="literal">svn:mergeinfo</CODE> property is the only
        window the user has into the machinery.  Because the feature
        is relatively new, a numbers of edge cases and
        possible unexpected behaviors may pop up.</P><P>For example, sometimes mergeinfo will be generated when
        running a simple <SPAN class="command"><STRONG>svn copy</STRONG></SPAN> or <SPAN class="command"><STRONG>svn
        move</STRONG></SPAN> command.  Sometimes mergeinfo will appear on
        files that you didn't expect to be touched by an operation.
        Sometimes mergeinfo won't be generated at all, when you expect
        it to.  Furthermore, the management of mergeinfo metadata has
        a whole set of taxonomies and behaviors around it, such
        as â<SPAN class="quote">explicit</SPAN>â versus â<SPAN class="quote">implicit</SPAN>â
        mergeinfo, â<SPAN class="quote">operative</SPAN>â
        versus â<SPAN class="quote">inoperative</SPAN>â revisions, specific
        mechanisms of mergeinfo â<SPAN class="quote">elision,</SPAN>â and
        even â<SPAN class="quote">inheritance</SPAN>â from parent to child
        directories.</P><P>We've chosen not to cover these detailed topics in this
        book for a couple of reasons.  First, the level of detail is
        absolutely overwhelming for a typical user.  Second, as
        Subversion continues to improve, we feel that a typical user
        <SPAN class="emphasis"><EM>shouldn't</EM></SPAN> have to understand these
        concepts; they'll eventually fade into the background as pesky
        implementation details.  All that said, if you enjoy this sort
        of thing, you can get a fantastic overview in a paper posted
        at CollabNet's website: <A class="ulink" href="http://www.collab.net/community/subversion/articles/merge-info.html" target="_top">http://www.collab.net/community/subversion/articles/merge-info.html</A>.</P><P>For now, if you want to steer clear of bugs and odd
        behaviors in automatic merging, the CollabNet article
        recommends that you stick to these simple best practices:</P><DIV class="itemizedlist"><UL type="disc"><LI><P>For short-term feature branches, follow the simple
            procedure described throughout
            <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.basicmerging" title="Basic Merging">the section called âBasic Mergingâ</A>.</P></LI><LI><P>For long-lived release branches (as described in
            <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.commonpatterns" title="Common Branching Patterns">the section called âCommon Branching Patternsâ</A>),
            perform merges only on the root of the branch, not on
            subdirectories.</P></LI><LI><P>Never merge into working copies with a mixture of
            working revision numbers, or with
            â<SPAN class="quote">switched</SPAN>â subdirectories (as described next
            in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.switchwc" title="Traversing Branches">the section called âTraversing Branchesâ</A>).  A merge
            target should be a working copy which represents
            a <SPAN class="emphasis"><EM>single</EM></SPAN> location in the repository
            at a single point in time.</P></LI><LI><P>Don't ever edit the <CODE class="literal">svn:mergeinfo</CODE>
            property directly; use <SPAN class="command"><STRONG>svn
            merge</STRONG></SPAN> with the <CODE class="option">--record-only</CODE> option to effect a desired change
            to the metadata (as demonstrated in
            <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.advanced.blockchanges" title="Blocking Changes">the section called âBlocking Changesâ</A>).</P></LI><LI><P>Always make sure you have complete read access to
            all of your merge sources, and that your target working
            copy has no sparse directories.</P></LI></UL></DIV></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.branchmerge.switchwc"></A>Traversing Branches</H2></DIV></DIV></DIV><P>The <SPAN class="command"><STRONG>svn switch</STRONG></SPAN> command transforms an
      existing working copy to reflect a different branch.  While this
      command isn't strictly necessary for working with branches, it
      provides a nice shortcut.  In our earlier example,
      after creating your private branch, you checked out a fresh
      working copy of the new repository directory.  Instead, you can
      simply ask Subversion to change your working copy of
      <CODE class="filename">/calc/trunk</CODE> to mirror the new branch
      location:</P><PRE class="screen">$ cd calc

$ svn info | grep URL
URL: http://svn.example.com/repos/calc/trunk

$ svn switch http://svn.example.com/repos/calc/branches/my-calc-branch
U   integer.c
U   button.c
U   Makefile
Updated to revision 341.

$ svn info | grep URL
URL: http://svn.example.com/repos/calc/branches/my-calc-branch
</PRE><P>â<SPAN class="quote">Switching</SPAN>â a working copy that has no local
      modifications to a different branch results in the working copy
      looking just as it would if you'd done a fresh checkout of the
      directory.  It's usually more efficient to
      use this command, because often branches differ by only a small
      degree.  The server sends only the minimal set of changes
      necessary to make your working copy reflect the branch
      directory.</P><P>The <SPAN class="command"><STRONG>svn switch</STRONG></SPAN> command also takes a
      <CODE class="option">--revision</CODE> (<CODE class="option">-r</CODE>) option, so you
      need not always move your working copy to the
      <CODE class="literal">HEAD</CODE> of the branch.</P><P>Of course, most projects are more complicated than our
      <CODE class="filename">calc</CODE> example, and contain multiple
      subdirectories.  Subversion users often follow a specific
      algorithm when using branches:</P><DIV class="orderedlist"><OL type="1"><LI><P>Copy the project's entire â<SPAN class="quote">trunk</SPAN>â to a
            new branch directory.</P></LI><LI><P>Switch only <SPAN class="emphasis"><EM>part</EM></SPAN> of the trunk
            working copy to mirror the branch.</P></LI></OL></DIV><P>In other words, if a user knows that the branch work needs
      to happen on only a specific subdirectory, she uses
      <SPAN class="command"><STRONG>svn switch</STRONG></SPAN> to move only that subdirectory to
      the branch.  (Or sometimes users will switch just a single
      working file to the branch!)  That way, the user can continue to
      receive normal â<SPAN class="quote">trunk</SPAN>â updates to most of her
      working copy, but the switched portions will remain immune
      (unless someone commits a change to her branch).  This feature
      adds a whole new dimension to the concept of a â<SPAN class="quote">mixed
      working copy</SPAN>âânot only can working copies contain a
      mixture of working revisions, but they can also contain a
      mixture of repository locations as well.</P><P>If your working copy contains a number of switched subtrees
      from different repository locations, it continues to function as
      normal.  When you update, you'll receive patches to each subtree
      as appropriate.  When you commit, your local changes will still
      be applied as a single, atomic change to the repository.</P><P>Note that while it's okay for your working copy to reflect a
      mixture of repository locations, these locations must all be
      within the <SPAN class="emphasis"><EM>same</EM></SPAN> repository.  Subversion
      repositories aren't yet able to communicate with one another;
      that feature is planned for the future.
      <SUP>[<A id="id523665" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id523665" class="footnote">24</A>]</SUP>
    </P><DIV class="sidebar"><P class="title"><B>Switches and Updates</B></P><P>Have you noticed that the output of <SPAN class="command"><STRONG>svn
        switch</STRONG></SPAN> and <SPAN class="command"><STRONG>svn update</STRONG></SPAN> looks the
        same?  The switch command is actually a superset of the update
        command.</P><P>When you run <SPAN class="command"><STRONG>svn update</STRONG></SPAN>, you're asking
        the repository to compare two trees.  The repository does so,
        and then sends a description of the differences back to the
        client.  The only difference between <SPAN class="command"><STRONG>svn
        switch</STRONG></SPAN> and <SPAN class="command"><STRONG>svn update</STRONG></SPAN> is that the
        latter command always compares two identical repository
        paths.</P><P>That is, if your working copy is a mirror of
        <CODE class="filename">/calc/trunk</CODE>, <SPAN class="command"><STRONG>svn
        update</STRONG></SPAN> will automatically compare your working copy
        of <CODE class="filename">/calc/trunk</CODE> to
        <CODE class="filename">/calc/trunk</CODE> in the
        <CODE class="literal">HEAD</CODE> revision.  If you're switching your
        working copy to a branch, <SPAN class="command"><STRONG>svn switch</STRONG></SPAN>
        will compare your working copy of
        <CODE class="filename">/calc/trunk</CODE> to some
        <SPAN class="emphasis"><EM>other</EM></SPAN> branch directory in the
        <CODE class="literal">HEAD</CODE> revision.</P><P>In other words, an update moves your working copy through
        time.  A switch moves your working copy through time
        <SPAN class="emphasis"><EM>and</EM></SPAN> space.</P></DIV><P>Because <SPAN class="command"><STRONG>svn switch</STRONG></SPAN> is essentially a
      variant of <SPAN class="command"><STRONG>svn update</STRONG></SPAN>, it shares the same
      behaviors; any local modifications in your working copy are
      preserved when new data arrives from the repository.</P><DIV class="tip" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Tip</H3><P>Have you ever found yourself making some complex edits
          (in your <CODE class="filename">/trunk</CODE> working copy) and
          suddenly realized, â<SPAN class="quote">Hey, these changes ought to be in
          their own branch?</SPAN>â  A great technique to do this can
          be summarized in two steps:</P><PRE class="screen">$ svn copy http://svn.example.com/repos/calc/trunk \
           http://svn.example.com/repos/calc/branches/newbranch \
      -m "Create branch 'newbranch'."
Committed revision 353.
$ svn switch http://svn.example.com/repos/calc/branches/newbranch
At revision 353.
</PRE><P>The <SPAN class="command"><STRONG>svn switch</STRONG></SPAN> command, like
          <SPAN class="command"><STRONG>svn update</STRONG></SPAN>, preserves your local edits.
          At this point, your working copy is now a reflection of the
          newly created branch, and your next <SPAN class="command"><STRONG>svn
          commit</STRONG></SPAN> invocation will send your changes
          there.</P></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.branchmerge.tags"></A>Tags</H2></DIV></DIV></DIV><P>Another common version control concept is a
      <EM class="firstterm">tag</EM>.  A tag is just a
      â<SPAN class="quote">snapshot</SPAN>â of a project in time.  In Subversion,
      this idea already seems to be everywhere.  Each repository
      revision is exactly thatâa snapshot of the filesystem
      after each commit.</P><P>However, people often want to give more human-friendly names
      to tags, such as <CODE class="literal">release-1.0</CODE>.  And they want
      to make snapshots of smaller subdirectories of the filesystem.
      After all, it's not so easy to remember that release 1.0 of a
      piece of software is a particular subdirectory of revision
      4822.</P><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.branchmerge.tags.mksimple"></A>Creating a Simple Tag</H3></DIV></DIV></DIV><P>Once again, <SPAN class="command"><STRONG>svn copy</STRONG></SPAN> comes to the
        rescue.  If you want to create a snapshot of
        <CODE class="filename">/calc/trunk</CODE> exactly as it looks in the
        <CODE class="literal">HEAD</CODE> revision, make a copy of it:</P><PRE class="screen">$ svn copy http://svn.example.com/repos/calc/trunk \
           http://svn.example.com/repos/calc/tags/release-1.0 \
      -m "Tagging the 1.0 release of the 'calc' project."

Committed revision 902.
</PRE><P>This example assumes that a
        <CODE class="filename">/calc/tags</CODE> directory already exists.  (If
        it doesn't, you can create it using <SPAN class="command"><STRONG>svn
        mkdir</STRONG></SPAN>.)  After the copy completes, the new
        <CODE class="filename">release-1.0</CODE> directory is forever a
        snapshot of how the <CODE class="filename">/trunk</CODE> directory
        looked in the <CODE class="literal">HEAD</CODE> revision at the time you
        made the copy.  Of course, you might want to be more precise
        about exactly which revision you copy, in case somebody else
        may have committed changes to the project when you weren't
        looking.  So if you know that revision 901 of
        <CODE class="filename">/calc/trunk</CODE> is exactly the snapshot you
        want, you can specify it by passing <CODE class="option">-r 901</CODE> to
        the <SPAN class="command"><STRONG>svn copy</STRONG></SPAN> command.</P><P>But wait a moment: isn't this tag creation procedure the
        same procedure we used to create a branch?  Yes, in fact, it
        is.  In Subversion, there's no difference between a tag and a
        branch.  Both are just ordinary directories that are created
        by copying.  Just as with branches, the only reason a copied
        directory is a â<SPAN class="quote">tag</SPAN>â is because
        <SPAN class="emphasis"><EM>humans</EM></SPAN> have decided to treat it that way:
        as long as nobody ever commits to the directory, it forever
        remains a snapshot.  If people start committing to it, it
        becomes a branch.</P><P>If you are administering a repository, there are two
        approaches you can take to managing tags.  The first approach
        is â<SPAN class="quote">hands off</SPAN>â: as a matter of project policy,
        decide where your tags will live, and make sure all users know
        how to treat the directories they copy.  (That is, make sure
        they know not to commit to them.)  The second approach is more
        paranoid: you can use one of the access control scripts
        provided with Subversion to prevent anyone from doing anything
        but creating new copies in the tags area (see
        <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig" title="Chapter&nbsp;6.&nbsp;Server Configuration">Chapter&nbsp;6, <I>Server Configuration</I></A>).  The paranoid approach,
        however, isn't usually necessary.  If a user accidentally
        commits a change to a tag directory, you can simply undo the
        change as discussed in the previous section.  This is version
        control, after all!</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.branchmerge.tags.mkcomplex"></A>Creating a Complex Tag</H3></DIV></DIV></DIV><P>Sometimes you may want your â<SPAN class="quote">snapshot</SPAN>â to be
        more complicated than a single directory at a single
        revision.</P><P>For example, pretend your project is much larger than our
        <CODE class="filename">calc</CODE> example: suppose it contains a
        number of subdirectories and many more files.  In the course
        of your work, you may decide that you need to create a working
        copy that is designed to have specific features and bug fixes.
        You can accomplish this by selectively backdating files or
        directories to particular revisions (using <SPAN class="command"><STRONG>svn update</STRONG></SPAN>
        with the <CODE class="option">-r</CODE> option liberally), by switching files and directories to
        particular branches (making use of <SPAN class="command"><STRONG>svn
        switch</STRONG></SPAN>), or even just by making a bunch of local
        changes.  When you're done, your working copy is a hodgepodge
        of repository locations from different revisions.  But after
        testing, you know it's the precise combination of data you
        need to tag.</P><P>Time to make a snapshot.  Copying one URL to another won't
        work here.  In this case, you want to make a snapshot of your
        exact working copy arrangement and store it in the repository.
        Luckily, <SPAN class="command"><STRONG>svn copy</STRONG></SPAN> actually has four
        different uses (which you can read about in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref" title="Chapter&nbsp;9.&nbsp;Subversion Complete Reference">Chapter&nbsp;9, <I>Subversion Complete Reference</I></A>), including the ability to copy a
        working copy tree to the repository:</P><PRE class="screen">$ ls
my-working-copy/

$ svn copy my-working-copy \
           http://svn.example.com/repos/calc/tags/mytag \
           -m "Tag my existing working copy state."

Committed revision 940.
</PRE><P>Now there is a new directory in the repository,
        <CODE class="filename">/calc/tags/mytag</CODE>, which is an exact
        snapshot of your working copyâmixed revisions, URLs,
        local changes, and all.</P><P>Other users have found interesting uses for this feature.
        Sometimes there are situations where you have a bunch of local
        changes made to your working copy, and you'd like a
        collaborator to see them.  Instead of running <SPAN class="command"><STRONG>svn
        diff</STRONG></SPAN> and sending a patch file (which won't capture
        directory, symlink, or property changes), you can
        use <SPAN class="command"><STRONG>svn copy</STRONG></SPAN> to â<SPAN class="quote">upload</SPAN>â your
        working copy to a private area of the repository.  Your
        collaborator can then either check out a verbatim copy of your
        working copy or use <SPAN class="command"><STRONG>svn merge</STRONG></SPAN> to receive
        your exact changes.</P><P>While this is a nice method for uploading a quick snapshot
        of your working copy, note that this is <SPAN class="emphasis"><EM>not</EM></SPAN>
        a good way to initially create a branch.  Branch creation should
        be an event unto itself, and this method conflates the creation
        of a branch with extra changes to files, all within a single revision.
        This makes it very difficult (later on) to identify a single
        revision number as a branch point.</P></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.branchmerge.maint"></A>Branch Maintenance</H2></DIV></DIV></DIV><P>You may have noticed by now that Subversion is extremely
      flexible.  Because it implements branches and tags with the same
      underlying mechanism (directory copies), and because branches
      and tags appear in normal filesystem space, many people find
      Subversion intimidating.  It's almost <SPAN class="emphasis"><EM>too</EM></SPAN>
      flexible.  In this section, we'll offer some suggestions for
      arranging and managing your data over time.</P><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.branchmerge.maint.layout"></A>Repository Layout</H3></DIV></DIV></DIV><P>There are some standard, recommended ways to organize a
        repository.  Most people create a <CODE class="filename">trunk</CODE>
        directory to hold the â<SPAN class="quote">main line</SPAN>â of development,
        a <CODE class="filename">branches</CODE> directory to contain branch
        copies, and a <CODE class="filename">tags</CODE> directory to contain
        tag copies.  If a repository holds only one project,
        often people create these top-level directories:</P><PRE class="screen">/trunk
/branches
/tags
</PRE><P>If a repository contains multiple projects, admins
        typically index their layout by project (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.projects.chooselayout" title="Planning Your Repository Organization">the section called âPlanning Your Repository Organizationâ</A> to read more about
        â<SPAN class="quote">project roots</SPAN>â):</P><PRE class="screen">/paint/trunk
/paint/branches
/paint/tags
/calc/trunk
/calc/branches
/calc/tags
</PRE><P>Of course, you're free to ignore these common layouts.
        You can create any sort of variation, whatever works best for
        you or your team.  Remember that whatever you choose, it's not
        a permanent commitment.  You can reorganize your repository at
        any time.  Because branches and tags are ordinary directories,
        the <SPAN class="command"><STRONG>svn move</STRONG></SPAN> command can move or rename
        them however you wish.  Switching from one layout to another
        is just a matter of issuing a series of server-side moves; if
        you don't like the way things are organized in the repository,
        just juggle the directories around.</P><P>Remember, though, that while moving directories may be
        easy to do, you need to be considerate of your users as well.
        Your juggling can be disorienting to users with existing
        working copies.  If a user has a working copy of a particular
        repository directory, your <SPAN class="command"><STRONG>svn move</STRONG></SPAN>
        operation might remove the path from the latest revision.
        When the user next runs <SPAN class="command"><STRONG>svn update</STRONG></SPAN>, she will
        be told that her working copy represents a path that no
        longer exists, and the user will be forced to <SPAN class="command"><STRONG>svn
        switch</STRONG></SPAN> to the new location.
        </P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.branchmerge.maint.lifetime"></A>Data Lifetimes</H3></DIV></DIV></DIV><P>Another nice feature of Subversion's model is that
        branches and tags can have finite lifetimes, just like any
        other versioned item.  For example, suppose you eventually
        finish all your work on your personal branch of the
        <CODE class="filename">calc</CODE> project.  After merging all of your
        changes back into <CODE class="filename">/calc/trunk</CODE>, there's
        no need for your private branch directory to stick around
        anymore:</P><PRE class="screen">$ svn delete http://svn.example.com/repos/calc/branches/my-calc-branch \
             -m "Removing obsolete branch of calc project."

Committed revision 375.
</PRE><P>And now your branch is gone.  Of course, it's not really
        gone: the directory is simply missing from the
        <CODE class="literal">HEAD</CODE> revision, no longer distracting
        anyone.  If you use <SPAN class="command"><STRONG>svn checkout</STRONG></SPAN>,
        <SPAN class="command"><STRONG>svn switch</STRONG></SPAN>, or <SPAN class="command"><STRONG>svn list</STRONG></SPAN>
        to examine an earlier revision, you'll still be able to see
        your old branch.</P><P>If browsing your deleted directory isn't enough, you can
        always bring it back.  Resurrecting data is very easy in
        Subversion.  If there's a deleted directory (or file) that
        you'd like to bring back into <CODE class="literal">HEAD</CODE>, simply
        use <SPAN class="command"><STRONG>svn copy</STRONG></SPAN> to copy it from the old
        revision:</P><PRE class="screen">$ svn copy http://svn.example.com/repos/calc/branches/my-calc-branch@374 \
           http://svn.example.com/repos/calc/branches/my-calc-branch \
           -m "Restore my-calc-branch."

Committed revision 376.
</PRE><P>In our example, your personal branch had a relatively
        short lifetime: you may have created it to fix a bug or
        implement a new feature.  When your task is done, so is the
        branch.  In software development, though, it's also common to
        have two â<SPAN class="quote">main</SPAN>â branches running side by side for
        very long periods.  For example, suppose it's time to release
        a stable version of the <CODE class="filename">calc</CODE> project to the
        public, and you know it's going to take a couple of months to
        shake bugs out of the software.  You don't want people to add
        new features to the project, but you don't want to tell all
        developers to stop programming either.  So instead, you create
        a â<SPAN class="quote">stable</SPAN>â branch of the software that won't
        change much:</P><PRE class="screen">$ svn copy http://svn.example.com/repos/calc/trunk \
           http://svn.example.com/repos/calc/branches/stable-1.0 \
           -m "Creating stable branch of calc project."

Committed revision 377.
</PRE><P>And now developers are free to continue adding
        cutting-edge (or experimental) features to
        <CODE class="filename">/calc/trunk</CODE>, and you can declare a
        project policy that only bug fixes are to be committed to
        <CODE class="filename">/calc/branches/stable-1.0</CODE>.  That is, as
        people continue to work on the trunk, a human selectively
        ports bug fixes over to the stable branch.  Even after the
        stable branch has shipped, you'll probably continue to
        maintain the branch for a long timeâthat is, as long
        as you continue to support that release for customers.  We'll
        discuss this more in the next section.</P></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.branchmerge.commonpatterns"></A>Common Branching Patterns</H2></DIV></DIV></DIV><P>There are many different uses for branching and <SPAN class="command"><STRONG>svn
        merge</STRONG></SPAN>, and this section describes the most
        common.</P><P>Version control is most often used for software
      development, so here's a quick peek at two of the most common
      branching/merging patterns used by teams of programmers.  If
      you're not using Subversion for software development, feel
      free to skip this section.  If you're a software developer
      using version control for the first time, pay close attention,
      as these patterns are often considered best practices by
      experienced folk.  These processes aren't specific to
      Subversion; they're applicable to any version control system.
      Still, it may help to see them described in Subversion
      terms.</P><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.branchmerge.commonpatterns.release"></A>Release Branches</H3></DIV></DIV></DIV><P>Most software has a typical life cycle: code, test,
        release, repeat.  There are two problems with this process.
        First, developers need to keep writing new features while
        quality assurance teams take time to test supposedly stable
        versions of the software.  New work cannot halt while the
        software is tested.  Second, the team almost always needs to
        support older, released versions of software; if a bug is
        discovered in the latest code, it most likely exists in
        released versions as well, and customers will want to get
        that bug fix without having to wait for a major new
        release.</P><P>Here's where version control can help.  The typical
        procedure looks like this:</P><DIV class="orderedlist"><OL type="1"><LI><P><SPAN class="emphasis"><EM>Developers commit all new work to the
              trunk.</EM></SPAN>

            Day-to-day changes are committed to
            <CODE class="filename">/trunk</CODE>: new features, bug fixes, and
            so on.</P></LI><LI><P><SPAN class="emphasis"><EM>The trunk is copied to a
              â<SPAN class="quote">release</SPAN>â branch.</EM></SPAN>

            When the team thinks the software is ready for release
            (say, a 1.0 release), <CODE class="filename">/trunk</CODE>
            might be copied to
            <CODE class="filename">/branches/1.0</CODE>.</P></LI><LI><P><SPAN class="emphasis"><EM>Teams continue to work in parallel.</EM></SPAN>

            One team begins rigorous testing of the release branch,
            while another team continues new work (say, for version
            2.0) on <CODE class="filename">/trunk</CODE>.  If bugs are
            discovered in either location, fixes are ported back and
            forth as necessary.  At some point, however, even that
            process stops.  The branch is â<SPAN class="quote">frozen</SPAN>â for
            final testing right before a release.</P></LI><LI><P><SPAN class="emphasis"><EM>The branch is tagged and released.</EM></SPAN>

            When testing is complete,
            <CODE class="filename">/branches/1.0</CODE> is copied to
            <CODE class="filename">/tags/1.0.0</CODE> as a reference
            snapshot.  The tag is packaged and released to
            customers.</P></LI><LI><P><SPAN class="emphasis"><EM>The branch is maintained over time.</EM></SPAN>

            While work continues on <CODE class="filename">/trunk</CODE> for
            version 2.0, bug fixes continue to be ported from
            <CODE class="filename">/trunk</CODE> to
            <CODE class="filename">/branches/1.0</CODE>.  When enough
            bug fixes have accumulated, management may decide to do a
            1.0.1 release: <CODE class="filename">/branches/1.0</CODE> is
            copied to <CODE class="filename">/tags/1.0.1</CODE>, and the tag
            is packaged and released.</P></LI></OL></DIV><P>This entire process repeats as the software matures:
        when the 2.0 work is complete, a new 2.0 release branch is
        created, tested, tagged, and eventually released.  After
        some years, the repository ends up with a number of release
        branches in â<SPAN class="quote">maintenance</SPAN>â mode, and a number
        of tags representing final shipped versions.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.branchmerge.commonpatterns.feature"></A>Feature Branches</H3></DIV></DIV></DIV><P>A <EM class="firstterm">feature branch</EM> is the sort of
        branch that's been the dominant example in this chapter (the
        one you've been working on while Sally continues to work on
        <CODE class="filename">/trunk</CODE>).  It's a temporary branch created
        to work on a complex change without interfering with the
        stability of <CODE class="filename">/trunk</CODE>.  Unlike release
        branches (which may need to be supported forever), feature
        branches are born, used for a while, merged back to the trunk,
        and then ultimately deleted.  They have a finite span of
        usefulness.</P><P>Again, project policies vary widely concerning exactly
        when it's appropriate to create a feature branch.  Some
        projects never use feature branches at all: commits to
        <CODE class="filename">/trunk</CODE> are a free-for-all.  The
        advantage to this system is that it's simpleânobody
        needs to learn about branching or merging.  The disadvantage
        is that the trunk code is often unstable or unusable.  Other
        projects use branches to an extreme: no change is
        <SPAN class="emphasis"><EM>ever</EM></SPAN> committed to the trunk directly.
        Even the most trivial changes are created on a short-lived
        branch, carefully reviewed, and merged to the trunk.  Then
        the branch is deleted.  This system guarantees an
        exceptionally stable and usable trunk at all times, but at
        the cost of tremendous process overhead.</P><P>Most projects take a middle-of-the-road approach.  They
        commonly insist that <CODE class="filename">/trunk</CODE> compile and
        pass regression tests at all times.  A feature branch is
        required only when a change requires a large number of
        destabilizing commits.  A good rule of thumb is to ask this
        question: if the developer worked for days in isolation and
        then committed the large change all at once (so that
        <CODE class="filename">/trunk</CODE> were never destabilized), would it
        be too large a change to review?  If the answer to that
        question is â<SPAN class="quote">yes,</SPAN>â the change should be
        developed on a feature branch.  As the developer commits
        incremental changes to the branch, they can be easily reviewed
        by peers.</P><P>Finally, there's the issue of how to best keep a feature
        branch in â<SPAN class="quote">sync</SPAN>â with the trunk as work
        progresses.  As we mentioned earlier, there's a great risk to
        working on a branch for weeks or months; trunk changes may
        continue to pour in, to the point where the two lines of
        development differ so greatly that it may become a nightmare
        trying to merge the branch back to the trunk.</P><P>This situation is best avoided by regularly merging trunk
        changes to the branch.  Make up a policy: once a week, merge
        the last week's worth of trunk changes to the branch.</P><P>At some point, you'll be ready to merge the
        â<SPAN class="quote">synchronized</SPAN>â feature branch back to the trunk.
        To do this, begin by doing a final merge of the latest trunk
        changes to the branch.  When that's done, the latest versions
        of branch and trunk will be absolutely identical except for
        your branch changes.  You would then merge back with
        the <CODE class="option">--reintegrate</CODE> option:</P><PRE class="screen">$ cd trunk-working-copy

$ svn update
At revision 1910.

$ svn merge --reintegrate http://svn.example.com/repos/calc/branches/mybranch
--- Merging differences between repository URLs into '.':
U    real.c
U    integer.c
A    newdirectory
A    newdirectory/newfile
 U   .
â¦
</PRE><P>Another way of thinking about this pattern is that your
        weekly sync of trunk to branch is analogous to running
        <SPAN class="command"><STRONG>svn update</STRONG></SPAN> in a working copy, while the
        final merge step is analogous to running <SPAN class="command"><STRONG>svn
          commit</STRONG></SPAN> from a working copy.  After all, what else
        <SPAN class="emphasis"><EM>is</EM></SPAN> a working copy but a very shallow
        private branch?  It's a branch that's capable of
        storing only one change at a time.</P></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.advanced.vendorbr"></A>Vendor Branches</H2></DIV></DIV></DIV><P>As is especially the case when developing software, the data
      that you maintain under version control is often closely related
      to, or perhaps dependent upon, someone else's data.  Generally,
      the needs of your project will dictate that you stay as
      up to date as possible with the data provided by that external
      entity without sacrificing the stability of your own project.
      This scenario plays itself out all the timeâanywhere that
      the information generated by one group of people has a direct
      effect on that which is generated by another group.</P><P>For example, software developers might be working on an
      application that makes use of a third-party library.  Subversion
      has just such a relationship with the Apache Portable Runtime (APR)
      library (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.usingapi.apr" title="The Apache Portable Runtime Library">the section called âThe Apache Portable Runtime Libraryâ</A>).
      The Subversion source code depends on the APR library for all
      its portability needs.  In earlier stages of Subversion's
      development, the project closely tracked APR's changing API,
      always sticking to the â<SPAN class="quote">bleeding edge</SPAN>â of the
      library's code churn.  Now that both APR and Subversion have
      matured, Subversion attempts to synchronize with APR's library
      API only at well-tested, stable release points.</P><P>Now, if your project depends on someone else's information,
      you could attempt to synchronize that information with your own
      in several ways.  Most painfully, you could issue oral or
      written instructions to all the contributors of your project,
      telling them to make sure they have the specific versions
      of that third-party information that your project needs.  If the
      third-party information is maintained in a Subversion
      repository, you could also use Subversion's externals
      definitions to effectively â<SPAN class="quote">pin down</SPAN>â specific
      versions of that information to some location in your own
      working copy directory (see
      <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.externals" title="Externals Definitions">the section called âExternals Definitionsâ</A>).</P><P>But sometimes you want to maintain custom modifications to
      third-party code in your own version control system.  Returning
      to the software development example, programmers might need to
      make modifications to that third-party library for their own
      purposes.  These modifications might include new functionality
      or bug fixes, maintained internally only until they become part
      of an official release of the third-party library.  Or the
      changes might never be relayed back to the library maintainers,
      existing solely as custom tweaks to make the library further
      suit the needs of the software developers.</P><P>Now you face an interesting situation.  Your project could
      house its custom modifications to the third-party data in some
      disjointed fashion, such as using patch files or full-fledged
      alternative versions of files and directories.  But these quickly
      become maintenance headaches, requiring some mechanism by which
      to apply your custom changes to the third-party code and
      necessitating regeneration of those changes with each successive
      version of the third-party code that you track.</P><P>The solution to this problem is to use <EM class="firstterm">vendor
      branches</EM>.  A vendor branch is a directory tree in
      your own version control system that contains information
      provided by a third-party entity, or vendor.  Each version of
      the vendor's data that you decide to absorb into your project is
      called a <EM class="firstterm">vendor drop</EM>.</P><P>Vendor branches provide two benefits.  First, by storing
      the currently supported vendor drop in your own version control
      system, you ensure that the members of your project never need to question
      whether they have the right version of the vendor's data.  They
      simply receive that correct version as part of their regular
      working copy updates.  Second, because the data lives in your
      own Subversion repository, you can store your custom changes to
      it in-placeâyou have no more need of an automated (or
      worse, manual) method for swapping in your customizations.</P><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.advanced.vendorbr.general"></A>General Vendor Branch Management Procedure</H3></DIV></DIV></DIV><P>Managing vendor branches generally works like this: first,
        you create a top-level directory (such as
        <CODE class="filename">/vendor</CODE>) to hold the vendor branches.
        Then you import the third-party code into a subdirectory of
        that top-level directory.  You then copy that subdirectory
        into your main development branch (e.g.,
        <CODE class="filename">/trunk</CODE>) at the appropriate location.  You
        always make your local changes in the main development branch.
        With each new release of the code you are tracking, you bring
        it into the vendor branch and merge the changes into
        <CODE class="filename">/trunk</CODE>, resolving whatever conflicts
        occur between your local changes and the upstream
        changes.</P><P>An example will help to clarify this algorithm.  We'll use
        a scenario where your development team is creating a
        calculator program that links against a third-party complex
        number arithmetic library, libcomplex.  We'll begin with the
        initial creation of the vendor branch and the import of the
        first vendor drop.  We'll call our vendor branch directory
        <CODE class="filename">libcomplex</CODE>, and our code drops will go
        into a subdirectory of our vendor branch called
        <CODE class="filename">current</CODE>.  And since <SPAN class="command"><STRONG>svn
        import</STRONG></SPAN> creates all the intermediate parent
        directories it needs, we can actually accomplish both of these
        steps with a single command:</P><PRE class="screen">$ svn import /path/to/libcomplex-1.0 \
             http://svn.example.com/repos/vendor/libcomplex/current \
             -m 'importing initial 1.0 vendor drop'
â¦
</PRE><P>We now have the current version of the libcomplex source
        code in <CODE class="filename">/vendor/libcomplex/current</CODE>.  Now,
        we tag that version (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.tags" title="Tags">the section called âTagsâ</A>)
        and then copy it into the main development branch.  Our copy
        will create a new directory called
        <CODE class="filename">libcomplex</CODE> in our existing
        <CODE class="filename">calc</CODE> project directory.  It is in this
        copied version of the vendor data that we will make our
        customizations:</P><PRE class="screen">$ svn copy http://svn.example.com/repos/vendor/libcomplex/current  \
           http://svn.example.com/repos/vendor/libcomplex/1.0      \
           -m 'tagging libcomplex-1.0'
â¦
$ svn copy http://svn.example.com/repos/vendor/libcomplex/1.0  \
           http://svn.example.com/repos/calc/libcomplex        \
           -m 'bringing libcomplex-1.0 into the main branch'
â¦
</PRE><P>We check out our project's main branchâwhich now
        includes a copy of the first vendor dropâand we get to
        work customizing the libcomplex code.  Before we know it, our
        modified version of libcomplex is now completely integrated
        into our calculator program.
        <SUP>[<A id="id525027" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id525027" class="footnote">25</A>]</SUP>
      </P><P>A few weeks later, the developers of libcomplex release a
        new version of their libraryâversion 1.1âwhich
        contains some features and functionality that we really want.
        We'd like to upgrade to this new version, but without losing
        the customizations we made to the existing version.  What we
        essentially would like to do is to replace our current
        baseline version of libcomplex 1.0 with a copy of libcomplex
        1.1, and then re-apply the custom modifications we previously
        made to that library to the new version.  But we actually
        approach the problem from the other direction, applying the
        changes made to libcomplex between versions 1.0 and 1.1 to our
        modified copy of it.</P><P>To perform this upgrade, we check out a copy of our vendor
        branch and replace the code in the
        <CODE class="filename">current</CODE> directory with the new libcomplex
        1.1 source code.  We quite literally copy new files on top of
        existing files, perhaps exploding the libcomplex 1.1 release
        tarball atop our existing files and directories.  The goal
        here is to make our <CODE class="filename">current</CODE> directory
        contain only the libcomplex 1.1 code and to ensure that all
        that code is under version control.  Oh, and we want to do
        this with as little version control history disturbance as
        possible.</P><P>After replacing the 1.0 code with 1.1 code, <SPAN class="command"><STRONG>svn
        status</STRONG></SPAN> will show files with local modifications as
        well as, perhaps, some unversioned files.  If we did what we
        were supposed to do, the unversioned files are only those new
        files introduced in the 1.1 release of libcomplexâwe
        run <SPAN class="command"><STRONG>svn add</STRONG></SPAN> on those to get them under
        version control.  If the 1.1 code no longer has certain files
        that were in the 1.0 tree, it may be hard to notice them;
        you'd have to compare the two trees with some external tool
        and then <SPAN class="command"><STRONG>svn delete</STRONG></SPAN> any files present in
        1.0 but not in 1.1.  (Although it might also be just fine to
        let these same files live on in unused obscurity!)  Finally,
        once our <CODE class="filename">current</CODE> working copy contains
        only the libcomplex 1.1 code, we commit the changes we made to
        get it looking that way.</P><P>Our <CODE class="filename">current</CODE> branch now contains the
        new vendor drop.  We tag the new version as 1.1 (in the same
        way we previously tagged the version 1.0 vendor drop), and
        then merge the differences between the tag of the previous
        version and the new current version into our main development
        branch:</P><PRE class="screen">$ cd working-copies/calc
$ svn merge http://svn.example.com/repos/vendor/libcomplex/1.0      \
            http://svn.example.com/repos/vendor/libcomplex/current  \
            libcomplex
â¦ # resolve all the conflicts between their changes and our changes
$ svn commit -m 'merging libcomplex-1.1 into the main branch'
â¦
</PRE><P>In the trivial use case, the new version of our
        third-party tool would look, from a files-and-directories
        point of view, just like the previous version.  None of the
        libcomplex source files would have been deleted, renamed, or
        moved to different locationsâthe new version would
        contain only textual modifications against the previous one.
        In a perfect world, our modifications would apply cleanly to
        the new version of the library, with absolutely no
        complications or conflicts.</P><P>But things aren't always that simple, and in fact it is
        quite common for source files to get moved around between
        releases of software.  This complicates the process of
        ensuring that our modifications are still valid for the new
        version of code, and things can quickly degrade into a
        situation where we have to manually re-create our
        customizations in the new version.  Once Subversion knows
        about the history of a given source fileâincluding all
        its previous locationsâthe process of merging in the new
        version of the library is pretty simple.  But we are
        responsible for telling Subversion how the source file layout
        changed from vendor drop to vendor drop.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.advanced.vendorbr.svn_load_dirs"></A>svn_load_dirs.pl</H3></DIV></DIV></DIV><P>Vendor drops that contain more than a few deletes,
        additions, and moves complicate the process of upgrading to
        each successive version of the third-party data.  So
        Subversion supplies the <SPAN class="command"><STRONG>svn_load_dirs.pl</STRONG></SPAN>
        script to assist with this process.  This script automates the
        importing steps we mentioned in the general vendor branch
        management procedure to make sure mistakes are minimized.
        You will still be responsible for using the merge commands to
        merge the new versions of the third-party data into your main
        development branch, but <SPAN class="command"><STRONG>svn_load_dirs.pl</STRONG></SPAN>
        can help you more quickly and easily arrive at that
        stage.</P><P>In short, <SPAN class="command"><STRONG>svn_load_dirs.pl</STRONG></SPAN> is an
        enhancement to <SPAN class="command"><STRONG>svn import</STRONG></SPAN> that has several
        important characteristics:</P><DIV class="itemizedlist"><UL type="disc"><LI><P>It can be run at any point in time to bring an existing
            directory in the repository to exactly match an external
            directory, performing all the necessary adds and deletes,
            and optionally performing moves, too.</P></LI><LI><P>It takes care of complicated series of operations between
            which Subversion requires an intermediate commitâsuch
            as before renaming a file or directory twice.</P></LI><LI><P>It will optionally tag the newly imported directory.</P></LI><LI><P>It will optionally add arbitrary properties to files and
            directories that match a regular expression.</P></LI></UL></DIV><P><SPAN class="command"><STRONG>svn_load_dirs.pl</STRONG></SPAN> takes three mandatory
        arguments.  The first argument is the URL to the base
        Subversion directory to work in.  This argument is followed by
        the URLârelative to the first argumentâinto which the
        current vendor drop will be imported.  Finally, the third
        argument is the local directory to import.  Using our previous
        example, a typical run of <SPAN class="command"><STRONG>svn_load_dirs.pl</STRONG></SPAN>
        might look like this:</P><PRE class="screen">$ svn_load_dirs.pl http://svn.example.com/repos/vendor/libcomplex \
                   current                                        \
                   /path/to/libcomplex-1.1
â¦
</PRE><P>You can indicate that you'd like
        <SPAN class="command"><STRONG>svn_load_dirs.pl</STRONG></SPAN> to tag the new vendor drop
        by passing the <CODE class="option">-t</CODE> command-line option and
        specifying a tag name.  This tag is another URL relative to
        the first program argument.</P><PRE class="screen">$ svn_load_dirs.pl -t libcomplex-1.1                              \
                   http://svn.example.com/repos/vendor/libcomplex \
                   current                                        \
                   /path/to/libcomplex-1.1
â¦
</PRE><P>When you run <SPAN class="command"><STRONG>svn_load_dirs.pl</STRONG></SPAN>, it
        examines the contents of your existing â<SPAN class="quote">current</SPAN>â
        vendor drop and compares them with the proposed new vendor
        drop.  In the trivial case, no files will be in
        one version and not the other, and the script will perform the
        new import without incident.  If, however, there are
        discrepancies in the file layouts between versions,
        <SPAN class="command"><STRONG>svn_load_dirs.pl</STRONG></SPAN> will ask you how
        to resolve those differences.  For example, you
        will have the opportunity to tell the script that you know
        that the file <CODE class="filename">math.c</CODE> in version 1.0 of
        libcomplex was renamed to <CODE class="filename">arithmetic.c</CODE> in
        libcomplex 1.1.  Any discrepancies not explained by moves
        are treated as regular additions and deletions.</P><P>The script also accepts a separate configuration file for
        setting properties on files and directories matching a regular
        expression that are <SPAN class="emphasis"><EM>added</EM></SPAN> to the
        repository.  This configuration file is specified to
        <SPAN class="command"><STRONG>svn_load_dirs.pl</STRONG></SPAN> using the
        <CODE class="option">-p</CODE> command-line option.  Each line of the
        configuration file is a whitespace-delimited set of two or
        four values: a Perl-style regular expression against which to match the
        added path, a control keyword (either
        <CODE class="literal">break</CODE> or <CODE class="literal">cont</CODE>), and then
        optionally a property name and value.</P><PRE class="screen">\.png$              break   svn:mime-type   image/png
\.jpe?g$            break   svn:mime-type   image/jpeg
\.m3u$              cont    svn:mime-type   audio/x-mpegurl
\.m3u$              break   svn:eol-style   LF
.*                  break   svn:eol-style   native
</PRE><P>For each added path, the configured property changes whose
        regular expression matches the path are applied in order,
        unless the control specification is <CODE class="literal">break</CODE>
        (which means that no more property changes should be applied
        to that path).  If the control specification is
        <CODE class="literal">cont</CODE>âan abbreviation for
        <CODE class="literal">continue</CODE>âmatching will continue
        with the next line of the configuration file.</P><P>Any whitespace in the regular expression, property name,
        or property value must be surrounded by either single or
        double quotes.  You can escape quotes that
        are not used for wrapping whitespace by preceding them with a
        backslash (<CODE class="literal">\</CODE>) character.  The backslash
        escapes only quotes when parsing the configuration file, so do
        not protect any other characters beyond what is necessary for
        the regular expression.</P></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.branchmerge.summary"></A>Summary</H2></DIV></DIV></DIV><P>We covered a lot of ground in this chapter.  We
      discussed the concepts of tags and branches and demonstrated
      how Subversion implements these concepts by copying directories
      with the <SPAN class="command"><STRONG>svn copy</STRONG></SPAN> command.  We showed how
      to use <SPAN class="command"><STRONG>svn merge</STRONG></SPAN> to copy changes from one
      branch to another or roll back bad changes.  We went over
      the use of <SPAN class="command"><STRONG>svn switch</STRONG></SPAN> to create
      mixed-location working copies.  And we talked about how one
      might manage the organization and lifetimes of branches in a
      repository.</P><P>Remember the Subversion mantra: branches and tags are cheap.
      So don't be afraid to use them when needed!</P><P>As a helpful reminder of all the operations we discussed,
      here is handy reference table you can consult as
      you begin to make use of branches.</P><DIV class="table"><A id="svn.branchemerge.summary.tbl-1"></A><P class="title"><B>Table&nbsp;4.1.&nbsp;Branching and merging commands</B></P><DIV class="table-contents"><TABLE summary="Branching and merging commands" border="1"><COLGROUP><COL><COL></COLGROUP><THEAD><TR><TH>Action</TH><TH>Command</TH></TR></THEAD><TBODY><TR><TD>Create a branch or tag</TD><TD><STRONG class="userinput"><CODE>svn copy <EM class="replaceable"><CODE>URL1</CODE></EM> <EM class="replaceable"><CODE>URL2</CODE></EM></CODE></STRONG></TD></TR><TR><TD>Switch a working copy to a branch or tag</TD><TD><STRONG class="userinput"><CODE>svn switch <EM class="replaceable"><CODE>URL</CODE></EM></CODE></STRONG></TD></TR><TR><TD>Synchronize a branch with trunk</TD><TD><STRONG class="userinput"><CODE>svn merge <EM class="replaceable"><CODE>trunkURL</CODE></EM>; svn commit</CODE></STRONG></TD></TR><TR><TD>See merge history or eligible changesets</TD><TD><STRONG class="userinput"><CODE>svn mergeinfo target --from-source=<EM class="replaceable"><CODE>URL</CODE></EM></CODE></STRONG></TD></TR><TR><TD>Merge a branch back into trunk</TD><TD><STRONG class="userinput"><CODE>svn merge --reintegrate <EM class="replaceable"><CODE>branchURL</CODE></EM>; svn commit</CODE></STRONG></TD></TR><TR><TD>Merge one specific change</TD><TD><STRONG class="userinput"><CODE>svn merge -c <EM class="replaceable"><CODE>REV</CODE></EM> <EM class="replaceable"><CODE>URL</CODE></EM>; svn commit</CODE></STRONG></TD></TR><TR><TD>Merge a range of changes</TD><TD><STRONG class="userinput"><CODE>svn merge -r <EM class="replaceable"><CODE>REV1</CODE></EM>:<EM class="replaceable"><CODE>REV2</CODE></EM> <EM class="replaceable"><CODE>URL</CODE></EM>; svn commit</CODE></STRONG></TD></TR><TR><TD>Block a change from automatic merging</TD><TD><STRONG class="userinput"><CODE>svn merge -c <EM class="replaceable"><CODE>REV</CODE></EM> --record-only <EM class="replaceable"><CODE>URL</CODE></EM>; svn commit</CODE></STRONG></TD></TR><TR><TD>Preview a merge</TD><TD><STRONG class="userinput"><CODE>svn merge <EM class="replaceable"><CODE>URL</CODE></EM> --dry-run</CODE></STRONG></TD></TR><TR><TD>Abandon merge results</TD><TD><STRONG class="userinput"><CODE>svn revert -R .</CODE></STRONG></TD></TR><TR><TD>Resurrect something from history</TD><TD><STRONG class="userinput"><CODE>svn copy <EM class="replaceable"><CODE>URL</CODE></EM>@<EM class="replaceable"><CODE>REV</CODE></EM> <EM class="replaceable"><CODE>localPATH</CODE></EM></CODE></STRONG></TD></TR><TR><TD>Undo a committed change</TD><TD><STRONG class="userinput"><CODE>svn merge -c -<EM class="replaceable"><CODE>REV</CODE></EM> <EM class="replaceable"><CODE>URL</CODE></EM>; svn commit</CODE></STRONG></TD></TR><TR><TD>Examine merge-sensitive history</TD><TD><STRONG class="userinput"><CODE>svn log -g; svn blame -g</CODE></STRONG></TD></TR><TR><TD>Create a tag from a working copy</TD><TD><STRONG class="userinput"><CODE>svn copy . <EM class="replaceable"><CODE>tagURL</CODE></EM></CODE></STRONG></TD></TR><TR><TD>Rearrange a branch or tag</TD><TD><STRONG class="userinput"><CODE>svn mv <EM class="replaceable"><CODE>URL1</CODE></EM> <EM class="replaceable"><CODE>URL2</CODE></EM></CODE></STRONG></TD></TR><TR><TD>Remove a branch or tag</TD><TD><STRONG class="userinput"><CODE>svn rm <EM class="replaceable"><CODE>URL</CODE></EM></CODE></STRONG></TD></TR></TBODY></TABLE></DIV></DIV><BR class="table-break"></DIV><DIV class="footnotes"><BR><HR width="100" align="left"><DIV class="footnote"><P><SUP>[<A id="ftn.id520005" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id520005" class="para">20</A>] </SUP>Subversion does not support copying between different
        repositories.  When using URLs with <SPAN class="command"><STRONG>svn
        copy</STRONG></SPAN> or <SPAN class="command"><STRONG>svn move</STRONG></SPAN>, you can only
        copy items within the same repository.</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id521506" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id521506" class="para">21</A>] </SUP>The Subversion project has plans, however, to someday
            implement a command that would accomplish the task of
            permanently deleting information.  In the meantime, see
            <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.tk.svndumpfilter" title="svndumpfilter">the section called âsvndumpfilterâ</A>
            for a possible workaround.</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id521965" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id521965" class="para">22</A>] </SUP>At least, this is true in Subversion 1.5 at the time
              of this writing.  This behavior may improve in future
              versions of Subversion.</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id522412" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id522412" class="para">23</A>] </SUP>Interestingly, after rolling back a
                revision like this, we wouldn't be able to reapply
                the revision using <STRONG class="userinput"><CODE>svn merge . -c 5</CODE></STRONG>,
                since the mergeinfo would already list r5 as being
                applied.  We would have to use
                the <CODE class="option">--ignore-ancestry</CODE> option to make
                the merge command ignore the existing
                mergeinfo!</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id523665" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id523665" class="para">24</A>] </SUP>You <SPAN class="emphasis"><EM>can</EM></SPAN>, however, use <SPAN class="command"><STRONG>svn
          switch</STRONG></SPAN> with the <CODE class="option">--relocate</CODE> option
          if the URL of your server changes and you don't want to
          abandon an existing working copy.  See <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.switch" title="svn switch">svn switch</A> for more information and an
          example.</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id525027" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id525027" class="para">25</A>] </SUP>And is entirely bug-free, of course!</P></DIV></DIV></DIV><DIV class="chapter" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title"><A id="svn.reposadmin"></A>Chapter&nbsp;5.&nbsp;Repository Administration</H2></DIV></DIV></DIV><DIV class="toc"><P><B>Table of Contents</B></P><DL><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.basics">The Subversion Repository, Defined</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.planning">Strategies for Repository Deployment</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.projects.chooselayout">Planning Your Repository Organization</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.basics.hosting">Deciding Where and How to Host Your Repository</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.basics.backends">Choosing a Data Store</A></SPAN></DT><DD><DL><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.basics.backends.bdb">Berkeley DB</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.basics.backends.fsfs">FSFS</A></SPAN></DT></DL></DD></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.create">Creating and Configuring Your Repository</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.basics.creating">Creating the Repository</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.create.hooks">Implementing Repository Hooks</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.create.bdb">Berkeley DB Configuration</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint">Repository Maintenance</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.tk">An Administrator's Toolkit</A></SPAN></DT><DD><DL><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.tk.svnadmin">svnadmin</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.tk.svnlook">svnlook</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.tk.svndumpfilter">svndumpfilter</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.tk.svnsync">svnsync</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.tk.fsfsreshard">fsfs-reshard.py</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.tk.bdbutil">Berkeley DB utilities</A></SPAN></DT></DL></DD><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.setlog">Commit Log Message Correction</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.diskspace">Managing Disk Space</A></SPAN></DT><DD><DL><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.diskspace.deltas">How Subversion saves disk space</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.diskspace.deadtxns">Removing dead transactions</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.diskspace.bdblogs">Purging unused Berkeley DB logfiles</A></SPAN></DT></DL></DD><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.recovery">Berkeley DB Recovery</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.migrate">Migrating Repository Data Elsewhere</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.filtering">Filtering Repository History</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.replication">Repository Replication</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.backup">Repository Backup</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.uuids">Managing Repository UUIDs</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.moving-and-removing">Moving and Removing Repositories</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.summary">Summary</A></SPAN></DT></DL></DIV><P>The Subversion repository is the central storehouse of all
    your versioned data.  As such, it becomes an obvious candidate for
    all the love and attention an administrator can offer.  While the
    repository is generally a low-maintenance item, it is important to
    understand how to properly configure and care for it so that
    potential problems are avoided, and so actual problems are safely
    resolved.</P><P>In this chapter, we'll discuss how to create and configure a
    Subversion repository.  We'll also talk about repository
    maintenance, providing examples of how and when to use the
    <SPAN class="command"><STRONG>svnlook</STRONG></SPAN> and <SPAN class="command"><STRONG>svnadmin</STRONG></SPAN> tools
    provided with Subversion.  We'll address some common questions and
    mistakes and give some suggestions on how to arrange the data in
    the repository.</P><P>If you plan to access a Subversion repository only in the
    role of a user whose data is under version control (i.e., via
    a Subversion client), you can skip this chapter altogether.
    However, if you are, or wish to become, a Subversion repository
    administrator,
    <SUP>[<A id="id531872" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id531872" class="footnote">26</A>]</SUP>
    this chapter is for you.</P><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.reposadmin.basics"></A>The Subversion Repository, Defined</H2></DIV></DIV></DIV><P>Before jumping into the broader topic of repository
      administration, let's further define what a repository is.  How
      does it look?  How does it feel?  Does it take its tea hot or
      iced, sweetened, and with lemon?  As an administrator, you'll be
      expected to understand the composition of a repository both from
      a literal, OS-level perspectiveâhow a repository looks and
      acts with respect to non-Subversion toolsâand from a
      logical perspectiveâdealing with how data is represented
      <SPAN class="emphasis"><EM>inside</EM></SPAN> the repository.</P><P>Seen through the eyes of a typical file browser application
      (such as Windows Explorer) or command-line based filesystem
      navigation tools, the Subversion repository is just another
      directory full of stuff.  There are some subdirectories with
      human-readable configuration files in them, some subdirectories
      with some not-so-human-readable data files, and so on.  As in
      other areas of the Subversion design, modularity is given high
      regard, and hierarchical organization is preferred to cluttered
      chaos.  So a shallow glance into a typical repository from a
      nuts-and-bolts perspective is sufficient to reveal the basic
      components of the repository:</P><PRE class="screen">$ ls repos
conf/  dav/  db/  format  hooks/  locks/  README.txt
</PRE><P>Here's a quick fly-by overview of what exactly you're seeing
      in this directory listing.  (Don't get bogged down in the
      terminologyâdetailed coverage of these components exists
      elsewhere in this and other chapters.)</P><DIV class="variablelist"><DL><DT><SPAN class="term">conf</SPAN></DT><DD><P>A directory containing configuration files</P></DD><DT><SPAN class="term">dav</SPAN></DT><DD><P>A directory provided to
            <CODE class="filename">mod_dav_svn</CODE> for its private
            housekeeping data</P></DD><DT><SPAN class="term">db</SPAN></DT><DD><P>The data store for all of your versioned data</P></DD><DT><SPAN class="term">format</SPAN></DT><DD><P>A file that contains a single integer that
            indicates the version number of the repository layout</P></DD><DT><SPAN class="term">hooks</SPAN></DT><DD><P>A directory full of hook script templates (and hook
            scripts themselves, once you've installed some)</P></DD><DT><SPAN class="term">locks</SPAN></DT><DD><P>A directory for Subversion's repository lock
            files, used for tracking accessors to the repository</P></DD><DT><SPAN class="term">README.txt</SPAN></DT><DD><P>A file whose contents merely inform its readers that
            they are looking at a Subversion repository</P></DD></DL></DIV><P>Of course, when accessed via the Subversion libraries, this
      otherwise unremarkable collection of files and directories
      suddenly becomes an implementation of a virtual, versioned
      filesystem, complete with customizable event triggers.  This
      filesystem has its own notions of directories and files, very
      similar to the notions of such things held by real filesystems
      (such as NTFS, FAT32, ext3, etc.).  But this is a special
      filesystemâit hangs these directories and files from
      revisions, keeping all the changes you've ever made to them
      safely stored and forever accessible.  This is where the
      entirety of your versioned data lives.</P></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.reposadmin.planning"></A>Strategies for Repository Deployment</H2></DIV></DIV></DIV><P>Due largely to the simplicity of the overall design of the
      Subversion repository and the technologies on which it relies,
      creating and configuring a repository are fairly straightforward
      tasks.  There are a few preliminary decisions you'll want to
      make, but the actual work involved in any given setup of a
      Subversion repository is pretty basic, tending toward
      mindless repetition if you find yourself setting up multiples of
      these things.</P><P>Some things you'll want to consider beforehand, though, are:</P><DIV class="itemizedlist"><UL type="disc"><LI><P>What data do you expect to live in your repository (or
          repositories), and how will that data be organized?</P></LI><LI><P>Where will your repository live, and how will it be
          accessed?</P></LI><LI><P>What types of access control and repository event
          reporting do you need?</P></LI><LI><P>Which of the available types of data store do you want
          to use?</P></LI></UL></DIV><P>In this section, we'll try to help you answer those
      questions.</P><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.reposadmin.projects.chooselayout"></A>Planning Your Repository Organization</H3></DIV></DIV></DIV><P>While Subversion allows you to move around versioned files
        and directories without any loss of information, and even
        provides ways of moving whole sets of versioned history from
        one repository to another, doing so can greatly disrupt the
        workflow of those who access the repository often and come to
        expect things to be at certain locations.  So before creating
        a new repository, try to peer into the future a bit; plan
        ahead before placing your data under version control.  By
        conscientiously â<SPAN class="quote">laying out</SPAN>â your repository or
        repositories and their versioned contents ahead of time, you
        can prevent many future headaches.</P><P>Let's assume that as repository administrator, you will be
        responsible for supporting the version control system for
        several projects.  Your first decision is whether to use a
        single repository for multiple projects, or to give each
        project its own repository, or some compromise of these
        two.</P><P>There are benefits to using a single repository for
        multiple projects, most obviously the lack of duplicated
        maintenance.  A single repository means that there is one set
        of hook programs, one thing to routinely back up, one thing to
        dump and load if Subversion releases an incompatible new
        version, and so on.  Also, you can move data between projects
        easily, without losing any historical versioning
        information.</P><P>The downside of using a single repository is that
        different projects may have different requirements in terms of
        the repository event triggers, such as needing to send commit
        notification emails to different mailing lists, or having
        different definitions about what does and does not constitute
        a legitimate commit.  These aren't insurmountable problems, of
        courseâit just means that all of your hook scripts have
        to be sensitive to the layout of your repository rather than
        assuming that the whole repository is associated with a single
        group of people.  Also, remember that Subversion uses
        repository-global revision numbers.  While those numbers don't
        have any particular magical powers, some folks still don't
        like the fact that even though no changes have been made to
        their project lately, the youngest revision number for the
        repository keeps climbing because other projects are actively
        adding new revisions.
        <SUP>[<A id="id532044" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id532044" class="footnote">27</A>]</SUP>
      </P><P>A middle-ground approach can be taken, too.  For example,
        projects can be grouped by how well they relate to each other.
        You might have a few repositories with a handful of projects
        in each repository.  That way, projects that are likely to
        want to share data can do so easily, and as new revisions are
        added to the repository, at least the developers know that
        those new revisions are at least remotely related to everyone
        who uses that repository.</P><P>After deciding how to organize your projects with respect
        to repositories, you'll probably want to think about directory
        hierarchies within the repositories themselves.  Because
        Subversion uses regular directory copies for branching and
        tagging (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge" title="Chapter&nbsp;4.&nbsp;Branching and Merging">Chapter&nbsp;4, <I>Branching and Merging</I></A>), the
        Subversion community recommends that you choose a repository
        location for each <EM class="firstterm">project
        root</EM>âthe â<SPAN class="quote">topmost</SPAN>â directory
        that contains data related to that projectâand then
        create three subdirectories beneath that root:
        <CODE class="filename">trunk</CODE>, meaning the directory under which
        the main project development occurs;
        <CODE class="filename">branches</CODE>, which is a directory in which
        to create various named branches of the main development line;
        and <CODE class="filename">tags</CODE>, which is a collection of tree
        snapshots that are created, and perhaps destroyed, but never
        changed.
        <SUP>[<A id="id532230" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id532230" class="footnote">28</A>]</SUP>
        </P><P>For example, your repository might look like this:</P><PRE class="screen">/
   calc/
      trunk/
      tags/
      branches/
   calendar/
      trunk/
      tags/
      branches/
   spreadsheet/
      trunk/
      tags/
      branches/
   â¦
</PRE><P>Note that it doesn't matter where in your repository each
        project root is.  If you have only one project per repository,
        the logical place to put each project root is at the root of
        that project's respective repository.  If you have multiple
        projects, you might want to arrange them in groups inside the
        repository, perhaps putting projects with similar goals or
        shared code in the same subdirectory, or maybe just grouping
        them alphabetically.  Such an arrangement might look
        like this:</P><PRE class="screen">/
   utils/
      calc/
         trunk/
         tags/
         branches/
      calendar/
         trunk/
         tags/
         branches/
      â¦
   office/
      spreadsheet/
         trunk/
         tags/
         branches/
      â¦
</PRE><P>Lay out your repository in whatever way you see fit.
        Subversion does not expect or enforce a particular layoutâin
        its eyes, a directory is a directory is a directory.
        Ultimately, you should choose the repository arrangement that
        meets the needs of the people who work on the projects that
        live there.</P><P>In the name of full disclosure, though, we'll mention
        another very common layout.  In this layout, the
        <CODE class="filename">trunk</CODE>, <CODE class="filename">tags</CODE>, and
        <CODE class="filename">branches</CODE> directories live in the root
        directory of your repository, and your projects are in
        subdirectories beneath those, like so:</P><PRE class="screen">/
   trunk/
      calc/
      calendar/
      spreadsheet/
      â¦
   tags/
      calc/
      calendar/
      spreadsheet/
      â¦
   branches/
      calc/
      calendar/
      spreadsheet/
      â¦
</PRE><P>There's nothing particularly incorrect about such a
        layout, but it may or may not seem as intuitive for your
        users.  Especially in large, multiproject situations with
        many users, those users may tend to be familiar with only one
        or two of the projects in the repository.  But the
        projects-as-branch-siblings approach tends to deemphasize project
        individuality and focus on the entire set of projects as a
        single entity.  That's a social issue, though.  We like our
        originally suggested arrangement for purely practical
        reasonsâit's easier to ask about (or modify, or migrate
        elsewhere) the entire history of a single project when there's
        a single repository path that holds the entire
        historyâpast, present, tagged, and branchedâfor
        that project and that project alone.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.reposadmin.basics.hosting"></A>Deciding Where and How to Host Your Repository</H3></DIV></DIV></DIV><P>Before creating your Subversion repository, an obvious
        question you'll need to answer is where the thing is going to
        live.  This is strongly connected to myriad other
        questions involving how the repository will be accessed (via a
        Subversion server or directly), by whom (users behind your
        corporate firewall or the whole world out on the open
        Internet), what other services you'll be providing around
        Subversion (repository browsing interfaces, email-based
        commit notification, etc.), your data backup strategy, and so
        on.</P><P>We cover server choice and configuration in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig" title="Chapter&nbsp;6.&nbsp;Server Configuration">Chapter&nbsp;6, <I>Server Configuration</I></A>, but the point we'd like to
        briefly make here is simply that the answers to some of these
        other questions might have implications that force your hand
        when deciding where your repository will live.  For example,
        certain deployment scenarios might require accessing the
        repository via a remote filesystem from multiple computers, in
        which case (as you'll read in the next section) your choice of
        a repository backend data store turns out not to be a choice
        at all because only one of the available backends will work
        in this scenario.</P><P>Addressing each possible way to deploy
        Subversion is both impossible and outside the scope of this
        book.  We simply encourage you to evaluate your options using
        these pages and other sources as your reference material and to
        plan ahead.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.reposadmin.basics.backends"></A>Choosing a Data Store</H3></DIV></DIV></DIV><P>As of version 1.1, Subversion provides two options for the
        type of underlying data storeâoften referred to as
        â<SPAN class="quote">the backend</SPAN>â or, somewhat confusingly,
        â<SPAN class="quote">the (versioned) filesystem</SPAN>ââthat each
        repository uses.  One type of data store keeps everything in a
        Berkeley DB (or BDB) database environment; repositories that
        use this type are often referred to as being
        â<SPAN class="quote">BDB-backed.</SPAN>â  The other type stores data in
        ordinary flat files, using a custom format.  Subversion
        developers have adopted the habit of referring to this latter
        data storage mechanism as <EM class="firstterm">FSFS</EM>
        <SUP>[<A id="id532408" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id532408" class="footnote">29</A>]</SUP> 
        âa versioned filesystem implementation that uses the
        native OS filesystem directlyârather than via a database
        library or some other abstraction layerâto store data.</P><P><A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.basics.backends.tbl-1" title="Table&nbsp;5.1.&nbsp;Repository data store comparison">Table&nbsp;5.1, âRepository data store comparisonâ</A>
        gives a comparative overview of Berkeley DB and FSFS
        repositories.</P><DIV class="table"><A id="svn.reposadmin.basics.backends.tbl-1"></A><P class="title"><B>Table&nbsp;5.1.&nbsp;Repository data store comparison</B></P><DIV class="table-contents"><TABLE summary="Repository data store comparison" border="1"><COLGROUP><COL><COL><COL><COL></COLGROUP><THEAD><TR><TH>Category</TH><TH>Feature</TH><TH>Berkeley DB</TH><TH>FSFS</TH></TR></THEAD><TBODY><TR><TD rowspan="2">Reliability</TD><TD>Data integrity</TD><TD>When properly deployed, extremely reliable;
                Berkeley DB 4.4 brings auto-recovery</TD><TD>Older versions had some rarely demonstrated, but
                data-destroying bugs</TD></TR><TR><TD>Sensitivity to interruptions</TD><TD>Very; crashes and permission problems can leave the
                database â<SPAN class="quote">wedged,</SPAN>â requiring journaled
                recovery procedures</TD><TD>Quite insensitive</TD></TR><TR><TD rowspan="4">Accessibility</TD><TD>Usable from a read-only mount</TD><TD>No</TD><TD>Yes</TD></TR><TR><TD>Platform-independent storage</TD><TD>No</TD><TD>Yes</TD></TR><TR><TD>Usable over network filesystems</TD><TD>Generally, no</TD><TD>Yes</TD></TR><TR><TD>Group permissions handling</TD><TD>Sensitive to user umask problems; best if accessed
                by only one user</TD><TD>Works around umask problems</TD></TR><TR><TD rowspan="3">Scalability</TD><TD>Repository disk usage</TD><TD>Larger (especially if logfiles aren't purged)</TD><TD>Smaller</TD></TR><TR><TD>Number of revision trees</TD><TD>Database; no problems</TD><TD>Some older native filesystems don't scale well with
                thousands of entries in a single directory</TD></TR><TR><TD>Directories with many files</TD><TD>Slower</TD><TD>Faster</TD></TR><TR><TD rowspan="2">Performance</TD><TD>Checking out latest revision</TD><TD>No meaningful difference</TD><TD>No meaningful difference</TD></TR><TR><TD>Large commits</TD><TD>Slower overall, but cost is amortized across the
                lifetime of the commit</TD><TD>Faster overall, but finalization delay may cause 
                client timeouts</TD></TR></TBODY></TABLE></DIV></DIV><BR class="table-break"><P>There are advantages and disadvantages to each of these
        two backend types.  Neither of them is more
        â<SPAN class="quote">official</SPAN>â than the other, though the newer FSFS
        is the default data store as of Subversion 1.2.  Both are
        reliable enough to trust with your versioned data.  But as you
        can see in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.basics.backends.tbl-1" title="Table&nbsp;5.1.&nbsp;Repository data store comparison">Table&nbsp;5.1, âRepository data store comparisonâ</A>, the FSFS
        backend provides quite a bit more flexibility in terms of its
        supported deployment scenarios.  More flexibility means you
        have to work a little harder to find ways to deploy it
        incorrectly.  Those reasonsâplus the fact that not using
        Berkeley DB means there's one fewer component in the
        systemâlargely explain why today almost everyone uses
        the FSFS backend when creating new repositories.</P><P>Fortunately, most programs that access Subversion
        repositories are blissfully ignorant of which backend data
        store is in use.  And you aren't even necessarily stuck with
        your first choice of a data storeâin the event that you
        change your mind later, Subversion provides ways of migrating
        your repository's data into another repository that uses a
        different backend data store.  We talk more about that later
        in this chapter.</P><P>The following subsections provide a more detailed look at
        the available backend data store types.</P><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.reposadmin.basics.backends.bdb"></A>Berkeley DB</H4></DIV></DIV></DIV><P>When the initial design phase of Subversion was in
          progress, the developers decided to use Berkeley DB for a
          variety of reasons, including its open source license,
          transaction support, reliability, performance, API
          simplicity, thread safety, support for cursors, and so
          on.</P><P>Berkeley DB provides real transaction
          supportâperhaps its most powerful feature.  Multiple
          processes accessing your Subversion repositories don't have
          to worry about accidentally clobbering each other's data.
          The isolation provided by the transaction system is such
          that for any given operation, the Subversion repository code
          sees a static view of the databaseânot a database that
          is constantly changing at the hand of some other
          processâand can make decisions based on that view.  If
          the decision made happens to conflict with what another
          process is doing, the entire operation is rolled back as though
          it never happened, and Subversion gracefully retries the
          operation against a new, updated (and yet still static) view
          of the database.</P><P>Another great feature of Berkeley DB is <EM class="firstterm">hot
          backups</EM>âthe ability to back up the
          database environment without taking it
          â<SPAN class="quote">offline.</SPAN>â We'll discuss how to back up your
          repository later in this chapter (in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.backup" title="Repository Backup">the section called âRepository Backupâ</A>), but the benefits
          of being able to make fully functional copies of your
          repositories without any downtime should be obvious.</P><P>Berkeley DB is also a very reliable database system when
          properly used.  Subversion uses Berkeley DB's logging
          facilities, which means that the database first writes to
          on-disk logfiles a description of any modifications it is
          about to make, and then makes the modification itself.  This
          is to ensure that if anything goes wrong, the database
          system can back up to a previous
          <EM class="firstterm">checkpoint</EM>âa location in the
          logfiles known not to be corruptâand replay
          transactions until the data is restored to a usable state.
          See <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.diskspace" title="Managing Disk Space">the section called âManaging Disk Spaceâ</A> later
          in this chapter for more about Berkeley DB logfiles.</P><P>But every rose has its thorn, and so we must note some
          known limitations of Berkeley DB.  First, Berkeley DB
          environments are not portable.  You cannot simply copy a
          Subversion repository that was created on a Unix system onto
          a Windows system and expect it to work.  While much of the
          Berkeley DB database format is architecture-independent,
          other aspects of the environment are not.
          Second, Subversion uses Berkeley DB in a way that will not
          operate on Windows 95/98 systemsâif you need to house
          a BDB-backed repository on a Windows machine, stick with
          Windows 2000 or later.</P><P>While Berkeley DB promises to behave correctly on
          network shares that meet a particular set of specifications,
          <SUP>[<A id="id532759" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id532759" class="footnote">30</A>]</SUP>
          most networked filesystem types and appliances do
          <SPAN class="emphasis"><EM>not</EM></SPAN> actually meet those requirements.
          And in no case can you allow a BDB-backed repository that
          resides on a network share to be accessed by multiple
          clients of that share at once (which quite often is the
          whole point of having the repository live on a network share
          in the first place).</P><DIV class="warning" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Warning</H3><P>If you attempt to use Berkeley DB on a noncompliant
            remote filesystem, the results are unpredictableâyou
            may see mysterious errors right away, or it may be months
            before you discover that your repository database is
            subtly corrupted.  You should strongly consider using the
            FSFS data store for repositories that need to live on a
            network share.</P></DIV><P>Finally, because Berkeley DB is a library linked
          directly into Subversion, it's more sensitive to
          interruptions than a typical relational database system.
          Most SQL systems, for example, have a dedicated server
          process that mediates all access to tables.  If a program
          accessing the database crashes for some reason, the database
          daemon notices the lost connection and cleans up any mess
          left behind.  And because the database daemon is the only
          process accessing the tables, applications don't need to
          worry about permission conflicts.  These things are not the
          case with Berkeley DB, however.  Subversion (and programs
          using Subversion libraries) access the database tables
          directly, which means that a program crash can leave the
          database in a temporarily inconsistent, inaccessible state.
          When this happens, an administrator needs to ask Berkeley DB
          to restore to a checkpoint, which is a bit of an annoyance.
          Other things can cause a repository to â<SPAN class="quote">wedge</SPAN>â
          besides crashed processes, such as programs conflicting over
          ownership and permissions on the database files.</P><DIV class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Note</H3><P>Berkeley DB 4.4 brings (to Subversion 1.4 and later)
            the ability for Subversion to automatically and
            transparently recover Berkeley DB environments in need of
            such recovery.  When a Subversion process attaches to a
            repository's Berkeley DB environment, it uses some process
            accounting mechanisms to detect any unclean disconnections
            by previous processes, performs any necessary recovery,
            and then continues on as though nothing happened.  This
            doesn't completely eliminate instances of repository
            wedging, but it does drastically reduce the amount of
            human interaction required to recover from them.</P></DIV><P>So while a Berkeley DB repository is quite fast and
          scalable, it's best used by a single server process running
          as one userâsuch as Apache's <SPAN class="command"><STRONG>httpd</STRONG></SPAN>
          or <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig" title="Chapter&nbsp;6.&nbsp;Server Configuration">Chapter&nbsp;6, <I>Server Configuration</I></A>)ârather than accessing it
          as many different users via <CODE class="literal">file://</CODE> or
          <CODE class="literal">svn+ssh://</CODE> URLs.  If you're accessing a Berkeley
          DB repository directly as multiple users, be sure to read
          <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.multimethod" title="Supporting Multiple Repository Access Methods">the section called âSupporting Multiple Repository Access Methodsâ</A> later in this
          chapter.</P></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.reposadmin.basics.backends.fsfs"></A>FSFS</H4></DIV></DIV></DIV><P>In mid-2004, a second type of repository storage
          systemâone that doesn't use a database at
          allâcame into being.  An FSFS repository stores the
          changes associated with a revision in a single file, and so
          all of a repository's revisions can be found in a single
          subdirectory full of numbered files.  Transactions are
          created in separate subdirectories as individual files.
          When complete, the transaction file is renamed and moved
          into the revisions directory, thus guaranteeing that commits
          are atomic.  And because a revision file is permanent and
          unchanging, the repository also can be backed up while
          â<SPAN class="quote">hot,</SPAN>â just like a BDB-backed
          repository.</P><P>The FSFS revision files describe a revision's
          directory structure, file contents, and deltas against files
          in other revision trees.  Unlike a Berkeley DB database,
          this storage format is portable across different operating
          systems and isn't sensitive to CPU architecture.  Because
          no journaling or shared-memory files are being used, the
          repository can be safely accessed over a network filesystem
          and examined in a read-only environment.  The lack of
          database overhead also means the overall repository
          size is a bit smaller.</P><P>FSFS has different performance characteristics, too.
          When committing a directory with a huge number of files,
          FSFS is able to more quickly append directory entries.  On
          the other hand, FSFS writes the latest version of a file as
          a delta against an earlier version, which means that
          checking out the latest tree is a bit slower than fetching
          the full-texts stored in a Berkeley DB HEAD revision.  FSFS
          also has a longer delay when finalizing a commit, which
          could in extreme cases cause clients to time out while
          waiting for a response.</P><P>The most important distinction, however, is FSFS's
          imperviousness to wedging when something goes wrong.  If a
          process using a Berkeley DB database runs into a permissions
          problem or suddenly crashes, the database can be left in an
          unusable state until an administrator recovers it.  If the
          same scenarios happen to a process using an FSFS repository,
          the repository isn't affected at all.  At worst, some
          transaction data is left behind.</P><P>The only real argument against FSFS is its relative
          immaturity compared to Berkeley DB.  Unlike Berkeley DB,
          which has years of history, its own dedicated development
          team, and, now, Oracle's mighty name attached to it,
          <SUP>[<A id="id532928" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id532928" class="footnote">31</A>]</SUP>
          FSFS is a newer bit of engineering.  Prior to Subversion
          1.4, it was still shaking out some pretty serious data
          integrity bugs, which, while triggered in only very rare
          cases, nonetheless did occur.  That said, FSFS has quickly
          become the backend of choice for some of the largest public
          and private Subversion repositories, and it promises a lower
          barrier to entry for Subversion across the board.</P></DIV></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.reposadmin.create"></A>Creating and Configuring Your Repository</H2></DIV></DIV></DIV><P>Earlier in this chapter (in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.planning" title="Strategies for Repository Deployment">the section called âStrategies for Repository Deploymentâ</A>), we
      looked at some of the important decisions that should be made
      before creating and configuring your Subversion repository.
      Now, we finally get to get our hands dirty!  In this section,
      we'll see how to actually create a Subversion repository and
      configure it to perform custom actions when special repository
      events occur.</P><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.reposadmin.basics.creating"></A>Creating the Repository</H3></DIV></DIV></DIV><P>Subversion repository creation is an incredibly simple
        task.  The <SPAN class="command"><STRONG>svnadmin</STRONG></SPAN> utility that comes with
        Subversion provides a subcommand (<SPAN class="command"><STRONG>svnadmin
        create</STRONG></SPAN>) for doing just that.</P><PRE class="screen">$ # Create a repository
$ svnadmin create /var/svn/repos
$
</PRE><P>This creates a new repository in the directory
        <CODE class="filename">/var/svn/repos</CODE>, and with the default
        filesystem data store.  Prior to Subversion 1.2, the default
        was to use Berkeley DB; the default is now FSFS.  You can
        explicitly choose the filesystem type using the
        <CODE class="option">--fs-type</CODE> argument, which accepts as a
        parameter either <CODE class="literal">fsfs</CODE> or
        <CODE class="literal">bdb</CODE>.</P><PRE class="screen">$ # Create an FSFS-backed repository
$ svnadmin create --fs-type fsfs /var/svn/repos
$
</PRE><PRE class="screen"># Create a Berkeley-DB-backed repository
$ svnadmin create --fs-type bdb /var/svn/repos
$
</PRE><P>After running this simple command, you have a Subversion
        repository.</P><DIV class="tip" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Tip</H3><P>The path argument to <SPAN class="command"><STRONG>svnadmin</STRONG></SPAN> is just
          a regular filesystem path and not a URL like the
          <SPAN class="command"><STRONG>svn</STRONG></SPAN> client program uses when referring to
          repositories.  Both <SPAN class="command"><STRONG>svnadmin</STRONG></SPAN> and
          <SPAN class="command"><STRONG>svnlook</STRONG></SPAN> are considered server-side
          utilitiesâthey are used on the machine where the
          repository resides to examine or modify aspects of the
          repository, and are in fact unable to perform tasks across a
          network.  A common mistake made by Subversion newcomers is
          trying to pass URLs (even â<SPAN class="quote">local</SPAN>â
          <CODE class="literal">file://</CODE> ones) to these two programs.</P></DIV><P>Present in the <CODE class="filename">db/</CODE> subdirectory of
        your repository is the implementation of the versioned
        filesystem. Your new repository's versioned filesystem begins
        life at revision 0, which is defined to consist of nothing but
        the top-level root (<CODE class="filename">/</CODE>) directory.
        Initially, revision 0 also has a single revision property,
        <CODE class="literal">svn:date</CODE>, set to the time at which the
        repository was created.</P><P>Now that you have a repository, it's time to customize
        it.</P><DIV class="warning" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Warning</H3><P>While some parts of a Subversion repositoryâsuch
          as the configuration files and hook scriptsâare meant
          to be examined and modified manually, you shouldn't (and
          shouldn't need to) tamper with the other parts of the
          repository â<SPAN class="quote">by hand.</SPAN>â  The
          <SPAN class="command"><STRONG>svnadmin</STRONG></SPAN> tool should be sufficient for
          any changes necessary to your repository, or you can look to
          third-party tools (such as Berkeley DB's tool suite) for
          tweaking relevant subsections of the repository.  Do
          <SPAN class="emphasis"><EM>not</EM></SPAN> attempt manual manipulation of your
          version control history by poking and prodding around in
          your repository's data store files!</P></DIV></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.reposadmin.create.hooks"></A>Implementing Repository Hooks</H3></DIV></DIV></DIV><P>A <EM class="firstterm">hook</EM> is a program triggered by
        some repository event, such as the creation of a new revision
        or the modification of an unversioned property.  Some hooks
        (the so-called â<SPAN class="quote">pre hooks</SPAN>â) run in advance of a
        repository operation and provide a means by which to both
        report what is about to happen and prevent it from
        happening at all.  Other hooks (the â<SPAN class="quote">post hooks</SPAN>â)
        run after the completion of a repository event and are useful
        for performing tasks that examineâbut don't
        modifyâthe repository.  Each hook is handed enough
        information to tell what that event is (or was), the specific
        repository changes proposed (or completed), and the username
        of the person who triggered the event.</P><P>The <CODE class="filename">hooks</CODE> subdirectory is, by
        default, filled with templates for various repository
        hooks:</P><PRE class="screen">$ ls repos/hooks/
post-commit.tmpl          post-unlock.tmpl  pre-revprop-change.tmpl
post-lock.tmpl            pre-commit.tmpl   pre-unlock.tmpl
post-revprop-change.tmpl  pre-lock.tmpl     start-commit.tmpl
$
</PRE><P>There is one template for each hook that the Subversion
        repository supports; by examining the contents of those
        template scripts, you can see what triggers each script
        to run and what data is passed to that script.  Also present
        in many of these templates are examples of how one might use
        that script, in conjunction with other Subversion-supplied
        programs, to perform common useful tasks.  To actually install
        a working hook, you need only place some executable program or
        script into the <CODE class="filename">repos/hooks</CODE> directory,
        which can be executed as the name (such as
        <SPAN class="command"><STRONG>start-commit</STRONG></SPAN> or
        <SPAN class="command"><STRONG>post-commit</STRONG></SPAN>) of the hook.</P><P>On Unix platforms, this means supplying a script or
        program (which could be a shell script, a Python program, a
        compiled C binary, or any number of other things) named
        exactly like the name of the hook.  Of course, the template
        files are present for more than just informational
        purposesâthe easiest way to install a hook on Unix
        platforms is to simply copy the appropriate template file to a
        new file that lacks the <CODE class="filename">.tmpl</CODE> extension,
        customize the hook's contents, and ensure that the script is
        executable.  Windows, however, uses file extensions to
        determine whether a program is executable, so you would
        need to supply a program whose basename is the name of the
        hook and whose extension is one of the special extensions
        recognized by Windows for executable programs, such as
        <CODE class="filename">.exe</CODE> for programs and
        <CODE class="filename">.bat</CODE> for batch files.</P><DIV class="tip" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Tip</H3><P>For security reasons, the Subversion repository executes
          hook programs with an empty environmentâthat is, no
          environment variables are set at all, not even
          <CODE class="literal">$PATH</CODE> (or <CODE class="literal">%PATH%</CODE>,
          under Windows).  Because of this, many administrators
          are baffled when their hook program runs fine by hand, but
          doesn't work when run by Subversion.  Be sure to explicitly
          set any necessary environment variables in your hook program
          and/or use absolute paths to programs.</P></DIV><P>Subversion executes hooks as the same user who owns the
        process that is accessing the Subversion repository.  In most
        cases, the repository is being accessed via a Subversion
        server, so this user is the same user as whom the server
        runs on the system.  The hooks themselves will need to be
        configured with OS-level permissions that allow that user to
        execute them.  Also, this means that any programs or files
        (including the Subversion repository) accessed directly
        or indirectly by the hook will be accessed as the same user.
        In other words, be alert to potential permission-related
        problems that could prevent the hook from performing the tasks
        it is designed to perform.</P><P>There are serveral hooks implemented by the Subversion
        repository, and you can get details about each of them in
        <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.reposhooks" title="Repository Hooks">the section called âRepository Hooksâ</A>.  As a repository
        administrator, you'll need to decide which hooks you wish
        to implement (by way of providing an appropriately named and
        permissioned hook program), and how.  When you make this
        decision, keep in mind
        the big picture of how your repository is deployed.
        For example, if you are using server configuration
        to determine which users are permitted to commit
        changes to your repository, you don't need to do this
        sort of access control via the hook system.</P><P>There is no shortage of Subversion hook programs and
        scripts that are freely available either from the Subversion community
        itself or elsewhere.  These scripts cover a wide range of
        utilityâbasic access control, policy adherence checking,
        issue tracker integration, email- or syndication-based commit
        notification, and beyond.  Or, if you wish to write your own,
        see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer" title="Chapter&nbsp;8.&nbsp;Embedding Subversion">Chapter&nbsp;8, <I>Embedding Subversion</I></A>.</P><DIV class="warning" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Warning</H3><P>While hook scripts can do almost
          anything, there is one dimension in which hook script
          authors should show restraint:  do <SPAN class="emphasis"><EM>not</EM></SPAN>
          modify a commit transaction using hook scripts.  While it
          might be tempting to use hook scripts to automatically
          correct errors, shortcomings, or policy violations present
          in the files being committed, doing so can cause problems.
          Subversion keeps client-side caches of certain bits of
          repository data, and if you change a commit transaction in
          this way, those caches become indetectably stale.  This
          inconsistency can lead to surprising and unexpected
          behavior.  Instead of modifying the transaction, you should
          simply <SPAN class="emphasis"><EM>validate</EM></SPAN> the transaction in the
          <CODE class="filename">pre-commit</CODE> hook and reject the commit
          if it does not meet the desired requirements.  As a
          bonus, your users will learn the value of careful,
          compliance-minded work habits.</P></DIV></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.reposadmin.create.bdb"></A>Berkeley DB Configuration</H3></DIV></DIV></DIV><P>A Berkeley DB environment is an encapsulation of one or
        more databases, logfiles, region files, and configuration
        files.  The Berkeley DB environment has its own set of default
        configuration values for things such as the number of database
        locks allowed to be taken out at any given time, the maximum
        size of the journaling logfiles, and so on.  Subversion's
        filesystem logic additionally chooses default values for some
        of the Berkeley DB configuration options.  However, sometimes
        your particular repository, with its unique collection of data
        and access patterns, might require a different set of
        configuration option values.</P><P>The producers of Berkeley DB understand that different
        applications and database environments have different
        requirements, so they have provided a mechanism for overriding
        at runtime many of the configuration values for the Berkeley
        DB environment.  BDB checks for the presence of a file named
        <CODE class="filename">DB_CONFIG</CODE> in the environment directory
        (namely, the repository's <CODE class="filename">db</CODE>
        subdirectory), and parses the options found in that file.
        Subversion itself creates this file when it creates the rest
        of the repository.  The file initially contains some default
        options, as well as pointers to the Berkeley DB online
        documentation so that you can read about what those options do.  Of
        course, you are free to add any of the supported Berkeley DB
        options to your <CODE class="filename">DB_CONFIG</CODE> file.  Just be
        aware that while Subversion never attempts to read or
        interpret the contents of the file and makes no direct use of
        the option settings in it, you'll want to avoid any
        configuration changes that may cause Berkeley DB to behave in
        a fashion that is at odds with what Subversion might expect.
        Also, changes made to <CODE class="filename">DB_CONFIG</CODE> won't
        take effect until you recover the database environment (using
        <SPAN class="command"><STRONG>svnadmin recover</STRONG></SPAN>).</P></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.reposadmin.maint"></A>Repository Maintenance</H2></DIV></DIV></DIV><P>Maintaining a Subversion repository can be daunting, mostly
      due to the complexities inherent in systems that have a database
      backend.  Doing the task well is all about knowing the
      toolsâwhat they are, when to use them, and how.  This
      section will introduce you to the repository administration
      tools provided by Subversion and discuss how to wield them to
      accomplish tasks such as repository data migration, upgrades,
      backups, and cleanups.</P><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.reposadmin.maint.tk"></A>An Administrator's Toolkit</H3></DIV></DIV></DIV><P>Subversion provides a handful of utilities useful for
        creating, inspecting, modifying, and repairing your repository.
        Let's look more closely at each of those tools.  Afterward,
        we'll briefly examine some of the utilities included in the
        Berkeley DB distribution that provide functionality specific
        to your repository's database backend not otherwise provided
        by Subversion's own tools.</P><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.reposadmin.maint.tk.svnadmin"></A>svnadmin</H4></DIV></DIV></DIV><P>The <SPAN class="command"><STRONG>svnadmin</STRONG></SPAN> program is the
          repository administrator's best friend.  Besides providing
          the ability to create Subversion repositories, this program
          allows you to perform several maintenance operations on
          those repositories.  The syntax of
          <SPAN class="command"><STRONG>svnadmin</STRONG></SPAN> is similar to that of other
          Subversion command-line programs:</P><PRE class="screen">$ svnadmin help
general usage: svnadmin SUBCOMMAND REPOS_PATH  [ARGS &amp; OPTIONS ...]
Type 'svnadmin help &lt;subcommand&gt;' for help on a specific subcommand.
Type 'svnadmin --version' to see the program version and FS modules.

Available subcommands:
   crashtest
   create
   deltify
â¦
</PRE><P>Previously in this chapter (in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.basics.creating" title="Creating the Repository">the section called âCreating the Repositoryâ</A>), we were
          introduced to the <SPAN class="command"><STRONG>svnadmin create</STRONG></SPAN>
          subcommand.  Most of the other <SPAN class="command"><STRONG>svnadmin</STRONG></SPAN>
          subcommands we will cover later in this chapter.  And you
          can consult <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin" title="svnadmin">the section called âsvnadminâ</A> for a full
          rundown of subcommands and what each of them offers.</P></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.reposadmin.maint.tk.svnlook"></A>svnlook</H4></DIV></DIV></DIV><P><SPAN class="command"><STRONG>svnlook</STRONG></SPAN> is a tool provided by
          Subversion for examining the various revisions and
          <EM class="firstterm">transactions</EM> (which are revisions
          in the making) in a repository.  No part of this program
          attempts to change the repository.  <SPAN class="command"><STRONG>svnlook</STRONG></SPAN>
          is typically used by the repository hooks for reporting the
          changes that are about to be committed (in the case of the
          <SPAN class="command"><STRONG>pre-commit</STRONG></SPAN> hook) or that were just
          committed (in the case of the <SPAN class="command"><STRONG>post-commit</STRONG></SPAN>
          hook) to the repository.  A repository administrator may use
          this tool for diagnostic purposes.</P><P><SPAN class="command"><STRONG>svnlook</STRONG></SPAN> has a straightforward
          syntax:</P><PRE class="screen">$ svnlook help
general usage: svnlook SUBCOMMAND REPOS_PATH [ARGS &amp; OPTIONS ...]
Note: any subcommand which takes the '--revision' and '--transaction'
      options will, if invoked without one of those options, act on
      the repository's youngest revision.
Type 'svnlook help &lt;subcommand&gt;' for help on a specific subcommand.
Type 'svnlook --version' to see the program version and FS modules.
â¦
</PRE><P>Most of <SPAN class="command"><STRONG>svnlook</STRONG></SPAN>'s
          subcommands can operate on either a revision or a
          transaction tree, printing information about the tree
          itself, or how it differs from the previous revision of the
          repository.  You use the <CODE class="option">--revision</CODE>
          (<CODE class="option">-r</CODE>) and <CODE class="option">--transaction</CODE>
          (<CODE class="option">-t</CODE>) options to specify which revision or
          transaction, respectively, to examine.  In the absence of
          both the <CODE class="option">--revision</CODE> (<CODE class="option">-r</CODE>)
          and <CODE class="option">--transaction</CODE> (<CODE class="option">-t</CODE>)
          options, <SPAN class="command"><STRONG>svnlook</STRONG></SPAN> will examine the
          youngest (or <CODE class="literal">HEAD</CODE>) revision in the
          repository.  So the following two commands do exactly the
          same thing when 19 is the youngest revision in the
          repository located at
          <CODE class="filename">/var/svn/repos</CODE>:</P><PRE class="screen">$ svnlook info /var/svn/repos
$ svnlook info /var/svn/repos -r 19
</PRE><P>One exception to these rules about subcommands is
          the <SPAN class="command"><STRONG>svnlook youngest</STRONG></SPAN> subcommand, which
          takes no options and simply prints out the repository's
          youngest revision number:</P><PRE class="screen">$ svnlook youngest /var/svn/repos
19
$
</PRE><DIV class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Note</H3><P>Keep in mind that the only transactions you can browse
            are uncommitted ones.  Most repositories will have no such
            transactions because transactions are usually either
            committed (in which case, you should access them as
            revision with the <CODE class="option">--revision</CODE>
            (<CODE class="option">-r</CODE>) option) or aborted and
            removed.</P></DIV><P>Output from <SPAN class="command"><STRONG>svnlook</STRONG></SPAN> is designed to be
          both human- and machine-parsable.  Take, as an example, the
          output of the <SPAN class="command"><STRONG>svnlook info</STRONG></SPAN> subcommand:</P><PRE class="screen">$ svnlook info /var/svn/repos
sally
2002-11-04 09:29:13 -0600 (Mon, 04 Nov 2002)
27
Added the usual
Greek tree.
$
</PRE><P>The output of <SPAN class="command"><STRONG>svnlook info</STRONG></SPAN> consists
          of the following, in the order given:</P><DIV class="orderedlist"><OL type="1"><LI><P>The author, followed by a newline</P></LI><LI><P>The date, followed by a newline</P></LI><LI><P>The number of characters in the log message,
              followed by a newline</P></LI><LI><P>The log message itself, followed by a newline</P></LI></OL></DIV><P>This output is human-readable, meaning items such as the
          datestamp are displayed using a textual representation
          instead of something more obscure (such as the number of
          nanoseconds since the Tastee Freez guy drove by).  But the
          output is also machine-parsableâbecause the log
          message can contain multiple lines and be unbounded in
          length, <SPAN class="command"><STRONG>svnlook</STRONG></SPAN> provides the length of
          that message before the message itself.  This allows scripts
          and other wrappers around this command to make intelligent
          decisions about the log message, such as how much memory to
          allocate for the message, or at least how many bytes to skip
          in the event that this output is not the last bit of data in
          the stream.</P><P><SPAN class="command"><STRONG>svnlook</STRONG></SPAN> can perform a variety of
          other queries:  displaying subsets of bits of information
          we've mentioned previously, recursively listing versioned
          directory trees, reporting which paths were modified in a
          given revision or transaction, showing textual and property
          differences made to files and directories, and so on.  See
          <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook" title="svnlook">the section called âsvnlookâ</A> for a full reference of
          <SPAN class="command"><STRONG>svnlook</STRONG></SPAN>'s features.</P></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.reposadmin.maint.tk.svndumpfilter"></A>svndumpfilter</H4></DIV></DIV></DIV><P>While it won't be the most commonly used tool at the
          administrator's disposal, <SPAN class="command"><STRONG>svndumpfilter</STRONG></SPAN>
          provides a very particular brand of useful
          functionalityâthe ability to quickly and easily modify
          streams of Subversion repository history data by acting as a
          path-based filter.</P><P>The syntax of <SPAN class="command"><STRONG>svndumpfilter</STRONG></SPAN> is as
          follows:</P><PRE class="screen">$ svndumpfilter help
general usage: svndumpfilter SUBCOMMAND [ARGS &amp; OPTIONS ...]
Type "svndumpfilter help &lt;subcommand&gt;" for help on a specific subcommand.
Type 'svndumpfilter --version' to see the program version.
  
Available subcommands:
   exclude
   include
   help (?, h)
</PRE><P>There are only two interesting subcommands:
          <SPAN class="command"><STRONG>svndumpfilter exclude</STRONG></SPAN> and
          <SPAN class="command"><STRONG>svndumpfilter include</STRONG></SPAN>.  They allow you to
          make the choice between implicit or explicit inclusion of
          paths in the stream.  You can learn more about these
          subcommands and <SPAN class="command"><STRONG>svndumpfilter</STRONG></SPAN>'s unique
          purpose later in this chapter, in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.filtering" title="Filtering Repository History">the section called âFiltering Repository Historyâ</A>.</P></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.reposadmin.maint.tk.svnsync"></A>svnsync</H4></DIV></DIV></DIV><P>The <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> program, which is new to
          the 1.4 release of Subversion, provides all the
          functionality required for maintaining a read-only mirror of
          a Subversion repository.  The program really has one
          jobâto transfer one repository's versioned history
          into another repository.  And while there are few ways to do
          that, its primary strength is that it can operate
          remotelyâthe â<SPAN class="quote">source</SPAN>â and
          â<SPAN class="quote">sink</SPAN>â
          <SUP>[<A id="id533981" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id533981" class="footnote">32</A>]</SUP>
          repositories may be on different computers from each other
          and from <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> itself.</P><P>As you might expect, <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> has a
          syntax that looks very much like every other program we've
          mentioned in this chapter:</P><PRE class="screen">$ svnsync help
general usage: svnsync SUBCOMMAND DEST_URL  [ARGS &amp; OPTIONS ...]
Type 'svnsync help &lt;subcommand&gt;' for help on a specific subcommand.
Type 'svnsync --version' to see the program version and RA modules.

Available subcommands:
   initialize (init)
   synchronize (sync)
   copy-revprops
   help (?, h)
$
</PRE><P>We talk more about replicating repositories with
          <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> later in this chapter (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.replication" title="Repository Replication">the section called âRepository Replicationâ</A>).</P></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.reposadmin.maint.tk.fsfsreshard"></A>fsfs-reshard.py</H4></DIV></DIV></DIV><P>While not an official member of the Subversion
          toolchain, the <SPAN class="command"><STRONG>fsfs-reshard.py</STRONG></SPAN> script
          (found in the <CODE class="filename">tools/server-side</CODE>
          directory of the Subversion source distribution) is a useful
          performance tuning tool for administrators of FSFS-backed
          Subversion repositories.  FSFS repositories contain files
          that describe the changes made in a single revision, and
          files that contain the revision properties associated with
          a single revision.  Repositories created in versions of
          Subversion prior to 1.5 keep these files in two
          directoriesâone for each type of file.  As new
          revisions are committed to the repository, Subversion drops
          more files into these two directoriesâover time, the
          number of these files in each directory can grow to be quite
          large.  This has been observed to cause performance problems
          on certain network-based filesystems.</P><P>Subversion 1.5 creates FSFS-backed repositories using a
          slightly modified layout in which the contents of these two
          directories are <EM class="firstterm">sharded</EM>, or scattered
          across several subdirectories.  This can greatly reduce the
          time it takes the system to locate any one of these files,
          and therefore increases the overall performance of
          Subversion when reading from the repository.  The number of
          subdirectories used to house these files is configurable,
          though, and that's where
          <SPAN class="command"><STRONG>fsfs-reshard.py</STRONG></SPAN> comes in.  This script
          reshuffles the repository's file structure into a new
          arrangement that reflects the requested number of sharding
          subdirectories.  This is especially useful for converting an
          older Subversion repository into the new Subversion 1.5
          sharded layout (which Subversion will not automatically do
          for you) or for fine-tuning an already sharded
          repository.</P></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.reposadmin.maint.tk.bdbutil"></A>Berkeley DB utilities</H4></DIV></DIV></DIV><P>If you're using a Berkeley DB repository, all of
          your versioned filesystem's structure and data live in a set
          of database tables within the <CODE class="filename">db/</CODE>
          subdirectory of your repository.  This subdirectory is a
          regular Berkeley DB environment directory and can therefore
          be used in conjunction with any of the Berkeley database
          tools, typically provided as part of the Berkeley DB
          distribution.</P><P>For day-to-day Subversion use, these tools are
          unnecessary.  Most of the functionality typically needed for
          Subversion repositories has been duplicated in the
          <SPAN class="command"><STRONG>svnadmin</STRONG></SPAN> tool.  For example,
          <SPAN class="command"><STRONG>svnadmin list-unused-dblogs</STRONG></SPAN> and
          <SPAN class="command"><STRONG>svnadmin list-dblogs</STRONG></SPAN> perform a
          subset of what is provided by the Berkeley
          <SPAN class="command"><STRONG>db_archive</STRONG></SPAN> utility, and <SPAN class="command"><STRONG>svnadmin
          recover</STRONG></SPAN> reflects the common use cases of the
          <SPAN class="command"><STRONG>db_recover</STRONG></SPAN> utility.</P><P>However, there are still a few Berkeley DB utilities
          that you might find useful.  The <SPAN class="command"><STRONG>db_dump</STRONG></SPAN>
          and <SPAN class="command"><STRONG>db_load</STRONG></SPAN> programs write and read,
          respectively, a custom file format that describes the keys
          and values in a Berkeley DB database.  Since Berkeley
          databases are not portable across machine architectures,
          this format is a useful way to transfer those databases from
          machine to machine, irrespective of architecture or
          operating system.  As we describe later in this chapter, you
          can also use <SPAN class="command"><STRONG>svnadmin dump</STRONG></SPAN> and
          <SPAN class="command"><STRONG>svnadmin load</STRONG></SPAN> for similar purposes, but
          <SPAN class="command"><STRONG>db_dump</STRONG></SPAN> and <SPAN class="command"><STRONG>db_load</STRONG></SPAN>
          can do certain jobs just as well and much faster.  They can
          also be useful if the experienced Berkeley DB hacker needs
          to do in-place tweaking of the data in a BDB-backed
          repository for some reason, which is something Subversion's
          utilities won't allow.  Also, the <SPAN class="command"><STRONG>db_stat</STRONG></SPAN>
          utility can provide useful information about the status of
          your Berkeley DB environment, including detailed statistics
          about the locking and storage subsystems.</P><P>For more information on the Berkeley DB tool chain,
          visit the documentation section of the Berkeley DB section
          of Oracle's web site, located at <A class="ulink" href="http://www.oracle.com/technology/documentation/berkeley-db/db/" target="_top">http://www.oracle.com/technology/documentation/berkeley-db/db/</A>.</P></DIV></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.reposadmin.maint.setlog"></A>Commit Log Message Correction</H3></DIV></DIV></DIV><P>Sometimes a user will have an error in her log message (a
        misspelling or some misinformation, perhaps).  If the
        repository is configured (using the
        <CODE class="literal">pre-revprop-change</CODE> hook; see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.create.hooks" title="Implementing Repository Hooks">the section called âImplementing Repository Hooksâ</A>) to accept changes to
        this log message after the commit is finished, the user
        can â<SPAN class="quote">fix</SPAN>â her log message remotely using
        <SPAN class="command"><STRONG>svn propset</STRONG></SPAN> (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.propset" title="svn propset">svn propset</A>).  However, because of the
        potential to lose information forever, Subversion repositories
        are not, by default, configured to allow changes to
        unversioned propertiesâexcept by an
        administrator.</P><P>If a log message needs to be changed by an administrator,
        this can be done using <SPAN class="command"><STRONG>svnadmin setlog</STRONG></SPAN>.
        This command changes the log message (the
        <CODE class="literal">svn:log</CODE> property) on a given revision of a
        repository, reading the new value from a provided file.</P><PRE class="screen">$ echo "Here is the new, correct log message" &gt; newlog.txt
$ svnadmin setlog myrepos newlog.txt -r 388
</PRE><P>The <SPAN class="command"><STRONG>svnadmin setlog</STRONG></SPAN> command, by
        default, is
        still bound by the same protections against modifying
        unversioned properties as a remote client isâthe
        <CODE class="literal">pre-</CODE> and
        <CODE class="literal">post-revprop-change</CODE> hooks are still
        triggered, and therefore must be set up to accept changes of
        this nature.  But an administrator can get around these
        protections by passing the <CODE class="option">--bypass-hooks</CODE>
        option to the <SPAN class="command"><STRONG>svnadmin setlog</STRONG></SPAN> command.</P><DIV class="warning" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Warning</H3><P>Remember, though, that by bypassing the hooks, you are
          likely avoiding such things as email notifications of
          property changes, backup systems that track unversioned
          property changes, and so on.  In other words, be very
          careful about what you are changing, and how you change
          it.</P></DIV></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.reposadmin.maint.diskspace"></A>Managing Disk Space</H3></DIV></DIV></DIV><P>While the cost of storage has dropped incredibly in the
        past few years, disk usage is still a valid concern for
        administrators seeking to version large amounts of data.
        Every bit of version history information stored in the live
        repository needs to be backed up
        elsewhere, perhaps multiple times as part of rotating backup
        schedules.  It is useful to know what pieces of Subversion's
        repository data need to remain on the live site, which need to
        be backed up, and which can be safely removed.</P><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.reposadmin.maint.diskspace.deltas"></A>How Subversion saves disk space</H4></DIV></DIV></DIV><P>To keep the repository small,
          Subversion uses <EM class="firstterm">deltification</EM> (or
          deltified storage) within the repository
          itself.  Deltification involves encoding the representation
          of a chunk of data as a collection of differences against
          some other chunk of data.  If the two pieces of data are
          very similar, this deltification results in storage savings
          for the deltified chunkârather than taking up space
          equal to the size of the original data, it takes up only
          enough space to say, â<SPAN class="quote">I look just like this other
          piece of data over here, except for the following couple of
          changes.</SPAN>â  The result is that most of the repository
          data that tends to be bulkyânamely, the contents of
          versioned filesâis stored at a much smaller size than
          the original full-text representation of that
          data.  And for repositories created with Subversion 1.4 or
          later, the space savings are even betterânow those
          full-text representations of file contents are themselves
          compressed.</P><DIV class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Note</H3><P>Because all of the data that is subject to
            deltification in a BDB-backed repository is stored in a
            single Berkeley DB database file, reducing the size of the
            stored values will not immediately reduce the size of the
            database file itself.  Berkeley DB will, however, keep
            internal records of unused areas of the database file and
            consume those areas first before growing the size of the
            database file.  So while deltification doesn't produce
            immediate space savings, it can drastically slow future
            growth of the database.</P></DIV></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.reposadmin.maint.diskspace.deadtxns"></A>Removing dead transactions</H4></DIV></DIV></DIV><P>Though they are uncommon, there are circumstances in
          which a Subversion commit process might fail, leaving behind
          in the repository the remnants of the revision-to-be that
          wasn'tâan uncommitted transaction and all the file and
          directory changes associated with it.  This could happen for
          several reasons:  perhaps the client operation was
          inelegantly terminated by the user, or a network failure
          occurred in the middle of an operation.
          Regardless of the reason, dead transactions can happen.
          They don't do any real harm, other than consuming disk
          space.  A fastidious administrator may nonetheless wish to
          remove them.</P><P>You can use the <SPAN class="command"><STRONG>svnadmin lstxns</STRONG></SPAN>
          command to list the names of the currently outstanding
          transactions:</P><PRE class="screen">$ svnadmin lstxns myrepos
19
3a1
a45
$
</PRE><P>Each item in the resultant output can then be used with
          <SPAN class="command"><STRONG>svnlook</STRONG></SPAN> (and its
          <CODE class="option">--transaction</CODE> (<CODE class="option">-t</CODE>) option)
          to determine who created the transaction, when it was
          created, what types of changes were made in the
          transactionâinformation that is helpful in determining
          whether the transaction is a safe candidate for
          removal!  If you do indeed want to remove a transaction, its
          name can be passed to <SPAN class="command"><STRONG>svnadmin rmtxns</STRONG></SPAN>,
          which will perform the cleanup of the transaction.  In fact,
          <SPAN class="command"><STRONG>svnadmin rmtxns</STRONG></SPAN> can take its input
          directly from the output of
          <SPAN class="command"><STRONG>svnadmin lstxns</STRONG></SPAN>!</P><PRE class="screen">$ svnadmin rmtxns myrepos `svnadmin lstxns myrepos`
$
</PRE><P>If you use these two subcommands like this, you should
          consider making your repository temporarily inaccessible to
          clients.  That way, no one can begin a legitimate
          transaction before you start your cleanup.  <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.diskspace.deadtxns.ex-1" title="Example&nbsp;5.1.&nbsp;txn-info.sh (reporting outstanding transactions)">Example&nbsp;5.1, âtxn-info.sh (reporting outstanding transactions)â</A>
          contains a bit of shell-scripting that can quickly generate
          information about each outstanding transaction in your
          repository.</P><DIV class="example"><A id="svn.reposadmin.maint.diskspace.deadtxns.ex-1"></A><P class="title"><B>Example&nbsp;5.1.&nbsp;txn-info.sh (reporting outstanding transactions)</B></P><DIV class="example-contents"><PRE class="programlisting">#!/bin/sh

### Generate informational output for all outstanding transactions in
### a Subversion repository.

REPOS="${1}"
if [ "x$REPOS" = x ] ; then
  echo "usage: $0 REPOS_PATH"
  exit
fi

for TXN in `svnadmin lstxns ${REPOS}`; do 
  echo "---[ Transaction ${TXN} ]-------------------------------------------"
  svnlook info "${REPOS}" -t "${TXN}"
done
</PRE></DIV></DIV><BR class="example-break"><P>The output of the script is basically a concatenation of
          several chunks of <SPAN class="command"><STRONG>svnlook info</STRONG></SPAN> output
          (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.tk.svnlook" title="svnlook">the section called âsvnlookâ</A>) and
          will look something like this:</P><PRE class="screen">$ txn-info.sh myrepos
---[ Transaction 19 ]-------------------------------------------
sally
2001-09-04 11:57:19 -0500 (Tue, 04 Sep 2001)
0
---[ Transaction 3a1 ]-------------------------------------------
harry
2001-09-10 16:50:30 -0500 (Mon, 10 Sep 2001)
39
Trying to commit over a faulty network.
---[ Transaction a45 ]-------------------------------------------
sally
2001-09-12 11:09:28 -0500 (Wed, 12 Sep 2001)
0
$
</PRE><P>A long-abandoned transaction usually represents some
          sort of failed or interrupted commit.  A transaction's
          datestamp can provide interesting informationâfor
          example, how likely is it that an operation begun nine
          months ago is still active?</P><P>In short, transaction cleanup decisions need not be made
          unwisely.  Various sources of informationâincluding
          Apache's error and access logs, Subversion's operational
          logs, Subversion revision history, and so onâcan be
          employed in the decision-making process.  And of course, an
          administrator can often simply communicate with a seemingly
          dead transaction's owner (via email, e.g.) to verify
          that the transaction is, in fact, in a zombie state.</P></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.reposadmin.maint.diskspace.bdblogs"></A>Purging unused Berkeley DB logfiles</H4></DIV></DIV></DIV><P>Until recently, the largest offender of disk space usage
          with respect to BDB-backed Subversion repositories were the
          logfiles in which Berkeley DB performs its prewrites before
          modifying the actual database files.  These files capture
          all the actions taken along the route of changing the
          database from one state to anotherâwhile the database
          files, at any given time, reflect a particular state, the
          logfiles contain all of the many changes along the way
          <SPAN class="emphasis"><EM>between</EM></SPAN> states.  Thus, they can grow
          and accumulate quite rapidly.</P><P>Fortunately, beginning with the 4.2 release of Berkeley
          DB, the database environment has the ability to remove its
          own unused logfiles automatically.  Any
          repositories created using <SPAN class="command"><STRONG>svnadmin</STRONG></SPAN>
          when compiled against Berkeley DB version 4.2 or later
          will be configured for this automatic logfile removal.  If
          you don't want this feature enabled, simply pass the
          <CODE class="option">--bdb-log-keep</CODE> option to the
          <SPAN class="command"><STRONG>svnadmin create</STRONG></SPAN> command.  If you forget
          to do this or change your mind at a later time, simply edit
          the <CODE class="filename">DB_CONFIG</CODE> file found in your
          repository's <CODE class="filename">db</CODE> directory, comment out
          the line that contains the <CODE class="literal">set_flags
          DB_LOG_AUTOREMOVE</CODE> directive, and then run
          <SPAN class="command"><STRONG>svnadmin recover</STRONG></SPAN> on your repository to
          force the configuration changes to take effect.  See <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.create.bdb" title="Berkeley DB Configuration">the section called âBerkeley DB Configurationâ</A> for more information about
          database configuration.</P><P>Without some sort of automatic logfile removal in
          place, logfiles will accumulate as you use your repository.
          This is actually somewhat of a feature of the database
          systemâyou should be able to recreate your entire
          database using nothing but the logfiles, so these files can
          be useful for catastrophic database recovery.  But
          typically, you'll want to archive the logfiles that are no
          longer in use by Berkeley DB, and then remove them from disk
          to conserve space.  Use the <SPAN class="command"><STRONG>svnadmin
          list-unused-dblogs</STRONG></SPAN> command to list the unused
          logfiles:</P><PRE class="screen">$ svnadmin list-unused-dblogs /var/svn/repos
/var/svn/repos/log.0000000031
/var/svn/repos/log.0000000032
/var/svn/repos/log.0000000033
â¦
$ rm `svnadmin list-unused-dblogs /var/svn/repos`
## disk space reclaimed!
</PRE><DIV class="warning" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Warning</H3><P>BDB-backed repositories whose logfiles are used as
            part of a backup or disaster recovery plan should
            <SPAN class="emphasis"><EM>not</EM></SPAN> make use of the logfile
            autoremoval feature.  Reconstruction of a repository's
            data from logfiles can only be accomplished only when
            <SPAN class="emphasis"><EM>all</EM></SPAN> the logfiles are available.  If
            some of the logfiles are removed from disk before the
            backup system has a chance to copy them elsewhere, the
            incomplete set of backed-up logfiles is essentially
            useless.</P></DIV></DIV></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.reposadmin.maint.recovery"></A>Berkeley DB Recovery</H3></DIV></DIV></DIV><P>As mentioned in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.basics.backends.bdb" title="Berkeley DB">the section called âBerkeley DBâ</A>, a Berkeley DB
        repository can sometimes be left in a frozen state if not closed
        properly.  When this happens, an administrator needs to rewind
        the database back into a consistent state.  This is unique to
        BDB-backed repositories, thoughâif you are using
        FSFS-backed ones instead, this won't apply to you.  And for
        those of you using Subversion 1.4 with Berkeley DB 4.4 or
        later, you should find that Subversion has become much more
        resilient in these types of situations.  Still, wedged
        Berkeley DB repositories do occur, and an administrator needs
        to know how to safely deal with this circumstance.</P><P>To protect the data in your repository, Berkeley
        DB uses a locking mechanism.  This mechanism ensures that
        portions of the database are not simultaneously modified by
        multiple database accessors, and that each process sees the
        data in the correct state when that data is being read from
        the database.  When a process needs to change something in the
        database, it first checks for the existence of a lock on the
        target data.  If the data is not locked, the process locks the
        data, makes the change it wants to make, and then unlocks the
        data.  Other processes are forced to wait until that lock is
        removed before they are permitted to continue accessing that
        section of the database.  (This has nothing to do with the
        locks that you, as a user, can apply to versioned files within
        the repository; we try to clear up the confusion caused by
        this terminology collision in the sidebar <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.locking.meanings" title="The Three Meanings of &ldquo;Lock&rdquo;">The Three Meanings of â<SPAN class="quote">Lock</SPAN>â</A>.)</P><P>In the course of using your Subversion repository, fatal
        errors or interruptions can prevent a process from having the
        chance to remove the locks it has placed in the database.  The
        result is that the backend database system gets
        â<SPAN class="quote">wedged.</SPAN>â  When this happens, any attempts to
        access the repository hang indefinitely (since each new
        accessor is waiting for a lock to go awayâwhich isn't
        going to happen).</P><P>If this happens to your repository, don't panic.  The
        Berkeley DB filesystem takes advantage of database
        transactions, checkpoints, and prewrite journaling to
        ensure that only the most catastrophic of events
        <SUP>[<A id="id534758" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id534758" class="footnote">33</A>]</SUP>
        can permanently destroy a database environment.  A
        sufficiently paranoid repository administrator will have made
        off-site backups of the repository data in some fashion, but
        don't head off to the tape backup storage closet just yet.</P><P>Instead, use the following recipe to attempt to
        â<SPAN class="quote">unwedge</SPAN>â your repository:</P><DIV class="orderedlist"><OL type="1"><LI><P>Make sure no processes are accessing (or
            attempting to access) the repository.  For networked
            repositories, this also means shutting down the Apache HTTP
            Server or svnserve daemon.</P></LI><LI><P>Become the user who owns and manages the repository.
            This is important, as recovering a repository while
            running as the wrong user can tweak the permissions of the
            repository's files in such a way that your repository will
            still be inaccessible even after it is 
            â<SPAN class="quote">unwedged.</SPAN>â</P></LI><LI><P>Run the command <STRONG class="userinput"><CODE>svnadmin recover
            /var/svn/repos</CODE></STRONG>.  You should see output such as
            this:</P><PRE class="screen">Repository lock acquired.
Please wait; recovering the repository may take some time...

Recovery completed.
The latest repos revision is 19.
</PRE><P>This command may take many minutes to complete.</P></LI><LI><P>Restart the server process.</P></LI></OL></DIV><P>This procedure fixes almost every case of repository
        wedging.  Make sure that you run this command as the user that
        owns and manages the database, not just as
        <CODE class="literal">root</CODE>.  Part of the recovery process might
        involve re-creating from scratch various database files (shared
        memory regions, e.g.).  Recovering as
        <CODE class="literal">root</CODE> will create those files such that they
        are owned by <CODE class="literal">root</CODE>, which means that even
        after you restore connectivity to your repository, regular
        users will be unable to access it.</P><P>If the previous procedure, for some reason, does not
        successfully unwedge your repository, you should do two
        things.  First, move your broken repository directory aside
        (perhaps by renaming it to something like
        <CODE class="filename">repos.BROKEN</CODE>) and then restore your
        latest backup of it.  Then, send an email to the Subversion
        users mailing list (at <CODE class="email">&lt;<A class="email" href="mailto:users@subversion.tigris.org">users@subversion.tigris.org</A>&gt;</CODE>)
        describing your problem in detail.  Data integrity is an
        extremely high priority to the Subversion developers.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.reposadmin.maint.migrate"></A>Migrating Repository Data Elsewhere</H3></DIV></DIV></DIV><P>A Subversion filesystem has its data spread throughout
        files in the repository, in a fashion generally
        understood by (and of interest to) only the Subversion
        developers themselves.  However, circumstances may arise that
        call for all, or some subset, of that data to be copied or
        moved into another repository.</P><P>Subversion provides such functionality by way of
        <EM class="firstterm">repository dump streams</EM>.  A repository
        dump stream (often referred to as a â<SPAN class="quote">dump file</SPAN>â
        when stored as a file on disk) is a portable, flat file format
        that describes the various revisions in your
        repositoryâwhat was changed, by whom, when, and so on.
        This dump stream is the primary mechanism used to marshal
        versioned historyâin whole or in part, with or without
        modificationâbetween repositories.  And Subversion
        provides the tools necessary for creating and loading these
        dump streams: the <SPAN class="command"><STRONG>svnadmin dump</STRONG></SPAN> and
        <SPAN class="command"><STRONG>svnadmin load</STRONG></SPAN> subcommands,
        respectively.</P><DIV class="warning" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Warning</H3><P>While the Subversion repository dump format contains
          human-readable portions and a familiar structure (it
          resembles an RFC 822 format, the same type of format used
          for most email), it is <SPAN class="emphasis"><EM>not</EM></SPAN> a plain-text
          file format.  It is a binary file format, highly sensitive
          to meddling.  For example, many text editors will corrupt
          the file by automatically converting line endings.</P></DIV><P>There are many reasons for dumping and loading Subversion
        repository data.  Early in Subversion's life, the most common
        reason was due to the evolution of Subversion itself.  As
        Subversion matured, there were times when changes made to the
        backend database schema caused compatibility issues with
        previous versions of the repository, so users had to dump
        their repository data using the previous version of
        Subversion and load it into a freshly created repository with
        the new version of Subversion.  Now, these types of schema
        changes haven't occurred since Subversion's 1.0 release, and
        the Subversion developers promise not to force users to dump
        and load their repositories when upgrading between minor
        versions (such as from 1.3 to 1.4) of Subversion.  But there
        are still other reasons for dumping and loading, including
        re-deploying a Berkeley DB repository on a new OS or CPU
        architecture, switching between the Berkeley DB and FSFS
        backends, or (as we'll cover later in this chapter in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.filtering" title="Filtering Repository History">the section called âFiltering Repository Historyâ</A>) purging versioned
        data from repository history.</P><DIV class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Note</H3><P>The Subversion repository dump format describes
          versioned repository changes only.  It will not carry any
          information about uncommitted transactions, user locks on
          filesystem paths, repository or server configuration
          customizations (including hook scripts), and so on.</P></DIV><P>Whatever your reason for migrating repository history,
        using the <SPAN class="command"><STRONG>svnadmin dump</STRONG></SPAN> and
        <SPAN class="command"><STRONG>svnadmin load</STRONG></SPAN> subcommands is
        straightforward.  <SPAN class="command"><STRONG>svnadmin dump</STRONG></SPAN> will output
        a range of repository revisions that are formatted using
        Subversion's custom filesystem dump format.  The dump format
        is printed to the standard output stream, while informative
        messages are printed to the standard error stream.  This
        allows you to redirect the output stream to a file while
        watching the status output in your terminal window.  For
        example:</P><PRE class="screen">$ svnlook youngest myrepos
26
$ svnadmin dump myrepos &gt; dumpfile
* Dumped revision 0.
* Dumped revision 1.
* Dumped revision 2.
â¦
* Dumped revision 25.
* Dumped revision 26.
</PRE><P>At the end of the process, you will have a single file
        (<CODE class="filename">dumpfile</CODE> in the previous example) that
        contains all the data stored in your repository in the
        requested range of revisions.  Note that <SPAN class="command"><STRONG>svnadmin
        dump</STRONG></SPAN> is reading revision trees from the repository
        just like any other â<SPAN class="quote">reader</SPAN>â process would
        (e.g., <SPAN class="command"><STRONG>svn checkout</STRONG></SPAN>), so it's safe
        to run this command at any time.</P><P>The other subcommand in the pair, <SPAN class="command"><STRONG>svnadmin
        load</STRONG></SPAN>, parses the standard input stream as a
        Subversion repository dump file and effectively replays those
        dumped revisions into the target repository for that
        operation.  It also gives informative feedback, this time
        using the standard output stream:</P><PRE class="screen">$ svnadmin load newrepos &lt; dumpfile
&lt;&lt;&lt; Started new txn, based on original revision 1
     * adding path : A ... done.
     * adding path : A/B ... done.
     â¦
------- Committed new rev 1 (loaded from original rev 1) &gt;&gt;&gt;

&lt;&lt;&lt; Started new txn, based on original revision 2
     * editing path : A/mu ... done.
     * editing path : A/D/G/rho ... done.

------- Committed new rev 2 (loaded from original rev 2) &gt;&gt;&gt;

â¦

&lt;&lt;&lt; Started new txn, based on original revision 25
     * editing path : A/D/gamma ... done.

------- Committed new rev 25 (loaded from original rev 25) &gt;&gt;&gt;

&lt;&lt;&lt; Started new txn, based on original revision 26
     * adding path : A/Z/zeta ... done.
     * editing path : A/mu ... done.

------- Committed new rev 26 (loaded from original rev 26) &gt;&gt;&gt;

</PRE><P>The result of a load is new revisions added to a
        repositoryâthe same thing you get by making commits
        against that repository from a regular Subversion client.
        Just as in a commit, you can use hook programs to perform
        actions before and after each of the commits made during a
        load process.  By passing the
        <CODE class="option">--use-pre-commit-hook</CODE> and
        <CODE class="option">--use-post-commit-hook</CODE> options to
        <SPAN class="command"><STRONG>svnadmin load</STRONG></SPAN>, you can instruct Subversion
        to execute the pre-commit and post-commit hook programs,
        respectively, for each loaded revision.  You might use these,
        for example, to ensure that loaded revisions pass through the
        same validation steps that regular commits pass through.  Of
        course, you should use these options with careâif your
        post-commit hook sends emails to a mailing list for each new
        commit, you might not want to spew hundreds or thousands of
        commit emails in rapid succession at that list!  You can read more about the use of hook
        scripts in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.create.hooks" title="Implementing Repository Hooks">the section called âImplementing Repository Hooksâ</A>.</P><P>Note that because <SPAN class="command"><STRONG>svnadmin</STRONG></SPAN> uses
        standard input and output streams for the repository dump and
        load processes, people who are feeling especially saucy can try
        things such as this (perhaps even using different versions of
        <SPAN class="command"><STRONG>svnadmin</STRONG></SPAN> on each side of the pipe):</P><PRE class="screen">$ svnadmin create newrepos
$ svnadmin dump oldrepos | svnadmin load newrepos
</PRE><P>By default, the dump file will be quite largeâmuch
        larger than the repository itself.  That's because by default
        every version of every file is expressed as a full text in the
        dump file.  This is the fastest and simplest behavior, and
        it's nice if you're piping the dump data directly into some other
        process (such as a compression program, filtering program, or
        loading process).  But if you're creating a dump file
        for longer-term storage, you'll likely want to save disk space
        by using the <CODE class="option">--deltas</CODE> option.  With this
        option, successive revisions of files will be output as
        compressed, binary differencesâjust as file revisions
        are stored in a repository.  This option is slower, but it
        results in a dump file much closer in size to the original
        repository.</P><P>We mentioned previously that <SPAN class="command"><STRONG>svnadmin
        dump</STRONG></SPAN> outputs a range of revisions.  Use the
        <CODE class="option">--revision</CODE> (<CODE class="option">-r</CODE>) option to
        specify a single revision, or a range of revisions, to dump.
        If you omit this option, all the existing repository revisions
        will be dumped.</P><PRE class="screen">$ svnadmin dump myrepos -r 23 &gt; rev-23.dumpfile
$ svnadmin dump myrepos -r 100:200 &gt; revs-100-200.dumpfile
</PRE><P>As Subversion dumps each new revision, it outputs only
        enough information to allow a future loader to re-create that
        revision based on the previous one.  In other words, for any
        given revision in the dump file, only the items that were
        changed in that revision will appear in the dump.  The only
        exception to this rule is the first revision that is dumped
        with the current <SPAN class="command"><STRONG>svnadmin dump</STRONG></SPAN>
        command.</P><P>By default, Subversion will not express the first dumped
        revision as merely differences to be applied to the previous
        revision.  For one thing, there is no previous revision in the
        dump file!  And second, Subversion cannot know the state of
        the repository into which the dump data will be loaded (if it
        ever is).  To ensure that the output of each
        execution of <SPAN class="command"><STRONG>svnadmin dump</STRONG></SPAN> is
        self-sufficient, the first dumped revision is, by default, a
        full representation of every directory, file, and property in
        that revision of the repository.</P><P>However, you can change this default behavior.  If you add
        the <CODE class="option">--incremental</CODE> option when you dump your
        repository, <SPAN class="command"><STRONG>svnadmin</STRONG></SPAN> will compare the first
        dumped revision against the previous revision in the
        repositoryâthe same way it treats every other revision that
        gets dumped.  It will then output the first revision exactly
        as it does the rest of the revisions in the dump
        rangeâmentioning only the changes that occurred in that
        revision.  The benefit of this is that you can create several
        small dump files that can be loaded in succession, instead of
        one large one, like so:</P><PRE class="screen">$ svnadmin dump myrepos -r 0:1000 &gt; dumpfile1
$ svnadmin dump myrepos -r 1001:2000 --incremental &gt; dumpfile2
$ svnadmin dump myrepos -r 2001:3000 --incremental &gt; dumpfile3
</PRE><P>These dump files could be loaded into a new repository
        with the following command sequence:</P><PRE class="screen">$ svnadmin load newrepos &lt; dumpfile1
$ svnadmin load newrepos &lt; dumpfile2
$ svnadmin load newrepos &lt; dumpfile3
</PRE><P>Another neat trick you can perform with this
        <CODE class="option">--incremental</CODE> option involves appending to an
        existing dump file a new range of dumped revisions.  For
        example, you might have a <CODE class="literal">post-commit</CODE> hook
        that simply appends the repository dump of the single revision
        that triggered the hook.  Or you might have a script that runs
        nightly to append dump file data for all the revisions that
        were added to the repository since the last time the script
        ran.  Used like this, <SPAN class="command"><STRONG>svnadmin dump</STRONG></SPAN> can be
        one way to back up changes to your repository over time in case
        of a system crash or some other catastrophic event.</P><P>The dump format can also be used to merge the contents of
        several different repositories into a single repository.  By
        using the <CODE class="option">--parent-dir</CODE> option of
        <SPAN class="command"><STRONG>svnadmin load</STRONG></SPAN>, you can specify a new
        virtual root directory for the load process.  That means if
        you have dump files for three repositoriesâsay
        <CODE class="filename">calc-dumpfile</CODE>,
        <CODE class="filename">cal-dumpfile</CODE>, and
        <CODE class="filename">ss-dumpfile</CODE>âyou can first create a new
        repository to hold them all:</P><PRE class="screen">$ svnadmin create /var/svn/projects
$
</PRE><P>Then, make new directories in the repository that will
        encapsulate the contents of each of the three previous
        repositories:</P><PRE class="screen">$ svn mkdir -m "Initial project roots" \
      file:///var/svn/projects/calc \
      file:///var/svn/projects/calendar \
      file:///var/svn/projects/spreadsheet
Committed revision 1.
$ 
</PRE><P>Lastly, load the individual dump files into their
        respective locations in the new repository:</P><PRE class="screen">$ svnadmin load /var/svn/projects --parent-dir calc &lt; calc-dumpfile
â¦
$ svnadmin load /var/svn/projects --parent-dir calendar &lt; cal-dumpfile
â¦
$ svnadmin load /var/svn/projects --parent-dir spreadsheet &lt; ss-dumpfile
â¦
$
</PRE><P>We'll mention one final way to use the Subversion
        repository dump formatâconversion from a different
        storage mechanism or version control system altogether.
        Because the dump file format is, for the most part,
        human-readable, it should be relatively easy to describe
        generic sets of changesâeach of which should be treated
        as a new revisionâusing this file format.  In fact, the
        <SPAN class="command"><STRONG>cvs2svn</STRONG></SPAN> utility (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.forcvs.convert" title="Converting a Repository from CVS to Subversion">the section called âConverting a Repository from CVS to Subversionâ</A>) uses the dump format to
        represent the contents of a CVS repository so that those
        contents can be copied into a Subversion repository.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.reposadmin.maint.filtering"></A>Filtering Repository History</H3></DIV></DIV></DIV><P>Since Subversion stores your versioned history using, at
        the very least, binary differencing algorithms and data
        compression (optionally in a completely opaque database
        system), attempting manual tweaks is unwise if not quite
        difficult, and at any rate strongly discouraged.  And once
        data has been stored in your repository, Subversion
        generally doesn't provide an easy way to remove that data.
        <SUP>[<A id="id535339" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id535339" class="footnote">34</A>]</SUP>
        But inevitably, there will be times when you would like to
        manipulate the history of your repository.  You might need
        to strip out all instances of a file that was accidentally
        added to the repository (and shouldn't be there for whatever
        reason).
        <SUP>[<A id="id535349" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id535349" class="footnote">35</A>]</SUP>
        Or, perhaps you have multiple projects sharing a
        single repository, and you decide to split them up into
        their own repositories.  To accomplish tasks such as these,
        administrators need a more manageable and malleable
        representation of the data in their repositoriesâthe
        Subversion repository dump format.</P><P>As we described earlier in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.migrate" title="Migrating Repository Data Elsewhere">the section called âMigrating Repository Data Elsewhereâ</A>, the Subversion
        repository dump format is a human-readable representation of
        the changes that you've made to your versioned data over time.
        Use the <SPAN class="command"><STRONG>svnadmin dump</STRONG></SPAN> command to generate
        the dump data, and <SPAN class="command"><STRONG>svnadmin load</STRONG></SPAN> to
        populate a new repository with it.  The great thing about the
        human-readability aspect of the dump format is that, if you
        aren't careless about it, you can manually inspect and modify
        it.  Of course, the downside is that if you have three years'
        worth of repository activity encapsulated in what is likely to
        be a very large dump file, it could take you a long, long time
        to manually inspect and modify it.</P><P>That's where <SPAN class="command"><STRONG>svndumpfilter</STRONG></SPAN> becomes
        useful.  This program acts as a path-based filter for
        repository dump streams.  Simply give it either a list of
        paths you wish to keep or a list of paths you wish to not
        keep, and then pipe your repository dump data through this
        filter.  The result will be a modified stream of dump data
        that contains only the versioned paths you (explicitly or
        implicitly) requested.</P><P>Let's look at a realistic example of how you might use this
        program.  Earlier in this chapter (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.projects.chooselayout" title="Planning Your Repository Organization">the section called âPlanning Your Repository Organizationâ</A>), we discussed the
        process of deciding how to choose a layout for the data in
        your repositoriesâusing one repository per project or
        combining them, arranging stuff within your repository, and
        so on.  But sometimes after new revisions start flying in,
        you rethink your layout and would like to make some changes.
        A common change is the decision to move multiple projects
        that are sharing a single repository into separate
        repositories for each project.</P><P>Our imaginary repository contains three projects:
        <CODE class="literal">calc</CODE>, <CODE class="literal">calendar</CODE>, and
        <CODE class="literal">spreadsheet</CODE>.  They have been living
        side-by-side in a layout like this:</P><PRE class="screen">/
   calc/
      trunk/
      branches/
      tags/
   calendar/
      trunk/
      branches/
      tags/
   spreadsheet/
      trunk/
      branches/
      tags/
</PRE><P>To get these three projects into their own repositories,
        we first dump the whole repository:</P><PRE class="screen">$ svnadmin dump /var/svn/repos &gt; repos-dumpfile
* Dumped revision 0.
* Dumped revision 1.
* Dumped revision 2.
* Dumped revision 3.
â¦
$
</PRE><P>Next, run that dump file through the filter, each time
        including only one of our top-level directories.  This results
        in three new dump files:</P><PRE class="screen">$ svndumpfilter include calc &lt; repos-dumpfile &gt; calc-dumpfile
â¦
$ svndumpfilter include calendar &lt; repos-dumpfile &gt; cal-dumpfile
â¦
$ svndumpfilter include spreadsheet &lt; repos-dumpfile &gt; ss-dumpfile
â¦
$
</PRE><P>At this point, you have to make a decision.  Each of your
        dump files will create a valid repository, but will preserve
        the paths exactly as they were in the original repository.
        This means that even though you would have a repository solely
        for your <CODE class="literal">calc</CODE> project, that repository
        would still have a top-level directory named
        <CODE class="filename">calc</CODE>.  If you want your
        <CODE class="filename">trunk</CODE>, <CODE class="filename">tags</CODE>, and
        <CODE class="filename">branches</CODE> directories to live in the root
        of your repository, you might wish to edit your dump files,
        tweaking the <CODE class="literal">Node-path</CODE> and
        <CODE class="literal">Node-copyfrom-path</CODE> headers so that they no
        longer have that first <CODE class="filename">calc/</CODE> path
        component.  Also, you'll want to remove the section of dump
        data that creates the <CODE class="filename">calc</CODE> directory.  It
        will look something like the following:</P><PRE class="screen">Node-path: calc
Node-action: add
Node-kind: dir
Content-length: 0
  
</PRE><DIV class="warning" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Warning</H3><P>If you do plan on manually editing the dump file to
          remove a top-level directory, make sure your editor is
          not set to automatically convert end-of-line characters to
          the native format (e.g., <CODE class="literal">\r\n</CODE> to
          <CODE class="literal">\n</CODE>), as the content will then not agree
          with the metadata.  This will render the dump file
          useless.</P></DIV><P>All that remains now is to create your three new
        repositories, and load each dump file into the right
        repository, ignoring the UUID found in the dump stream:</P><PRE class="screen">$ svnadmin create calc
$ svnadmin load --ignore-uuid calc &lt; calc-dumpfile
&lt;&lt;&lt; Started new transaction, based on original revision 1
     * adding path : Makefile ... done.
     * adding path : button.c ... done.
â¦
$ svnadmin create calendar
$ svnadmin load --ignore-uuid calendar &lt; cal-dumpfile
&lt;&lt;&lt; Started new transaction, based on original revision 1
     * adding path : Makefile ... done.
     * adding path : cal.c ... done.
â¦
$ svnadmin create spreadsheet
$ svnadmin load --ignore-uuid spreadsheet &lt; ss-dumpfile
&lt;&lt;&lt; Started new transaction, based on original revision 1
     * adding path : Makefile ... done.
     * adding path : ss.c ... done.
â¦
$
</PRE><P>Both of <SPAN class="command"><STRONG>svndumpfilter</STRONG></SPAN>'s subcommands
        accept options for deciding how to deal with
        â<SPAN class="quote">empty</SPAN>â revisions.  If a given revision
        contains only changes to paths that were filtered out, that
        now-empty revision could be considered uninteresting or even
        unwanted.  So to give the user control over what to do with
        those revisions, <SPAN class="command"><STRONG>svndumpfilter</STRONG></SPAN> provides
        the following command-line options:</P><DIV class="variablelist"><DL><DT><SPAN class="term"><CODE class="option">--drop-empty-revs</CODE></SPAN></DT><DD><P>Do not generate empty revisions at allâjust
              omit them.</P></DD><DT><SPAN class="term"><CODE class="option">--renumber-revs</CODE></SPAN></DT><DD><P>If empty revisions are dropped (using the
              <CODE class="option">--drop-empty-revs</CODE> option), change the
              revision numbers of the remaining revisions so that
              there are no gaps in the numeric sequence.</P></DD><DT><SPAN class="term"><CODE class="option">--preserve-revprops</CODE></SPAN></DT><DD><P>If empty revisions are not dropped, preserve the
              revision properties (log message, author, date, custom
              properties, etc.) for those empty revisions.
              Otherwise, empty revisions will contain only the
              original datestamp, and a generated log message that
              indicates that this revision was emptied by
              <SPAN class="command"><STRONG>svndumpfilter</STRONG></SPAN>.</P></DD></DL></DIV><P>While <SPAN class="command"><STRONG>svndumpfilter</STRONG></SPAN> can be very
        useful and a huge timesaver, there are unfortunately a
        couple of gotchas.  First, this utility is overly sensitive
        to path semantics.  Pay attention to whether paths in your
        dump file are specified with or without leading slashes.
        You'll want to look at the <CODE class="literal">Node-path</CODE> and
        <CODE class="literal">Node-copyfrom-path</CODE> headers.</P><PRE class="screen">â¦
Node-path: spreadsheet/Makefile
â¦
</PRE><P>If the paths have leading slashes, you should
        include leading slashes in the paths you pass to
        <SPAN class="command"><STRONG>svndumpfilter include</STRONG></SPAN> and
        <SPAN class="command"><STRONG>svndumpfilter exclude</STRONG></SPAN> (and if they don't,
        you shouldn't).  Further, if your dump file has an inconsistent
        usage of leading slashes for some reason,
        <SUP>[<A id="id535707" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id535707" class="footnote">36</A>]</SUP>
        you should probably normalize those paths so that they all
        have, or all lack, leading slashes.</P><P>Also, copied paths can give you some trouble.
        Subversion supports copy operations in the repository, where
        a new path is created by copying some already existing path.
        It is possible that at some point in the lifetime of your
        repository, you might have copied a file or directory from
        some location that <SPAN class="command"><STRONG>svndumpfilter</STRONG></SPAN> is
        excluding, to a location that it is including.  To
        make the dump data self-sufficient,
        <SPAN class="command"><STRONG>svndumpfilter</STRONG></SPAN> needs to still show the
        addition of the new pathâincluding the contents of any
        files created by the copyâand not represent that
        addition as a copy from a source that won't exist in your
        filtered dump data stream.  But because the Subversion
        repository dump format shows only what was changed in each
        revision, the contents of the copy source might not be
        readily available.  If you suspect that you have any copies
        of this sort in your repository, you might want to rethink
        your set of included/excluded paths, perhaps including the
        paths that served as sources of your troublesome copy
        operations, too.</P><P>Finally, <SPAN class="command"><STRONG>svndumpfilter</STRONG></SPAN> takes path
        filtering quite literally.  If you are trying to copy the
        history of a project rooted at
        <CODE class="filename">trunk/my-project</CODE> and move it into a
        repository of its own, you would, of course, use the
        <SPAN class="command"><STRONG>svndumpfilter include</STRONG></SPAN> command to keep all
        the changes in and under
        <CODE class="filename">trunk/my-project</CODE>.  But the resultant
        dump file makes no assumptions about the repository into
        which you plan to load this data.  Specifically, the dump
        data might begin with the revision that added the
        <CODE class="filename">trunk/my-project</CODE> directory, but it will
        <SPAN class="emphasis"><EM>not</EM></SPAN> contain directives that would
        create the <CODE class="filename">trunk</CODE> directory itself
        (because <CODE class="filename">trunk</CODE> doesn't match the
        include filter).  You'll need to make sure that any
        directories that the new dump stream expects to exist
        actually do exist in the target repository before trying to
        load the stream into that repository.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.reposadmin.maint.replication"></A>Repository Replication</H3></DIV></DIV></DIV><P>There are several scenarios in which it is quite handy to
        have a Subversion repository whose version history is exactly
        the same as some other repository's.  Perhaps the most obvious
        one is the maintenance of a simple backup repository, used
        when the primary repository has become inaccessible due to a
        hardware failure, network outage, or other such annoyance.
        Other scenarios include deploying mirror repositories to
        distribute heavy Subversion load across multiple servers, use
        as a soft-upgrade mechanism, and so on.</P><P>As of version 1.4, Subversion provides a program for
        managing scenarios such as
        theseâ<SPAN class="command"><STRONG>svnsync</STRONG></SPAN>.  This works by
        essentially asking the Subversion server to
        â<SPAN class="quote">replay</SPAN>â revisions, one at a time.  It then uses
        that revision information to mimic a commit of the same to
        another repository.  Neither repository needs to be locally
        accessible to the machine on which <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> is
        runningâits parameters are repository URLs, and it does
        all its work through Subversion's Repository Access (RA)
        interfaces.  All it requires is read access to the source
        repository and read/write access to the destination
        repository.</P><DIV class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Note</H3><P>When using <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> against a remote
          source repository, the Subversion server for that repository
          must be running Subversion version 1.4 or later.</P></DIV><P>Assuming you already have a source repository that you'd
        like to mirror, the next thing you need is an empty target
        repository that will actually serve as that mirror.  This
        target repository can use either of the available filesystem
        data-store backends (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.basics.backends" title="Choosing a Data Store">the section called âChoosing a Data Storeâ</A>), but it must not
        yet have any version history in it.  The protocol that
        <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> uses to communicate revision information
        is highly sensitive to mismatches between the versioned
        histories contained in the source and target repositories.
        For this reason, while <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> cannot
        <SPAN class="emphasis"><EM>demand</EM></SPAN> that the target repository be
        read-only,
        <SUP>[<A id="id535893" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id535893" class="footnote">37</A>]</SUP>
        allowing the revision history in the target repository to
        change by any mechanism other than the mirroring process is a
        recipe for disaster.</P><DIV class="warning" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Warning</H3><P>Do <SPAN class="emphasis"><EM>not</EM></SPAN> modify a mirror repository
          in such a way as to cause its version history to deviate
          from that of the repository it mirrors.  The only commits
          and revision property modifications that ever occur on that
          mirror repository should be those performed by the
          <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> tool.</P></DIV><P>Another requirement of the target repository is that the
        <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> process be allowed to modify
        revision properties.  Because <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> works
        within the framework of that repository's hook system, the
        default state of the repository (which is to disallow revision
        property changes; see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.reposhooks.pre-revprop-change" title="pre-revprop-change">pre-revprop-change</A>) is
        insufficient.  You'll need to explicitly implement the
        pre-revprop-change hook, and your script must allow
        <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> to set and change revision
        properties.  With those provisions in place, you are ready to
        start mirroring repository revisions.</P><DIV class="tip" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Tip</H3><P>It's a good idea to implement authorization measures
          that allow your repository replication process to perform
          its tasks while preventing other users from modifying the
          contents of your mirror repository at all.</P></DIV><P>Let's walk through the use of <SPAN class="command"><STRONG>svnsync</STRONG></SPAN>
        in a somewhat typical mirroring scenario.  We'll pepper this
        discourse with practical recommendations, which you are free to
        disregard if they aren't required by or suitable for your
        environment.</P><P>As a service to the fine developers of our favorite
        version control system, we will be mirroring the public
        Subversion source code repository and exposing that mirror
        publicly on the Internet, hosted on a different machine than
        the one on which the original Subversion source code
        repository lives.  This remote host has a global configuration
        that permits anonymous users to read the contents of
        repositories on the host, but requires users to authenticate
        to modify those repositories.  (Please forgive us for
        glossing over the details of Subversion server configuration
        for the momentâthose are covered thoroughly in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig" title="Chapter&nbsp;6.&nbsp;Server Configuration">Chapter&nbsp;6, <I>Server Configuration</I></A>.)  And for no other reason than
        that it makes for a more interesting example, we'll be driving
        the replication process from a third machineâthe one that
        we currently find ourselves using.</P><P>First, we'll create the repository which will be our
        mirror.  This and the next couple of steps do require shell
        access to the machine on which the mirror repository will
        live.  Once the repository is all configured, though, we
        shouldn't need to touch it directly again.</P><PRE class="screen">$ ssh admin@svn.example.com \
      "svnadmin create /var/svn/svn-mirror"
admin@svn.example.com's password: ********
$
</PRE><P>At this point, we have our repository, and due to our
        server's configuration, that repository is now
        â<SPAN class="quote">live</SPAN>â on the Internet.  Now, because we don't
        want anything modifying the repository except our replication
        process, we need a way to distinguish that process from other
        would-be committers.  To do so, we use a dedicated username
        for our process.  Only commits and revision property
        modifications performed by the special username
        <CODE class="literal">syncuser</CODE> will be allowed.</P><P>We'll use the repository's hook system both to allow the
        replication process to do what it needs to do and to enforce
        that only it is doing those things.  We accomplish this by
        implementing two of the repository event
        hooksâpre-revprop-change and start-commit.  Our
        <CODE class="filename">pre-revprop-change</CODE> hook script is found
        in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.replication.pre-revprop-change" title="Example&nbsp;5.2.&nbsp;Mirror repository&#39;s pre-revprop-change hook script">Example&nbsp;5.2, âMirror repository's pre-revprop-change hook scriptâ</A>, and basically verifies that the user attempting the
        property changes is our <CODE class="literal">syncuser</CODE> user.  If
        so, the change is allowed; otherwise, it is denied.</P><DIV class="example"><A id="svn.reposadmin.maint.replication.pre-revprop-change"></A><P class="title"><B>Example&nbsp;5.2.&nbsp;Mirror repository's pre-revprop-change hook script</B></P><DIV class="example-contents"><PRE class="programlisting">#!/bin/sh 

USER="$3"

if [ "$USER" = "syncuser" ]; then exit 0; fi

echo "Only the syncuser user may change revision properties" &gt;&amp;2
exit 1
</PRE></DIV></DIV><BR class="example-break"><P>That covers revision property changes.  Now we need to
        ensure that only the <CODE class="literal">syncuser</CODE> user is
        permitted to commit new revisions to the repository.  We do
        this using a <CODE class="filename">start-commit</CODE> hook scripts
        such as the one in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.replication.start-commit" title="Example&nbsp;5.3.&nbsp;Mirror repository&#39;s start-commit hook script">Example&nbsp;5.3, âMirror repository's start-commit hook scriptâ</A>.</P><DIV class="example"><A id="svn.reposadmin.maint.replication.start-commit"></A><P class="title"><B>Example&nbsp;5.3.&nbsp;Mirror repository's start-commit hook script</B></P><DIV class="example-contents"><PRE class="programlisting">#!/bin/sh 

USER="$2"

if [ "$USER" = "syncuser" ]; then exit 0; fi

echo "Only the syncuser user may commit new revisions" &gt;&amp;2
exit 1
</PRE></DIV></DIV><BR class="example-break"><P>After installing our hook scripts and ensuring that they
        are executable by the Subversion server, we're finished with
        the setup of the mirror repository.  Now, we get to actually
        do the mirroring.</P><P>The first thing we need to do with
        <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> is to register in our target
        repository the fact that it will be a mirror of the source
        repository.  We do this using the <SPAN class="command"><STRONG>svnsync
        initialize</STRONG></SPAN> subcommand.  The URLs we provide point to
        the root directories of the target and source repositories,
        respectively.  In Subversion 1.4, this is requiredâonly
        full mirroring of repositories is permitted.  In Subversion
        1.5, though, you can use <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> to mirror
        only some subtree of the repository, too.</P><PRE class="screen">$ svnsync help init
initialize (init): usage: svnsync initialize DEST_URL SOURCE_URL

Initialize a destination repository for synchronization from
another repository.
â¦
$ svnsync initialize http://svn.example.com/svn-mirror \
                     http://svn.collab.net/repos/svn \
                     --sync-username syncuser --sync-password syncpass
Copied properties for revision 0.
$
</PRE><P>Our target repository will now remember that it is a
        mirror of the public Subversion source code repository.
        Notice that we provided a username and password as arguments
        to <SPAN class="command"><STRONG>svnsync</STRONG></SPAN>âthat was required by the
        pre-revprop-change hook on our mirror repository.</P><DIV class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Note</H3><P>In Subversion 1.4, the values given to
          <SPAN class="command"><STRONG>svnsync</STRONG></SPAN>'s <CODE class="option">--username</CODE> and
          <CODE class="option">--password</CODE> command-line options were used
          for authentication against both the source and destination
          repositories.  This caused problems when a user's
          credentials weren't exactly the same for both repositories,
          especially when running in noninteractive mode (with the
          <CODE class="option">--non-interactive</CODE> option).</P><P>This has been fixed in Subversion 1.5 with the
          introduction of two new pairs of options.  Use
          <CODE class="option">--source-username</CODE> and
          <CODE class="option">--source-password</CODE> to provide authentication
          credentials for the source repository; use
          <CODE class="option">--sync-username</CODE> and
          <CODE class="option">--sync-password</CODE> to provide credentials for
          the destination repository.  (The old
          <CODE class="option">--username</CODE> and <CODE class="option">--password</CODE>
          options still exist for compatibility, but we advise against
          using them.)</P></DIV><P>And now comes the fun part.  With a single subcommand, we
        can tell <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> to copy all the
        as-yet-unmirrored revisions from the source repository to the
        target.
        <SUP>[<A id="id536228" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id536228" class="footnote">38</A>]</SUP>
        The <SPAN class="command"><STRONG>svnsync synchronize</STRONG></SPAN> subcommand will
        peek into the special revision properties previously stored on
        the target repository, and determine both what repository it
        is mirroring as well as that the most recently mirrored
        revision was revision 0.  Then it will query the source
        repository and determine what the latest revision in that
        repository is.  Finally, it asks the source repository's
        server to start replaying all the revisions between 0 and that
        latest revision.  As <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> get the
        resultant response from the source repository's server, it
        begins forwarding those revisions to the target repository's
        server as new commits.</P><PRE class="screen">$ svnsync help synchronize
synchronize (sync): usage: svnsync synchronize DEST_URL

Transfer all pending revisions to the destination from the source
with which it was initialized.
â¦
$ svnsync synchronize http://svn.example.com/svn-mirror
Transmitting file data ........................................
Committed revision 1.
Copied properties for revision 1.
Transmitting file data ..
Committed revision 2.
Copied properties for revision 2.
Transmitting file data .....
Committed revision 3.
Copied properties for revision 3.
â¦
Transmitting file data ..
Committed revision 23406.
Copied properties for revision 23406.
Transmitting file data .
Committed revision 23407.
Copied properties for revision 23407.
Transmitting file data ....
Committed revision 23408.
Copied properties for revision 23408.
$
</PRE><P>Of particular interest here is that for each mirrored
        revision, there is first a commit of that revision to the
        target repository, and then property changes follow.  This is
        because the initial commit is performed by (and attributed to)
        the user <CODE class="literal">syncuser</CODE>, and it is datestamped
        with the time as of that revision's creation.  Also,
        Subversion's underlying repository access interfaces don't
        provide a mechanism for setting arbitrary revision properties
        as part of a commit.  So <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> follows up
        with an immediate series of property modifications that copy
        into the target repository all the revision properties found
        for that revision in the source repository.  This also has the
        effect of fixing the author and datestamp of the revision to
        match that of the source repository.</P><P>Also noteworthy is that <SPAN class="command"><STRONG>svnsync</STRONG></SPAN>
        performs careful bookkeeping that allows it to be safely
        interrupted and restarted without ruining the integrity of the
        mirrored data.  If a network glitch occurs while mirroring a
        repository, simply repeat the <SPAN class="command"><STRONG>svnsync
        synchronize</STRONG></SPAN> command, and it will happily pick up
        right where it left off.  In fact, as new revisions appear in
        the source repository, this is exactly what you to do
        to keep your mirror up to date.</P><DIV class="sidebar"><P class="title"><B>svnsync Bookkeeping</B></P><P><SPAN class="command"><STRONG>svnsync</STRONG></SPAN> needs to be able to set and
          modify revision properties on the mirror repository because
          those properties are part of the data it is tasked with
          mirroring.  As those properties change in the source
          repository, those changes need to be reflected in the mirror
          repository, too.  But <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> also uses a
          set of custom revision propertiesâstored in revision 0
          of the mirror repositoryâfor its own internal
          bookkeeping.  These properties contain information such as
          the URL and UUID of the source repository, plus some
          additional state-tracking information.</P><P>One of those pieces of state-tracking information is a
          flag that essentially just means â<SPAN class="quote">there's a
          synchronization in progress right now.</SPAN>â  This is used
          to prevent multiple <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> processes
          from colliding with each other while trying to mirror data
          to the same destination repository.  Now, generally you
          won't need to pay any attention whatsoever to
          <SPAN class="emphasis"><EM>any</EM></SPAN> of these special properties (all of
          which begin with the prefix <CODE class="literal">svn:sync-</CODE>).
          Occasionally, though, if a synchronization fails
          unexpectedly, Subversion never has a chance to remove this
          particular state flag.  This causes all future
          synchronization attempts to fail because it appears that a
          synchronization is still in progress when, in fact, none is.
          Fortunately, recovering from this situation is as simple as
          removing the <CODE class="literal">svn:sync-lock</CODE> property which
          serves as this flag from revision 0 of the mirror
          repository:</P><PRE class="screen">$ svn propdel --revprop -r0 svn:sync-lock http://svn.example.com/svn-mirror
property 'svn:sync-lock' deleted from repository revision 0
$
</PRE><P>That <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> stores the source
          repository URL in a bookkeeping property on the mirror
          repository is the reason why you have to specify that
          URL only once, during <SPAN class="command"><STRONG>svnsync init</STRONG></SPAN>.  Future
          synchronization operations against that mirror simply
          consult the special <CODE class="literal">svn:sync-from-url</CODE>
          property stored on the mirror itself to know where
          to synchronize from.  This value is used literally by the
          synchronization process, though.  So while from within
          CollabNet's network you can perhaps access our example
          source URL as <CODE class="literal">http://svn/repos/svn</CODE>
          (because that first <CODE class="literal">svn</CODE> magically gets
          <CODE class="literal">.collab.net</CODE> appended to it by DNS
          voodoo), if you later need to update that mirror from
          another machine outside CollabNet's network, the
          synchronization might fail (because the hostname
          <CODE class="literal">svn</CODE> is ambiguous).  For this reason, it's
          best to use fully qualified source repository URLs when
          initializing a mirror repository rather than those that
          refer to only hostnames or IP addresses (which can change
          over time).  But here again, if you need an existing mirror
          to start referring to a different URL for the same source
          repository, you can change the bookkeeping property which
          houses that information:</P><PRE class="screen">$ svn propset --revprop -r0 svn:sync-from-url <EM class="replaceable"><CODE>NEW-SOURCE-URL</CODE></EM> \
      http://svn.example.com/svn-mirror
property 'svn:sync-from-url' set on repository revision 0
$
</PRE><P>Another interesting thing about these special
          bookkeeping properties is that <SPAN class="command"><STRONG>svnsync</STRONG></SPAN>
          will not attempt to mirror any of those properties when they
          are found in the source repository.  The reason is probably
          obvious, but basically boils down to
          <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> not being able to distinguish the
          special properties it has merely copied from the source
          repository from those it needs to consult and maintain for
          its own bookkeeping needs.  This situation could occur if,
          for example, you were maintaining a mirror of a mirror of a
          third repository.  When <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> sees its
          own special properties in revision 0 of the source
          repository, it simply ignores them.</P></DIV><P>There is, however, one bit of inelegance in the process.
        Because Subversion revision properties can be changed at any
        time throughout the lifetime of the repository, and because
        they don't leave an audit trail that indicates when they were
        changed, replication processes have to pay special attention
        to them.  If you've already mirrored the first 15 revisions of
        a repository and someone then changes a revision property on
        revision 12, <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> won't know to go back
        and patch up its copy of revision 12.  You'll need to tell it
        to do so manually by using (or with some additional tooling
        around) the <SPAN class="command"><STRONG>svnsync copy-revprops</STRONG></SPAN>
        subcommand, which simply rereplicates all the revision
        properties for a particular revision or range thereof.</P><PRE class="screen">$ svnsync help copy-revprops
copy-revprops: usage: svnsync copy-revprops DEST_URL [REV[:REV2]]

Copy the revision properties in a given range of revisions to the
destination from the source with which it was initialized.
â¦
$ svnsync copy-revprops http://svn.example.com/svn-mirror 12
Copied properties for revision 12.
$
</PRE><P>That's repository replication in a nutshell.  You'll
        likely want some automation around such a process.  For
        example, while our example was a pull-and-push setup, you
        might wish to have your primary repository push changes to one
        or more blessed mirrors as part of its post-commit and
        post-revprop-change hook implementations.  This would enable
        the mirror to be up to date in as near to real time as is
        likely possible.</P><P>Also, while it isn't very commonplace to do so,
        <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> does gracefully mirror repositories
        in which the user as whom it authenticates has only partial
        read access.  It simply copies only the bits of the repository
        that it is permitted to see.  Obviously, such a mirror is not
        useful as a backup solution.</P><P>In Subversion 1.5, <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> grew the
        ability to also mirror a subset of a repository rather than
        the whole thing.  The process of setting up and maintaining
        such a mirror is exactly the same as when mirroring a whole
        repository, except that instead of specifying the source
        repository's root URL when running <SPAN class="command"><STRONG>svnsync
        init</STRONG></SPAN>, you specify the URL of some subdirectory
        within that repository.  Synchronization to that mirror will
        now copy only the bits that changed under that source
        repository subdirectory.  There are some limitations to this
        support, though.  First, you can't mirror multiple disjoint
        subdirectories of the source repository into a single mirror
        repositoryâyou'd need to instead mirror some parent
        directory that is common to both.  Second, the filtering
        logic is entirely path-based, so if the subdirectory you are
        mirroring was renamed at some point in the past, your mirror
        would contain only the revisions since the directory appeared
        at the URL you specified.  And likewise, if the source
        subdirectory is renamed in the future, your synchronization
        processes will stop mirroring data at the point that the
        source URL you specified is no longer valid.</P><P>As far as user interaction with repositories and mirrors
        goes, it <SPAN class="emphasis"><EM>is</EM></SPAN> possible to have a single
        working copy that interacts with both, but you'll have to jump
        through some hoops to make it happen.  First, you need to
        ensure that both the primary and mirror repositories have the
        same repository UUID (which is not the case by default).  See
        <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.uuids" title="Managing Repository UUIDs">the section called âManaging Repository UUIDsâ</A> later in this
        chapter for more about this.</P><P>Once the two repositories have the same UUID, you can use
        <SPAN class="command"><STRONG>svn switch</STRONG></SPAN> with the <CODE class="option">--relocate</CODE> option to point your working
        copy to whichever of the repositories you wish to operate
        against, a process that is described in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.switch" title="svn switch">svn switch</A>.  There is a possible danger
        here, though, in that if the primary and mirror repositories
        aren't in close synchronization, a working copy up to date
        with, and pointing to, the primary repository will, if
        relocated to point to an out-of-date mirror, become confused
        about the apparent sudden loss of revisions it fully expects
        to be present, and it will throw errors to that effect.  If
        this occurs, you can relocate your working copy back to the
        primary repository and then either wait until the mirror
        repository is up to date, or backdate your working copy to a
        revision you know is present in the sync repository, and then
        retry the relocation.</P><P>Finally, be aware that the revision-based replication
        provided by <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> is only
        thatâreplication of revisions.  Only information carried
        by the Subversion repository dump file format is available for
        replication.  As such, <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> has the same
        sorts of limitations that the repository dump stream has, and
        does not include such things as the hook implementations,
        repository or server configuration data, uncommitted
        transactions, or information about user locks on repository
        paths.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.reposadmin.maint.backup"></A>Repository Backup</H3></DIV></DIV></DIV><P>Despite numerous advances in technology since the birth of
        the modern computer, one thing unfortunately rings true with
        crystalline clarityâsometimes things go very, very
        awry.  Power outages, network connectivity dropouts, corrupt
        RAM, and crashed hard drives are but a taste of the evil that
        Fate is poised to unleash on even the most conscientious
        administrator.  And so we arrive at a very important
        topicâhow to make backup copies of your repository
        data.</P><P>There are two types of backup methods available for
        Subversion repository administratorsâfull and
        incremental.  A full backup of the repository involves
        squirreling away in one sweeping action all the information
        required to fully reconstruct that repository in the event of
        a catastrophe.  Usually, it means, quite literally, the
        duplication of the entire repository directory (which includes
        either a Berkeley DB or FSFS environment).  Incremental
        backups are lesser things:  backups of only the portion of the
        repository data that has changed since the previous
        backup.</P><P>As far as full backups go, the naÃ¯ve approach might seem
        like a sane one, but unless you temporarily disable all other
        access to your repository, simply doing a recursive directory
        copy runs the risk of generating a faulty backup.  In the case
        of Berkeley DB, the documentation describes a certain order in
        which database files can be copied that will guarantee a valid
        backup copy.  A similar ordering exists for FSFS data.  But
        you don't have to implement these algorithms yourself, because
        the Subversion development team has already done so.  The
        <SPAN class="command"><STRONG>svnadmin hotcopy</STRONG></SPAN> command takes care of the
        minutia involved in making a hot backup of your repository.
        And its invocation is as trivial as the Unix
        <SPAN class="command"><STRONG>cp</STRONG></SPAN> or Windows <SPAN class="command"><STRONG>copy</STRONG></SPAN>
        operations:</P><PRE class="screen">$ svnadmin hotcopy /var/svn/repos /var/svn/repos-backup
</PRE><P>The resultant backup is a fully functional Subversion
        repository, able to be dropped in as a replacement for your
        live repository should something go horribly wrong.</P><P>When making copies of a Berkeley DB repository, you can
        even instruct <SPAN class="command"><STRONG>svnadmin hotcopy</STRONG></SPAN> to purge any
        unused Berkeley DB logfiles (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.diskspace.bdblogs" title="Purging unused Berkeley DB logfiles">the section called âPurging unused Berkeley DB logfilesâ</A>) from the
        original repository upon completion of the copy.  Simply
        provide the <CODE class="option">--clean-logs</CODE> option on the
        command line.</P><PRE class="screen">$ svnadmin hotcopy --clean-logs /var/svn/bdb-repos /var/svn/bdb-repos-backup
</PRE><P>Additional tooling around this command is available, too.
        The <CODE class="filename">tools/backup/</CODE> directory of the
        Subversion source distribution holds the
        <SPAN class="command"><STRONG>hot-backup.py</STRONG></SPAN> script.  This script adds a
        bit of backup management atop <SPAN class="command"><STRONG>svnadmin
        hotcopy</STRONG></SPAN>, allowing you to keep only the most recent
        configured number of backups of each repository.  It will
        automatically manage the names of the backed-up repository
        directories to avoid collisions with previous backups and
        will â<SPAN class="quote">rotate off</SPAN>â older backups, deleting them so
        that only the most recent ones remain.  Even if you also have an
        incremental backup, you might want to run this program on a
        regular basis.  For example, you might consider using
        <SPAN class="command"><STRONG>hot-backup.py</STRONG></SPAN> from a program scheduler
        (such as <SPAN class="command"><STRONG>cron</STRONG></SPAN> on Unix systems), which can
        cause it to run nightly (or at whatever granularity of time
        you deem safe).</P><P>Some administrators use a different backup mechanism built
        around generating and storing repository dump data.  We
        described in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.migrate" title="Migrating Repository Data Elsewhere">the section called âMigrating Repository Data Elsewhereâ</A>
        how to use <SPAN class="command"><STRONG>svnadmin dump</STRONG></SPAN> with the <CODE class="option">--incremental</CODE> option to
        perform an incremental backup of a given revision or range of
        revisions.  And of course, you can achieve a full backup variation of
        this by omitting the <CODE class="option">--incremental</CODE>
        option to that command.  There is some value in these methods,
        in that the format of your backed-up information is
        flexibleâit's not tied to a particular platform,
        versioned filesystem type, or release of Subversion or
        Berkeley DB.  But that flexibility comes at a cost, namely
        that restoring that data can take a long timeâlonger
        with each new revision committed to your repository.  Also, as
        is the case with so many of the various backup methods,
        revision property changes that are made to already backed-up
        revisions won't get picked up by a nonoverlapping,
        incremental dump generation.  For these reasons, we recommend
        against relying solely on dump-based backup approaches.</P><P>As you can see, each of the various backup types and
        methods has its advantages and disadvantages.  The easiest is
        by far the full hot backup, which will always result in a
        perfect working replica of your repository.  Should something
        bad happen to your live repository, you can restore from the
        backup with a simple recursive directory copy.  Unfortunately,
        if you are maintaining multiple backups of your repository,
        these full copies will each eat up just as much disk space as
        your live repository.  Incremental backups, by contrast, tend
        to be quicker to generate and smaller to store.  But the
        restoration process can be a pain, often involving applying
        multiple incremental backups.  And other methods have their
        own peculiarities.  Administrators need to find the balance
        between the cost of making the backup and the cost of
        restoring it.</P><P>The <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> program (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.replication" title="Repository Replication">the section called âRepository Replicationâ</A>) actually
        provides a rather handy middle-ground approach.  If you are
        regularly synchronizing a read-only mirror with your main
        repository, in a pinch your read-only mirror is probably
        a good candidate for replacing that main repository if it
        falls over.  The primary disadvantage of this method is that
        only the versioned repository data gets
        synchronizedârepository configuration files,
        user-specified repository path locks, and other items that
        might live in the physical repository directory but not
        <SPAN class="emphasis"><EM>inside</EM></SPAN> the repository's virtual versioned
        filesystem are not handled by <SPAN class="command"><STRONG>svnsync</STRONG></SPAN>.</P><P>In any backup scenario, repository administrators need
        to be aware of how modifications to unversioned revision
        properties affect their backups.  Since these changes do not
        themselves generate new revisions, they will not trigger
        post-commit hooks, and may not even trigger the
        pre-revprop-change and post-revprop-change hooks.
        <SUP>[<A id="id536837" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id536837" class="footnote">39</A>]</SUP>  
        And since you can change revision properties without respect
        to chronological orderâyou can change any revision's
        properties at any timeâan incremental backup of the
        latest few revisions might not catch a property modification
        to a revision that was included as part of a previous 
        backup.</P><P>Generally speaking, only the truly paranoid would need to
        back up their entire repository, say, every time a commit
        occurred.  However, assuming that a given repository has some
        other redundancy mechanism in place with relatively fine
        granularity (such as per-commit emails or incremental dumps), a
        hot backup of the database might be something that a
        repository administrator would want to include as part of a
        system-wide nightly backup.  It's your dataâprotect it
        as much as you'd like.</P><P>Often, the best approach to repository backups is a
        diversified one that leverages combinations of the methods
        described here.  The Subversion developers, for example, back
        up the Subversion source code repository nightly using
        <SPAN class="command"><STRONG>hot-backup.py</STRONG></SPAN> and an off-site
        <SPAN class="command"><STRONG>rsync</STRONG></SPAN> of those full backups; keep multiple
        archives of all the commit and property change notification
        emails; and have repository mirrors maintained by various
        volunteers using <SPAN class="command"><STRONG>svnsync</STRONG></SPAN>.  Your solution
        might be similar, but should be catered to your needs and that
        delicate balance of convenience with paranoia.  And whatever
        you do, validate your backups from time to timeâwhat
        good is a spare tire that has a hole in it?  While all of this
        might not save your hardware from the iron fist of Fate,
        <SUP>[<A id="id536860" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id536860" class="footnote">40</A>]</SUP>
        it should certainly help you recover from those trying 
        times.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.reposadmin.maint.uuids"></A>Managing Repository UUIDs</H3></DIV></DIV></DIV><P>Subversion repositories have a universally unique
        identifier (UUID) associated with them.  This is used by
        Subversion clients to verify the identity of a repository when
        other forms of verification aren't good enough (such as
        checking the repository URL, which can change over time).
        Most Subversion repository administrators rarely, if ever,
        need to think about repository UUIDs as anything more than a
        trivial implementation detail of Subversion.  Sometimes,
        however, there is cause for attention to this detail.</P><P>As a general rule, you want the UUIDs of your live
        repositories to be unique.  That is, after all, the point of
        having UUIDs.  But there are times when you want the
        repository UUIDs of two repositories to be exactly the same.
        For example, if you make a copy of a repository for backup
        purposes, you want the backup to be a perfect replica of the
        original so that, in the event that you have to restore that
        backup and replace the live repository, users don't suddenly
        see what looks like a different repository.  When dumping and
        loading repository history (as described earlier in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.migrate" title="Migrating Repository Data Elsewhere">the section called âMigrating Repository Data Elsewhereâ</A>), you get to decide
        whether to apply the UUID encapsulated in the data dump
        stream to the repository in which you are loading the data.  The
        particular circumstance will dictate the correct
        behavior.</P><P>There are a couple of ways to set (or reset) a
        repository's UUID, should you need to.  As of Subversion 1.5,
        this is as simple as using the <SPAN class="command"><STRONG>svnadmin
        setuuid</STRONG></SPAN> command.  If you provide this subcommand
        with an explicit UUID, it will validate that the UUID is
        well-formed and then set the repository UUID to that value.
        If you omit the UUID, a brand-new UUID will be generated for
        your repository.</P><PRE class="screen">$ svnlook uuid /var/svn/repos
cf2b9d22-acb5-11dc-bc8c-05e83ce5dbec
$ svnadmin setuuid /var/svn/repos   # generate a new UUID
$ svnlook uuid /var/svn/repos
3c3c38fe-acc0-11dc-acbc-1b37ff1c8e7c
$ svnadmin setuuid /var/svn/repos \
           cf2b9d22-acb5-11dc-bc8c-05e83ce5dbec  # restore the old UUID
$ svnlook uuid /var/svn/repos
cf2b9d22-acb5-11dc-bc8c-05e83ce5dbec
$
</PRE><P>For folks using versions of Subversion earlier than 1.5,
        these tasks are a little more complicated.  You can explicitly
        set a repository's UUID by piping a repository dump file stub
        that carries the new UUID specification through
        <STRONG class="userinput"><CODE>svnadmin load --force-uuid <EM class="replaceable"><CODE>REPOS-PATH</CODE></EM></CODE></STRONG>.</P><PRE class="screen">$ svnadmin load --force-uuid /var/svn/repos &lt;&lt;EOF
SVN-fs-dump-format-version: 2

UUID: cf2b9d22-acb5-11dc-bc8c-05e83ce5dbec
EOF
$ svnlook uuid /var/svn/repos
cf2b9d22-acb5-11dc-bc8c-05e83ce5dbec
$
</PRE><P>Having older versions of Subversion generate a brand-new
        UUID is not quite as simple to do, though.  Your best bet here
        is to find some other way to generate a UUID, and then
        explicitly set the repository's UUID to that value.</P></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.reposadmin.maint.moving-and-removing"></A>Moving and Removing Repositories</H2></DIV></DIV></DIV><P>Subversion repository data is wholly contained within the
      repository directory.  As such, you can move a Subversion
      repository to some other location on disk, rename a repository,
      copy a repository, or delete a repository altogether using the
      tools provided by your operating system for manipulating
      directoriesâ<SPAN class="command"><STRONG>mv</STRONG></SPAN>, <SPAN class="command"><STRONG>cp
      -a</STRONG></SPAN>, and <SPAN class="command"><STRONG>rm -r</STRONG></SPAN> on Unix platforms;
      <SPAN class="command"><STRONG>copy</STRONG></SPAN>, <SPAN class="command"><STRONG>move</STRONG></SPAN>, and
      <SPAN class="command"><STRONG>rmdir /s /q</STRONG></SPAN> on Windows; vast numbers of mouse
      and menu gyrations in various graphical file explorer
      applications, and so on.</P><P>Of course, there's often still more to be done when trying
      to cleanly affect changes such as this.  For example, you might
      need to update your Subversion server configuration to point to
      the new location of a relocated repository or to remove
      configuration bits for a now-deleted repository.  If you have
      automated processes that publish information from or about your
      repositories, they may need to be updated.  Hook scripts might
      need to be reconfigured.  Users may need to be notified.  The list
      can go on indefinitely, or at least to the extent that you've
      built processes and procedures around your Subversion
      repository.</P><P>In the case of a copied repository, you should also consider
      the fact that Subversion uses repository UUIDs to distinguish
      repositories.  If you copy a Subversion repository using a
      typical shell recursive copy command, you'll wind up with two
      repositories that are identical in every wayâincluding their UUIDs.
      In some circumstances, this might be desirable.  But in the
      instances where it is not, you'll need to generate a new UUID
      for one of these identical repositories.  See <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.uuids" title="Managing Repository UUIDs">the section called âManaging Repository UUIDsâ</A> for more about managing
      repository UUIDs.</P></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.reposadmin.summary"></A>Summary</H2></DIV></DIV></DIV><P>By now you should have a basic understanding of how to
      create, configure, and maintain Subversion repositories.  We
      introduced you to the various tools that will assist you with
      this task.  Throughout the chapter, we noted common
      administration pitfalls and offered suggestions for avoiding
      them.</P><P>All that remains is for you to decide what exciting data to
      store in your repository, and finally, how to make it available
      over a network.  The next chapter is all about networking.</P></DIV><DIV class="footnotes"><BR><HR width="100" align="left"><DIV class="footnote"><P><SUP>[<A id="ftn.id531872" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id531872" class="para">26</A>] </SUP>This may sound really prestigious and lofty, but we're
        just talking about anyone who is interested in that
        mysterious realm beyond the working copy where everyone's
        data hangs out.</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id532044" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id532044" class="para">27</A>] </SUP>Whether founded in ignorance or in poorly considered
            concepts about how to derive legitimate software
            development metrics, global revision numbers are a silly
            thing to fear, and <SPAN class="emphasis"><EM>not</EM></SPAN> the kind of
            thing you should weigh when deciding how to arrange your
            projects and repositories.</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id532230" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id532230" class="para">28</A>] </SUP>The <CODE class="filename">trunk</CODE>, <CODE class="filename">tags</CODE>, 
            and <CODE class="filename">branches</CODE> trio is sometimes referred
            to as â<SPAN class="quote">the TTB directories.</SPAN>â</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id532408" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id532408" class="para">29</A>] </SUP>Often pronounced â<SPAN class="quote">fuzz-fuzz,</SPAN>â if Jack
            Repenning has anything to say about it.  (This book,
            however, assumes that the reader is thinking
            â<SPAN class="quote">eff-ess-eff-ess.</SPAN>â)</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id532759" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id532759" class="para">30</A>] </SUP>Berkeley DB requires that the underlying filesystem
              implement strict POSIX locking semantics, and more
              importantly, the ability to map files directly into
              process memory.</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id532928" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id532928" class="para">31</A>] </SUP>Oracle bought Sleepycat and its flagship software,
              Berkeley DB, on Valentine's Day in 2006.</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id533981" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id533981" class="para">32</A>] </SUP>Or is that, the â<SPAN class="quote">sync</SPAN>â?</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id534758" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id534758" class="para">33</A>] </SUP>For example, hard drive + huge electromagnet = disaster.</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id535339" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id535339" class="para">34</A>] </SUP>That's rather the reason you use version control at
            all, right?</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id535349" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id535349" class="para">35</A>] </SUP>Conscious, cautious removal of certain bits of
            versioned data is actually supported by real use cases.
            That's why an â<SPAN class="quote">obliterate</SPAN>â feature has been
            one of the most highly requested Subversion features,
            and one which the Subversion developers hope to soon
            provide.</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id535707" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id535707" class="para">36</A>] </SUP>While <SPAN class="command"><STRONG>svnadmin dump</STRONG></SPAN> has a
            consistent leading slash policy (to not include
            them), other programs that generate dump data might
            not be so consistent.</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id535893" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id535893" class="para">37</A>] </SUP>In fact, it can't truly be read-only, or
            <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> itself would have a tough time
            copying revision history into it.</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id536228" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id536228" class="para">38</A>] </SUP>Be forewarned that while it will take only a few
            seconds for the average reader to parse this paragraph and
            the sample output that follows it, the actual time
            required to complete such a mirroring operation is, shall
            we say, quite a bit longer.</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id536837" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id536837" class="para">39</A>] </SUP><SPAN class="command"><STRONG>svnadmin setlog</STRONG></SPAN> can be called in a
            way that bypasses the hook interface altogether.</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id536860" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id536860" class="para">40</A>] </SUP>You knowâthe collective term for all of her
            â<SPAN class="quote">fickle fingers.</SPAN>â</P></DIV></DIV></DIV><DIV class="chapter" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title"><A id="svn.serverconfig"></A>Chapter&nbsp;6.&nbsp;Server Configuration</H2></DIV></DIV></DIV><DIV class="toc"><P><B>Table of Contents</B></P><DL><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.overview">Overview</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.choosing">Choosing a Server Configuration</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.choosing.svnserve">The svnserve Server</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.choosing.svn-ssh">svnserve over SSH</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.choosing.apache">The Apache HTTP Server</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.choosing.recommendations">Recommendations</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve">svnserve, a Custom Server</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve.invoking">Invoking the Server</A></SPAN></DT><DD><DL><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve.invoking.daemon">svnserve as daemon</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve.invoking.inetd">svnserve via inetd</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve.invoking.tunnel">svnserve over a tunnel</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve.invoking.winservice">svnserve as Windows service</A></SPAN></DT></DL></DD><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve.auth">Built-in Authentication and Authorization</A></SPAN></DT><DD><DL><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve.auth.users">Create a users file and realm</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve.auth.general">Set access controls</A></SPAN></DT></DL></DD><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve.sasl">Using <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> with SASL</A></SPAN></DT><DD><DL><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve.sasl.authn">Authenticating with SASL</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve.sasl.encryption">SASL encryption</A></SPAN></DT></DL></DD><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve.sshauth">Tunneling over SSH</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve.sshtricks">SSH configuration tricks</A></SPAN></DT><DD><DL><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve.sshtricks.setup">Initial setup</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve.sshtricks.fixedcmd">Controlling the invoked command</A></SPAN></DT></DL></DD></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd">httpd, the Apache HTTP Server</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.prereqs">Prerequisites</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.basic">Basic Apache Configuration</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.authn">Authentication Options</A></SPAN></DT><DD><DL><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.authn.basic">Setting up HTTP authentication</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.authn.sslcerts">SSL certificate management</A></SPAN></DT></DL></DD><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.authz">Authorization Options</A></SPAN></DT><DD><DL><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.authz.blanket">Blanket access control</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.authz.perdir">Per-directory access control</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.authz.pathauthzoff">Disabling path-based checks</A></SPAN></DT></DL></DD><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.extra">Extra Goodies</A></SPAN></DT><DD><DL><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.extra.browsing">Repository browsing</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.extra.logging">Apache logging</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.extra.writethruproxy">Write-through proxying</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.extra.other">Other Apache features</A></SPAN></DT></DL></DD></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.pathbasedauthz">Path-Based Authorization</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.multimethod">Supporting Multiple Repository Access Methods</A></SPAN></DT></DL></DIV><P>A Subversion repository can be accessed simultaneously by
    clients running on the same machine on which the repository
    resides using the <CODE class="literal">file://</CODE> method.  But the
    typical Subversion setup involves a single server machine being
    accessed from clients on computers all over the officeâor,
    perhaps, all over the world.</P><P>This chapter describes how to get your Subversion repository
    exposed outside its host machine for use by remote clients.  We
    will cover Subversion's currently available server mechanisms,
    discussing the configuration and use of each.  After reading this
    chapter, you should be able to decide which networking setup is
    right for your needs, as well as understand how to enable such a
    setup on your host computer.</P><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.serverconfig.overview"></A>Overview</H2></DIV></DIV></DIV><P>Subversion was designed with an abstract network layer.
      This means that a repository can be programmatically accessed by
      any sort of server process, and the client â<SPAN class="quote">repository
      access</SPAN>â API allows programmers to write plug-ins that
      speak relevant network protocols.  In theory, Subversion can use
      an infinite number of network implementations.  In practice,
      there are only two servers at the time of this writing.</P><P>Apache is an extremely popular web server; using the
      <SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN> module, Apache can access a
      repository and make it available to clients via the
      WebDAV/DeltaV protocol, which is an extension of HTTP.  Because
      Apache is an extremely extensible server, it provides a number
      of features â<SPAN class="quote">for free,</SPAN>â such as encrypted SSL
      communication, logging, integration with a number of third-party
      authentication systems, and limited built-in web browsing of
      repositories.</P><P>In the other corner is <SPAN class="command"><STRONG>svnserve</STRONG></SPAN>: a small,
      lightweight server program that speaks a custom protocol with
      clients.  Because its protocol is explicitly designed for
      Subversion and is stateful (unlike HTTP), it provides
      significantly faster network operationsâbut at the cost of
      some features as well.  While it can use SASL to provide a
      variety of authentication and encryption options, it has no
      logging or built-in web browsing.  It is, however, extremely
      easy to set up and is often the best option for small teams just
      starting out with Subversion.</P><P>A third option is to use <SPAN class="command"><STRONG>svnserve</STRONG></SPAN>
      tunneled over an SSH connection.  Even though this scenario
      still uses <SPAN class="command"><STRONG>svnserve</STRONG></SPAN>, it differs quite a bit
      in features from a traditional <SPAN class="command"><STRONG>svnserve</STRONG></SPAN>
      deployment.  SSH is used to encrypt all communication.  SSH is
      also used exclusively to authenticate, so real system accounts
      are required on the server host (unlike
      vanilla <SPAN class="command"><STRONG>svnserve</STRONG></SPAN>, which has its own private
      user accounts).  Finally, because this setup requires that each
      user spawn a private, temporary <SPAN class="command"><STRONG>svnserve</STRONG></SPAN>
      process, it's equivalent (from a permissions point of view) to
      allowing a group of local users to all access the repository
      via <CODE class="literal">file://</CODE> URLs. Path-based access control
      has no meaning, since each user is accessing the repository
      database files directly.</P><P><A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.overview.tbl-1" title="Table&nbsp;6.1.&nbsp;Comparison of subversion server options">Table&nbsp;6.1, âComparison of subversion server optionsâ</A> provides a
      quick summary of the three typical server deployments.</P><DIV class="table"><A id="svn.serverconfig.overview.tbl-1"></A><P class="title"><B>Table&nbsp;6.1.&nbsp;Comparison of subversion server options</B></P><DIV class="table-contents"><TABLE summary="Comparison of subversion server options" border="1"><COLGROUP><COL><COL><COL><COL></COLGROUP><THEAD><TR><TH>Feature</TH><TH>Apache + mod_dav_svn</TH><TH>svnserve</TH><TH>svnserve over SSH</TH></TR></THEAD><TBODY><TR><TD>Authentication options</TD><TD>HTTP(S) basic auth, X.509 certificates, LDAP, NTLM, or
              any other mechanism available to Apache httpd</TD><TD>CRAM-MD5 by default;  LDAP, NTLM, or any other mechanism
              available to SASL</TD><TD>SSH</TD></TR><TR><TD>User account options</TD><TD>Private 'users' file, or other mechanisms
            available to Apache httpd (LDAP, SQL, etc.)</TD><TD>Private 'users' file, or other mechanisms available
              to SASL (LDAP, SQL, etc.)</TD><TD>System accounts</TD></TR><TR><TD>Authorization options</TD><TD>Read/write access can be granted over the whole
              repository, or specified per path</TD><TD>Read/write access can be granted over the whole
              repository, or specified per path</TD><TD>Read/write access only grantable over the whole
              repository</TD></TR><TR><TD>Encryption</TD><TD>Available via optional SSL</TD><TD>Available via optional SASL features</TD><TD>Inherent in SSH connection</TD></TR><TR><TD>Logging</TD><TD>Full Apache logs of each HTTP request, with
            optional â<SPAN class="quote">high-level</SPAN>â logging of general
            client operations</TD><TD>No logging</TD><TD>No logging</TD></TR><TR><TD>Interoperability</TD><TD>Accessible by other WebDAV clients</TD><TD>Talks only to svn clients</TD><TD>Talks only to svn clients</TD></TR><TR><TD>Web viewing</TD><TD>Limited built-in support, or via third-party tools
              such as ViewVC</TD><TD>Only via third-party tools such as ViewVC</TD><TD>Only via third-party tools such as ViewVC</TD></TR><TR><TD>Master-slave server replication</TD><TD>Transparent write-proxying available from slave to master</TD><TD>Can only create read-only slave servers</TD><TD>Can only create read-only slave servers</TD></TR><TR><TD>Speed</TD><TD>Somewhat slower</TD><TD>Somewhat faster</TD><TD>Somewhat faster</TD></TR><TR><TD>Initial setup</TD><TD>Somewhat complex</TD><TD>Extremely simple</TD><TD>Moderately simple</TD></TR></TBODY></TABLE></DIV></DIV><BR class="table-break"></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.serverconfig.choosing"></A>Choosing a Server Configuration</H2></DIV></DIV></DIV><P>So, which server should you use?  Which is best?</P><P>Obviously, there's no right answer to that question.  Every
      team has different needs, and the different servers all
      represent different sets of trade-offs.  The Subversion project
      itself doesn't endorse one server or another, or consider either
      server more â<SPAN class="quote">official</SPAN>â than another.</P><P>Here are some reasons why you might choose one deployment
      over another, as well as reasons you
      might <SPAN class="emphasis"><EM>not</EM></SPAN> choose one.</P><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.serverconfig.choosing.svnserve"></A>The svnserve Server</H3></DIV></DIV></DIV><DIV class="variablelist"><DL><DT><SPAN class="term">Why you might want to use it:</SPAN></DT><DD><DIV class="itemizedlist"><UL type="disc"><LI><P>Quick and easy to set
                up.</P></LI><LI><P>Network protocol is stateful and
                noticeably faster than WebDAV.</P></LI><LI><P>No need to create system accounts on
                server.</P></LI><LI><P>Password is not passed over the
                network.</P></LI></UL></DIV></DD><DT><SPAN class="term">Why you might want to avoid it:</SPAN></DT><DD><DIV class="itemizedlist"><UL type="disc"><LI><P>By default, only one authentication method
                is available, the network protocol is not encrypted,
                and the server stores clear text passwords.  (All these
                things can be changed by configuring SASL, but it's a
                bit more work to do.)</P></LI><LI><P>No logging of any kind, not even
                errors.</P></LI><LI><P>No built-in web browsing.  (You'd have to
                install a separate web server and repository browsing software to
                add this.)</P></LI></UL></DIV></DD></DL></DIV></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.serverconfig.choosing.svn-ssh"></A>svnserve over SSH</H3></DIV></DIV></DIV><DIV class="variablelist"><DL><DT><SPAN class="term">Why you might want to use it:</SPAN></DT><DD><DIV class="itemizedlist"><UL type="disc"><LI><P>The network protocol is stateful and
                noticeably faster than WebDAV.</P></LI><LI><P>You can take advantage of existing SSH
                accounts and user infrastructure.</P></LI><LI><P>All network traffic is
                encrypted.</P></LI></UL></DIV></DD><DT><SPAN class="term">Why you might want to avoid it:</SPAN></DT><DD><DIV class="itemizedlist"><UL type="disc"><LI><P>Only one choice of authentication
                method is available.</P></LI><LI><P>There is no logging of any kind, not even
                errors.</P></LI><LI><P>It requires users to be in the same system group, or
                use a shared SSH key.</P></LI><LI><P>If used improperly, it can lead to file permission
                problems.</P></LI></UL></DIV></DD></DL></DIV></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.serverconfig.choosing.apache"></A>The Apache HTTP Server</H3></DIV></DIV></DIV><DIV class="variablelist"><DL><DT><SPAN class="term">Why you might want to use it:</SPAN></DT><DD><DIV class="itemizedlist"><UL type="disc"><LI><P>It allows Subversion to use any of the
                  numerous authentication systems already integrated
                  with Apache.</P></LI><LI><P>There is no need to create system accounts on
                  the server.</P></LI><LI><P>Full Apache logging is available.</P></LI><LI><P>Network traffic can be encrypted via
                  SSL.</P></LI><LI><P>HTTP(S) can usually go through corporate
                  firewalls.</P></LI><LI><P>Built-in repository browsing is
                  available via web browser.</P></LI><LI><P>The repository can be mounted as a network
                  drive for transparent version control (see
                  <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.webdav.autoversioning" title="Autoversioning">the section called âAutoversioningâ</A>).</P></LI></UL></DIV></DD><DT><SPAN class="term">Why you might want to avoid it:</SPAN></DT><DD><DIV class="itemizedlist"><UL type="disc"><LI><P>Noticeably slower than
                <SPAN class="command"><STRONG>svnserve</STRONG></SPAN>, because HTTP is a
                stateless protocol and requires more network
                turnarounds.</P></LI><LI><P>Initial setup can be complex.</P></LI></UL></DIV></DD></DL></DIV></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.serverconfig.choosing.recommendations"></A>Recommendations</H3></DIV></DIV></DIV><P>In general, the authors of this book recommend a vanilla
        <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> installation for small teams just
        trying to get started with a Subversion server; it's the
        simplest to set up and has the fewest maintenance issues.
        You can always switch to a more complex server
        deployment as your needs change.</P><P>Here are some general recommendations and tips, based on
        years of supporting users:</P><DIV class="itemizedlist"><UL type="disc"><LI><P>If you're trying to set up the simplest possible
            server for your group, a
            vanilla <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> installation is the
            easiest, fastest route.  Note, however, that your
            repository data will be transmitted in the clear over the
            network.  If your deployment is entirely within your
            company's LAN or VPN, this isn't an issue.  If the
            repository is exposed to the wide-open Internet, you
            might want to make sure that either the repository's
            contents aren't sensitive (e.g., it contains only
            open source code), or that you go the extra mile in
            configuring SASL to encrypt network communications.</P></LI><LI><P>If you need to integrate with existing legacy identity
            systems (LDAP, Active Directory, NTLM, X.509, etc.),
            you must use either the Apache-based server
            or <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> configured with SASL.  If
            you absolutely need server-side logs of either server
            errors or client activities, an Apache-based server
            is your only option.</P></LI><LI><P>If you've decided to use either Apache or stock
             <SPAN class="command"><STRONG>svnserve</STRONG></SPAN>, create a single
             <SPAN class="command"><STRONG>svn</STRONG></SPAN> user on your system and run the
             server process as that user.  Be sure to make the
             repository directory wholly owned by the
             <SPAN class="command"><STRONG>svn</STRONG></SPAN> user as well.  From a security
             point of view, this keeps the repository data nicely
             siloed and protected by operating system filesystem
             permissions, changeable by only the Subversion server
             process itself.</P></LI><LI><P>If you have an existing infrastructure that is heavily based
            on SSH accounts, and if your users already have system
            accounts on your server machine, it makes sense to
            deploy an <SPAN class="command"><STRONG>svnserve</STRONG></SPAN>-over-SSH solution.
            Otherwise, we don't widely recommend this option to the
            public.  It's generally considered safer to have your
            users access the repository via (imaginary) accounts
            managed by <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> or Apache, rather
            than by full-blown system accounts.  If your deep desire
            for encrypted communication still draws you to this
            option, we recommend using Apache with SSL or
            <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> with SASL encryption
            instead.</P></LI><LI><P>Do <SPAN class="emphasis"><EM>not</EM></SPAN> be seduced by the simple
            idea of having all of your users access a repository
            directly via <CODE class="literal">file://</CODE> URLs.  Even if the
            repository is readily available to everyone via a network
            share, this is a bad idea.  It removes any layers of
            protection between the users and the repository: users can
            accidentally (or intentionally) corrupt the repository
            database, it becomes hard to take the repository offline
            for inspection or upgrade, and it can lead to a mess of
            file permission problems (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.multimethod" title="Supporting Multiple Repository Access Methods">the section called âSupporting Multiple Repository Access Methodsâ</A>).  Note that this
            is also one of the reasons we warn against accessing
            repositories via <CODE class="literal">svn+ssh://</CODE>
            URLsâfrom a security standpoint, it's effectively
            the same as local users accessing via
            <CODE class="literal">file://</CODE>, and it can entail all the same
            problems if the administrator isn't careful.</P></LI></UL></DIV></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.serverconfig.svnserve"></A>svnserve, a Custom Server</H2></DIV></DIV></DIV><P>The <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> program is a lightweight
      server, capable of speaking to clients over TCP/IP using a
      custom, stateful protocol.  Clients contact an
      <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> server by using URLs that begin with
      the <CODE class="literal">svn://</CODE> or <CODE class="literal">svn+ssh://</CODE>
      scheme.  This section will explain the different ways of running
      <SPAN class="command"><STRONG>svnserve</STRONG></SPAN>, how clients authenticate themselves
      to the server, and how to configure appropriate access control
      to your repositories.</P><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.serverconfig.svnserve.invoking"></A>Invoking the Server</H3></DIV></DIV></DIV><P>There are a few different ways to run the
        <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> program:</P><DIV class="itemizedlist"><UL type="disc"><LI><P>Run <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> as a
            standalone daemon, listening for
            requests.</P></LI><LI><P>Have the Unix <SPAN class="command"><STRONG>inetd</STRONG></SPAN> daemon
            temporarily spawn <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> whenever a
            request comes in on a certain port.</P></LI><LI><P>Have SSH invoke a
            temporary <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> over an encrypted
            tunnel.</P></LI><LI><P>Run <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> as a Microsoft
            Windows service.</P></LI></UL></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.serverconfig.svnserve.invoking.daemon"></A>svnserve as daemon</H4></DIV></DIV></DIV><P>The easiest option is to run <SPAN class="command"><STRONG>svnserve</STRONG></SPAN>
          as a standalone â<SPAN class="quote">daemon</SPAN>â process.  Use the
          <CODE class="option">-d</CODE> option for this:</P><PRE class="screen">$ svnserve -d
$               # svnserve is now running, listening on port 3690
</PRE><P>When running <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> in daemon mode,
          you can use the <CODE class="option">--listen-port</CODE> and
          <CODE class="option">--listen-host</CODE> options to customize the
          exact port and hostname to â<SPAN class="quote">bind</SPAN>â to.</P><P>Once we successfully start <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> as
        explained previously, it makes every repository on your system
        available to the network.  A client needs to specify an
        <SPAN class="emphasis"><EM>absolute</EM></SPAN> path in the repository URL.  For
        example, if a repository is located at
        <CODE class="filename">/var/svn/project1</CODE>, a client would
        reach it via
        <CODE class="uri">svn://host.example.com/var/svn/project1</CODE>.  To
        increase security, you can pass the <CODE class="option">-r</CODE> option
        to <SPAN class="command"><STRONG>svnserve</STRONG></SPAN>, which restricts it to
        exporting only repositories below that path.  For
        example:</P><PRE class="screen">$ svnserve -d -r /var/svn
â¦
</PRE><P>Using the <CODE class="option">-r</CODE> option effectively
        modifies the location that the program treats as the root of
        the remote filesystem space.  Clients then use URLs that
        have that path portion removed from them, leaving much
        shorter (and much less revealing) URLs:</P><PRE class="screen">$ svn checkout svn://host.example.com/project1
â¦
</PRE></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.serverconfig.svnserve.invoking.inetd"></A>svnserve via inetd</H4></DIV></DIV></DIV><P>If you want <SPAN class="command"><STRONG>inetd</STRONG></SPAN> to launch the
          process, you need to pass the <CODE class="option">-i</CODE>
          (<CODE class="option">--inetd</CODE>) option.  In the following
          example, we've shown the output from running
          <CODE class="literal">svnserve -i</CODE> at the command line, but note
          that this isn't how you actually start the daemon; see the
          paragraphs following the example for how to configure
          <SPAN class="command"><STRONG>inetd</STRONG></SPAN> to start
          <SPAN class="command"><STRONG>svnserve</STRONG></SPAN>.</P><PRE class="screen">$ svnserve -i
( success ( 1 2 ( ANONYMOUS ) ( edit-pipeline ) ) )
</PRE><P>When invoked with the <CODE class="option">--inetd</CODE> option,
        <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> attempts to speak with a
        Subversion client via <CODE class="filename">stdin</CODE> and
        <CODE class="filename">stdout</CODE> using a custom protocol.  This is
        the standard behavior for a program being run via
        <SPAN class="command"><STRONG>inetd</STRONG></SPAN>.  The IANA has reserved port 3690 for
        the Subversion protocol, so on a Unix-like system you can add
        lines to <CODE class="filename">/etc/services</CODE> such as these (if
        they don't already exist):</P><PRE class="screen">svn           3690/tcp   # Subversion
svn           3690/udp   # Subversion
</PRE><P>If your system is using a classic Unix-like
        <SPAN class="command"><STRONG>inetd</STRONG></SPAN> daemon, you can add this line to
        <CODE class="filename">/etc/inetd.conf</CODE>:</P><PRE class="screen">svn stream tcp nowait svnowner /usr/bin/svnserve svnserve -i
</PRE><P>Make sure â<SPAN class="quote">svnowner</SPAN>â is a user that has
        appropriate permissions to access your repositories.  Now,
        when a client connection comes into your server on port 3690,
        <SPAN class="command"><STRONG>inetd</STRONG></SPAN> will spawn an
        <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> process to service it.  Of course,
        you may also want to add <CODE class="option">-r</CODE> to the
        configuration line as well, to restrict which repositories are
        exported.</P></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.serverconfig.svnserve.invoking.tunnel"></A>svnserve over a tunnel</H4></DIV></DIV></DIV><P>A third way to invoke <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> is in
          tunnel mode, using the <CODE class="option">-t</CODE> option.  This
          mode assumes that a remote-service program such as
          <SPAN class="command"><STRONG>rsh</STRONG></SPAN> or <SPAN class="command"><STRONG>ssh</STRONG></SPAN> has
          successfully authenticated a user and is now invoking a
          private <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> process <SPAN class="emphasis"><EM>as
          that user</EM></SPAN>.  (Note that you, the user, will
          rarely, if ever, have reason to invoke
          <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> with the <CODE class="option">-t</CODE> at
          the command line; instead, the SSH daemon
          does so for you.)  The <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> program
          behaves normally (communicating via
          <CODE class="filename">stdin</CODE> and <CODE class="filename">stdout</CODE>)
          and assumes that the traffic is being automatically
          redirected over some sort of tunnel back to the client.
          When <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> is invoked by a tunnel
          agent like this, be sure that the authenticated user has
          full read and write access to the repository database files.
          It's essentially the same as a local user accessing the
          repository via <CODE class="literal">file://</CODE> URLs.</P><P>This option is described in much more detail later in
          this chapter in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve.sshauth" title="Tunneling over SSH">the section called âTunneling over SSHâ</A>.</P></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.serverconfig.svnserve.invoking.winservice"></A>svnserve as Windows service</H4></DIV></DIV></DIV><P>If your Windows system is a descendant of Windows NT
          (2000, 2003, XP, or Vista), you can
          run <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> as a standard Windows
          service.  This is typically a much nicer experience than
          running it as a standalone daemon with the <CODE class="option">--daemon
          (-d)</CODE> option.  Using daemon mode requires launching
          a console, typing a command, and then leaving the console
          window running indefinitely.  A Windows service, however,
          runs in the background, can start at boot time
          automatically, and can be started and stopped using the same
          consistent administration interface as other
          Windows services. </P><P>You'll need to define the new service using the
          command-line tool <SPAN class="command"><STRONG>SC.EXE</STRONG></SPAN>.  Much like
          the <SPAN class="command"><STRONG>inetd</STRONG></SPAN> configuration line, you must
          specify an exact invocation of <SPAN class="command"><STRONG>svnserve</STRONG></SPAN>
          for Windows to run at startup time:</P><PRE class="screen">C:\&gt; sc create svn
        binpath= "C:\svn\bin\svnserve.exe --service -r C:\repos"
        displayname= "Subversion Server"
        depend= Tcpip
        start= auto
</PRE><P>This defines a new Windows service named
          â<SPAN class="quote">svn,</SPAN>â which executes a particular
          <SPAN class="command"><STRONG>svnserve.exe</STRONG></SPAN> command when started (in
          this case, rooted at <CODE class="filename">C:\repos</CODE>).  There
          are a number of caveats in the prior example,
          however.</P><P>First, notice that the <SPAN class="command"><STRONG>svnserve.exe</STRONG></SPAN>
          program must always be invoked with the
          <CODE class="option">--service</CODE> option.  Any other options to
          <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> must then be specified on the
          same line, but you cannot add conflicting options such as
          <CODE class="option">--daemon (-d)</CODE>, <CODE class="option">--tunnel</CODE>,
          or <CODE class="option">--inetd (-i)</CODE>.  Options such as
          <CODE class="option">-r</CODE> or <CODE class="option">--listen-port</CODE> are
          fine, though.  Second, be careful about spaces when invoking
          the <SPAN class="command"><STRONG>SC.EXE</STRONG></SPAN> command: the <CODE class="literal">key=
          value</CODE> patterns must have no spaces between
          <CODE class="literal">key=</CODE> and must have exactly one space
          before the <CODE class="literal">value</CODE>.  Lastly, be careful
          about spaces in your command line to be invoked.  If a
          directory name contains spaces (or other characters that
          need escaping), place the entire inner value of
          <CODE class="literal">binpath</CODE> in double quotes, by escaping
          them:</P><PRE class="screen">C:\&gt; sc create svn
        binpath= "\"C:\program files\svn\bin\svnserve.exe\" --service -r C:\repos"
        displayname= "Subversion Server"
        depend= Tcpip
        start= auto
</PRE><P>Also note that the word <CODE class="literal">binpath</CODE> is
          misleadingâits value is a <SPAN class="emphasis"><EM>command
          line</EM></SPAN>, not the path to an executable.  That's why
          you need to surround it with quotes if it contains
          embedded spaces.</P><P>Once the service is defined, it can be stopped, started,
          or queried using standard GUI tools (the Services
          administrative control panel), or at the command
          line:</P><PRE class="screen">C:\&gt; net stop svn
C:\&gt; net start svn
</PRE><P>The service can also be uninstalled (i.e., undefined) by
          deleting its definition:  <STRONG class="userinput"><CODE>sc delete svn</CODE></STRONG>.
          Just be sure to stop the service first!
          The <SPAN class="command"><STRONG>SC.EXE</STRONG></SPAN> program has many other
          subcommands and options; run <STRONG class="userinput"><CODE>sc /?</CODE></STRONG> to
          learn more about it.</P></DIV></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.serverconfig.svnserve.auth"></A>Built-in Authentication and Authorization</H3></DIV></DIV></DIV><P>When a client connects to an <SPAN class="command"><STRONG>svnserve</STRONG></SPAN>
        process, the following things happen:</P><DIV class="itemizedlist"><UL type="disc"><LI><P>The client selects a specific
        repository.</P></LI><LI><P>The server processes the repository's
        <CODE class="filename">conf/svnserve.conf</CODE> file and begins to
        enforce any authentication and authorization policies it
        describes.</P></LI><LI><P>Depending on the defined policies, one of the
        following may occur:</P><DIV class="itemizedlist"><UL type="circle"><LI><P>The client may be allowed to make requests
              anonymously, without ever receiving an authentication
              challenge.</P></LI><LI><P>The client may be challenged for
              authentication at any time.</P></LI><LI><P>If operating in tunnel mode, the client
              will declare itself to be already externally
              authenticated (typically by SSH).</P></LI></UL></DIV></LI></UL></DIV><P>The <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> server, by default, knows
        only how to send a CRAM-MD5
        <SUP>[<A id="id543870" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id543870" class="footnote">41</A>]</SUP>
        authentication challenge.  In essence,
        the server sends a small amount of data to the client.  The
        client uses the MD5 hash algorithm to create a fingerprint of
        the data and password combined, and then sends the fingerprint
        as a response.  The server performs the same computation with
        the stored password to verify that the result is identical.
        <SPAN class="emphasis"><EM>At no point does the actual password travel over the
        network.</EM></SPAN></P><P>If your <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> server was built with
        SASL support, it not only knows how to send CRAM-MD5 challenges,
        but also likely knows a whole host of other authentication
        mechanisms.  See <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve.sasl" title="Using svnserve with SASL">the section called âUsing <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> with SASLâ</A> later in this
        chapter to learn how to configure SASL authentication and
        encryption.</P><P>It's also possible, of course, for the client to be
        externally authenticated via a tunnel agent, such as
        <SPAN class="command"><STRONG>ssh</STRONG></SPAN>.  In that case, the server simply
        examines the user it's running as, and uses this name as the
        authenticated username.  For more on this, see the later
        section, <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve.sshauth" title="Tunneling over SSH">the section called âTunneling over SSHâ</A>.</P><P>As you've already guessed, a repository's
        <CODE class="filename">svnserve.conf</CODE> file is the central
        mechanism for controlling authentication and authorization
        policies.  The file has the same format as other configuration
        files (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.confarea" title="Runtime Configuration Area">the section called âRuntime Configuration Areaâ</A>):
        section names are marked by square brackets
        (<CODE class="literal">[</CODE> and <CODE class="literal">]</CODE>), comments
        begin with hashes (<CODE class="literal">#</CODE>), and each section
        contains specific variables that can be set (<CODE class="literal">variable
        = value</CODE>).  Let's walk through these files and learn
        how to use them.</P><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.serverconfig.svnserve.auth.users"></A>Create a users file and realm</H4></DIV></DIV></DIV><P>For now, the <CODE class="literal">[general]</CODE> section of
          <CODE class="filename">svnserve.conf</CODE> has all the variables you
          need.  Begin by changing the values of those variables:
          choose a name for a file that will contain your usernames
          and passwords and choose an authentication realm:</P><PRE class="screen">[general]
password-db = userfile
realm = example realm
</PRE><P>The <CODE class="literal">realm</CODE> is a name that you define.
          It tells clients which sort of â<SPAN class="quote">authentication
          namespace</SPAN>â they're connecting to; the Subversion
          client displays it in the authentication prompt and uses it
          as a key (along with the server's hostname and port) for
          caching credentials on disk (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.netmodel.credcache" title="Client Credentials Caching">the section called âClient Credentials Cachingâ</A>).  The
          <CODE class="literal">password-db</CODE> variable points to a separate
          file that contains a list of usernames and passwords, using
          the same familiar format.  For example:</P><PRE class="screen">[users]
harry = foopassword
sally = barpassword
</PRE><P>The value of <CODE class="literal">password-db</CODE> can be an
          absolute or relative path to the users file.  For many
          admins, it's easy to keep the file right in the
          <CODE class="filename">conf/</CODE> area of the repository, alongside
          <CODE class="filename">svnserve.conf</CODE>.  On the other hand, it's
          possible you may want to have two or more repositories share
          the same users file; in that case, the file should probably
          live in a more public place.  The repositories sharing the
          users file should also be configured to have the same realm,
          since the list of users essentially defines an
          authentication realm.  Wherever the file lives, be sure to
          set the file's read and write permissions appropriately.  If
          you know which user(s) <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> will run
          as, restrict read access to the users file as necessary.</P></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.serverconfig.svnserve.auth.general"></A>Set access controls</H4></DIV></DIV></DIV><P>There are two more variables to set in the
          <CODE class="filename">svnserve.conf</CODE> file: they determine what
          unauthenticated (anonymous) and authenticated users are
          allowed to do.  The variables <CODE class="literal">anon-access</CODE>
          and <CODE class="literal">auth-access</CODE> can be set to the value
          <CODE class="literal">none</CODE>, <CODE class="literal">read</CODE>, or
          <CODE class="literal">write</CODE>.  Setting the value to
          <CODE class="literal">none</CODE> prohibits both reading and writing;
          <CODE class="literal">read</CODE> allows read-only access to the
          repository, and <CODE class="literal">write</CODE> allows complete
          read/write access to the repository.  For example:</P><PRE class="screen">[general]
password-db = userfile
realm = example realm

# anonymous users can only read the repository
anon-access = read

# authenticated users can both read and write
auth-access = write
</PRE><P>The example settings are, in fact, the default values of
          the variables, should you forget to define them.  If you
          want to be even more conservative, you can block anonymous
          access completely:</P><PRE class="screen">[general]
password-db = userfile
realm = example realm

# anonymous users aren't allowed
anon-access = none

# authenticated users can both read and write
auth-access = write
</PRE><P>The server process understands not only
        these â<SPAN class="quote">blanket</SPAN>â access controls to the
        repository, but also finer-grained access restrictions placed
        on specific files and directories within the repository.  To
        make use of this feature, you need to define a file containing
        more detailed rules, and then set
        the <CODE class="literal">authz-db</CODE> variable to point to it:</P><PRE class="screen">[general]
password-db = userfile
realm = example realm

# Specific access rules for specific locations
authz-db = authzfile
</PRE><P>We discuss the syntax of the <CODE class="filename">authzfile</CODE> file
          in detail later in this chapter, in
          <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.pathbasedauthz" title="Path-Based Authorization">the section called âPath-Based Authorizationâ</A>.  Note
          that the <CODE class="literal">authz-db</CODE> variable isn't mutually
          exclusive with the <CODE class="literal">anon-access</CODE>
          and <CODE class="literal">auth-access</CODE> variables;  if all the
          variables are defined at once, <SPAN class="emphasis"><EM>all</EM></SPAN>
          of the rules must be satisfied before access is allowed.</P></DIV></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.serverconfig.svnserve.sasl"></A>Using <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> with SASL</H3></DIV></DIV></DIV><P>For many teams, the built-in CRAM-MD5 authentication is
        all they need from <SPAN class="command"><STRONG>svnserve</STRONG></SPAN>.  However, if
        your server (and your Subversion clients) were built with the
        Cyrus Simple Authentication and Security Layer (SASL) library,
        you have a number of authentication and encryption
        options available to you.</P><DIV class="sidebar"><P class="title"><B>What Is SASL?</B></P><P>The Cyrus Simple Authentication and Security Layer is
          open source software written by Carnegie Mellon University.
          It adds generic authentication and encryption capabilities
          to any network protocol, and as of Subversion 1.5 and later,
          both the <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> server
          and <SPAN class="command"><STRONG>svn</STRONG></SPAN> client know how to make use of
          this library.  It may or may not be available to you: if
          you're building Subversion yourself, you'll need to have at
          least version 2.1 of SASL installed on your system, and
          you'll need to make sure that it's detected during
          Subversion's build process.  If you're using a prebuilt
          Subversion binary package, you'll have to check with the
          package maintainer as to whether SASL support was compiled
          in.  SASL comes with a number of pluggable modules that
          represent different authentication systems: Kerberos
          (GSSAPI), NTLM, One-Time-Passwords (OTP), DIGEST-MD5, LDAP,
          Secure-Remote-Password (SRP), and others.  Certain
          mechanisms may or may not be available to you; be sure to
          check which modules are provided.</P><P>You can download Cyrus SASL (both code and
          documentation) from
          <A class="ulink" href="http://asg.web.cmu.edu/sasl/sasl-library.html" target="_top">http://asg.web.cmu.edu/sasl/sasl-library.html</A>.</P></DIV><P>Normally, when a subversion client connects to
        <SPAN class="command"><STRONG>svnserve</STRONG></SPAN>, the server sends a greeting that
        advertises a list of the capabilities it supports, and the
        client responds with a similar list of capabilities.  If the
        server is configured to require authentication, it then sends
        a challenge that lists the authentication mechanisms
        available; the client responds by choosing one of the
        mechanisms, and then authentication is carried out in some
        number of round-trip messages.  Even when SASL capabilities
        aren't present, the client and server inherently know how to
        use the CRAM-MD5 and ANONYMOUS mechanisms (see
        <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve.auth" title="Built-in Authentication and Authorization">the section called âBuilt-in Authentication and Authorizationâ</A>).  If server
        and client were linked against SASL, a number of other
        authentication mechanisms may also be available.  However,
        you'll need to explicitly configure SASL on the server side to
        advertise them.</P><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.serverconfig.svnserve.sasl.authn"></A>Authenticating with SASL</H4></DIV></DIV></DIV><P>To activate specific SASL mechanisms on the server,
          you'll need to do two things.  First, create
          a <CODE class="literal">[sasl]</CODE> section in your
          repository's <CODE class="filename">svnserve.conf</CODE> file with an
          initial key-value pair:</P><PRE class="programlisting">          [sasl]
          use-sasl = true
</PRE><P>Second, create a main SASL configuration file
          called <CODE class="filename">svn.conf</CODE> in a place where the
          SASL library can find itâtypically in the directory
          where SASL plug-ins are located.  You'll have to locate the
          plug-in directory on your particular system, such
          as <CODE class="filename">/usr/lib/sasl2/</CODE>
          or <CODE class="filename">/etc/sasl2/</CODE>.  (Note that this
          is <SPAN class="emphasis"><EM>not</EM></SPAN>
          the <CODE class="filename">svnserve.conf</CODE> file that lives
          within a repository!)</P><P>On a Windows server, you'll also have to edit the system
          registry (using a tool such as <SPAN class="command"><STRONG>regedit</STRONG></SPAN>)
          to tell SASL where to find things.  Create a registry key
          named <CODE class="literal">[HKEY_LOCAL_MACHINE\SOFTWARE\Carnegie
          Mellon\Project Cyrus\SASL Library]</CODE>, and place two
          keys inside it: a key called <CODE class="literal">SearchPath</CODE>
          (whose value is a path to the directory containing the SASL
          <CODE class="filename">sasl*.dll</CODE> plug-in libraries), and a key
          called
          <CODE class="literal">ConfFile</CODE> (whose value is a path to the
          parent directory containing
          the <CODE class="filename">svn.conf</CODE> file you created).</P><P>Because SASL provides so many different kinds of
          authentication mechanisms, it would be foolish (and far
          beyond the scope of this book) to try to describe every
          possible server-side configuration.  Instead, we recommend
          that you read the documentation supplied in the
          <CODE class="filename">doc/</CODE> subdirectory of the SASL source
          code.  It goes into great detail about every mechanism and
          how to configure the server appropriately for each.  For the
          purposes of this discussion, we'll just demonstrate a simple
          example of configuring the DIGEST-MD5 mechanism.  For
          example, if your <CODE class="filename">subversion.conf</CODE>
          (or <CODE class="filename">svn.conf</CODE>) file contains the
          following:</P><PRE class="screen">pwcheck_method: auxprop
auxprop_plugin: sasldb
sasldb_path: /etc/my_sasldb
mech_list: DIGEST-MD5
</PRE><P>you've told SASL to advertise the DIGEST-MD5
          mechanism to clients and to check user passwords against a
          private password database located
          at <CODE class="filename">/etc/my_sasldb</CODE>.  A system
          administrator can then use
          the <SPAN class="command"><STRONG>saslpasswd2</STRONG></SPAN> program to add or modify
          usernames and passwords in the database:</P><PRE class="screen">$ saslpasswd2 -c -f /etc/my_sasldb -u realm username
</PRE><P>A few words of warning: first, make sure the
          â<SPAN class="quote">realm</SPAN>â argument
          to <SPAN class="command"><STRONG>saslpasswd2</STRONG></SPAN> matches the same realm
          you've defined in your
          repository's <CODE class="filename">svnserve.conf</CODE> file; if
          they don't match, authentication will fail.  Also, due to a
          shortcoming in SASL, the common realm must be a string with
          no space characters.  Finally, if you decide to go with the
          standard SASL password database, make sure
          the <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> program has read access to
          the file (and possibly write access as well, if you're using
          a mechanism such as OTP).</P><P>This is just one simple way of configuring SASL.  Many
          other authentication mechanisms are available, and passwords
          can be stored in other places such as in LDAP or a SQL
          database.  Consult the full SASL documentation for
          details.</P><P>Remember that if you configure your server to only allow
          certain SASL authentication mechanisms, this forces all
          connecting clients to have SASL support as well.  Any
          Subversion client built without SASL support (which includes
          all pre-1.5 clients) will be unable to authenticate.  On the
          one hand, this sort of restriction may be exactly what you
          want (â<SPAN class="quote">My clients must all use Kerberos!</SPAN>â).
          However, if you still want non-SASL clients to be able to
          authenticate, be sure to advertise the CRAM-MD5 mechanism as
          an option.  All clients are able to use CRAM-MD5, whether
          they have SASL capabilities or not.</P></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.serverconfig.svnserve.sasl.encryption"></A>SASL encryption</H4></DIV></DIV></DIV><P>SASL is also able to perform data encryption if a
          particular mechanism supports it.  The built-in CRAM-MD5
          mechanism doesn't support encryption, but DIGEST-MD5 does,
          and mechanisms such as SRP actually require use of the
          OpenSSL library.  To enable or disable different levels of
          encryption, you can set two values in your repository's
          <CODE class="filename">svnserve.conf</CODE> file:</P><PRE class="screen">[sasl]
use-sasl = true
min-encryption = 128
max-encryption = 256
</PRE><P>The <CODE class="literal">min-encryption</CODE> and
          <CODE class="literal">max-encryption</CODE> variables control the
          level of encryption demanded by the server.  To disable
          encryption completely, set both values to 0.  To enable
          simple checksumming of data (i.e., prevent tampering and
          guarantee data integrity without encryption), set both
          values to 1.  If you wish to allowâbut not
          requireâencryption, set the minimum value to 0, and
          the maximum value to some bit length.  To require encryption
          unconditionally, set both values to numbers greater than 1.
          In our previous example, we require clients to do at least
          128-bit encryption, but no more than 256-bit
          encryption.</P></DIV></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.serverconfig.svnserve.sshauth"></A>Tunneling over SSH</H3></DIV></DIV></DIV><P><SPAN class="command"><STRONG>svnserve</STRONG></SPAN>'s built-in authentication (and
        SASL support) can be very handy, because it avoids the need to
        create real system accounts.  On the other hand, some
        administrators already have well-established SSH
        authentication frameworks in place.  In these situations, all
        of the project's users already have system accounts and the
        ability to â<SPAN class="quote">SSH into</SPAN>â the server machine.</P><P>It's easy to use SSH in conjunction with
        <SPAN class="command"><STRONG>svnserve</STRONG></SPAN>.  The client simply uses the
        <CODE class="literal">svn+ssh://</CODE> URL scheme to connect:</P><PRE class="screen">$ whoami
harry

$ svn list svn+ssh://host.example.com/repos/project
harryssh@host.example.com's password:  *****

foo
bar
baz
â¦
</PRE><P>In this example, the Subversion client is invoking a local
        <SPAN class="command"><STRONG>ssh</STRONG></SPAN> process, connecting to
        <CODE class="literal">host.example.com</CODE>, authenticating as the
        user <CODE class="literal">harryssh</CODE> (according to SSH user
        configuration), then spawning a private
        <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> process on the remote machine
        running as the user <CODE class="literal">harryssh</CODE>.  The
        <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> command is being invoked in tunnel
        mode (<CODE class="option">-t</CODE>), and its network protocol is being
        â<SPAN class="quote">tunneled</SPAN>â over the encrypted connection by
        <SPAN class="command"><STRONG>ssh</STRONG></SPAN>, the tunnel agent.
        If the client performs a commit, the authenticated username
        <CODE class="literal">harryssh</CODE> will be used as the author
        of the new revision.</P><P>The important thing to understand here is that the
        Subversion client is <SPAN class="emphasis"><EM>not</EM></SPAN> connecting to a
        running <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> daemon.  This method of
        access doesn't require a daemon, nor does it notice one if
        present.  It relies wholly on the ability of
        <SPAN class="command"><STRONG>ssh</STRONG></SPAN> to spawn a temporary
        <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> process, which then terminates
        when the network connection is closed.</P><P>When using <CODE class="literal">svn+ssh://</CODE> URLs to access a
        repository, remember that it's the <SPAN class="command"><STRONG>ssh</STRONG></SPAN>
        program prompting for authentication, and
        <SPAN class="emphasis"><EM>not</EM></SPAN> the <SPAN class="command"><STRONG>svn</STRONG></SPAN> client
        program.  That means there's no automatic password-caching
        going on (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.netmodel.credcache" title="Client Credentials Caching">the section called âClient Credentials Cachingâ</A>).  The
        Subversion client often makes multiple connections to the
        repository, though users don't normally notice this due to the
        password caching feature.  When using
        <CODE class="literal">svn+ssh://</CODE> URLs, however, users may be
        annoyed by <SPAN class="command"><STRONG>ssh</STRONG></SPAN> repeatedly asking for a
        password for every outbound connection.  The solution is to
        use a separate SSH password-caching tool such as
        <SPAN class="command"><STRONG>ssh-agent</STRONG></SPAN> on a Unix-like system, or
        <SPAN class="command"><STRONG>pageant</STRONG></SPAN> on Windows.</P><P>When running over a tunnel, authorization is primarily
        controlled by operating system permissions to the repository's
        database files; it's very much the same as if Harry were
        accessing the repository directly via a
        <CODE class="literal">file://</CODE> URL.  If multiple system users are
        going to be accessing the repository directly, you may want to
        place them into a common group, and you'll need to be careful
        about umasks (be sure to read <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.multimethod" title="Supporting Multiple Repository Access Methods">the section called âSupporting Multiple Repository Access Methodsâ</A> later in this
        chapter).  But even in the case of tunneling, you can still use the
        <CODE class="filename">svnserve.conf</CODE> file to block access, by
        simply setting <CODE class="literal">auth-access = read</CODE>
        or <CODE class="literal">auth-access = none</CODE>.
        <SUP>[<A id="id544817" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id544817" class="footnote">42</A>]</SUP>
      </P><P>You'd think that the story of SSH tunneling would end
        here, but it doesn't.  Subversion allows you to create custom
        tunnel behaviors in your runtime <CODE class="filename">config</CODE>
        file (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.confarea" title="Runtime Configuration Area">the section called âRuntime Configuration Areaâ</A>.)  For
        example, suppose you want to use RSH instead of SSH.
        <SUP>[<A id="id544847" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id544847" class="footnote">43</A>]</SUP>
        In the <CODE class="literal">[tunnels]</CODE> section of your
        <CODE class="filename">config</CODE> file, simply define it like
        this:</P><PRE class="screen">[tunnels]
rsh = rsh
</PRE><P>And now, you can use this new tunnel definition by using a
        URL scheme that matches the name of your new variable:
        <CODE class="literal">svn+rsh://host/path</CODE>.  When using the new
        URL scheme, the Subversion client will actually be running the
        command <STRONG class="userinput"><CODE>rsh host svnserve -t</CODE></STRONG> behind the
        scenes.  If you include a username in the URL (e.g.,
        <CODE class="literal">svn+rsh://username@host/path</CODE>), the client
        will also include that in its command (<STRONG class="userinput"><CODE>rsh
        username@host svnserve -t</CODE></STRONG>).  But you can define new
        tunneling schemes to be much more clever than that:</P><PRE class="screen">[tunnels]
joessh = $JOESSH /opt/alternate/ssh -p 29934
</PRE><P>This example demonstrates a couple of things.  First, it
        shows how to make the Subversion client launch a very specific
        tunneling binary (the one located at
        <CODE class="filename">/opt/alternate/ssh</CODE>) with specific
        options.  In this case, accessing an
        <CODE class="literal">svn+joessh://</CODE> URL would invoke the
        particular SSH binary with <CODE class="option">-p 29934</CODE> as
        argumentsâuseful if you want the tunnel program to
        connect to a nonstandard port.</P><P>Second, it shows how to define a custom environment
        variable that can override the name of the tunneling program.
        Setting the <CODE class="literal">SVN_SSH</CODE> environment variable is
        a convenient way to override the default SSH tunnel agent.
        But if you need to have several different overrides for
        different servers, each perhaps contacting a different port or
        passing a different set of options to SSH, you can use the
        mechanism demonstrated in this example.  Now if we were to set
        the <CODE class="literal">JOESSH</CODE> environment variable, its value
        would override the entire value of the tunnel
        variableâ<SPAN class="command"><STRONG>$JOESSH</STRONG></SPAN> would be executed
        instead of <STRONG class="userinput"><CODE>/opt/alternate/ssh -p
        29934</CODE></STRONG>.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.serverconfig.svnserve.sshtricks"></A>SSH configuration tricks</H3></DIV></DIV></DIV><P>It's possible to control not only the way in which the
        client invokes <SPAN class="command"><STRONG>ssh</STRONG></SPAN>, but also to control
        the behavior of <SPAN class="command"><STRONG>sshd</STRONG></SPAN> on your server
        machine.  In this section, we'll show how to control the
        exact <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> command executed
        by <SPAN class="command"><STRONG>sshd</STRONG></SPAN>, as well as how to have multiple
        users share a single system account.</P><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.serverconfig.svnserve.sshtricks.setup"></A>Initial setup</H4></DIV></DIV></DIV><P>To begin, locate the home directory of the account
          you'll be using to launch <SPAN class="command"><STRONG>svnserve</STRONG></SPAN>.  Make
          sure the account has an SSH public/private keypair
          installed, and that the user can log in via public-key
          authentication.  Password authentication will not work,
          since all of the following SSH tricks revolve around using
          the SSH <CODE class="filename">authorized_keys</CODE> file.</P><P>If it doesn't already exist, create the
          <CODE class="filename">authorized_keys</CODE> file (on Unix,
          typically <CODE class="filename">~/.ssh/authorized_keys</CODE>).
          Each line in this file describes a public key that is
          allowed to connect.  The lines are typically of the
          form:</P><PRE class="screen">  ssh-dsa AAAABtce9euchâ¦ user@example.com
</PRE><P>The first field describes the type of key, the second
          field is the base64-encoded key itself, and the third field
          is a comment.  However, it's a lesser known fact that the
          entire line can be preceded by a <CODE class="literal">command</CODE>
          field:</P><PRE class="screen">  command="program" ssh-dsa AAAABtce9euchâ¦ user@example.com
</PRE><P>When the <CODE class="literal">command</CODE> field is set, the
          SSH daemon will run the named program instead of the
          typical tunnel-mode <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> invocation that the
          Subversion client asks for.  This opens the door to a number
          of server-side tricks.  In the following examples, we
          abbreviate the lines of the file as:</P><PRE class="screen">  command="program" TYPE KEY COMMENT
</PRE></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.serverconfig.svnserve.sshtricks.fixedcmd"></A>Controlling the invoked command</H4></DIV></DIV></DIV><P>Because we can specify the executed server-side command,
          it's easy to name a specific <SPAN class="command"><STRONG>svnserve</STRONG></SPAN>
          binary to run and to pass it extra arguments:</P><PRE class="screen">  command="/path/to/svnserve -t -r /virtual/root" TYPE KEY COMMENT
</PRE><P>In this example, <CODE class="filename">/path/to/svnserve</CODE>
          might be a custom wrapper script
          around <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> which sets the umask (see
          <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.multimethod" title="Supporting Multiple Repository Access Methods">the section called âSupporting Multiple Repository Access Methodsâ</A>.)  It also
          shows how to anchor <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> in a virtual
          root directory, just as one often does when
          running <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> as a daemon process.
          This might be done either to restrict access to parts of the
          system, or simply to relieve the user of having to type an
          absolute path in the <CODE class="literal">svn+ssh://</CODE>
          URL.</P><P>It's also possible to have multiple users share a single
          account.  Instead of creating a separate system account for
          each user, generate a public/private key pair for each
          person.  Then place each public key into
          the <CODE class="filename">authorized_users</CODE> file, one per
          line, and use the <CODE class="option">--tunnel-user</CODE>
          option:</P><PRE class="screen">  command="svnserve -t --tunnel-user=harry" TYPE1 KEY1 harry@example.com
  command="svnserve -t --tunnel-user=sally" TYPE2 KEY2 sally@example.com
</PRE><P>This example allows both Harry and Sally to connect to
          the same account via public key authentication.  Each of
          them has a custom command that will be executed;
          the <CODE class="option">--tunnel-user</CODE> option 
          tells <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> to assume that the named
          argument is the authenticated user.  Without
          <CODE class="option">--tunnel-user</CODE>, it would appear as though
          all commits were coming from the one shared system
          account.</P><P>A final word of caution: giving a user access to the
          server via public-key in a shared account might still allow
          other forms of SSH access, even if you've set
          the <CODE class="literal">command</CODE> value
          in <CODE class="filename">authorized_keys</CODE>.  For example, the
          user may still get shell access through SSH or be able to
          perform X11 or general port forwarding through your server.
          To give the user as little permission as possible, you may
          want to specify a number of restrictive options immediately
          after the <CODE class="literal">command</CODE>:</P><PRE class="screen">  command="svnserve -t --tunnel-user=harry",no-port-forwarding,no-agent-forw
arding,no-X11-forwarding,no-pty TYPE1 KEY1 harry@example.com
</PRE><P>Note that this all must be on one lineâtruly on
          one lineâsince SSH <CODE class="filename">authorized_keys</CODE> 
          files do not even allow the conventional backslash character
          (<CODE class="literal">\</CODE>) for line continuation.  The only
          reason we've shown it with a line break is to fit it on
          the physical page of a book.</P></DIV></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.serverconfig.httpd"></A>httpd, the Apache HTTP Server</H2></DIV></DIV></DIV><P>The Apache HTTP Server is a â<SPAN class="quote">heavy-duty</SPAN>â
      network server that Subversion can leverage.  Via a custom
      module, <SPAN class="command"><STRONG>httpd</STRONG></SPAN> makes Subversion repositories
      available to clients via the WebDAV/DeltaV protocol, which is an
      extension to HTTP 1.1 (see <A class="ulink" href="http://www.webdav.org/" target="_top">http://www.webdav.org/</A>
      for more information).  This protocol takes the ubiquitous HTTP
      protocol that is the core of the World Wide Web, and adds
      writingâspecifically, versioned
      writingâcapabilities.  The result is a standardized,
      robust system that is conveniently packaged as part of the
      Apache 2.0 software, supported by numerous operating systems
      and third-party products, and doesn't require network
      administrators to open up yet another custom port.
      <SUP>[<A id="id545312" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id545312" class="footnote">44</A>]</SUP>
      While an Apache-Subversion server has more features than
      <SPAN class="command"><STRONG>svnserve</STRONG></SPAN>, it's also a bit more difficult
      to set up.  With flexibility often comes more complexity.</P><P>Much of the following discussion includes references to
      Apache configuration directives.  While some examples are given
      of the use of these directives, describing them in full is
      outside the scope of this chapter.  The Apache team maintains
      excellent documentation, publicly available on their web site at
      <A class="ulink" href="http://httpd.apache.org/" target="_top">http://httpd.apache.org</A>.  For example, a general
      reference for the configuration directives is located at
      <A class="ulink" href="http://httpd.apache.org/docs-2.0/mod/directives.html" target="_top">       http://httpd.apache.org/docs-2.0/mod/directives.html</A>.</P><P>Also, as you make changes to your Apache setup, it is likely
      that somewhere along the way a mistake will be made.  If you are
      not already familiar with Apache's logging subsystem, you should
      become aware of it.  In your <CODE class="filename">httpd.conf</CODE>
      file are directives that specify the on-disk locations of the
      access and error logs generated by Apache (the
      <CODE class="literal">CustomLog</CODE> and <CODE class="literal">ErrorLog</CODE>
      directives, respectively).
      Subversion's <SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN> uses Apache's error
      logging interface as well.  You can always browse the contents
      of those files for information that might reveal the source of a
      problem that is not clearly noticeable otherwise.</P><DIV class="sidebar"><P class="title"><B>Why Apache 2?</B></P><P>If you're a system administrator, it's very likely that
        you're already running the Apache web server and have some
        prior experience with it.  At the time of this writing, Apache 1.3
        is the more popular version of Apache.  The world has
        been somewhat slow to upgrade to the Apache 2.x series for
        various reasons: some people fear change, especially changing
        something as critical as a web server.  Other people depend on
        plug-in modules that work only against the Apache 1.3 API, and
        they are waiting for a 2.x port.  Whatever the reason, many
        people begin to worry when they first discover that
        Subversion's Apache module is written specifically for the
        Apache 2 API.</P><P>The proper response to this problem is: don't worry about
        it.  It's easy to run Apache 1.3 and Apache 2 side by side;
        simply install them to separate places and use Apache 2 as a
        dedicated Subversion server that runs on a port other than 80.
        Clients can access the repository by placing the port number
        into the URL:</P><PRE class="screen">$ svn checkout http://host.example.com:7382/repos/project
</PRE></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.serverconfig.httpd.prereqs"></A>Prerequisites</H3></DIV></DIV></DIV><P>To network your repository over HTTP, you basically need
        four components, available in two packages.  You'll need
        Apache <SPAN class="command"><STRONG>httpd</STRONG></SPAN> 2.0, the
        <SPAN class="command"><STRONG>mod_dav</STRONG></SPAN> DAV module that comes with it,
        Subversion, and the <SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN>
        filesystem provider module distributed with Subversion.
        Once you have all of those components, the process of
        networking your repository is as simple as:</P><DIV class="itemizedlist"><UL type="disc"><LI><P>Getting httpd 2.0 up and running with
            the <SPAN class="command"><STRONG>mod_dav</STRONG></SPAN> module</P></LI><LI><P>Installing the <SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN> backend
            to <SPAN class="command"><STRONG>mod_dav</STRONG></SPAN>, which uses Subversion's
            libraries to access the repository</P></LI><LI><P>Configuring your <CODE class="filename">httpd.conf</CODE>
            file to export (or expose) the repository</P></LI></UL></DIV><P>You can accomplish the first two items either by
        compiling <SPAN class="command"><STRONG>httpd</STRONG></SPAN> and Subversion from
        source code or by installing prebuilt binary packages of
        them on your system.  For the most up-to-date information on
        how to compile Subversion for use with the Apache HTTP Server,
        as well as how to compile and configure Apache itself for
        this purpose, see the <CODE class="filename">INSTALL</CODE> file in
        the top level of the Subversion source code tree.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.serverconfig.httpd.basic"></A>Basic Apache Configuration</H3></DIV></DIV></DIV><P>Once you have all the necessary components installed on
        your system, all that remains is the configuration of Apache
        via its <CODE class="filename">httpd.conf</CODE> file.  Instruct Apache
        to load the <SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN> module using the
        <CODE class="literal">LoadModule</CODE> directive.  This directive must
        precede any other Subversion-related configuration items.  If
        your Apache was installed using the default layout, your
        <SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN> module should have been
        installed in the <CODE class="filename">modules</CODE> subdirectory of
        the Apache install location (often
        <CODE class="filename">/usr/local/apache2</CODE>).  The
        <CODE class="literal">LoadModule</CODE> directive has a simple syntax,
        mapping a named module to the location of a shared library on
        disk:</P><PRE class="screen">LoadModule dav_svn_module     modules/mod_dav_svn.so
</PRE><P>Note that if <SPAN class="command"><STRONG>mod_dav</STRONG></SPAN> was compiled as a
        shared object (instead of statically linked directly to the
        <SPAN class="command"><STRONG>httpd</STRONG></SPAN> binary), you'll need a similar
        <CODE class="literal">LoadModule</CODE> statement for it, too.  Be sure
        that it comes before the <SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN> line:</P><PRE class="screen">LoadModule dav_module         modules/mod_dav.so
LoadModule dav_svn_module     modules/mod_dav_svn.so
</PRE><P>At a later location in your configuration file, you now
        need to tell Apache where you keep your Subversion repository
        (or repositories).  The <CODE class="literal">Location</CODE> directive
        has an XML-like notation, starting with an opening tag and
        ending with a closing tag, with various other configuration
        directives in the middle.  The purpose of the
        <CODE class="literal">Location</CODE> directive is to instruct Apache to
        do something special when handling requests that are directed
        at a given URL or one of its children.  In the case of
        Subversion, you want Apache to simply hand off support for
        URLs that point at versioned resources to the DAV layer.  You
        can instruct Apache to delegate the handling of all URLs whose
        path portions (the part of the URL that follows the server's
        name and the optional port number) begin with
        <CODE class="filename">/repos/</CODE> to a DAV provider whose
        repository is located at
        <CODE class="filename">/var/svn/repository</CODE> using the
        following <CODE class="filename">httpd.conf</CODE> syntax:</P><PRE class="screen">&lt;Location /repos&gt;
  DAV svn
  SVNPath /var/svn/repository
&lt;/Location&gt;
</PRE><P>If you plan to support multiple Subversion repositories
        that will reside in the same parent directory on your local
        disk, you can use an alternative
        directiveâ<CODE class="literal">SVNParentPath</CODE>âto
        indicate that common parent directory.  For example, if you
        know you will be creating multiple Subversion repositories in
        a directory <CODE class="filename">/var/svn</CODE> that would be
        accessed via URLs such as
        <CODE class="uri">http://my.server.com/svn/repos1</CODE>,
        <CODE class="uri">http://my.server.com/svn/repos2</CODE>, and so on, you
        could use the <CODE class="filename">httpd.conf</CODE> configuration
        syntax in the following example:</P><PRE class="screen">&lt;Location /svn&gt;
  DAV svn

  # any "/svn/foo" URL will map to a repository /var/svn/foo
  SVNParentPath /var/svn
&lt;/Location&gt;
</PRE><P>Using the previous syntax, Apache will delegate the
        handling of all URLs whose path portions begin with
        <CODE class="filename">/svn/</CODE> to the Subversion DAV provider,
        which will then assume that any items in the directory
        specified by the <CODE class="literal">SVNParentPath</CODE> directive
        are actually Subversion repositories.  This is a particularly
        convenient syntax in that, unlike the use of the
        <CODE class="literal">SVNPath</CODE> directive, you don't have to
        restart Apache to create and network new repositories.</P><P>Be sure that when you define your new
        <CODE class="literal">Location</CODE>, it doesn't overlap with other
        exported locations.  For example, if your main
        <CODE class="literal">DocumentRoot</CODE> is exported to
        <CODE class="filename">/www</CODE>, do not export a Subversion
        repository in <CODE class="literal">&lt;Location /www/repos&gt;</CODE>.
        If a request comes in for the URI
        <CODE class="filename">/www/repos/foo.c</CODE>, Apache won't know
        whether to look for a file <CODE class="filename">repos/foo.c</CODE> in
        the <CODE class="literal">DocumentRoot</CODE>, or whether to delegate
        <SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN> to return
        <CODE class="filename">foo.c</CODE> from the Subversion repository.
        The result is often an error from the server of the form
        <CODE class="literal">301 Moved Permanently</CODE>.</P><DIV class="sidebar"><P class="title"><B>Server Names and the COPY Request</B></P><P>Subversion makes use of the <CODE class="literal">COPY</CODE>
          request type to perform server-side copies of files and
          directories.  As part of the sanity checking done by the
          Apache modules, the source of the copy is expected to be
          located on the same machine as the destination of the copy.
          To satisfy this requirement, you might need to
          tell <SPAN class="command"><STRONG>mod_dav</STRONG></SPAN> the name you use as the
          hostname of your server.  Generally, you can use
          the <CODE class="literal">ServerName</CODE> directive in
          <CODE class="filename">httpd.conf</CODE> to accomplish this.</P><PRE class="screen">ServerName svn.example.com
</PRE><P>If you are using Apache's virtual hosting support via
          the <CODE class="literal">NameVirtualHost</CODE> directive, you may
          need to use the <CODE class="literal">ServerAlias</CODE> directive to
          specify additional names by which your server is known.
          Again, refer to the Apache documentation for full
          details.</P></DIV><P>At this stage, you should strongly consider the question
        of permissions.  If you've been running Apache for some time
        now as your regular web server, you probably already have a
        collection of contentâweb pages, scripts, and such.
        These items have already been configured with a set of
        permissions that allows them to work with Apache, or more
        appropriately, that allows Apache to work with those files.
        Apache, when used as a Subversion server, will also need the
        correct permissions to read and write to your Subversion
        repository.</P><P>You will need to determine a permission system setup that
        satisfies Subversion's requirements without messing up any
        previously existing web page or script installations.  This
        might mean changing the permissions on your Subversion
        repository to match those in use by other things that Apache
        serves for you, or it could mean using the
        <CODE class="literal">User</CODE> and <CODE class="literal">Group</CODE>
        directives in <CODE class="filename">httpd.conf</CODE> to specify that
        Apache should run as the user and group that owns your
        Subversion repository.  There is no single correct way to set
        up your permissions, and each administrator will have
        different reasons for doing things a certain way.  Just be
        aware that permission-related problems are perhaps the most
        common oversight when configuring a Subversion repository for
        use with Apache.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.serverconfig.httpd.authn"></A>Authentication Options</H3></DIV></DIV></DIV><P>At this point, if you configured
        <CODE class="filename">httpd.conf</CODE> to contain something such as the
        following:</P><PRE class="screen">&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn
&lt;/Location&gt;
</PRE><P>your repository is â<SPAN class="quote">anonymously</SPAN>â
        accessible to the world.  Until you configure some
        authentication and authorization policies, the Subversion
        repositories that you make available via the
        <CODE class="literal">Location</CODE> directive will be generally
        accessible to everyone.  In other words:</P><DIV class="itemizedlist"><UL type="disc"><LI><P>Anyone can use a Subversion client to check out a
            working copy of a repository URL (or any of its
            subdirectories).</P></LI><LI><P>Anyone can interactively browse the repository's
            latest revision simply by pointing a web browser to
            the repository URL.</P></LI><LI><P>Anyone can commit to the repository.</P></LI></UL></DIV><P>Of course, you might have already set up
        a <CODE class="filename">pre-commit</CODE> hook script to prevent
        commits (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.create.hooks" title="Implementing Repository Hooks">the section called âImplementing Repository Hooksâ</A>).
        But as you read on, you'll see that it's also possible to use
        Apache's built-in methods to restrict access in specific
        ways.</P><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.serverconfig.httpd.authn.basic"></A>Setting up HTTP authentication</H4></DIV></DIV></DIV><P>The easiest way to authenticate a client is via the
          HTTP Basic authentication mechanism, which simply uses a
          username and password to verify that a user is who she says
          she is.  Apache provides an <SPAN class="command"><STRONG>htpasswd</STRONG></SPAN>
          utility for managing the list of acceptable usernames and
          passwords.  Let's grant commit access to
          Sally and Harry.  First, we need to add them to the password
          file:</P><PRE class="screen">$ ### First time: use -c to create the file
$ ### Use -m to use MD5 encryption of the password, which is more secure
$ htpasswd -cm /etc/svn-auth-file harry
New password: *****
Re-type new password: *****
Adding password for user harry
$ htpasswd -m /etc/svn-auth-file sally
New password: *******
Re-type new password: *******
Adding password for user sally
$
</PRE><P>Next, you need to add some more
          <CODE class="filename">httpd.conf</CODE> directives inside your
          <CODE class="literal">Location</CODE> block to tell Apache what to do
          with your new password file.  The
          <CODE class="literal">AuthType</CODE> directive specifies the type of
          authentication system to use.  In this case, we want to
          specify the <CODE class="literal">Basic</CODE> authentication system.
          <CODE class="literal">AuthName</CODE> is an arbitrary name that you
          give for the authentication domain.  Most browsers will
          display this name in the pop-up dialog box when the browser
          is querying the user for her name and password.  Finally,
          use the <CODE class="literal">AuthUserFile</CODE> directive to specify
          the location of the password file you created using
          <SPAN class="command"><STRONG>htpasswd</STRONG></SPAN>.</P><P>After adding these three directives, your
          <CODE class="literal">&lt;Location&gt;</CODE> block should look
          something like this:</P><PRE class="screen">&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn
  AuthType Basic
  AuthName "Subversion repository"
  AuthUserFile /etc/svn-auth-file
&lt;/Location&gt;
</PRE><P>This <CODE class="literal">&lt;Location&gt;</CODE> block is not
          yet complete, and it will not do anything useful.  It's
          merely telling Apache that whenever authorization is
          required, Apache should harvest a username and password from
          the Subversion client.  What's missing here, however, are
          directives that tell Apache <SPAN class="emphasis"><EM>which</EM></SPAN> sorts
          of client requests require authorization.  Wherever
          authorization is required, Apache will demand authentication
          as well.  The simplest thing to do is protect all requests.
          Adding <CODE class="literal">Require valid-user</CODE> tells Apache
          that all requests require an authenticated user:</P><PRE class="screen">&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn
  AuthType Basic
  AuthName "Subversion repository"
  AuthUserFile /etc/svn-auth-file
  Require valid-user
&lt;/Location&gt;
</PRE><P>Be sure to read the next section (<A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.authz" title="Authorization Options">the section called âAuthorization Optionsâ</A>) for more detail on the
          <CODE class="literal">Require</CODE> directive and other ways to set
          authorization policies.</P><P>One word of warning: HTTP Basic Auth passwords pass in
          very nearly plain text over the network, and thus are
          extremely insecure.</P><P>Another option is to not use Basic authentication, but to
          use Digest authentication instead.  Digest authentication
          allows the server to verify the client's
          identity <SPAN class="emphasis"><EM>without</EM></SPAN> passing the plain-text
          password over the network.  Assuming that the client and
          server both know the user's password, they can verify that
          the password is the same by using it to apply a hashing
          function to a one-time bit of information.  The server sends
          a small random-ish string to the client; the client uses the
          user's password to hash the string; the server then looks to
          see whether the hashed value is what it expected.</P><P>Configuring Apache for Digest authentication is also
          fairly easy, and only a small variation on our prior
          example.  Be sure to consult Apache's documentation for full
          details.</P><PRE class="screen">&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn
  AuthType Digest
  AuthName "Subversion repository"
  AuthDigestDomain /svn/
  AuthUserFile /etc/svn-auth-file
  Require valid-user
&lt;/Location&gt;
</PRE><P>If you're looking for maximum security, public key
          cryptography is the best solution.  It may be best to use
          some sort of SSL encryption, so that clients authenticate
          via <CODE class="literal">https://</CODE> instead
          of <CODE class="literal">http://</CODE>; at a bare minimum, you can
          configure Apache to use a self-signed server certificate.
          <SUP>[<A id="id546187" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id546187" class="footnote">45</A>]</SUP>
          Consult Apache's documentation (and OpenSSL documentation)
          about how to do that.</P></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.serverconfig.httpd.authn.sslcerts"></A>SSL certificate management</H4></DIV></DIV></DIV><P>Businesses that need to expose their repositories for access
          outside the company firewall should be conscious of the
          possibility that unauthorized parties could be
          â<SPAN class="quote">sniffing</SPAN>â their network traffic.  SSL makes
          that kind of unwanted attention less likely to result in
          sensitive data leaks.</P><P>If a Subversion client is compiled to use OpenSSL,
          it gains the ability to speak to an Apache server via
          <CODE class="literal">https://</CODE> URLs.  The Neon library used by
          the Subversion client is not only able to verify server
          certificates, but can also supply client certificates when
          challenged.  When the client and server have exchanged SSL
          certificates and successfully authenticated one another, all
          further communication is encrypted via a session key.</P><P>It's beyond the scope of this book to describe how to
          generate client and server certificates and how to
          configure Apache to use them.  Many other books, including
          Apache's own documentation, describe this task.  But what we
          <SPAN class="emphasis"><EM>can</EM></SPAN> cover here is how to manage
          server and client certificates from an ordinary Subversion
          client.</P><P>When speaking to Apache via <CODE class="literal">https://</CODE>,
          a Subversion client can receive two different types of
          information:</P><DIV class="itemizedlist"><UL type="disc"><LI><P>A server certificate</P></LI><LI><P>A demand for a client certificate</P></LI></UL></DIV><P>If the client receives a server certificate, it needs to
          verify that it trusts the certificate: is the server really
          who it claims to be?  The OpenSSL library does this by
          examining the signer of the server certificate, or
          <EM class="firstterm">certificate authority</EM> (CA).  If
          OpenSSL is unable to automatically trust the CA, or if some
          other problem occurs (such as an expired certificate or
          hostname mismatch), the Subversion command-line client will
          ask you whether you want to trust the server certificate
          anyway:</P><PRE class="screen">$ svn list https://host.example.com/repos/project

Error validating server certificate for 'https://host.example.com:443':
 - The certificate is not issued by a trusted authority. Use the
   fingerprint to validate the certificate manually!
Certificate information:
 - Hostname: host.example.com
 - Valid: from Jan 30 19:23:56 2004 GMT until Jan 30 19:23:56 2006 GMT
 - Issuer: CA, example.com, Sometown, California, US
 - Fingerprint: 7d:e1:a9:34:33:39:ba:6a:e9:a5:c4:22:98:7b:76:5c:92:a0:9c:7b

(R)eject, accept (t)emporarily or accept (p)ermanently?
</PRE><P>This dialogue should look familiar; it's essentially the
          same question you've probably seen coming from your web
          browser (which is just another HTTP client like Subversion).
          If you choose the <CODE class="literal">(p)</CODE>ermanent option, the server certificate
          will be cached in your private runtime
          <CODE class="filename">auth/</CODE> area in just the same way your
          username and password are cached (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.netmodel.credcache" title="Client Credentials Caching">the section called âClient Credentials Cachingâ</A>).  If cached,
          Subversion will automatically trust this certificate
          in future negotiations.</P><P>Your runtime <CODE class="filename">servers</CODE> file also gives
          you the ability to make your Subversion client automatically
          trust specific CAs, either globally or on a per-host basis.
          Simply set the <CODE class="literal">ssl-authority-files</CODE>
          variable to a semicolon-separated list of PEM-encoded CA
          certificates:</P><PRE class="screen">[global]
ssl-authority-files = /path/to/CAcert1.pem;/path/to/CAcert2.pem
</PRE><P>Many OpenSSL installations also have a predefined set
          of â<SPAN class="quote">default</SPAN>â CAs that are nearly universally
          trusted.  To make the Subversion client automatically trust
          these standard authorities, set the
          <CODE class="literal">ssl-trust-default-ca</CODE> variable to
          <CODE class="literal">true</CODE>.</P><P>When talking to Apache, a Subversion client might also
          receive a challenge for a client certificate.  Apache is
          asking the client to identify itself: is the client really
          who it says it is?  If all goes correctly, the Subversion
          client sends back a private certificate signed by a CA that
          Apache trusts.  A client certificate is usually stored on
          disk in encrypted format, protected by a local password.
          When Subversion receives this challenge, it will ask you for
          a path to the certificate and the password that
          protects it:</P><PRE class="screen">$ svn list https://host.example.com/repos/project

Authentication realm: https://host.example.com:443
Client certificate filename: /path/to/my/cert.p12
Passphrase for '/path/to/my/cert.p12':  ********
â¦
</PRE><P>Notice that the client certificate is a
          â<SPAN class="quote">p12</SPAN>â file.  To use a client certificate with
          Subversion, it must be in PKCS#12 format, which is a
          portable standard.  Most web browsers are already able to
          import and export certificates in that format.   Another
          option is to use the OpenSSL command-line tools to convert
          existing certificates into PKCS#12.</P><P>Again, the runtime <CODE class="filename">servers</CODE> file
          allows you to automate this challenge on a per-host basis.
          Either or both pieces of information can be described in
          runtime variables:</P><PRE class="screen">[groups]
examplehost = host.example.com

[examplehost]
ssl-client-cert-file = /path/to/my/cert.p12
ssl-client-cert-password = somepassword
</PRE><P>Once you've set the
          <CODE class="literal">ssl-client-cert-file</CODE> and
          <CODE class="literal">ssl-client-cert-password</CODE> variables, the
          Subversion client can automatically respond to a client
          certificate challenge without prompting you.
          <SUP>[<A id="id546423" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id546423" class="footnote">46</A>]</SUP>
        </P></DIV></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.serverconfig.httpd.authz"></A>Authorization Options</H3></DIV></DIV></DIV><P>At this point, you've configured authentication, but not
        authorization.  Apache is able to challenge clients and
        confirm identities, but it has not been told how to allow or
        restrict access to the clients bearing those identities.  This
        section describes two strategies for controlling access to
        your repositories.</P><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.serverconfig.httpd.authz.blanket"></A>Blanket access control</H4></DIV></DIV></DIV><P>The simplest form of access control is to authorize
          certain users for either read-only access to a repository or
          read/write access to a repository.</P><P>You can restrict access on all repository operations by
          adding the <CODE class="literal">Require valid-user</CODE> directive
          to your <CODE class="literal">&lt;Location&gt;</CODE> block.  Using
          our previous example, this would mean that only clients that
          claimed to be either <CODE class="literal">harry</CODE> or
          <CODE class="literal">sally</CODE> and that provided the correct
          password for their respective username would be allowed to
          do anything with the Subversion repository:</P><PRE class="screen">&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn

  # how to authenticate a user
  AuthType Basic
  AuthName "Subversion repository"
  AuthUserFile /path/to/users/file

  # only authenticated users may access the repository
  Require valid-user
&lt;/Location&gt;
</PRE><P>Sometimes you don't need to run such a tight ship.  For
          example, Subversion's own source code repository at
          <A class="ulink" href="http://svn.collab.net/repos/svn" target="_top">http://svn.collab.net/repos/svn</A> allows anyone
          in the world to perform read-only repository tasks (such as
          checking out working copies and browsing the repository with
          a web browser), but restricts all write operations to
          authenticated users.  To do this type of selective
          restriction, you can use the <CODE class="literal">Limit</CODE> and
          <CODE class="literal">LimitExcept</CODE> configuration directives.
          Like the <CODE class="literal">Location</CODE> directive, these blocks
          have starting and ending tags, and you would nest them
          inside your <CODE class="literal">&lt;Location&gt;</CODE>
          block.</P><P>The parameters present on the <CODE class="literal">Limit</CODE>
          and <CODE class="literal">LimitExcept</CODE> directives are HTTP
          request types that are affected by that block.  For example,
          if you wanted to disallow all access to your repository
          except the currently supported read-only operations, you
          would use the <CODE class="literal">LimitExcept</CODE> directive,
          passing the <CODE class="literal">GET</CODE>,
          <CODE class="literal">PROPFIND</CODE>, <CODE class="literal">OPTIONS</CODE>, and
          <CODE class="literal">REPORT</CODE> request type parameters.  Then the
          previously mentioned <CODE class="literal">Require valid-user</CODE>
          directive would be placed inside the
          <CODE class="literal">&lt;LimitExcept&gt;</CODE> block instead of just
          inside the <CODE class="literal">&lt;Location&gt;</CODE> block.</P><PRE class="screen">&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn

  # how to authenticate a user
  AuthType Basic
  AuthName "Subversion repository"
  AuthUserFile /path/to/users/file

  # For any operations other than these, require an authenticated user.
  &lt;LimitExcept GET PROPFIND OPTIONS REPORT&gt;
    Require valid-user
  &lt;/LimitExcept&gt;
&lt;/Location&gt;
</PRE><P>These are only a few simple examples.  For more in-depth
          information about Apache access control and the
          <CODE class="literal">Require</CODE> directive, take a look at the
          <CODE class="literal">Security</CODE> section of the Apache
          documentation's tutorials collection at <A class="ulink" href="http://httpd.apache.org/docs-2.0/misc/tutorials.html" target="_top">http://httpd.apache.org/docs-2.0/misc/tutorials.html</A>.</P></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.serverconfig.httpd.authz.perdir"></A>Per-directory access control</H4></DIV></DIV></DIV><P>It's possible to set up finer-grained permissions using
          a second Apache httpd module,
          <SPAN class="command"><STRONG>mod_authz_svn</STRONG></SPAN>.  This module grabs the
          various opaque URLs passing from client to server, asks
          <SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN> to decode them, and then
          possibly vetoes requests based on access policies defined in
          a configuration file.</P><P>If you've built Subversion from source code,
          <SPAN class="command"><STRONG>mod_authz_svn</STRONG></SPAN> is automatically built
          and installed alongside <SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN>.
          Many binary distributions install it automatically as well.
          To verify that it's installed correctly, make sure it comes
          right after <SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN>'s
          <CODE class="literal">LoadModule</CODE> directive in
          <CODE class="filename">httpd.conf</CODE>:</P><PRE class="screen">LoadModule dav_module         modules/mod_dav.so
LoadModule dav_svn_module     modules/mod_dav_svn.so
LoadModule authz_svn_module   modules/mod_authz_svn.so
</PRE><P>To activate this module, you need to configure your
          <CODE class="literal">Location</CODE> block to use the
          <CODE class="literal">AuthzSVNAccessFile</CODE> directive, which
          specifies a file containing the permissions policy for paths
          within your repositories.  (In a moment, we'll discuss the
          format of that file.)</P><P>Apache is flexible, so you have the option to configure
          your block in one of three general patterns.  To begin,
          choose one of these basic configuration patterns.  (The
          following examples are very simple; look at Apache's own
          documentation for much more detail on Apache authentication
          and authorization options.)</P><P>The simplest block is to allow open access to everyone.
          In this scenario, Apache never sends authentication
          challenges, so all users are treated as
          â<SPAN class="quote">anonymous.</SPAN>â (See
          <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.authz.perdir.ex-1" title="Example&nbsp;6.1.&nbsp;A sample configuration for anonymous access">Example&nbsp;6.1, âA sample configuration for anonymous accessâ</A>.)</P><DIV class="example"><A id="svn.serverconfig.httpd.authz.perdir.ex-1"></A><P class="title"><B>Example&nbsp;6.1.&nbsp;A sample configuration for anonymous access</B></P><DIV class="example-contents"><PRE class="programlisting">&lt;Location /repos&gt;
  DAV svn
  SVNParentPath /var/svn

  # our access control policy
  AuthzSVNAccessFile /path/to/access/file
&lt;/Location&gt;
          </PRE></DIV></DIV><BR class="example-break"><P>On the opposite end of the paranoia scale, you can
          configure your block to demand authentication from everyone.
          All clients must supply credentials to identify themselves.
          Your block unconditionally requires authentication via the
          <CODE class="literal">Require valid-user</CODE> directive, and it
          defines a means to authenticate.  (See
          <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.authz.perdir.ex-2" title="Example&nbsp;6.2.&nbsp;A sample configuration for authenticated access">Example&nbsp;6.2, âA sample configuration for authenticated accessâ</A>.)</P><DIV class="example"><A id="svn.serverconfig.httpd.authz.perdir.ex-2"></A><P class="title"><B>Example&nbsp;6.2.&nbsp;A sample configuration for authenticated access</B></P><DIV class="example-contents"><PRE class="programlisting">&lt;Location /repos&gt;
  DAV svn
  SVNParentPath /var/svn

  # our access control policy
  AuthzSVNAccessFile /path/to/access/file

  # only authenticated users may access the repository
  Require valid-user

  # how to authenticate a user
  AuthType Basic
  AuthName "Subversion repository"
  AuthUserFile /path/to/users/file
&lt;/Location&gt;
          </PRE></DIV></DIV><BR class="example-break"><P>A third very popular pattern is to allow a combination
          of authenticated and anonymous access.  For example, many
          administrators want to allow anonymous users to read certain
          repository directories, but want only authenticated users to
          read (or write) more sensitive areas.  In this setup, all
          users start out accessing the repository anonymously.  If
          your access control policy demands a real username at any
          point, Apache will demand authentication from the client.
          To do this, use both the <CODE class="literal">Satisfy Any</CODE>
          and <CODE class="literal">Require valid-user</CODE> directives
          together.  (See
          <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.authz.perdir.ex-3" title="Example&nbsp;6.3.&nbsp;A sample configuration for mixed authenticated/anonymous access">Example&nbsp;6.3, âA sample configuration for mixed
            authenticated/anonymous accessâ</A>.)</P><DIV class="example"><A id="svn.serverconfig.httpd.authz.perdir.ex-3"></A><P class="title"><B>Example&nbsp;6.3.&nbsp;A sample configuration for mixed
            authenticated/anonymous access</B></P><DIV class="example-contents"><PRE class="programlisting">&lt;Location /repos&gt;
  DAV svn
  SVNParentPath /var/svn

  # our access control policy
  AuthzSVNAccessFile /path/to/access/file

  # try anonymous access first, resort to real
  # authentication if necessary.
  Satisfy Any
  Require valid-user

  # how to authenticate a user
  AuthType Basic
  AuthName "Subversion repository"
  AuthUserFile /path/to/users/file
&lt;/Location&gt;
          </PRE></DIV></DIV><BR class="example-break"><P>Once you've settled on one of these three
          basic <CODE class="filename">httpd.conf</CODE> templates, you need to
          create your file containing access rules for particular
          paths within the repository.  We describe this later in
          this chapter, in
          <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.pathbasedauthz" title="Path-Based Authorization">the section called âPath-Based Authorizationâ</A>.</P></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.serverconfig.httpd.authz.pathauthzoff"></A>Disabling path-based checks</H4></DIV></DIV></DIV><P>The <SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN> module goes through a
          lot of work to make sure that data you've marked
          â<SPAN class="quote">unreadable</SPAN>â doesn't get accidentally leaked.
          This means it needs to closely monitor all of the paths
          and file-contents returned by commands such as <SPAN class="command"><STRONG>svn
          checkout</STRONG></SPAN> and <SPAN class="command"><STRONG>svn update</STRONG></SPAN>.
          If these commands encounter a path that isn't
          readable according to some authorization policy, the
          path is typically omitted altogether.  In the case of
          history or rename tracingâfor example, running a command such
          as <STRONG class="userinput"><CODE>svn cat -r OLD foo.c</CODE></STRONG> on a file that
          was renamed long agoâthe rename tracking will simply
          halt if one of the object's former names is determined to be
          read-restricted.</P><P>All of this path checking can sometimes be quite
          expensive, especially in the case of <SPAN class="command"><STRONG>svn
          log</STRONG></SPAN>.  When retrieving a list of revisions, the
          server looks at every changed path in each revision and
          checks it for readability.  If an unreadable path is
          discovered, it's omitted from the list of the
          revision's changed paths (normally seen with
          the <CODE class="option">--verbose</CODE> option), and the whole log
          message is suppressed.  Needless to say, this can be
          time-consuming on revisions that affect a large number of
          files.  This is the cost of security: even if you haven't
          configured a module such as
          <SPAN class="command"><STRONG>mod_authz_svn</STRONG></SPAN> at all, the
          <SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN> module is still asking Apache
          <SPAN class="command"><STRONG>httpd</STRONG></SPAN> to run authorization checks on
          every path.  The <SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN> module has
          no idea what authorization modules have been installed, so
          all it can do is ask Apache to invoke whatever might be
          present.</P><P>On the other hand, there's also an escape hatch of
          sorts, which allows you to trade security features for
          speed.  If you're not enforcing any sort of per-directory
          authorization (i.e., not using
          <SPAN class="command"><STRONG>mod_authz_svn</STRONG></SPAN> or similar module),
          you can disable all of this path checking.  In your
          <CODE class="filename">httpd.conf</CODE> file, use the
          <CODE class="literal">SVNPathAuthz</CODE> directive as shown in
          <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.authz.pathauthzoff.ex-1" title="Example&nbsp;6.4.&nbsp;Disabling path checks altogether">Example&nbsp;6.4, âDisabling path checks altogetherâ</A>.
        </P><DIV class="example"><A id="svn.serverconfig.httpd.authz.pathauthzoff.ex-1"></A><P class="title"><B>Example&nbsp;6.4.&nbsp;Disabling path checks altogether</B></P><DIV class="example-contents"><PRE class="programlisting">&lt;Location /repos&gt;
  DAV svn
  SVNParentPath /var/svn

  SVNPathAuthz off
&lt;/Location&gt;
          </PRE></DIV></DIV><BR class="example-break"><P>The <CODE class="literal">SVNPathAuthz</CODE> directive
          is â<SPAN class="quote">on</SPAN>â by default.  When
          set to â<SPAN class="quote">off,</SPAN>â all path-based authorization
          checking is disabled;
          <SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN> stops invoking authorization
          checks on every path it discovers.</P></DIV></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.serverconfig.httpd.extra"></A>Extra Goodies</H3></DIV></DIV></DIV><P>We've covered most of the authentication and authorization
        options for Apache and <SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN>.  But
        there are a few other nice features that Apache
        provides.</P><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.serverconfig.httpd.extra.browsing"></A>Repository browsing</H4></DIV></DIV></DIV><P>One of the most useful benefits of an Apache/WebDAV
          configuration for your Subversion repository is that the
          youngest revisions of your versioned files and directories
          are immediately available for viewing via a regular web
          browser.  Since Subversion uses URLs to identify versioned
          resources, those URLs used for HTTP-based repository access
          can be typed directly into a web browser.  Your browser will
          issue an HTTP <CODE class="literal">GET</CODE> request for that URL;
          based on whether that URL represents a versioned directory
          or file, <SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN> will respond with a
          directory listing or with file contents.</P><P>Since the URLs do not contain any information about
          which version of the resource you wish to
          see, <SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN> will always answer with
          the youngest version.  This functionality has the wonderful
          side effect that you can pass around Subversion URLs to your
          peers as references to documents, and those URLs will always
          point at the latest manifestation of that document.  Of
          course, you can even use the URLs as hyperlinks from other
          web sites, too.</P><DIV class="sidebar"><P class="title"><B>Can I View Older Revisions?</B></P><P>With an ordinary web browser?  In one word: nope.  At
            least, not with <SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN> as your
            only tool.</P><P>Your web browser speaks ordinary HTTP only.  That
            means it knows only how to GET public URLs, which
            represent the latest versions of files and directories.
            According to the WebDAV/DeltaV specification, each server
            defines a private URL syntax for older versions of
            resources, and that syntax is opaque to clients.  To find
            an older version of a file, a client must follow a
            specific procedure to â<SPAN class="quote">discover</SPAN>â the proper
            URL; the procedure involves issuing a series of WebDAV
            PROPFIND requests and understanding DeltaV concepts.  This
            is something your web browser simply can't do.</P><P>So, to answer the question, one obvious way to see
            older revisions of files and directories is by passing the
            <CODE class="option">--revision</CODE> (<CODE class="option">-r</CODE>) argument
            to the <SPAN class="command"><STRONG>svn list</STRONG></SPAN> and <SPAN class="command"><STRONG>svn
            cat</STRONG></SPAN> commands.  To browse old revisions with your
            web browser, however, you can use third-party software.  A
            good example of this is ViewVC (<A class="ulink" href="http://viewvc.tigris.org/" target="_top">http://viewvc.tigris.org/</A>).  ViewVC was originally
            written to display CVS repositories through the Web,
            <SUP>[<A id="id542274" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id542274" class="footnote">47</A>]</SUP>
            and the latest releases are able to understand Subversion
            repositories as well.</P></DIV><DIV class="sect4" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H5 class="title"><A id="svn.serverconfig.httpd.extra.browsing.mimetype"></A>Proper MIME type</H5></DIV></DIV></DIV><P>When browsing a Subversion repository, the web browser
            gets a clue about how to render a file's contents by
            looking at the <CODE class="literal">Content-Type:</CODE> header
            returned in Apache's response to the
            HTTP <CODE class="literal">GET</CODE> request.  The value of this
            header is some sort of MIME type.  By default, Apache will
            tell the web browsers that all repository files are of
            the â<SPAN class="quote">default</SPAN>â MIME type,
            typically <CODE class="literal">text/plain</CODE>.  This can be
            frustrating, however, if a user wishes repository files to
            render as something more meaningfulâfor example,
            it might be nice to have a <CODE class="filename">foo.html</CODE> file
            in the repository actually render as HTML when
            browsing.</P><P>To make this happen, you need only to make sure that
            your files have the
            proper <CODE class="literal">svn:mime-type</CODE> set.  We discuss this 
            in more detail in
            <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.special.mime-type" title="File Content Type">the section called âFile Content Typeâ</A>,
            and you can even configure your client to automatically
            attach proper <CODE class="literal">svn:mime-type</CODE> properties
            to files entering the repository for the first time; see
            <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.auto" title="Automatic Property Setting">the section called âAutomatic Property Settingâ</A>.</P><P>So in our example, if one were to set
          the <CODE class="literal">svn:mime-type</CODE> property
          to <CODE class="literal">text/html</CODE> on
          file <CODE class="filename">foo.html</CODE>, Apache would
          properly tell your web browser to render the file as HTML.
          One could also attach proper <CODE class="literal">image/*</CODE>
          MIME-type properties to image files and ultimately get an
          entire web site to be viewable directly from a repository!
          There's generally no problem with this, as long as the web
          site doesn't contain any dynamically generated
          content.</P></DIV><DIV class="sect4" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H5 class="title"><A id="svn.serverconfig.httpd.extra.browsing.xslt"></A>Customizing the look</H5></DIV></DIV></DIV><P>You generally will get more use out of URLs to
            versioned filesâafter all, that's where the
            interesting content tends to lie.  But you might have
            occasion to browse a Subversion directory listing, where
            you'll quickly note that the generated HTML used to
            display that listing is very basic, and certainly not
            intended to be aesthetically pleasing (or even
            interesting).  To enable customization of these directory
            displays, Subversion provides an XML index feature.  A
            single <CODE class="literal">SVNIndexXSLT</CODE> directive in your
            repository's <CODE class="literal">Location</CODE> block of
            <CODE class="filename">httpd.conf</CODE> will
            instruct <SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN> to generate XML
            output when displaying a directory listing, and to
            reference the XSLT stylesheet of your choice:</P><PRE class="screen">&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn
  SVNIndexXSLT "/svnindex.xsl"
  â¦
&lt;/Location&gt;
</PRE><P>Using the <CODE class="literal">SVNIndexXSLT</CODE> directive and
           a creative XSLT stylesheet, you can make your directory
           listings match the color schemes and imagery used in other
           parts of your web site.  Or, if you'd prefer, you can use
           the sample stylesheets provided in the Subversion source
           distribution's <CODE class="filename">tools/xslt/</CODE> directory.
           Keep in mind that the path provided to the
           <CODE class="literal">SVNIndexXSLT</CODE> directory is actually a URL
           pathâbrowsers need to be able to read your
           stylesheets to make use of them!</P></DIV><DIV class="sect4" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H5 class="title"><A id="svn.serverconfig.httpd.extra.browsing.reposlisting"></A>Listing repositories</H5></DIV></DIV></DIV><P>If you're serving a collection of repositories from a
            single URL via the <CODE class="literal">SVNParentPath</CODE>
            directive, then it's also possible to have Apache display
            all available repositories to a web browser.  Just
            activate the <CODE class="literal">SVNListParentPath</CODE>
            directive:</P><PRE class="screen">&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn
  SVNListParentPath on
  â¦
&lt;/Location&gt;
</PRE><P>If a user now points her web browser to the
          URL <CODE class="literal">http://host.example.com/svn/</CODE>, she'll
          see a list of all Subversion repositories sitting
          in <CODE class="filename">/var/svn</CODE>.  Obviously, this can
          be a security problem, so this feature is turned off by
          default.</P></DIV></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.serverconfig.httpd.extra.logging"></A>Apache logging</H4></DIV></DIV></DIV><P>Because Apache is an HTTP server at heart, it contains
          fantastically flexible logging features.  It's beyond the
          scope of this book to discuss all of the ways logging can be
          configured, but we should point out that even the most
          generic <CODE class="filename">httpd.conf</CODE> file will cause
          Apache to produce two logs:
          <CODE class="filename">error_log</CODE>
          and <CODE class="filename">access_log</CODE>.  These logs may appear
          in different places, but are typically created in the
          logging area of your Apache installation.  (On Unix, they
          often live
          in <CODE class="filename">/usr/local/apache2/logs/</CODE>.)</P><P>The <CODE class="filename">error_log</CODE> describes any internal
          errors that Apache runs into as it works.
          The <CODE class="filename">access_log</CODE> file records every
          incoming HTTP request received by Apache.  This makes it
          easy to see, for example, which IP addresses Subversion
          clients are coming from, how often particular clients use
          the server, which users are authenticating properly, and
          which requests succeed or fail.</P><P>Unfortunately, because HTTP is a stateless protocol,
          even the simplest Subversion client operation generates
          multiple network requests.  It's very difficult to look at
          the <CODE class="filename">access_log</CODE> and deduce what the
          client was doingâmost operations look like a series
          of cryptic <CODE class="literal">PROPPATCH</CODE>, <CODE class="literal">GET</CODE>,
          <CODE class="literal">PUT</CODE>, and <CODE class="literal">REPORT</CODE>
          requests.  To make things worse, many client operations send
          nearly identical series of requests, so it's even harder to
          tell them apart.</P><P><SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN>, however, can come to
          your aid.  By activating an â<SPAN class="quote">operational
          logging</SPAN>â feature, you can
          ask <SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN> to create a separate log
          file describing what sort of high-level operations your
          clients are performing.</P><P>To do this, you need to make use of
          Apache's <CODE class="literal">CustomLog</CODE> directive (which is
          explained in more detail in Apache's own documentation).
          Be sure to invoke this
          directive <SPAN class="emphasis"><EM>outside</EM></SPAN> your
          Subversion <CODE class="literal">Location</CODE> block:</P><PRE class="screen">&lt;Location /svn&gt;
  DAV svn
  â¦
&lt;/Location&gt;

CustomLog logs/svn_logfile "%t %u %{SVN-ACTION}e" env=SVN-ACTION
</PRE><P>In this example, we're asking Apache to create a special
          logfile, <CODE class="filename">svn_logfile</CODE>, in the standard
          Apache <CODE class="filename">logs</CODE> directory.
          The <CODE class="literal">%t</CODE> and <CODE class="literal">%u</CODE>
          variables are replaced by the time and username of the
          request, respectively.  The really important parts are the
          two instances of <CODE class="literal">SVN-ACTION</CODE>.
          When Apache sees that variable, it substitutes the value of
          the <CODE class="literal">SVN-ACTION</CODE> environment variable,
          which is automatically set by <SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN>
          whenever it detects a high-level client action.</P><P>So, instead of having to interpret a
          traditional <CODE class="filename">access_log</CODE> like
          this:</P><PRE class="screen">[26/Jan/2007:22:25:29 -0600] "PROPFIND /svn/calc/!svn/vcc/default HTTP/1.1" 207 398
[26/Jan/2007:22:25:29 -0600] "PROPFIND /svn/calc/!svn/bln/59 HTTP/1.1" 207 449
[26/Jan/2007:22:25:29 -0600] "PROPFIND /svn/calc HTTP/1.1" 207 647
[26/Jan/2007:22:25:29 -0600] "REPORT /svn/calc/!svn/vcc/default HTTP/1.1" 200 607
[26/Jan/2007:22:25:31 -0600] "OPTIONS /svn/calc HTTP/1.1" 200 188
[26/Jan/2007:22:25:31 -0600] "MKACTIVITY /svn/calc/!svn/act/e6035ef7-5df0-4ac0-b811-4be7c823f998 HTTP/1.1" 201 227
â¦
</PRE><P>you can peruse a much more
          intelligible <CODE class="filename">svn_logfile</CODE> like
          this:</P><PRE class="screen">[26/Jan/2007:22:24:20 -0600] - get-dir /tags r1729 props
[26/Jan/2007:22:24:27 -0600] - update /trunk r1729 depth=infinity send-copyfrom-args
[26/Jan/2007:22:25:29 -0600] - status /trunk/foo r1729 depth=infinity
[26/Jan/2007:22:25:31 -0600] sally commit r1730
</PRE><P>For an exhaustive list of all actions logged, see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.mod_dav_svn.conf.logging" title="High-level logging">the section called âHigh-level loggingâ</A>.</P></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.serverconfig.httpd.extra.writethruproxy"></A>Write-through proxying</H4></DIV></DIV></DIV><P>One of the nice advantages of using Apache as a
          Subversion server is that it can be set up for simple
          replication.  For example, suppose that your team is
          distributed across four offices around the globe.  The
          Subversion repository can exist only in one of those
          offices, which means the other three offices will not enjoy
          accessing itâthey're likely to experience
          significantly slower traffic and response times when
          updating and committing code.  A powerful solution is to set
          up a system consisting of one <EM class="firstterm">master</EM>
          Apache server and several <EM class="firstterm">slave</EM>
          Apache servers.  If you place a slave server in each office,
          users can check out a working copy from whichever slave
          is closest to them.  All read requests go to their local
          slave.  Write requests get automatically routed to the
          single master server.  When the commit completes, the master
          then automatically â<SPAN class="quote">pushes</SPAN>â the new revision to
          each slave server using the <SPAN class="command"><STRONG>svnsync</STRONG></SPAN>
          replication tool.</P><P>This configuration creates a huge perceptual speed
          increase for your users, because Subversion client traffic
          is typically 80â90% read requests.  And if those
          requests are coming from a <SPAN class="emphasis"><EM>local</EM></SPAN>
          server, it's a huge win.</P><P>In this section, we'll walk you through a standard setup
          of this single-master/multiple-slave system.  However, keep
          in mind that your servers must be running at least Apache
          2.2.0 (with <SPAN class="command"><STRONG>mod_proxy</STRONG></SPAN> loaded) and
          Subversion 1.5 (<SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN>).</P><DIV class="sect4" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H5 class="title"><A id="svn.serverconfig.httpd.extra.writethruproxy.configure"></A>Configure the servers</H5></DIV></DIV></DIV><P>First, configure your master server's
            <CODE class="filename">httpd.conf</CODE> file in the usual way.
            Make the repository available at a certain URI location,
            and configure authentication and authorization however
            you'd like.  After that's done, configure each of your
            â<SPAN class="quote">slave</SPAN>â servers in the exact same way, but
            add the special <CODE class="literal">SVNMasterURI</CODE> directive
            to the block:</P><PRE class="screen">&lt;Location /svn&gt;
  DAV svn
  SVNPath /var/svn/repos
  SVNMasterURI http://master.example.com/svn
  â¦
&lt;/Location&gt;
</PRE><P>This new directive tells a slave server to redirect
            all write requests to the master.  (This is done
            automatically via Apache's <SPAN class="command"><STRONG>mod_proxy</STRONG></SPAN>
            module.)  Ordinary read requests, however, are still
            serviced by the slaves.  Be sure that your master and
            slave servers all have matching authentication and
            authorization configurations;  if they fall out of sync,
            it can lead to big headaches.</P><P>Next, we need to deal with the problem of infinite
            recursion.  With the current configuration, imagine what
            will happen when a Subversion client performs a commit to
            the master server.  After the commit completes, the server
            uses <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> to replicate the new
            revision to each slave.  But because
            <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> appears to be just another
            Subversion client performing a commit, the slave will
            immediately attempt to proxy the incoming write request
            back to the master!  Hilarity ensues.</P><P>The solution to this problem is to have the master
            push revisions to a different
            <CODE class="literal">&lt;Location&gt;</CODE> on the slaves.  This
            location is configured to <SPAN class="emphasis"><EM>not</EM></SPAN> proxy
            write requests at all, but to accept normal commits from
            (and only from) the master's IP address:</P><PRE class="screen">&lt;Location /svn-proxy-sync&gt;
  DAV svn
  SVNPath /var/svn/repos
  Order deny,allow
  Deny from all
  # Only let the server's IP address access this Location:
  Allow from 10.20.30.40
  â¦
&lt;/Location&gt;
</PRE></DIV><DIV class="sect4" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H5 class="title"><A id="svn.serverconfig.httpd.extra.writethruproxy.replicate"></A>Set up replication</H5></DIV></DIV></DIV><P>Now that you've configured
            your <CODE class="literal">Location</CODE> blocks on master and
            slaves, you need to configure the master to replicate to
            the slaves.  This is done the usual wayâ
            using <SPAN class="command"><STRONG>svnsync</STRONG></SPAN>.  If you're not familiar
            with this tool, see
            <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.replication" title="Repository Replication">the section called âRepository Replicationâ</A> for
            details.</P><P>First, make sure that each slave repository has a
            <CODE class="filename">pre-revprop-change</CODE> hook script which
            allows remote revision property changes.  (This is
            standard procedure for being on the receiving end of
            <SPAN class="command"><STRONG>svnsync</STRONG></SPAN>.) Then log into the master
            server and configure each of the slave repository URIs to
            receive data from the master repository on the local
            disk:</P><PRE class="screen">$ svnsync init http://slave1.example.com/svn-proxy-sync file://var/svn/repos
Copied properties for revision 0.
$ svnsync init http://slave2.example.com/svn-proxy-sync file://var/svn/repos
Copied properties for revision 0.
$ svnsync init http://slave3.example.com/svn-proxy-sync file://var/svn/repos
Copied properties for revision 0.

# Perform the initial replication

$ svnsync sync http://slave1.example.com/svn-proxy-sync
Transmitting file data ....
Committed revision 1.
Copied properties for revision 1.
Transmitting file data .......
Committed revision 2.
Copied properties for revision 2.
â¦

$ svnsync sync http://slave2.example.com/svn-proxy-sync
Transmitting file data ....
Committed revision 1.
Copied properties for revision 1.
Transmitting file data .......
Committed revision 2.
Copied properties for revision 2.
â¦

$ svnsync sync http://slave3.example.com/svn-proxy-sync
Transmitting file data ....
Committed revision 1.
Copied properties for revision 1.
Transmitting file data .......
Committed revision 2.
Copied properties for revision 2.
â¦
</PRE><P>After this is done, we configure the master server's
            <CODE class="literal">post-commit</CODE> hook script to invoke
            <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> on each slave server:</P><PRE class="programlisting">#!/bin/sh
# Post-commit script to replicate newly committed revision to slaves

svnsync sync http://slave1.example.com/svn-proxy-sync &gt; /dev/null 2&gt;&amp;1
svnsync sync http://slave2.example.com/svn-proxy-sync &gt; /dev/null 2&gt;&amp;1
svnsync sync http://slave3.example.com/svn-proxy-sync &gt; /dev/null 2&gt;&amp;1
</PRE><P>The extra bits on the end of each line aren't
            necessary, but they're a sneaky way to allow the sync
            commands to run in the background so that the Subversion
            client isn't left waiting forever for the commit to
            finish.  In addition to this
            <CODE class="literal">post-commit</CODE> hook, you'll need a
            <CODE class="literal">post-revprop-change</CODE> hook as well so
            that when a user, say, modifies a log message, the slave
            servers get that change also:</P><PRE class="programlisting">#!/bin/sh
# Post-revprop-change script to replicate revprop-changes to slaves

REV=${2}
svnsync copy-revprops http://slave1.example.com/svn-proxy-sync ${REV} &gt; /dev/null 2&gt;&amp;1
svnsync copy-revprops http://slave2.example.com/svn-proxy-sync ${REV} &gt; /dev/null 2&gt;&amp;1
svnsync copy-revprops http://slave3.example.com/svn-proxy-sync ${REV} &gt; /dev/null 2&gt;&amp;1
</PRE><P>The only thing we've left out here is what to do about
            locks.  Because locks are strictly enforced by the master
            server (the only place where commits happen), we don't
            technically need to do anything.  Many teams don't use
            Subversion's locking features at all, so it may be a
            nonissue for you.  However, if lock changes aren't
            replicated from master to slaves, it means that clients
            won't be able to query the status of locks
            (e.g., <STRONG class="userinput"><CODE>svn status -u</CODE></STRONG> will show no
            information about repository locks).  If this bothers you,
            you can write <CODE class="literal">post-lock</CODE> and
            <CODE class="literal">post-unlock</CODE> hook scripts that run
            <SPAN class="command"><STRONG>svn lock</STRONG></SPAN> and <SPAN class="command"><STRONG>svn
            unlock</STRONG></SPAN> on each slave machine, presumably through
            a remote shell method such as SSH.  That's left as an
            exercise for the reader!</P></DIV><DIV class="sect4" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H5 class="title"><A id="svn.serverconfig.httpd.extra.writethruproxy.caveats"></A>Caveats</H5></DIV></DIV></DIV><P>Your master/slave replication system should now be
            ready to use.  A couple of words of warning are in order,
            however.  Remember that this replication isn't entirely
            robust in the face of computer or network crashes.  For
            example, if one of the automated
            <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> commands fails to complete for
            some reason, the slaves will begin to fall behind.  For
            example, your remote users will see that they've committed
            revision 100, but then when they run <SPAN class="command"><STRONG>svn
            update</STRONG></SPAN>, their local server will tell them that
            revision 100 doesn't yet exist!  Of course, the problem
            will be automatically fixed the next time another commit
            happens and the subsequent <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> is
            successfulâthe sync will replicate all waiting
            revisions.  But still, you may want to set up some sort of
            out-of-band monitoring to notice synchronization failures
            and force <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> to run when things go
            wrong.</P><DIV class="sidebar"><P class="title"><B>Can We Set Up Replication with svnserve?</B></P><P>If you're using <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> instead
              of Apache as your server, you can certainly configure
              your repository's hook scripts to invoke
              <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> as we've shown here, thereby
              causing automatic replication from master to slaves.
              Unfortunately, at the time of this writing there is no way to
              make slave <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> servers
              automatically proxy write requests back to the master
              server.  This means your users would only be able to
              check out read-only working copies from the slave
              servers.  You'd have to configure your slave servers to
              disallow write access completely.  This might be useful
              for creating read-only â<SPAN class="quote">mirrors</SPAN>â of popular
              open source projects, but it's not a transparent
              proxying system.</P></DIV></DIV></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.serverconfig.httpd.extra.other"></A>Other Apache features</H4></DIV></DIV></DIV><P>Several of the features already provided by Apache in
          its role as a robust web server can be leveraged for
          increased functionality or security in Subversion as well.
          The Subversion client is able to use SSL (the Secure Sockets
          Layer, discussed earlier).  If your Subversion client is
          built to support SSL, it can access your Apache server
          using <CODE class="literal">https://</CODE> and enjoy a high-quality
          encrypted network session.</P><P>Equally useful are other features of the Apache and
          Subversion relationship, such as the ability to specify a
          custom port (instead of the default HTTP port 80) or a
          virtual domain name by which the Subversion repository
          should be accessed, or the ability to access the repository
          through an HTTP proxy.</P><P>Finally, because <SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN> is
          speaking a subset of the WebDAV/DeltaV protocol, it's
          possible to access the repository via third-party DAV
          clients.  Most modern operating systems (Win32, OS X, and
          Linux) have the built-in ability to mount a DAV server as a
          standard network â<SPAN class="quote">shared folder.</SPAN>â This is a
          complicated topic, but also wondrous when implemented.  For
          details, read <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.webdav" title="Appendix&nbsp;C.&nbsp;WebDAV and Autoversioning">Appendix&nbsp;C, <I>WebDAV and Autoversioning</I></A>.</P><P>Note that there are a number of other small tweaks one can
          make to <SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN> that are too obscure
          to mention in this chapter.  For a complete list of
          all <CODE class="filename">httpd.conf</CODE> directives
          that <SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN> responds to, see
          <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.mod_dav_svn.conf.directives" title="Directives">the section called âDirectivesâ</A>.</P></DIV></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.serverconfig.pathbasedauthz"></A>Path-Based Authorization</H2></DIV></DIV></DIV><P>Both Apache and <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> are capable of
      granting (or denying) permissions to users.  Typically this is
      done over the entire repository: a user can read the repository
      (or not), and she can write to the repository (or not).  It's
      also possible, however, to define finer-grained access rules.
      One set of users may have permission to write to a certain
      directory in the repository, but not others; another directory
      might not even be readable by all but a few special
      people.</P><P>Both servers use a common file format to describe these
      path-based access rules.  In the case of Apache, one needs to
      load the <SPAN class="command"><STRONG>mod_authz_svn</STRONG></SPAN> module and then add
      the <CODE class="literal">AuthzSVNAccessFile</CODE> directive (within
      the <CODE class="filename">httpd.conf</CODE> file) pointing to your own
      rules file.  (For a full explanation, see
      <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.authz.perdir" title="Per-directory access control">the section called âPer-directory access controlâ</A>.)  If
      you're using <SPAN class="command"><STRONG>svnserve</STRONG></SPAN>, you need to make
      the <CODE class="literal">authz-db</CODE> variable
      (within <CODE class="filename">svnserve.conf</CODE>) point to your
      rules file.</P><DIV class="sidebar"><P class="title"><B>Do You Really Need Path-Based Access Control?</B></P><P>A lot of administrators setting up Subversion for the
        first time tend to jump into path-based access control without
        giving it a lot of thought.  The administrator usually knows
        which teams of people are working on which projects, so it's
        easy to jump in and grant certain teams access to certain
        directories and not others.  It seems like a natural thing,
        and it appeases the administrator's desire to maintain tight
        control of the repository.</P><P>Note, though, that there are often invisible (and
        visible!) costs associated with this feature.  In the visible
        category, the server needs to do a lot more work to ensure
        that the user has the right to read or write each specific
        path; in certain situations, there's very noticeable
        performance loss.  In the invisible category, consider the
        culture you're creating.  Most of the time, while certain
        users <SPAN class="emphasis"><EM>shouldn't</EM></SPAN> be committing changes to
        certain parts of the repository, that social contract doesn't
        need to be technologically enforced.  Teams can sometimes
        spontaneously collaborate with each other; someone may want to
        help someone else out by committing to an area she doesn't
        normally work on.  By preventing this sort of thing at the
        server level, you're setting up barriers to unexpected
        collaboration.  You're also creating a bunch of rules that
        need to be maintained as projects develop, new users are
        added, and so on.  It's a bunch of extra work to
        maintain.</P><P>Remember that this is a version control system!  Even if
        somebody accidentally commits a change to something she
        shouldn't, it's easy to undo the change.  And if a user
        commits to the wrong place with deliberate malice, it's a
        social problem anyway, and that the problem needs to be dealt
        with outside Subversion.</P><P>So, before you begin restricting users' access rights, ask
        yourself whether there's a real, honest need for this, or whether it's
        just something that â<SPAN class="quote">sounds good</SPAN>â to an
        administrator.  Decide whether it's worth sacrificing some
        server speed, and remember that there's very little risk
        involved; it's bad to become dependent on technology as a
        crutch for social problems.
        <SUP>[<A id="id548383" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id548383" class="footnote">48</A>]</SUP>
      </P><P>As an example to ponder, consider that the Subversion
        project itself has always had a notion of who is allowed to
        commit where, but it's always been enforced socially.  This is
        a good model of community trust, especially for open source
        projects.  Of course, sometimes there <SPAN class="emphasis"><EM>are</EM></SPAN>
        truly legitimate needs for path-based access control; within
        corporations, for example, certain types of data really can be
        sensitive, and access needs to be genuinely restricted to
        small groups of people.</P></DIV><P>Once your server knows where to find your rules file, it's
      time to define the rules.</P><P>The syntax of the file is the same familiar one used
      by <CODE class="filename">svnserve.conf</CODE> and the runtime
      configuration files.  Lines that start with a hash
      (<CODE class="literal">#</CODE>) are ignored.  In its simplest form, each
      section names a repository and path within it, as well as the
      authenticated usernames are the option names within each
      section.  The value of each option describes the user's level of
      access to the repository path: either
      <CODE class="literal">r</CODE> (read-only) or <CODE class="literal">rw</CODE>
      (read/write).  If the user is not mentioned at all, no access is
      allowed.</P><P>To be more specific: the value of the section names is
      either of the form <CODE class="literal">[repos-name:path]</CODE> or of the
      form <CODE class="literal">[path]</CODE>.  If you're using the
      <CODE class="literal">SVNParentPath</CODE> directive, it's important
      to specify the repository names in your sections.  If you omit
      them, a section such as
      <CODE class="literal">[/some/dir]</CODE> will match the path
      <CODE class="filename">/some/dir</CODE> in <SPAN class="emphasis"><EM>every</EM></SPAN>
      repository.  If you're using the <CODE class="literal">SVNPath</CODE>
      directive, however, it's fine to only define paths in your
      sectionsâafter all, there's only one repository.</P><PRE class="screen">[calc:/branches/calc/bug-142]
harry = rw
sally = r
</PRE><P>In this first example, the user <CODE class="literal">harry</CODE> has
      full read and write access on the
      <CODE class="filename">/branches/calc/bug-142</CODE> directory in the
      <CODE class="literal">calc</CODE> repository, but the user
      <CODE class="literal">sally</CODE> has read-only access.  Any other users
      are blocked from accessing this directory.</P><P>Of course, permissions are inherited from parent to child
      directory.  That means we can specify a subdirectory with a
      different access policy for Sally:</P><PRE class="screen">[calc:/branches/calc/bug-142]
harry = rw
sally = r

# give sally write access only to the 'testing' subdir
[calc:/branches/calc/bug-142/testing]
sally = rw
</PRE><P>Now Sally can write to the <CODE class="filename">testing</CODE>
      subdirectory of the branch, but can still only read other parts.
      Harry, meanwhile, continues to have complete read/write access
      to the whole branch.</P><P>It's also possible to explicitly deny permission to someone
      via inheritance rules, by setting the username variable to
      nothing:</P><PRE class="screen">[calc:/branches/calc/bug-142]
harry = rw
sally = r

[calc:/branches/calc/bug-142/secret]
harry =
</PRE><P>In this example, Harry has read/write access to the
      entire <CODE class="filename">bug-142</CODE> tree, but has absolutely no
      access at all to the <CODE class="filename">secret</CODE> subdirectory
      within it.</P><DIV class="tip" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Tip</H3><P>The thing to remember is that the most specific path
        always matches first.  The server tries to match the path
        itself, and then the parent of the path, then the parent of
        that, and so on.  The net effect is that mentioning a specific
        path in the access file will always override any permissions
        inherited from parent directories.</P></DIV><P>By default, nobody has any access to the repository at all.
      That means that if you're starting with an empty file, you'll
      probably want to give at least read permission to all users at
      the root of the repository.  You can do this by using the
      asterisk variable (<CODE class="literal">*</CODE>), which means â<SPAN class="quote">all
      users</SPAN>â:</P><PRE class="screen">[/]
* = r
</PRE><P>This is a common setup; notice that no repository
      name is mentioned in the section name.  This makes all repositories
      world-readable to all users. Once all users have read access to
      the repositories, you can give explicit
      <CODE class="literal">rw</CODE> permission to certain users on specific
      subdirectories within specific repositories.</P><P>The asterisk variable (<CODE class="literal">*</CODE>) is also worth
      special mention because it's the
      <SPAN class="emphasis"><EM>only</EM></SPAN> pattern that matches an anonymous
      user.  If you've configured your server block to allow a mixture
      of anonymous and authenticated access, all users start out
      accessing anonymously.  The server looks for a
      <CODE class="literal">*</CODE> value defined for the path being accessed;
      if it can't find one, it demands real authentication from
      the client.</P><P>The access file also allows you to define whole groups of
      users, much like the Unix <CODE class="filename">/etc/group</CODE>
      file:</P><PRE class="screen">[groups]
calc-developers = harry, sally, joe
paint-developers = frank, sally, jane
everyone = harry, sally, joe, frank, sally, jane
</PRE><P>Groups can be granted access control just like users.
      Distinguish them with an â<SPAN class="quote">at</SPAN>â
      (<CODE class="literal">@</CODE>) prefix:</P><PRE class="screen">[calc:/projects/calc]
@calc-developers = rw

[paint:/projects/paint]
jane = r
@paint-developers = rw
</PRE><P>Another important fact is that
    the <SPAN class="emphasis"><EM>first</EM></SPAN> matching rule is the one which gets
    applied to a user.  In the prior example, even though Jane is a
    member of the <CODE class="literal">paint-developers</CODE> group (which has
    read/write access), the <CODE class="literal">jane = r</CODE> rule will be
    discovered and matched before the group rule, thus denying Jane
    write access.</P><P>Groups can also be defined to contain other groups:</P><PRE class="screen">[groups]
calc-developers = harry, sally, joe
paint-developers = frank, sally, jane
everyone = @calc-developers, @paint-developers
</PRE><P>Subversion 1.5 brings another useful feature to the access
      file syntax:  username aliases.  Some authentication systems
      expect and carry relatively short usernames of the sorts we've
      been describing hereâ<CODE class="literal">harry</CODE>,
      <CODE class="literal">sally</CODE>, <CODE class="literal">joe</CODE>, and so on.  But
      other authentication systemsâsuch as those which use LDAP
      stores or SSL client certificatesâmay carry much more
      complex usernames.  For example, Harry's username in an
      LDAP-protected system might be <CODE class="literal">CN=Harold
      Hacker,OU=Engineers,DC=red-bean,DC=com</CODE>.  With
      usernames like that, the access file can become quite bloated
      with long or obscure usernames that are easy to mistype.
      Fortunately, username aliases allow you to have to type the
      correct complex username only once, in a statement which assigns to
      it a more easily digestable alias.</P><PRE class="screen">[aliases]
harry = CN=Harold Hacker,OU=Engineers,DC=red-bean,DC=com
sally = CN=Sally Swatterbug,OU=Engineers,DC=red-bean,DC=com
joe = CN=Gerald I. Joseph,OU=Engineers,DC=red-bean,DC=com
â¦
</PRE><P>Once you've defined a set of aliases, you can refer to the
      users elsewhere in the access file via their aliases in all the
      same places you could have instead used their actual usernames.
      Simply prepend an ampersand to the alias to distinguish it from
      a regular username:</P><PRE class="screen">[groups]
calc-developers = &amp;harry, &amp;sally, &amp;joe
paint-developers = &amp;frank, &amp;sally, &amp;jane
everyone = @calc-developers, @paint-developers
</PRE><P>You might also choose to use aliases if your users'
      usernames change frequently.  Doing so allows you to need to
      update only the aliases table when these username changes occur,
      instead of doing global-search-and-replace operations on the
      whole access file.</P><DIV class="sidebar"><P class="title"><B>Partial Readability and Checkouts</B></P><P>If you're using Apache as your Subversion server and have
      made certain subdirectories of your repository unreadable to
      certain users, you need to be aware of a possible
      nonoptimal behavior with <SPAN class="command"><STRONG>svn checkout</STRONG></SPAN>.</P><P>When the client requests a checkout or update over HTTP, it
      makes a single server request and receives a single (often
      large) server response.  When the server receives the request,
      that is the <SPAN class="emphasis"><EM>only</EM></SPAN> opportunity Apache has to
      demand user authentication.  This has some odd side effects.
      For example, if a certain subdirectory of the repository is
      readable only by user Sally, and user Harry checks out a parent
      directory, his client will respond to the initial authentication
      challenge as Harry.  As the server generates the large response,
      there's no way it can resend an authentication challenge when
      it reaches the special subdirectory; thus the subdirectory is
      skipped altogether, rather than asking the user to
      reauthenticate as Sally at the right moment.  In a similar way,
      if the root of the repository is anonymously world-readable,
      the entire checkout will be done without
      authenticationâagain, skipping the unreadable directory,
      rather than asking for authentication partway through.</P></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.serverconfig.multimethod"></A>Supporting Multiple Repository Access Methods</H2></DIV></DIV></DIV><P>You've seen how a repository can be accessed in many
      different ways.  But is it possibleâor safeâfor your
      repository to be accessed by multiple methods simultaneously?
      The answer is yes, provided you use a bit of foresight.</P><P>At any given time, these processes may require read and
      write access to your repository:</P><DIV class="itemizedlist"><UL type="disc"><LI><P>Regular system users using a Subversion client (as
          themselves) to access the repository directly via
          <CODE class="literal">file://</CODE> URLs</P></LI><LI><P>Regular system users connecting to SSH-spawned private
          <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> processes (running as
          themselves), which access the repository</P></LI><LI><P>An <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> processâeither a
          daemon or one launched by
          <SPAN class="command"><STRONG>inetd</STRONG></SPAN>ârunning as a particular fixed
          user</P></LI><LI><P>An Apache <SPAN class="command"><STRONG>httpd</STRONG></SPAN> process, running as a
          particular fixed user</P></LI></UL></DIV><P>The most common problem administrators run into is
      repository ownership and permissions.  Does every process (or
      user) in the preceding list have the rights to read and write the
      repository's underlying data files?  Assuming you have a
      Unix-like operating system, a straightforward approach might be
      to place every potential repository user into a
      new <CODE class="literal">svn</CODE> group, and make the repository wholly
      owned by that group.  But even that's not enough, because a
      process may write to the database files using an unfriendly
      umaskâone that prevents access by other users.</P><P>So the next step beyond setting up a common group for
      repository users is to force every repository-accessing process
      to use a sane umask.  For users accessing the repository
      directly, you can make the <SPAN class="command"><STRONG>svn</STRONG></SPAN> program into a
      wrapper script that first runs <STRONG class="userinput"><CODE>umask 002</CODE></STRONG> and
      then runs the real <SPAN class="command"><STRONG>svn</STRONG></SPAN> client program.  You
      can write a similar wrapper script for the
      <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> program, and add a <STRONG class="userinput"><CODE>umask
      002</CODE></STRONG> command to Apache's own startup script,
      <CODE class="filename">apachectl</CODE>.  For example:</P><PRE class="screen">$ cat /usr/bin/svn

#!/bin/sh

umask 002
/usr/bin/svn-real "$@"

</PRE><P>Another common problem is often encountered on Unix-like
      systems.  If your repository is backed by Berkeley DB, for
      example, it occasionally creates new log files to journal its
      actions.  Even if the Berkeley DB repository is wholly owned by
      the <SPAN class="command"><STRONG>svn</STRONG></SPAN> group, these newly created log files
      won't necessarily be owned by that same group, which then
      creates more permissions problems for your users.  A good
      workaround is to set the group SUID bit on the
      repository's <CODE class="filename">db</CODE> directory. This causes all
      newly created log files to have the same group owner as the
      parent directory.</P><P>Once you've jumped through these hoops, your repository
      should be accessible by all the necessary processes.  It may
      seem a bit messy and complicated, but the problems of having
      multiple users sharing write access to common files are classic
      ones that are not often elegantly solved.</P><P>Fortunately, most repository administrators will never
      <SPAN class="emphasis"><EM>need</EM></SPAN> to have such a complex configuration.
      Users who wish to access repositories that live on the same
      machine are not limited to using <CODE class="literal">file://</CODE>
      access URLsâthey can typically contact the Apache HTTP
      server or <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> using
      <CODE class="literal">localhost</CODE> for the server name in their
      <CODE class="literal">http://</CODE> or <CODE class="literal">svn://</CODE> URL.
      And maintaining multiple server processes for your Subversion
      repositories is likely to be more of a headache than necessary.
      We recommend that you choose a single server that best meets your
      needs and stick with it!</P><DIV class="sidebar"><P class="title"><B>The svn+ssh:// Server Checklist</B></P><P>It can be quite tricky to get a bunch of users with
        existing SSH accounts to share a repository without
        permissions problems.  If you're confused about all the things
        that you (as an administrator) need to do on a Unix-like
        system, here's a quick checklist that resummarizes some of the
        topics discussed in this section:</P><DIV class="itemizedlist"><UL type="disc"><LI><P>All of your SSH users need to be able to read and
            write to the repository, so put all the SSH users into a
            single group.</P></LI><LI><P>
            Make the repository wholly owned by that group.
            </P></LI><LI><P>Set the group permissions to
            read/write.</P></LI><LI><P>Your users need to use a sane umask when accessing the
            repository, so make sure <SPAN class="command"><STRONG>svnserve</STRONG></SPAN>
            (<CODE class="filename">/usr/bin/svnserve</CODE>, or wherever it
            lives in <CODE class="literal">$PATH</CODE>) is actually a wrapper
            script that runs <STRONG class="userinput"><CODE>umask 002</CODE></STRONG> and
            executes the real <SPAN class="command"><STRONG>svnserve</STRONG></SPAN>
            binary.</P></LI><LI><P>Take similar measures when using
            <SPAN class="command"><STRONG>svnlook</STRONG></SPAN> and
            <SPAN class="command"><STRONG>svnadmin</STRONG></SPAN>.  Either run them with a sane
            umask or wrap them as just described.</P></LI></UL></DIV></DIV></DIV><DIV class="footnotes"><BR><HR width="100" align="left"><DIV class="footnote"><P><SUP>[<A id="ftn.id543870" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id543870" class="para">41</A>] </SUP>See RFC 2195.</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id544817" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id544817" class="para">42</A>] </SUP>Note that using any sort of
            <SPAN class="command"><STRONG>svnserve</STRONG></SPAN>-enforced access control at all
            is a bit pointless; the user already has direct access to
            the repository database.</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id544847" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id544847" class="para">43</A>] </SUP>We don't actually recommend this, since RSH
            is notably less secure than SSH.</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id545312" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id545312" class="para">44</A>] </SUP>They really hate doing that.</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id546187" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id546187" class="para">45</A>] </SUP>While self-signed server certificates are still
              vulnerable to a â<SPAN class="quote">man-in-the-middle</SPAN>â attack,
              such an attack is much more difficult for a casual
              observer to pull off, compared to sniffing unprotected
              passwords.</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id546423" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id546423" class="para">46</A>] </SUP>More security-conscious folk might not want to store
              the client certificate password in the runtime
              <CODE class="filename">servers</CODE> file.</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id542274" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id542274" class="para">47</A>] </SUP>Back then, it was called ViewCVS.</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id548383" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id548383" class="para">48</A>] </SUP>A common theme in this book!</P></DIV></DIV></DIV><DIV class="chapter" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title"><A id="svn.customization"></A>Chapter&nbsp;7.&nbsp;Customizing Your Subversion Experience</H2></DIV></DIV></DIV><DIV class="toc"><P><B>Table of Contents</B></P><DL><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.confarea">Runtime Configuration Area</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.confarea.layout">Configuration Area Layout</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.confarea.windows-registry">Configuration and the Windows Registry</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.confarea.opts">Configuration Options</A></SPAN></DT><DD><DL><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.confarea.opts.servers">Servers</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.confarea.opts.config">Config</A></SPAN></DT></DL></DD></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.l10n">Localization</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.l10n.understanding">Understanding Locales</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.l10n.svnuse">Subversion's Use of Locales</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.externaleditors">Using External Editors</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.externaldifftools">Using External Differencing and Merge Tools</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.externaldifftools.diff">External diff</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.externaldifftools.diff3">External diff3</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.customization.summary">Summary</A></SPAN></DT></DL></DIV><P>Version control can be a complex subject, as much art as
    science, that offers myriad ways of getting stuff done.
    Throughout this book, you've read of the various Subversion
    command-line client subcommands and the options that modify their
    behavior.  In this chapter, we'll look into still more ways to
    customize the way Subversion works for youâsetting up the
    Subversion runtime configuration, using external helper
    applications, Subversion's interaction with the operating system's
    configured locale, and so on.</P><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.advanced.confarea"></A>Runtime Configuration Area</H2></DIV></DIV></DIV><P>Subversion provides many optional behaviors that the user can
      control.  Many of these options are of the kind
      that a user would wish to apply to all Subversion operations.
      So, rather than forcing users to remember command-line arguments
      for specifying these options and to use them for every
      operation they perform, Subversion uses configuration files,
      segregated into a Subversion configuration area.</P><P>The Subversion <EM class="firstterm">configuration area</EM> is
      a two-tiered hierarchy of option names and their values.
      Usually, this boils down to a special directory that contains
      <EM class="firstterm">configuration files</EM> (the first tier),
      which are just text files in standard INI format (with
      â<SPAN class="quote">sections</SPAN>â providing the second tier).  You can
      easily edit these files using your favorite text editor (such as
      Emacs or vi), and they contain directives read by the client to
      determine which of several optional behaviors the user
      prefers.</P><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.advanced.confarea.layout"></A>Configuration Area Layout</H3></DIV></DIV></DIV><P>The first time the <SPAN class="command"><STRONG>svn</STRONG></SPAN>
        command-line client is executed, it creates a per-user
        configuration area.  On Unix-like systems, this area appears
        as a directory named <CODE class="filename">.subversion</CODE> in the
        user's home directory.  On Win32 systems, Subversion creates a
        folder named <CODE class="filename">Subversion</CODE>, typically inside
        the <CODE class="filename">Application Data</CODE> area of the user's
        profile directory (which, by the way, is usually a hidden
        directory).  However, on this platform, the exact location
        differs from system to system and is dictated by the Windows
        Registry.
        <SUP>[<A id="id555977" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id555977" class="footnote">49</A>]</SUP>
        We will refer to the per-user configuration area using its Unix
        name, <CODE class="filename">.subversion</CODE>.</P><P>In addition to the per-user configuration area, Subversion
        also recognizes the existence of a system-wide configuration
        area.  This gives system administrators the ability to
        establish defaults for all users on a given machine.  Note
        that the system-wide configuration area alone does not dictate
        mandatory policyâthe settings in the per-user
        configuration area override those in the system-wide one, and
        command-line arguments supplied to the <SPAN class="command"><STRONG>svn</STRONG></SPAN>
        program have the final word on behavior.  On Unix-like
        platforms, the system-wide configuration area is
        expected to be the <CODE class="filename">/etc/subversion</CODE>
        directory; on Windows machines, it looks for a
        <CODE class="filename">Subversion</CODE> directory inside the common
        <CODE class="filename">Application Data</CODE> location (again, as
        specified by the Windows Registry).  Unlike the per-user
        case, the <SPAN class="command"><STRONG>svn</STRONG></SPAN> program does not attempt
        to create the system-wide configuration area.</P><P>The per-user configuration area currently contains three
        filesâtwo configuration files (<CODE class="filename">config</CODE> and
        <CODE class="filename">servers</CODE>), and a <CODE class="filename">README.txt</CODE> 
        file, which describes the INI format.  At the time of their
        creation, the files contain default values for each of the
        supported Subversion options, mostly commented out and grouped
        with textual descriptions about how the values for the key
        affect Subversion's behavior.  To change a certain behavior,
        you need only to load the appropriate configuration file into
        a text editor, and to modify the desired option's value.  If at
        any time you wish to have the default configuration settings
        restored, you can simply remove (or rename) your configuration
        directory and then run some innocuous <SPAN class="command"><STRONG>svn</STRONG></SPAN>
        command, such as <STRONG class="userinput"><CODE>svn --version</CODE></STRONG>.  A new
        configuration directory with the default contents will be
        created.</P><P>The per-user configuration area also contains a cache of
        authentication data.  The <CODE class="filename">auth</CODE> directory
        holds a set of subdirectories that contain pieces of cached
        information used by Subversion's various supported
        authentication methods.  This directory is created in such a
        way that only the user herself has permission to read its
        contents.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.advanced.confarea.windows-registry"></A>Configuration and the Windows Registry</H3></DIV></DIV></DIV><P>In addition to the usual INI-based configuration area,
        Subversion clients running on Windows platforms may also use
        the Windows Registry to hold the configuration data.  The
        option names and their values are the same as in the INI
        files.  The â<SPAN class="quote">file/section</SPAN>â hierarchy is
        preserved as well, though addressed in a slightly different
        fashionâin this schema, files and sections are just
        levels in the Registry key tree.</P><P>Subversion looks for system-wide configuration values
        under the
        <CODE class="literal">HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion</CODE>
        key.  For example, the <CODE class="literal">global-ignores</CODE> option,
        which is in the <CODE class="literal">miscellany</CODE> section of the
        <CODE class="filename">config</CODE> file, would be found at
        <CODE class="literal">HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion\Config\Miscellany\global-ignores</CODE>.
        Per-user configuration values should be stored under
        <CODE class="literal">HKEY_CURRENT_USER\Software\Tigris.org\Subversion</CODE>.
      </P><P>Registry-based configuration options are parsed
        <SPAN class="emphasis"><EM>before</EM></SPAN> their file-based counterparts, so
        they are overridden by values found in the configuration files.  In
        other words, Subversion looks for configuration information in
        the following locations on a Windows system; lower-numbered
        locations take precedence over higher-numbered locations:</P><DIV class="orderedlist"><OL type="1"><LI><P>Command-line options</P></LI><LI><P>The per-user INI files</P></LI><LI><P>The per-user Registry values</P></LI><LI><P>The system-wide INI files</P></LI><LI><P>The system-wide Registry values</P></LI></OL></DIV><P>Also, the Windows Registry doesn't really support the
        notion of something being â<SPAN class="quote">commented out.</SPAN>â
        However, Subversion will ignore any option key whose name
        begins with a hash (<CODE class="literal">#</CODE>) character.  This
        allows you to effectively comment out a Subversion option
        without deleting the entire key from the Registry, obviously
        simplifying the process of restoring that option.</P><P>The <SPAN class="command"><STRONG>svn</STRONG></SPAN> command-line client never
        attempts to write to the Windows Registry and will not attempt
        to create a default configuration area there.  You can create
        the keys you need using the <SPAN class="command"><STRONG>REGEDIT</STRONG></SPAN>
        program.  Alternatively, you can create a
        <CODE class="filename">.reg</CODE> file (such as the one in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.confarea.windows-registry.ex-1" title="Example&nbsp;7.1.&nbsp;Sample registration entries (.reg) file">Example&nbsp;7.1, âSample registration entries (.reg) fileâ</A>), and
        then double-click on that file's icon in the Explorer shell,
        which will cause the data to be merged into your
        Registry.</P><DIV class="example"><A id="svn.advanced.confarea.windows-registry.ex-1"></A><P class="title"><B>Example&nbsp;7.1.&nbsp;Sample registration entries (.reg) file</B></P><DIV class="example-contents"><PRE class="programlisting">REGEDIT4

[HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion\Servers\groups]

[HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion\Servers\global]
"#http-proxy-host"=""
"#http-proxy-port"=""
"#http-proxy-username"=""
"#http-proxy-password"=""
"#http-proxy-exceptions"=""
"#http-timeout"="0"
"#http-compression"="yes"
"#neon-debug-mask"=""
"#ssl-authority-files"=""
"#ssl-trust-default-ca"=""
"#ssl-client-cert-file"=""
"#ssl-client-cert-password"=""

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\auth]
"#store-passwords"="yes"
"#store-auth-creds"="yes"

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\helpers]
"#editor-cmd"="notepad"
"#diff-cmd"=""
"#diff3-cmd"=""
"#diff3-has-program-arg"=""

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\tunnels]

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\miscellany]
"#global-ignores"="*.o *.lo *.la #*# .*.rej *.rej .*~ *~ .#* .DS_Store"
"#log-encoding"=""
"#use-commit-times"=""
"#no-unlock"=""
"#enable-auto-props"=""

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\auto-props]
</PRE></DIV></DIV><BR class="example-break"><P>The previous example shows the contents of a
        <CODE class="filename">.reg</CODE> file, which contains some of the most
        commonly used configuration options and their default values.
        Note the presence of both system-wide (for network
        proxy-related options) and per-user settings (editor programs
        and password storage, among others).  Also note that all the
        options are effectively commented out.  You need only to
        remove the hash (<CODE class="literal">#</CODE>) character from the
        beginning of the option names and set the values as you
        desire.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.advanced.confarea.opts"></A>Configuration Options</H3></DIV></DIV></DIV><P>In this section, we will discuss the specific
        runtime configuration options that Subversion currently 
        supports.</P><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.advanced.confarea.opts.servers"></A>Servers</H4></DIV></DIV></DIV><P>The <CODE class="filename">servers</CODE> file contains
          Subversion configuration options related to the network
          layers.  There are two special section names in this
          fileâ<CODE class="literal">groups</CODE> and
          <CODE class="literal">global</CODE>.  The <CODE class="literal">groups</CODE>
          section is essentially a cross-reference table.  The keys in
          this section are the names of other sections in the file;
          their values are <EM class="firstterm">globs</EM>âtextual
          tokens that possibly contain wildcard
          charactersâthat are compared against the hostnames of
          the machine to which Subversion requests are sent.</P><PRE class="programlisting">[groups]
beanie-babies = *.red-bean.com
collabnet = svn.collab.net

[beanie-babies]
â¦

[collabnet]
â¦
</PRE><P>When Subversion is used over a network, it attempts to
          match the name of the server it is trying to reach with a
          group name under the <CODE class="literal">groups</CODE> section.  If
          a match is made, Subversion then looks for a section in the
          <CODE class="filename">servers</CODE> file whose name is the matched
          group's name.  From that section, it reads the actual network
          configuration settings.</P><P>The <CODE class="literal">global</CODE> section contains the
          settings that are meant for all of the servers not matched
          by one of the globs under the <CODE class="literal">groups</CODE>
          section.  The options available in this section are
          exactly the same as those that are valid for the other server
          sections in the file (except, of course, the special
          <CODE class="literal">groups</CODE> section), and are as
          follows:</P><DIV class="variablelist"><DL><DT><SPAN class="term"><CODE class="literal">http-proxy-exceptions</CODE></SPAN></DT><DD><P>This specifies a comma-separated list of patterns
                for repository hostnames that should be accessed
                directly, without using the proxy machine.  The
                pattern syntax is the same as is used in the Unix
                shell for filenames.  A repository hostname matching
                any of these patterns will not be proxied.</P></DD><DT><SPAN class="term"><CODE class="literal">http-proxy-host</CODE></SPAN></DT><DD><P>This specifies the hostname of the proxy computer
                through which your HTTP-based Subversion requests must
                pass.  It defaults to an empty value, which means that
                Subversion will not attempt to route HTTP requests
                through a proxy computer, and will instead attempt to
                contact the destination machine directly.</P></DD><DT><SPAN class="term"><CODE class="literal">http-proxy-port</CODE></SPAN></DT><DD><P>This specifies the port number on the proxy host
                to use.  It defaults to an empty value.</P></DD><DT><SPAN class="term"><CODE class="literal">http-proxy-username</CODE></SPAN></DT><DD><P>This specifies the username to supply to the proxy
                machine.  It defaults to an empty value.</P></DD><DT><SPAN class="term"><CODE class="literal">http-proxy-password</CODE></SPAN></DT><DD><P>This specifies the password to supply to the proxy
                machine.  It defaults to an empty value.</P></DD><DT><SPAN class="term"><CODE class="literal">http-timeout</CODE></SPAN></DT><DD><P>This specifies the amount of time, in seconds, to
                wait for a server response.  If you experience
                problems with a slow network connection causing
                Subversion operations to time out, you should increase
                the value of this option.  The default value is
                <CODE class="literal">0</CODE>, which instructs the underlying
                HTTP library, Neon, to use its default timeout
                setting.</P></DD><DT><SPAN class="term"><CODE class="literal">http-compression</CODE></SPAN></DT><DD><P>This specifies whether Subversion should
                attempt to compress network requests made to DAV-ready
                servers.  The default value is <CODE class="literal">yes</CODE>
                (though compression will occur only if that capability
                is compiled into the network layer).  Set this to
                <CODE class="literal">no</CODE> to disable compression, such as
                when debugging network transmissions.</P></DD><DT><SPAN class="term"><CODE class="literal">http-library</CODE></SPAN></DT><DD><P>Subversion provides a pair of repository access
                modules that understand its WebDAV network protocol.
                The original one, which shipped with Subversion 1.0, is
                <CODE class="literal">libsvn_ra_neon</CODE> (though back then it
                was called <CODE class="literal">libsvn_ra_dav</CODE>).  Newer
                Subversion versions also provide
                <CODE class="literal">libsvn_ra_serf</CODE>, which uses a
                different underlying implementation and aims to
                support some of the newer HTTP concepts.</P><P>At this point, <CODE class="literal">libsvn_ra_serf</CODE>
                is still considered experimental, though it appears to
                work in the common cases quite well.  To encourage
                experimentation, Subversion provides the
                <CODE class="literal">http-library</CODE> runtime configuration
                option to allow users to specify (generally, or in a
                per-server-group fashion) which WebDAV access module
                they'd prefer to useâ<CODE class="literal">neon</CODE> or
                <CODE class="literal">serf</CODE>.</P></DD><DT><SPAN class="term"><CODE class="literal">http-auth-types</CODE></SPAN></DT><DD><P>This option is a semicolon-delimited list of
                authentication types supported by the Neon-based
                WebDAV repository access modules.  Valid members of
                this list are <CODE class="literal">basic</CODE>,
                <CODE class="literal">digest</CODE>, and
                <CODE class="literal">negotiate</CODE>.</P></DD><DT><SPAN class="term"><CODE class="literal">neon-debug-mask</CODE></SPAN></DT><DD><P>This is an integer mask that the underlying HTTP
                library, Neon, uses for choosing what type of
                debugging output to yield.  The default value is
                <CODE class="literal">0</CODE>, which will silence all debugging
                output.  For more information about how Subversion
                makes use of Neon, see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer" title="Chapter&nbsp;8.&nbsp;Embedding Subversion">Chapter&nbsp;8, <I>Embedding Subversion</I></A>.</P></DD><DT><SPAN class="term"><CODE class="literal">ssl-authority-files</CODE></SPAN></DT><DD><P>This is a semicolon-delimited list of paths to files
                containing certificates of the certificate authorities
                (or CAs) that
                are accepted by the Subversion client when accessing the
                repository over HTTPS.</P></DD><DT><SPAN class="term"><CODE class="literal">ssl-trust-default-ca</CODE></SPAN></DT><DD><P>Set this variable to <CODE class="literal">yes</CODE> if you
                want Subversion to automatically trust the set of
                default CAs that ship with OpenSSL.</P></DD><DT><SPAN class="term"><CODE class="literal">ssl-client-cert-file</CODE></SPAN></DT><DD><P>If a host (or set of hosts) requires an SSL client
                certificate, you'll normally be prompted for a path to
                your certificate.  By setting this variable to that
                same path, Subversion will be able to find your client
                certificate automatically without prompting you.
                There's no standard place to store your certificate on
                disk; Subversion will grab it from any path you
                specify.</P></DD><DT><SPAN class="term"><CODE class="literal">ssl-client-cert-password</CODE></SPAN></DT><DD><P>If your SSL client certificate file is encrypted
                by a passphrase, Subversion will prompt you for the
                passphrase whenever the certificate is used.  If you
                find this annoying (and don't mind storing the
                password in the <CODE class="filename">servers</CODE> file),
                you can set this variable to the certificate's
                passphrase.  You won't be prompted anymore.</P></DD></DL></DIV></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.advanced.confarea.opts.config"></A>Config</H4></DIV></DIV></DIV><P>The <CODE class="filename">config</CODE> file contains the rest
          of the currently available Subversion runtime
          optionsâthose not related to networking.  There are
          only a few options in use as of this writing, but they are
          again grouped into sections in expectation of future
          additions.</P><P>The <CODE class="literal">auth</CODE> section contains settings
          related to Subversion's authentication and authorization
          against the repository.  It contains the following:</P><DIV class="variablelist"><DL><DT><SPAN class="term"><CODE class="literal">store-passwords</CODE></SPAN></DT><DD><P>This instructs Subversion to cache, or not to
                cache, passwords that are supplied by the user in
                response to server authentication challenges.  The
                default value is <CODE class="literal">yes</CODE>.  Set this to
                <CODE class="literal">no</CODE> to disable this on-disk password
                caching.  You can override this option for a single
                instance of the <SPAN class="command"><STRONG>svn</STRONG></SPAN> command using
                the <CODE class="option">--no-auth-cache</CODE> command-line
                parameter (for those subcommands that support it).
                For more information, see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.netmodel.credcache" title="Client Credentials Caching">the section called âClient Credentials Cachingâ</A>.</P></DD><DT><SPAN class="term"><CODE class="literal">store-auth-creds</CODE></SPAN></DT><DD><P>This setting is the same as
                <CODE class="literal">store-passwords</CODE>, except that it
                enables or disables on-disk caching of
                <SPAN class="emphasis"><EM>all</EM></SPAN> authentication information:
                usernames, passwords, server certificates, and any
                other types of cacheable credentials.</P></DD></DL></DIV><P>The <CODE class="literal">helpers</CODE> section controls which
          external applications Subversion uses to accomplish its
          tasks.  Valid options in this section are:</P><DIV class="variablelist"><DL><DT><SPAN class="term"><CODE class="literal">editor-cmd</CODE></SPAN></DT><DD><P>This specifies the program Subversion will use to
                query the user for certain types of textual metadata
                or when interactively resolving conflicts.  See
                <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.externaleditors" title="Using External Editors">the section called âUsing External Editorsâ</A> for
                more details on using external text editors with
                Subversion.</P></DD><DT><SPAN class="term"><CODE class="literal">diff-cmd</CODE></SPAN></DT><DD><P>This specifies the absolute path of a differencing
                program, used when Subversion generates
                â<SPAN class="quote">diff</SPAN>â output (such as when using the
                <SPAN class="command"><STRONG>svn diff</STRONG></SPAN> command).  By default,
                Subversion uses an internal differencing
                libraryâsetting this option will cause it to
                perform this task using an external program.  See
                <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.externaldifftools" title="Using External Differencing and Merge Tools">the section called âUsing External Differencing and Merge Toolsâ</A> for
                more details on using such programs.</P></DD><DT><SPAN class="term"><CODE class="literal">diff3-cmd</CODE></SPAN></DT><DD><P>This specifies the absolute path of a three-way
                differencing program.  Subversion uses this program to
                merge changes made by the user with those received
                from the repository.  By default, Subversion uses an
                internal differencing libraryâsetting this
                option will cause it to perform this task using an
                external program.  See <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.externaldifftools" title="Using External Differencing and Merge Tools">the section called âUsing External Differencing and Merge Toolsâ</A> for more
                details on using such programs.</P></DD><DT><SPAN class="term"><CODE class="literal">diff3-has-program-arg</CODE></SPAN></DT><DD><P>This flag should be set to <CODE class="literal">true</CODE>
                if the program specified by the
                <CODE class="literal">diff3-cmd</CODE> option accepts a
                <CODE class="option">--diff-program</CODE> command-line
                parameter.</P></DD><DT><SPAN class="term"><CODE class="literal">merge-tool-cmd</CODE></SPAN></DT><DD><P>This specifies the program that Subversion will
                use to perform three-way merge operations on your
                versioned files.  See <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.externaldifftools" title="Using External Differencing and Merge Tools">the section called âUsing External Differencing and Merge Toolsâ</A> for more
                details on using such programs.</P></DD></DL></DIV><P>The <CODE class="literal">tunnels</CODE> section allows you to
          define new tunnel schemes for use with
          <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> and <CODE class="literal">svn://</CODE>
          client connections.  For more details, see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve.sshauth" title="Tunneling over SSH">the section called âTunneling over SSHâ</A>.</P><P>The <CODE class="literal">miscellany</CODE> section is where
          everything that doesn't belong elsewhere winds up.
          <SUP>[<A id="id557116" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id557116" class="footnote">50</A>]</SUP>
          In this section, you can find:</P><DIV class="variablelist"><DL><DT><SPAN class="term"><CODE class="literal">global-ignores</CODE></SPAN></DT><DD><P>When running the <SPAN class="command"><STRONG>svn status</STRONG></SPAN>
                command, Subversion lists unversioned files and
                directories along with the versioned ones, annotating
                them with a <CODE class="literal">?</CODE> character (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.examine.status" title="See an overview of your changes">the section called âSee an overview of your changesâ</A>).  Sometimes it can
                be annoying to see uninteresting, unversioned
                itemsâfor example, object files that result from
                a program's compilationâin this display.  The
                <CODE class="literal">global-ignores</CODE> option is a list of
                whitespace-delimited globs that describe the names of
                files and directories that Subversion should not
                display unless they are versioned.  The default value
                is <CODE class="literal">*.o *.lo *.la #*# .*.rej *.rej .*~ *~
                .#* .DS_Store</CODE>.</P><P>As well as <SPAN class="command"><STRONG>svn status</STRONG></SPAN>, the
                <SPAN class="command"><STRONG>svn add</STRONG></SPAN> and <SPAN class="command"><STRONG>svn import</STRONG></SPAN>
                commands also ignore files that match the list
                when they are scanning a directory.  You can override this
                behavior for a single instance of any of these commands
                by explicitly specifying the filename, or by using
                the <CODE class="option">--no-ignore</CODE> command-line flag.</P><P>For information on finer-grained control of
                ignored items, see 
                <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.special.ignore" title="Ignoring Unversioned Items">the section called âIgnoring Unversioned Itemsâ</A>.</P></DD><DT><SPAN class="term"><CODE class="literal">enable-auto-props</CODE></SPAN></DT><DD><P>This instructs Subversion to automatically set
                properties on newly added or imported files.  The
                default value is <CODE class="literal">no</CODE>, so set this to
                <CODE class="literal">yes</CODE> to enable this feature.
                The <CODE class="literal">auto-props</CODE> section of this file
                specifies which properties are to be set on which files.</P></DD><DT><SPAN class="term"><CODE class="literal">log-encoding</CODE></SPAN></DT><DD><P>This variable sets the default character set
                encoding for commit log messages.  It's a permanent
                form of the <CODE class="option">--encoding</CODE> option (see
                <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.sw" title="svn Options">the section called âsvn Optionsâ</A>).  The Subversion
                repository stores log messages in UTF-8 and assumes
                that your log message is written using your operating
                system's native locale.  You should specify a
                different encoding if your commit messages are written
                in any other encoding.</P></DD><DT><SPAN class="term"><CODE class="literal">use-commit-times</CODE></SPAN></DT><DD><P>Normally your working copy files have timestamps
                that reflect the last time they were touched by any
                process, whether your own editor or some
                <SPAN class="command"><STRONG>svn</STRONG></SPAN> subcommand.  This is generally
                convenient for people developing software, because
                build systems often look at timestamps as a way of
                deciding which files need to be recompiled.</P><P>In other situations, however, it's sometimes nice
                for the working copy files to have timestamps that
                reflect the last time they were changed in the
                repository.  The <SPAN class="command"><STRONG>svn export</STRONG></SPAN> command
                always places these â<SPAN class="quote">last-commit
                timestamps</SPAN>â on trees that it produces.  By
                setting this config variable to
                <CODE class="literal">yes</CODE>, the <SPAN class="command"><STRONG>svn
                checkout</STRONG></SPAN>, <SPAN class="command"><STRONG>svn update</STRONG></SPAN>,
                <SPAN class="command"><STRONG>svn switch</STRONG></SPAN>, and <SPAN class="command"><STRONG>svn
                revert</STRONG></SPAN> commands will also set last-commit
                timestamps on files that they touch.</P></DD><DT><SPAN class="term"><CODE class="literal">mime-types-file</CODE></SPAN></DT><DD><P>This option, new to Subversion 1.5, specifies the
                path of a MIME types mapping file, such as the
                <CODE class="filename">mime.types</CODE> file provided by the
                Apache HTTP Server.  Subversion uses this file to
                assign MIME types to newly added or imported files.
                See <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.auto" title="Automatic Property Setting">the section called âAutomatic Property Settingâ</A> and
                <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.special.mime-type" title="File Content Type">the section called âFile Content Typeâ</A> for more about Subversion's detection and use of
                file content types.</P></DD><DT><SPAN class="term"><CODE class="literal">preserved-conflict-file-exts</CODE></SPAN></DT><DD><P>The value of this option is a space-delimited list
                of file extensions that Subversion should preserve
                when generating conflict filenames.  By default, the
                list is empty.  This option is new to Subversion
                1.5.</P><P>When Subversion detects conflicting file content
                changes, it defers resolution of those conflicts to the
                user.  To assist in the resolution, Subversion keeps
                pristine copies of the various competing versions of
                the file in the working copy.  By default, those
                conflict files have names constructed by appending to
                the original filename a custom extension such as
                <CODE class="filename">.mine</CODE> or
                <CODE class="filename">.<EM class="replaceable"><CODE>REV</CODE></EM></CODE>
                (where <EM class="replaceable"><CODE>REV</CODE></EM> is a revision
                number).  A mild annoyance with this naming scheme is
                that on operating systems where a file's extension
                determines the default application used to open and
                edit that file, appending a custom extension prevents
                the file from being easily opened by its native
                application.  For example, if the file
                <CODE class="filename">ReleaseNotes.pdf</CODE> was conflicted,
                the conflict files might be named
                <CODE class="filename">ReleaseNotes.pdf.mine</CODE> or
                <CODE class="filename">ReleaseNotes.pdf.r4231</CODE>.  While
                your system might be configured to use Adobe's Acrobat
                Reader to open files whose extensions are
                <CODE class="filename">.pdf</CODE>, there probably isn't an
                application configured on your system to open all
                files whose extensions are
                <CODE class="filename">.r4231</CODE>.</P><P>You can fix this annoyance by using this
                configuration option, though.  For files with one of
                the specified extensions, Subversion will append to
                the conflict file names the custom extension just as
                before, but then also reappend the file's original
                extension.  Using the previous example, and assuming
                that <CODE class="literal">pdf</CODE> is one of the extensions
                configured in this list thereof, the conflict files
                generated for <CODE class="filename">ReleaseNotes.pdf</CODE>
                would instead be named
                <CODE class="filename">ReleaseNotes.pdf.mine.pdf</CODE> and
                <CODE class="filename">ReleaseNotes.pdf.r4231.pdf</CODE>.
                Because each file ends in
                <CODE class="filename">.pdf</CODE>, the correct default
                application will be used to view them.</P></DD><DT><SPAN class="term"><CODE class="literal">interactive-conflicts</CODE></SPAN></DT><DD><P>This is a Boolean option that specifies whether
                Subversion should try to resolve conflicts
                interactively.  If its value is <CODE class="literal">yes</CODE>
                (which is the default value), Subversion will prompt
                the user for how to handle conflicts in the manner
                demonstrated in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.resolve" title="Resolve Conflicts (Merging Others&#39; Changes)">the section called âResolve Conflicts (Merging Others' Changes)â</A>.  Otherwise, it will simply flag the conflict and
                continue its operation, postponing resolution to a later
                time.</P></DD><DT><SPAN class="term"><CODE class="literal">no-unlock</CODE></SPAN></DT><DD><P>This Boolean option corresponds to <SPAN class="command"><STRONG>svn
                commit</STRONG></SPAN>'s <CODE class="option">--no-unlock</CODE>
                option, which tells Subversion not to release locks on
                files you've just committed.  If this runtime option
                is set to <CODE class="literal">yes</CODE>, Subversion will
                never release locks automatically, leaving you to run
                <SPAN class="command"><STRONG>svn unlock</STRONG></SPAN> explicitly.  It defaults
                to <CODE class="literal">no</CODE>.</P></DD></DL></DIV><P>The <CODE class="literal">auto-props</CODE> section controls
          the Subversion client's ability to automatically set
          properties on files when they are added or imported.
          It contains any number of key-value pairs in the
          format <CODE class="literal">PATTERN = PROPNAME=VALUE[;PROPNAME=VALUE
          ...]</CODE>, where <CODE class="literal">PATTERN</CODE> is a file
          pattern that matches one or more filenames and the rest of
          the line is a semicolon-delimited set of property
          assignments.  Multiple matches
          on a file will result in multiple propsets for that
          file; however, there is no guarantee that auto-props
          will be applied in the order in which they are listed
          in the config file, so you can't have one rule
          â<SPAN class="quote">override</SPAN>â another.  You can find several
          examples of auto-props usage in the
          <CODE class="filename">config</CODE> file.  Lastly, don't
          forget to set <CODE class="literal">enable-auto-props</CODE> to
          <CODE class="literal">yes</CODE> in the <CODE class="literal">miscellany</CODE>
          section if you want to enable auto-props.</P></DIV></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.advanced.l10n"></A>Localization</H2></DIV></DIV></DIV><P><EM class="firstterm">Localization</EM> is the act of making
      programs behave in a region-specific way.  When a program
      formats numbers or dates in a way specific to your part of the
      world or prints messages (or accepts input) in your native
      language, the program is said to
      be <EM class="firstterm">localized</EM>.  This section describes
      steps Subversion has made toward localization.</P><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.advanced.l10n.understanding"></A>Understanding Locales</H3></DIV></DIV></DIV><P>Most modern operating systems have a notion of the
        â<SPAN class="quote">current locale</SPAN>ââthat is, the region or
        country whose localization conventions are honored.  These
        conventionsâtypically chosen by some runtime
        configuration mechanism on the computerâaffect the way
        in which programs present data to the user, as well as the way
        in which they accept user input.</P><P>On most Unix-like systems, you can check the values of the
        locale-related runtime configuration options by running the
        <SPAN class="command"><STRONG>locale</STRONG></SPAN> command:</P><PRE class="screen">$ locale
LANG=
LC_COLLATE="C"
LC_CTYPE="C"
LC_MESSAGES="C"
LC_MONETARY="C"
LC_NUMERIC="C"
LC_TIME="C"
LC_ALL="C"
$
</PRE><P>The output is a list of locale-related environment
        variables and their current values.  In this example, the
        variables are all set to the default <CODE class="literal">C</CODE>
        locale, but users can set these variables to specific
        country/language code combinations.  For example, if one were
        to set the <CODE class="literal">LC_TIME</CODE> variable to
        <CODE class="literal">fr_CA</CODE>, programs would know to present
        time and date information formatted according to a
        French-speaking Canadian's expectations.  And if one were to
        set the <CODE class="literal">LC_MESSAGES</CODE> variable to
        <CODE class="literal">zh_TW</CODE>, programs would know to present
        human-readable messages in Traditional Chinese.  Setting the
        <CODE class="literal">LC_ALL</CODE> variable has the effect of changing
        every locale variable to the same value.  The value of
        <CODE class="literal">LANG</CODE> is used as a default value for any
        locale variable that is unset.  To see the list of available
        locales on a Unix system, run the command <STRONG class="userinput"><CODE>locale
        -a</CODE></STRONG>.</P><P>On Windows, locale configuration is done via the
        â<SPAN class="quote">Regional and Language Options</SPAN>â control panel
        item.  There you can view and select the values of individual
        settings from the available locales, and even customize (at a
        sickening level of detail) several of the display formatting
        conventions.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.advanced.l10n.svnuse"></A>Subversion's Use of Locales</H3></DIV></DIV></DIV><P>The Subversion client, <SPAN class="command"><STRONG>svn</STRONG></SPAN>, honors the
        current locale configuration in two ways.  First, it notices
        the value of the <CODE class="literal">LC_MESSAGES</CODE> variable and
        attempts to print all messages in the specified language.  For
        example:</P><PRE class="screen">$ export LC_MESSAGES=de_DE
$ svn help cat
cat: Gibt den Inhalt der angegebenen Dateien oder URLs aus.
Aufruf: cat ZIEL[@REV]...
â¦
</PRE><P>This behavior works identically on both Unix and Windows
        systems.  Note, though, that while your operating system might
        have support for a certain locale, the Subversion client still
        may not be able to speak the particular language.  In order to
        produce localized messages, human volunteers must provide
        translations for each language.  The translations are written
        using the GNU gettext package, which results in translation
        modules that end with the <CODE class="filename">.mo</CODE> filename
        extension.  For example, the German translation file is named
        <CODE class="filename">de.mo</CODE>.  These translation files are
        installed somewhere on your system.  On Unix, they typically
        live in <CODE class="filename">/usr/share/locale/</CODE>, while
        on Windows they're often found in the
        <CODE class="filename">\share\locale\</CODE> folder in Subversion's
        installation area.  Once installed, a module is named after
        the program for which it provides translations.  For example, the
        <CODE class="filename">de.mo</CODE> file may ultimately end up
        installed as
        <CODE class="filename">/usr/share/locale/de/LC_MESSAGES/subversion.mo</CODE>.
        By browsing the installed <CODE class="filename">.mo</CODE> files, you
        can see which languages the Subversion client is able to
        speak.</P><P>The second way in which the locale is honored involves how
        <SPAN class="command"><STRONG>svn</STRONG></SPAN> interprets your input.  The repository
        stores all paths, filenames, and log messages in Unicode,
        encoded as UTF-8.  In that sense, the repository is
        <EM class="firstterm">internationalized</EM>âthat is, the
        repository is ready to accept input in any human language.
        This means, however, that the Subversion client is responsible
        for sending only UTF-8 filenames and log messages into the
        repository.  To do this, it must convert the data
        from the native locale into UTF-8.</P><P>For example, suppose you create a file named
        <CODE class="filename">caffÃ¨.txt</CODE>, and then when committing the
        file, you write the log message as â<SPAN class="quote">Adesso il caffÃ¨ Ã¨
        piÃ¹ forte.</SPAN>â  Both the filename and the log message contain
        non-ASCII characters, but because your locale is set to
        <CODE class="literal">it_IT</CODE>, the Subversion client knows to
        interpret them as Italian.  It uses an Italian character set
        to convert the data to UTF-8 before sending it off to the
        repository.</P><P>Note that while the repository demands UTF-8 filenames and
        log messages, it <SPAN class="emphasis"><EM>does not</EM></SPAN> pay attention
        to file contents.  Subversion treats file contents as opaque
        strings of bytes, and neither client nor server makes an
        attempt to understand the character set or encoding of the
        contents.</P><DIV class="sidebar"><P class="title"><B>Character Set Conversion Errors</B></P><P>While using Subversion, you might get hit with an error
          related to character set conversions:</P><PRE class="screen">svn: Can't convert string from native encoding to 'UTF-8':
â¦
svn: Can't convert string from 'UTF-8' to native encoding:
â¦
</PRE><P>Errors such as this typically occur when the Subversion
          client has received a UTF-8 string from the repository, but
          not all of the characters in that string can be represented
          using the encoding of the current locale.  For example, if
          your locale is <CODE class="literal">en_US</CODE> but a collaborator
          has committed a Japanese filename, you're likely to see this
          error when you receive the file during an <SPAN class="command"><STRONG>svn
          update</STRONG></SPAN>.</P><P>The solution is either to set your locale to something
          that <SPAN class="emphasis"><EM>can</EM></SPAN> represent the incoming UTF-8
          data, or to change the filename or log message in the
          repository.  (And don't forget to slap your collaborator's
          handâprojects should decide on common languages ahead of
          time so that all participants are using the same
          locale.)</P></DIV></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.advanced.externaleditors"></A>Using External Editors</H2></DIV></DIV></DIV><P>The most obvious way to get data into Subversion is through
      the addition of files to version control, committing changes to
      those files, and so on.  But other pieces of
      information besides merely versioned file data live in your
      Subversion repository.  Some of these bits of
      informationâcommit log messages, lock comments, and some
      property valuesâtend to be textual in nature and are
      provided explicitly by users.  Most of this information can be
      provided to the Subversion command-line client using the
      <CODE class="option">--message</CODE> (<CODE class="option">-m</CODE>) and
      <CODE class="option">--file</CODE> (<CODE class="option">-F</CODE>) options with the
      appropriate subcommands.</P><P>Each of these options has its pros and cons.  For example,
      when performing a commit, <CODE class="option">--file</CODE>
      (<CODE class="option">-F</CODE>) works well if you've already prepared a
      text file that holds your commit log message.  If you didn't,
      though, you can use <CODE class="option">--message</CODE>
      (<CODE class="option">-m</CODE>) to provide a log message on the command
      line.  Unfortunately, it can be tricky to compose anything more
      than a simple one-line message on the command line.  Users want
      more flexibilityâmultiline, free-form log message editing
      on demand.</P><P>Subversion supports this by allowing you to specify an
      external text editor that it will launch as necessary
      to give you a more powerful input mechanism for this textual
      metadata.  There are several ways to tell Subversion which
      editor you'd like use.  Subversion checks the following things,
      in the order specified, when it wants to launch such an
      editor:</P><DIV class="orderedlist"><OL type="1"><LI><P><CODE class="literal">--editor-cmd</CODE> command-line option</P></LI><LI><P><CODE class="literal">SVN_EDITOR</CODE> environment variable</P></LI><LI><P><CODE class="literal">editor-cmd</CODE> runtime configuration option</P></LI><LI><P><CODE class="literal">VISUAL</CODE> environment variable</P></LI><LI><P><CODE class="literal">EDITOR</CODE> environment variable</P></LI><LI><P>Possibly, a fallback value built into the Subversion
          libraries (not present in the official builds)</P></LI></OL></DIV><P>The value of any of these options or variables is the
      beginning of a command line to be executed by the shell.
      Subversion appends to that command line a space and the pathname
      of a temporary file to be edited.  So, to be used with
      Subversion, the configured or specified editor needs to support
      an invocation in which its last command-line parameter is a file
      to be edited, and it should be able to save the file in place
      and return a zero exit code to indicate success.</P><P>As noted, external editors can be used to provide commit log
      messages to any of the committing subcommands (such as
      <SPAN class="command"><STRONG>svn commit</STRONG></SPAN> or <SPAN class="command"><STRONG>import</STRONG></SPAN>,
      <SPAN class="command"><STRONG>svn mkdir</STRONG></SPAN> or <SPAN class="command"><STRONG>delete</STRONG></SPAN> when
      provided a URL target, etc.), and Subversion will try to
      launch the editor automatically if you don't specify either of
      the <CODE class="option">--message</CODE> (<CODE class="option">-m</CODE>) or
      <CODE class="option">--file</CODE> (<CODE class="option">-F</CODE>) options.  The
      <SPAN class="command"><STRONG>svn propedit</STRONG></SPAN> command is built almost entirely
      around the use of an external editor.  And beginning in version
      1.5, Subversion will also use the configured external text
      editor when the user asks it to launch an editor during
      interactive conflict resolution.  Oddly, there doesn't appear to
      be a way to use external editors to interactively provide lock
      comments.</P></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.advanced.externaldifftools"></A>Using External Differencing and Merge Tools</H2></DIV></DIV></DIV><P>The interface between Subversion and external two- and three-way
      differencing tools harkens back to a time when Subversion's only
      contextual differencing capabilities were built around
      invocations of the GNU diffutils toolchain, specifically the
      <SPAN class="command"><STRONG>diff</STRONG></SPAN> and <SPAN class="command"><STRONG>diff3</STRONG></SPAN> utilities.
      To get the kind of behavior Subversion needed, it called these
      utilities with more than a handful of options and parameters,
      most of which were quite specific to the utilities.  Some time
      later, Subversion grew its own internal differencing library,
      and as a failover mechanism, the <CODE class="option">--diff-cmd</CODE> and
      <CODE class="option">--diff3-cmd</CODE> options were added to the
      Subversion command-line client so that users could more easily
      indicate that they preferred to use the GNU diff and diff3
      utilities instead of the newfangled internal diff library.  If
      those options were used, Subversion would simply ignore the
      internal diff library, and fall back to running those external
      programs, lengthy argument lists and all.  And that's where
      things remain today.</P><P>It didn't take long for folks to realize that having such
      easy configuration mechanisms for specifying that Subversion
      should use the external GNU diff and diff3 utilities located at
      a particular place on the system could be applied toward the use
      of other differencing tools, too.  After all, Subversion didn't
      actually verify that the things it was being told to run were
      members of the GNU diffutils toolchain.  But the only
      configurable aspect of using those external tools is their
      location on the systemânot the option set, parameter
      order, and so on.  Subversion continues to throw all those GNU utility
      options at your external diff tool regardless of whether
      that program can understand those options.  And that's where
      things get unintuitive for most users.</P><P>The key to using external two- and three-way differencing tools
      (other than GNU diff and diff3, of course) with Subversion is to
      use wrapper scripts, which convert the input from Subversion into
      something that your differencing tool can understand, and then
      to convert the output of your tool back into a format that
      Subversion expectsâthe format that the GNU tools would
      have used.  The following sections cover the specifics of those
      expectations.</P><DIV class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Note</H3><P>The decision on when to fire off a contextual two- or three-way
        diff as part of a larger Subversion operation is made entirely
        by Subversion and is affected by, among other things, whether
        the files being operated on are human-readable as
        determined by their <CODE class="literal">svn:mime-type</CODE> property.
        This means, for example, that even if you had the niftiest
        Microsoft Word-aware differencing or merging tool in the
        universe, it would never be invoked by Subversion as long as
        your versioned Word documents had a configured MIME type that
        denoted that they were not human-readable (such as
        <CODE class="literal">application/msword</CODE>).  For more about MIME
        type settings, see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.special.mime-type" title="File Content Type">the section called âFile Content Typeâ</A></P></DIV><P>Subversion 1.5 introduces interactive resolution of
      conflicts (described in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.resolve" title="Resolve Conflicts (Merging Others&#39; Changes)">the section called âResolve Conflicts (Merging Others' Changes)â</A>), and one of the options provided to users is the ability to
      launch a third-party merge tool.  If this action is taken,
      Subversion will consult the <CODE class="literal">merge-tool-cmd</CODE>
      runtime configuration option to find the name of an external
      merge tool and, upon finding one, will launch that tool with the
      appropriate input files.  This differs from the configurable
      three-way differencing tool in a couple of ways.  First, the
      differencing tool is always used to handle three-way
      differences, whereas the merge tool is employed only when
      three-way difference application has detected a conflict.
      Second, the interface is much cleanerâyour configured
      merge tool need only accept as command-line parameters four path
      specifications:  the base file, the â<SPAN class="quote">theirs</SPAN>â file
      (which contains upstream changes), the â<SPAN class="quote">mine</SPAN>â file
      (which contains local modifications), and the path of the file
      where the final resolved contents should be stored.</P><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.advanced.externaldifftools.diff"></A>External diff</H3></DIV></DIV></DIV><P>Subversion calls external diff programs with parameters
        suitable for the GNU diff utility, and expects only that the
        external program will return with a successful error code.  For
        most alternative diff programs, only the sixth and seventh
        argumentsâthe paths of the files that represent the left and
        right sides of the diff, respectivelyâare of interest.  Note
        that Subversion runs the diff program once per modified file
        covered by the Subversion operation, so if your program runs
        in an asynchronous fashion (or is â<SPAN class="quote">backgrounded</SPAN>â),
        you might have several instances of it all running
        simultaneously.  Finally, Subversion expects that your program
        return an error code of 1 if your program detected differences,
        or 0 if it did notâany other error code is considered a
        fatal error.
        <SUP>[<A id="id555817" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id555817" class="footnote">51</A>]</SUP>
      </P><P><A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.externaldifftools.diff.ex-1" title="Example&nbsp;7.2.&nbsp;diffwrap.py">Example&nbsp;7.2, âdiffwrap.pyâ</A>
        and <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.externaldifftools.diff.ex-2" title="Example&nbsp;7.3.&nbsp;diffwrap.bat">Example&nbsp;7.3, âdiffwrap.batâ</A>
        are templates for external diff tool wrappers in the Python
        and Windows batch scripting languages, respectively.</P><DIV class="example"><A id="svn.advanced.externaldifftools.diff.ex-1"></A><P class="title"><B>Example&nbsp;7.2.&nbsp;diffwrap.py</B></P><DIV class="example-contents"><PRE class="programlisting">#!/usr/bin/env python
import sys
import os

# Configure your favorite diff program here.
DIFF = "/usr/local/bin/my-diff-tool"

# Subversion provides the paths we need as the last two parameters.
LEFT  = sys.argv[-2]
RIGHT = sys.argv[-1]

# Call the diff command (change the following line to make sense for
# your diff program).
cmd = [DIFF, '--left', LEFT, '--right', RIGHT]
os.execv(cmd[0], cmd)

# Return an errorcode of 0 if no differences were detected, 1 if some were.
# Any other errorcode will be treated as fatal.
</PRE></DIV></DIV><BR class="example-break"><DIV class="example"><A id="svn.advanced.externaldifftools.diff.ex-2"></A><P class="title"><B>Example&nbsp;7.3.&nbsp;diffwrap.bat</B></P><DIV class="example-contents"><PRE class="programlisting">@ECHO OFF

REM Configure your favorite diff program here.
SET DIFF="C:\Program Files\Funky Stuff\My Diff Tool.exe"

REM Subversion provides the paths we need as the last two parameters.
REM These are parameters 6 and 7 (unless you use svn diff -x, in
REM which case, all bets are off).
SET LEFT=%6
SET RIGHT=%7

REM Call the diff command (change the following line to make sense for
REM your diff program).
%DIFF% --left %LEFT% --right %RIGHT%

REM Return an errorcode of 0 if no differences were detected, 1 if some were.
REM Any other errorcode will be treated as fatal.
</PRE></DIV></DIV><BR class="example-break"></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.advanced.externaldifftools.diff3"></A>External diff3</H3></DIV></DIV></DIV><P>Subversion calls external merge programs with parameters
        suitable for the GNU diff3 utility, expecting that the
        external program will return with a successful error code and that
        the full file contents that result from the completed merge
        operation are printed on the standard output stream (so that
        Subversion can redirect them into the appropriate version-controlled
        file).  For most alternative merge programs, only
        the ninth, tenth, and eleventh arguments, the paths of the
        files which represent the â<SPAN class="quote">mine,</SPAN>â
        â<SPAN class="quote">older,</SPAN>â and â<SPAN class="quote">yours</SPAN>â inputs,
        respectively, are of interest.  Note that because Subversion
        depends on the output of your merge program, your wrapper
        script must not exit before that output has been delivered to
        Subversion.  When it finally does exit, it should return an
        error code of 0 if the merge was successful, or 1 if unresolved
        conflicts remain in the outputâany other error code is
        considered a fatal error.</P><P><A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.externaldifftools.diff3.ex-1" title="Example&nbsp;7.4.&nbsp;diff3wrap.py">Example&nbsp;7.4, âdiff3wrap.pyâ</A> 
        and <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.externaldifftools.diff3.ex-2" title="Example&nbsp;7.5.&nbsp;diff3wrap.bat">Example&nbsp;7.5, âdiff3wrap.batâ</A> are
        templates for external merge tool wrappers in the Python
        and Windows batch scripting languages, respectively.</P><DIV class="example"><A id="svn.advanced.externaldifftools.diff3.ex-1"></A><P class="title"><B>Example&nbsp;7.4.&nbsp;diff3wrap.py</B></P><DIV class="example-contents"><PRE class="programlisting">#!/usr/bin/env python
import sys
import os

# Configure your favorite diff program here.
DIFF3 = "/usr/local/bin/my-merge-tool"

# Subversion provides the paths we need as the last three parameters.
MINE  = sys.argv[-3]
OLDER = sys.argv[-2]
YOURS = sys.argv[-1]

# Call the merge command (change the following line to make sense for
# your merge program).
cmd = [DIFF3, '--older', OLDER, '--mine', MINE, '--yours', YOURS]
os.execv(cmd[0], cmd)

# After performing the merge, this script needs to print the contents
# of the merged file to stdout.  Do that in whatever way you see fit.
# Return an errorcode of 0 on successful merge, 1 if unresolved conflicts
# remain in the result.  Any other errorcode will be treated as fatal.
</PRE></DIV></DIV><BR class="example-break"><DIV class="example"><A id="svn.advanced.externaldifftools.diff3.ex-2"></A><P class="title"><B>Example&nbsp;7.5.&nbsp;diff3wrap.bat</B></P><DIV class="example-contents"><PRE class="programlisting">@ECHO OFF

REM Configure your favorite diff3/merge program here.
SET DIFF3="C:\Program Files\Funky Stuff\My Merge Tool.exe"

REM Subversion provides the paths we need as the last three parameters.
REM These are parameters 9, 10, and 11.  But we have access to only
REM nine parameters at a time, so we shift our nine-parameter window
REM twice to let us get to what we need.
SHIFT
SHIFT
SET MINE=%7
SET OLDER=%8
SET YOURS=%9

REM Call the merge command (change the following line to make sense for
REM your merge program).
%DIFF3% --older %OLDER% --mine %MINE% --yours %YOURS%

REM After performing the merge, this script needs to print the contents
REM of the merged file to stdout.  Do that in whatever way you see fit.
REM Return an errorcode of 0 on successful merge, 1 if unresolved conflicts
REM remain in the result.  Any other errorcode will be treated as fatal.
</PRE></DIV></DIV><BR class="example-break"></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.customization.summary"></A>Summary</H2></DIV></DIV></DIV><P>Sometimes there's a single right way to do things; sometimes
      there are many.  Subversion's developers understand that while
      the majority of its exact behaviors are acceptable to most of
      its users, there are some corners of its functionality where
      such a universally pleasing approach doesn't exist.  In those
      places, Subversion offers users the opportunity to tell it how
      <SPAN class="emphasis"><EM>they</EM></SPAN> want it to behave.</P><P>In this chapter, we explored Subversion's runtime
      configuration system and other mechanisms by which users can
      control those configurable behaviors.  If you are a developer,
      though, the next chapter will take you one step further.  It
      describes how you can further customize your Subversion
      experience by writing your own software against Subversion's
      libraries.</P></DIV><DIV class="footnotes"><BR><HR width="100" align="left"><DIV class="footnote"><P><SUP>[<A id="ftn.id555977" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id555977" class="para">49</A>] </SUP>The <CODE class="literal">APPDATA</CODE> environment variable
            points to the <CODE class="filename">Application Data</CODE> area,
            so you can always refer to this folder as
            <CODE class="filename">%APPDATA%\Subversion</CODE>.</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id557116" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id557116" class="para">50</A>] </SUP>Anyone for potluck dinner?</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id555817" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id555817" class="para">51</A>] </SUP>The GNU diff manual page puts it this way: â<SPAN class="quote">An
            exit status of 0 means no differences were found, 1 means some
            differences were found, and 2 means trouble.</SPAN>â</P></DIV></DIV></DIV><DIV class="chapter" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title"><A id="svn.developer"></A>Chapter&nbsp;8.&nbsp;Embedding Subversion</H2></DIV></DIV></DIV><DIV class="toc"><P><B>Table of Contents</B></P><DL><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.layerlib">Layered Library Design</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.layerlib.repos">Repository Layer</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.layerlib.ra">Repository Access Layer</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.layerlib.client">Client Layer</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.insidewc">Inside the Working Copy Administration Area</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.insidewc.entries">The Entries File</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.insidewc.base-and-props">Pristine Copies and Property Files</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.usingapi">Using the APIs</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.usingapi.apr">The Apache Portable Runtime Library</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.usingapi.urlpath">URL and Path Requirements</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.usingapi.otherlangs">Using Languages Other Than C and C++</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.usingapi.codesamples">Code Samples</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.summary">Summary</A></SPAN></DT></DL></DIV><P>Subversion has a modular design: it's implemented as a
    collection of libraries written in C.  Each library has a
    well-defined purpose and application programming interface (API),
    and that interface is available not only for Subversion itself to
    use, but for any software that wishes to embed or otherwise
    programmatically control Subversion.  Additionally, Subversion's
    API is available not only to other C programs, but also to
    programs written in higher-level languages such as Python, Perl,
    Java, and Ruby.</P><P>This chapter is for those who wish to interact with Subversion
    through its public API or its various language bindings.  If you
    wish to write robust wrapper scripts around Subversion
    functionality to simplify your own life, are trying to develop
    more complex integrations between Subversion and other pieces of
    software, or just have an interest in Subversion's various library
    modules and what they offer, this chapter is for you.  If,
    however, you don't foresee yourself participating with Subversion
    at such a level, feel free to skip this chapter with the
    confidence that your experience as a Subversion user will not be
    affected.</P><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.developer.layerlib"></A>Layered Library Design</H2></DIV></DIV></DIV><P>Each of Subversion's core libraries can be said to exist in
      one of three main layersâthe Repository layer, the
      Repository Access (RA) layer, or the Client layer (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.intro.architecture.dia-1" title="Figure&nbsp;1.&nbsp;Subversion&#39;s architecture">Figure&nbsp;1, âSubversion's architectureâ</A> in the Preface).  We will examine
      these layers shortly, but first, let's briefly summarize
      Subversion's various libraries.  For the sake of consistency, we
      will refer to the libraries by their extensionless Unix library
      names (<CODE class="filename">libsvn_fs</CODE>, <CODE class="filename">libsvn_wc</CODE>,
      <CODE class="filename">mod_dav_svn</CODE>, etc.).</P><DIV class="variablelist"><DL><DT><SPAN class="term">libsvn_client</SPAN></DT><DD><P>Primary interface for client
          programs</P></DD><DT><SPAN class="term">libsvn_delta</SPAN></DT><DD><P>Tree and byte-stream differencing
          routines</P></DD><DT><SPAN class="term">libsvn_diff</SPAN></DT><DD><P>Contextual differencing and merging
          routines</P></DD><DT><SPAN class="term">libsvn_fs</SPAN></DT><DD><P>Filesystem commons and module
          loader</P></DD><DT><SPAN class="term">libsvn_fs_base</SPAN></DT><DD><P>The Berkeley DB filesystem
          backend</P></DD><DT><SPAN class="term">libsvn_fs_fs</SPAN></DT><DD><P>The native filesystem (FSFS)
          backend</P></DD><DT><SPAN class="term">libsvn_ra</SPAN></DT><DD><P>Repository Access commons and module
          loader</P></DD><DT><SPAN class="term">libsvn_ra_local</SPAN></DT><DD><P>The local Repository Access
          module</P></DD><DT><SPAN class="term">libsvn_ra_neon</SPAN></DT><DD><P>The WebDAV Repository Access
          module</P></DD><DT><SPAN class="term">libsvn_ra_serf</SPAN></DT><DD><P>Another (experimental) WebDAV Repository
          Access module</P></DD><DT><SPAN class="term">libsvn_ra_svn</SPAN></DT><DD><P>The custom protocol Repository Access
          module</P></DD><DT><SPAN class="term">libsvn_repos</SPAN></DT><DD><P>Repository interface</P></DD><DT><SPAN class="term">libsvn_subr</SPAN></DT><DD><P>Miscellaneous helpful
          subroutines</P></DD><DT><SPAN class="term">libsvn_wc</SPAN></DT><DD><P>The working copy management
          library</P></DD><DT><SPAN class="term">mod_authz_svn</SPAN></DT><DD><P>Apache authorization module for Subversion
          repositories access via WebDAV</P></DD><DT><SPAN class="term">mod_dav_svn</SPAN></DT><DD><P>Apache module for mapping WebDAV operations to
          Subversion ones</P></DD></DL></DIV><P>The fact that the word â<SPAN class="quote">miscellaneous</SPAN>â
      appears only once in the previous list is a good sign.  The
      Subversion development team is serious about making sure that
      functionality lives in the right layer and libraries.  Perhaps
      the greatest advantage of the modular design is its lack of
      complexity from a developer's point of view.  As a developer,
      you can quickly formulate that kind of â<SPAN class="quote">big
      picture</SPAN>â that allows you to pinpoint the location of
      certain pieces of functionality with relative ease.</P><P>Another benefit of modularity is the ability to replace a
      given module with a whole new library that implements the same
      API without affecting the rest of the code base.  In some sense,
      this happens within Subversion already.  The
      <CODE class="filename">libsvn_ra_local</CODE>,
      <CODE class="filename">libsvn_ra_neon</CODE>,
      <CODE class="filename">libsvn_ra_serf</CODE>, and
      <CODE class="filename">libsvn_ra_svn</CODE> libraries each implement the
      same interface, all working as plug-ins to
      <CODE class="filename">libsvn_ra</CODE>.  And all four communicate with
      the Repository layerâ<CODE class="filename">libsvn_ra_local</CODE> connects to the
      repository directly; the other three do so over a network.  The
      <CODE class="filename">libsvn_fs_base</CODE> and
      <CODE class="filename">libsvn_fs_fs</CODE> libraries are another pair of
      libraries that implement the same functionality in different
      waysâboth are plug-ins to the common
      <CODE class="filename">libsvn_fs</CODE> library.</P><P>The client itself also highlights the benefits of modularity
      in the Subversion design.  Subversion's
      <CODE class="filename">libsvn_client</CODE> library is a one-stop shop
      for most of the functionality necessary for designing a working
      Subversion client (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.layerlib.client" title="Client Layer">the section called âClient Layerâ</A>).  So while the
      Subversion distribution provides only the <SPAN class="command"><STRONG>svn</STRONG></SPAN>
      command-line client program, several third-party
      programs provide various forms of graphical client UIs.
      These GUIs use the same APIs that the stock command-line client
      does.  This type of modularity has played a large role in the
      proliferation of available Subversion clients and IDE
      integrations and, by extension, to the tremendous adoption rate
      of Subversion itself.</P><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.developer.layerlib.repos"></A>Repository Layer</H3></DIV></DIV></DIV><P>When referring to Subversion's Repository layer, we're
        generally talking about two basic conceptsâthe versioned
        filesystem implementation (accessed via
        <CODE class="filename">libsvn_fs</CODE>, and supported by its
        <CODE class="filename">libsvn_fs_base</CODE> and
        <CODE class="filename">libsvn_fs_fs</CODE> plug-ins), and the repository
        logic that wraps it (as implemented in
        <CODE class="filename">libsvn_repos</CODE>).  These libraries provide
        the storage and reporting mechanisms for the various revisions
        of your version-controlled data.  This layer is connected to
        the Client layer via the Repository Access layer, and is, from
        the perspective of the Subversion user, the stuff at the
        â<SPAN class="quote">other end of the line.</SPAN>â</P><P>The Subversion filesystem is not a kernel-level filesystem
        that one would install in an operating system (such as the
        Linux ext2 or NTFS), but instead is a virtual filesystem.
        Rather than storing â<SPAN class="quote">files</SPAN>â and
        â<SPAN class="quote">directories</SPAN>â as real files and directories (the
        kind you can navigate through using your favorite shell
        program), it uses one of two available abstract storage
        backendsâeither a Berkeley DB database environment or a
        flat-file representation.  (To learn more about the two
        repository backends, see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.basics.backends" title="Choosing a Data Store">the section called âChoosing a Data Storeâ</A>.)  There has even
        been considerable interest by the development community in
        giving future releases of Subversion the ability to use other
        backend database systems, perhaps through a mechanism such as
        Open Database Connectivity (ODBC).  In fact, Google did
        something similar to this before launching the Google Code
        Project Hosting service:  they announced in mid-2006 that
        members of its open source team had written a new proprietary
        Subversion filesystem plug-in that used Google's ultra-scalable
        Bigtable database for its storage.</P><P>The filesystem API exported by
        <CODE class="filename">libsvn_fs</CODE> contains the kinds of
        functionality you would expect from any other filesystem
        APIâyou can create and remove files and directories,
        copy and move them around, modify file contents, and so on.
        It also has features that are not quite as common, such as the
        ability to add, modify, and remove metadata
        (â<SPAN class="quote">properties</SPAN>â) on each file or directory.
        Furthermore, the Subversion filesystem is a versioning
        filesystem, which means that as you make changes to your
        directory tree, Subversion remembers what your tree looked
        like before those changes.  And before the previous changes.
        And the previous ones.  And so on, all the way back through
        versioning time to (and just beyond) the moment you first
        started adding things to the filesystem.</P><P>All the modifications you make to your tree are done
        within the context of a Subversion commit transaction.  The
        following is a simplified general routine for modifying your
        filesystem:</P><DIV class="orderedlist"><OL type="1"><LI><P>Begin a Subversion commit transaction.</P></LI><LI><P>Make your changes (adds, deletes, property
            modifications, etc.).</P></LI><LI><P>Commit your transaction.</P></LI></OL></DIV><P>Once you have committed your transaction, your filesystem
        modifications are permanently stored as historical artifacts.
        Each of these cycles generates a single new revision of your
        tree, and each revision is forever accessible as an immutable
        snapshot of â<SPAN class="quote">the way things were.</SPAN>â</P><DIV class="sidebar"><P class="title"><B>The Transaction Distraction</B></P><P>The notion of a Subversion transaction can become easily
          confused with the transaction support provided by the
          underlying database itself, especially given the former's
          close proximity to the Berkeley DB database code in
          <CODE class="filename">libsvn_fs_base</CODE>.  Both types of
          transaction exist to provide atomicity and isolation.  In
          other words, transactions give you the ability to perform a
          set of actions in an all-or-nothing fashionâeither all
          the actions in the set complete with success, or they all
          get treated as though <SPAN class="emphasis"><EM>none</EM></SPAN> of them ever
          happenedâand in a way that does not interfere with
          other processes acting on the data.</P><P>Database transactions generally encompass small
          operations related specifically to the modification of data
          in the database itself (such as changing the contents of a
          table row).  Subversion transactions are larger in scope,
          encompassing higher-level operations such as making
          modifications to a set of files and directories that are
          intended to be stored as the next revision of the filesystem
          tree.  If that isn't confusing enough, consider the fact
          that Subversion uses a database transaction during the
          creation of a Subversion transaction (so that if the
          creation of a Subversion transaction fails, the database will
          look as though we had never attempted that creation in the first
          place)!</P><P>Fortunately for users of the filesystem API, the
          transaction support provided by the database system itself
          is hidden almost entirely from view (as should be expected
          from a properly modularized library scheme).  It is only
          when you start digging into the implementation of the
          filesystem itself that such things become visible (or
          interesting).</P></DIV><P>Most of the functionality the filesystem
        interface provides deals with actions that occur on individual
        filesystem paths.  That is, from outside the filesystem, the
        primary mechanism for describing and accessing the individual
        revisions of files and directories comes through the use of
        path strings such as <CODE class="filename">/foo/bar</CODE>, just as though
        you were addressing files and directories through your
        favorite shell program.  You add new files and directories by
        passing their paths-to-be to the right API functions.  You
        query for information about them by the same mechanism.</P><P>Unlike most filesystems, though, a path alone is not
        enough information to identify a file or directory in
        Subversion.  Think of a directory tree as a two-dimensional
        system, where a node's siblings represent a sort of
        left-and-right motion, and navigating into the node's
        subdirectories represents a downward motion.  <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.layerlib.repos.dia-1" title="Figure&nbsp;8.1.&nbsp;Files and directories in two dimensions">Figure&nbsp;8.1, âFiles and directories in two dimensionsâ</A> shows a typical
        representation of a tree as exactly that.</P><DIV class="figure"><A id="svn.developer.layerlib.repos.dia-1"></A><P class="title"><B>Figure&nbsp;8.1.&nbsp;Files and directories in two dimensions</B></P><DIV class="figure-contents"><DIV><IMG src="./0101 Version Control with Subversion_files/ch08dia1.png" alt="Files and directories in two dimensions"></DIV></DIV></DIV><BR class="figure-break"><P>The difference here is that the Subversion filesystem has a
        nifty third dimension that most filesystems do not
        haveâTime!
        <SUP>[<A id="id561795" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id561795" class="footnote">52</A>]</SUP>
        In the filesystem interface, nearly every function that has a
        <EM class="parameter"><CODE>path</CODE></EM> argument also expects a
        <EM class="parameter"><CODE>root</CODE></EM> argument.  This
        <CODE class="literal">svn_fs_root_t</CODE> argument describes
        either a revision or a Subversion transaction (which is simply
        a revision in the making) and provides that third dimension
        of context needed to understand the difference between
        <CODE class="filename">/foo/bar</CODE> in revision 32, and the same
        path as it exists in revision 98.  <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.layerlib.repos.dia-2" title="Figure&nbsp;8.2.&nbsp;Versioning time&mdash;the third dimension!">Figure&nbsp;8.2, âVersioning timeâthe third dimension!â</A> shows revision
        history as an added dimension to the Subversion filesystem
        universe.</P><DIV class="figure"><A id="svn.developer.layerlib.repos.dia-2"></A><P class="title"><B>Figure&nbsp;8.2.&nbsp;Versioning timeâthe third dimension!</B></P><DIV class="figure-contents"><DIV><IMG src="./0101 Version Control with Subversion_files/ch08dia2.png" alt="Versioning time&mdash;the third dimension!"></DIV></DIV></DIV><BR class="figure-break"><P>As we mentioned earlier, the
        <CODE class="filename">libsvn_fs</CODE> API looks and feels like any
        other filesystem, except that it has this wonderful versioning
        capability.  It was designed to be usable by any program
        interested in a versioning filesystem.  Not coincidentally,
        Subversion itself is interested in that functionality.  But
        while the filesystem API should be sufficient for basic file
        and directory versioning support, Subversion wants
        moreâand that is where <CODE class="filename">libsvn_repos</CODE>
        comes in.</P><P>The Subversion repository library
        (<CODE class="filename">libsvn_repos</CODE>) sits (logically speaking)
        atop the <CODE class="filename">libsvn_fs</CODE> API, providing
        additional functionality beyond that of the underlying
        versioned filesystem logic.  It does not completely wrap each
        and every filesystem functionâonly certain major steps
        in the general cycle of filesystem activity are wrapped by the
        repository interface.  Some of these include the creation and
        commit of Subversion transactions and the modification of
        revision properties.  These particular events are wrapped by
        the repository layer because they have hooks associated with
        them.  A repository hook system is not strictly related to
        implementing a versioning filesystem, so it lives in the
        repository wrapper library.</P><P>The hooks mechanism is but one of the reasons for the
        abstraction of a separate repository library from the rest of
        the filesystem code.  The <CODE class="filename">libsvn_repos</CODE>
        API provides several other important utilities to Subversion.
        These include the abilities to:</P><DIV class="itemizedlist"><UL type="disc"><LI><P>Create, open, destroy, and perform recovery steps on a
            Subversion repository and the filesystem included in that
            repository.</P></LI><LI><P>Describe the differences between two filesystem
            trees.</P></LI><LI><P>Query for the commit log messages associated with all
            (or some) of the revisions in which a set of files was
            modified in the filesystem.</P></LI><LI><P>Generate a human-readable â<SPAN class="quote">dump</SPAN>â of the
            filesystemâa complete representation of the revisions in
            the filesystem.</P></LI><LI><P>Parse that dump format, loading the dumped revisions
            into a different Subversion repository.</P></LI></UL></DIV><P>As Subversion continues to evolve, the repository library
        will grow with the filesystem library to offer increased
        functionality and configurable option support.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.developer.layerlib.ra"></A>Repository Access Layer</H3></DIV></DIV></DIV><P>If the Subversion Repository layer is at â<SPAN class="quote">the other
        end of the line,</SPAN>â the Repository Access (RA) layer is
        the line itself.  Charged with marshaling data between the
        client libraries and the repository, this layer includes the
        <CODE class="filename">libsvn_ra</CODE> module loader library, the RA
        modules themselves (which currently includes
        <CODE class="filename">libsvn_ra_neon</CODE>,
        <CODE class="filename">libsvn_ra_local</CODE>,
        <CODE class="filename">libsvn_ra_serf</CODE>, and
        <CODE class="filename">libsvn_ra_svn</CODE>), and any additional
        libraries needed by one or more of those RA modules (such as
        the <CODE class="filename">mod_dav_svn</CODE> Apache module or
        <CODE class="filename">libsvn_ra_svn</CODE>'s server,
        <SPAN class="command"><STRONG>svnserve</STRONG></SPAN>).</P><P>Since Subversion uses URLs to identify its repository
        resources, the protocol portion of the URL scheme (usually
        <CODE class="literal">file://</CODE>, <CODE class="literal">http://</CODE>,
        <CODE class="literal">https://</CODE>, <CODE class="literal">svn://</CODE>, or
        <CODE class="literal">svn+ssh://</CODE>) is used to determine which RA
        module will handle the communications.  Each module registers
        a list of the protocols it knows how to â<SPAN class="quote">speak</SPAN>â
        so that the RA loader can, at runtime, determine which module
        to use for the task at hand.  You can determine which RA
        modules are available to the Subversion command-line client,
        and what protocols they claim to support, by running
        <STRONG class="userinput"><CODE>svn --version</CODE></STRONG>:</P><PRE class="screen">$ svn --version
svn, version 1.5.0 (r31699)
   compiled Jun 18 2008, 09:57:36

Copyright (C) 2000-2008 CollabNet.
Subversion is open source software, see http://subversion.tigris.org/
This product includes software developed by CollabNet (http://www.Collab.Net/).

The following repository access (RA) modules are available:

* ra_neon : Module for accessing a repository via WebDAV protocol using Neon.
  - handles 'http' scheme
  - handles 'https' scheme
* ra_svn : Module for accessing a repository using the svn network protocol.
  - handles 'svn' scheme
* ra_local : Module for accessing a repository on local disk.
  - handles 'file' scheme
* ra_serf : Module for accessing a repository via WebDAV protocol using serf.
  - handles 'http' scheme
  - handles 'https' scheme

$
</PRE><P>The public API exported by the RA layer contains
        functionality necessary for sending and receiving versioned
        data to and from the repository.  And each of the available RA
        plug-ins is able to perform that task using a specific
        protocolâ<CODE class="filename">libsvn_ra_dav</CODE> speaks
        HTTP/WebDAV (optionally using SSL encryption) with an Apache
        HTTP Server that is running the
        <CODE class="filename">mod_dav_svn</CODE> Subversion server module;
        <CODE class="filename">libsvn_ra_svn</CODE> speaks a custom network
        protocol with the <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> program; and so
        on.</P><P>For those who wish to access a Subversion repository
        using still another protocol, that is precisely why the
        Repository Access layer is modularized!  Developers can simply
        write a new library that implements the RA interface on one
        side and communicates with the repository on the other.  Your
        new library can use existing network protocols or you can
        invent your own.  You could use interprocess communication
        (IPC) calls, orâlet's get crazy, shall we?âyou
        could even implement an email-based protocol.  Subversion
        supplies the APIs; you supply the creativity.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.developer.layerlib.client"></A>Client Layer</H3></DIV></DIV></DIV><P>On the client side, the Subversion working copy is where
        all the action takes place.  The bulk of functionality
        implemented by the client-side libraries exists for the sole
        purpose of managing working copiesâdirectories full of
        files and other subdirectories that serve as a sort of local,
        editable â<SPAN class="quote">reflection</SPAN>â of one or more repository
        locationsâand propagating changes to and from the
        Repository Access layer.</P><P>Subversion's working copy library,
        <CODE class="filename">libsvn_wc</CODE>, is directly responsible for
        managing the data in the working copies.  To accomplish this,
        the library stores administrative information about each
        working copy directory within a special subdirectory.  This
        subdirectory, named <CODE class="filename">.svn</CODE>, is present in
        each working copy directory and contains various other files
        and directories that record state and provide a private
        workspace for administrative action.  For those familiar with
        CVS, this <CODE class="filename">.svn</CODE> subdirectory is similar in
        purpose to the <CODE class="filename">CVS</CODE> administrative
        directories found in CVS working copies.  For more information
        about the <CODE class="filename">.svn</CODE> administrative area, see
        <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.insidewc" title="Inside the Working Copy Administration Area">the section called âInside the Working Copy Administration Areaâ</A> later in this
        chapter.</P><P>The Subversion client library,
        <CODE class="filename">libsvn_client</CODE>, has the broadest
        responsibility; its job is to mingle the functionality of the
        working copy library with that of the Repository Access layer,
        and then to provide the highest-level API to any application
        that wishes to perform general revision control actions.  For
        example, the function
        <CODE class="function">svn_client_checkout()</CODE> takes a URL as an
        argument.  It passes this URL to the RA layer and opens an
        authenticated session with a particular repository.  It then
        asks the repository for a certain tree, and sends this tree
        into the working copy library, which then writes a full
        working copy to disk (<CODE class="filename">.svn</CODE> directories
        and all).</P><P>The client library is designed to be used by any
        application.  While the Subversion source code includes a
        standard command-line client, it should be very easy to write
        any number of GUI clients on top of the client library.  New
        GUIs (or any new client, really) for Subversion need not be
        clunky wrappers around the included command-line
        clientâthey have full access via the
        <CODE class="filename">libsvn_client</CODE> API to the same functionality,
        data, and callback mechanisms that the command-line client
        uses.  In fact, the Subversion source code tree contains a
        small C program (which you can find at
        <CODE class="filename">tools/examples/minimal_client.c</CODE>) that
        exemplifies how to wield the Subversion API to create a simple
        client program.</P><DIV class="sidebar"><P class="title"><B>Binding DirectlyâA Word About Correctness</B></P><P>Why should your GUI program bind directly with a
          <CODE class="filename">libsvn_client</CODE> instead of acting as a
          wrapper around a command-line program?  Besides simply being
          more efficient, it can be more correct as well.  A
          command-line program (such as the one supplied with
          Subversion) that binds to the client library needs to
          effectively translate feedback and requested data bits from
          C types to some form of human-readable output.  This type of
          translation can be lossy.  That is, the program may not
          display all of the information harvested from the API or may
          combine bits of information for compact
          representation.</P><P>If you wrap such a command-line program with yet another
          program, the second program has access only to
          already interpreted (and as we mentioned, likely incomplete)
          information, which it must <SPAN class="emphasis"><EM>again</EM></SPAN>
          translate into <SPAN class="emphasis"><EM>its</EM></SPAN> representation
          format.  With each layer of wrapping, the integrity of the
          original data is potentially tainted more and more, much
          like the result of making a copy of a copy (of a copyâ¦)
          of a favorite audio or video cassette.</P><P>But the most compelling argument for binding directly to
          the APIs instead of wrapping other programs is that the
          Subversion project makes compatibility promises regarding
          its APIs.  Across minor versions of those APIs (such as
          between 1.3 and 1.4), no function's prototype will change.
          In other words, you aren't forced to update your program's
          source code simply because you've upgraded to a new version
          of Subversion.  Certain functions might be deprecated, but
          they still work, and this gives you a buffer of time to
          eventually embrace the newer APIs.  These kinds of
          compatibility promises do not exist for Subversion
          command-line program output, which is subject to change from
          release to release.</P></DIV></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.developer.insidewc"></A>Inside the Working Copy Administration Area</H2></DIV></DIV></DIV><P>As we mentioned earlier, each directory of a Subversion
      working copy contains a special subdirectory called
      <CODE class="filename">.svn</CODE> that houses administrative data about
      that working copy directory.  Subversion uses the information in
      <CODE class="filename">.svn</CODE> to keep track of things such as:</P><DIV class="itemizedlist"><UL type="disc"><LI><P>Which repository location(s) are represented by the
          files and subdirectories in the working copy
          directory</P></LI><LI><P>What revision of each of those files and directories is
          currently present in the working copy</P></LI><LI><P>Any user-defined properties that might be attached
          to those files and directories</P></LI><LI><P>Pristine (unedited) copies of the working copy
          files</P></LI></UL></DIV><P>The Subversion working copy administration area's layout and
      contents are considered implementation details not really
      intended for human consumption.  Developers are encouraged to
      use Subversion's public APIs, or the tools that Subversion
      provides, to access and manipulate the working copy data,
      instead of directly reading or modifying those files.  The file
      formats employed by the working copy library for its
      administrative data do change from time to timeâa fact
      that the public APIs do a great job of hiding from the average
      user.  In this section, we expose some of these implementation
      details sheerly to appease your overwhelming curiosity.</P><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.developer.insidewc.entries"></A>The Entries File</H3></DIV></DIV></DIV><P>Perhaps the single most important file in the
        <CODE class="filename">.svn</CODE> directory is the
        <CODE class="filename">entries</CODE> file.  It
        contains the bulk of the administrative
        information about the versioned items in a working copy
        directory.  This one file tracks the repository
        URLs, pristine revision, file checksums, pristine text and
        property timestamps, scheduling and conflict state
        information, last-known commit information (author, revision,
        timestamp), local copy historyâpractically everything
        that a Subversion client is interested in knowing about a
        versioned (or to-be-versioned) resource!</P><P>Folks familiar with CVS's administrative directories will
        have recognized at this point that Subversion's
        <CODE class="filename">.svn/entries</CODE> file serves the purposes of,
        among other things, CVS's <CODE class="filename">CVS/Entries</CODE>,
        <CODE class="filename">CVS/Root</CODE>, and
        <CODE class="filename">CVS/Repository</CODE> files combined.</P><P>The format of the <CODE class="filename">.svn/entries</CODE> file
        has changed over time.  Originally an XML file, it now uses a
        customâthough still human-readableâfile format.
        While XML was a great choice for early developers of
        Subversion who were frequently debugging the file's contents
        (and Subversion's behavior in light of them), the need for
        easy developer debugging has diminished as Subversion has
        matured and has been replaced by the user's need for snappier
        performance.  Be aware that Subversion's working copy library
        automatically upgrades working copies from one format to
        anotherâit reads the old formats and writes the
        newâwhich saves you the hassle of checking out a new
        working copy, but can also complicate situations where
        different versions of Subversion might be trying to use the
        same working copy.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.developer.insidewc.base-and-props"></A>Pristine Copies and Property Files</H3></DIV></DIV></DIV><P>As mentioned before, the <CODE class="filename">.svn</CODE>
        directory also holds the pristine â<SPAN class="quote">text-base</SPAN>â
        versions of files.  You can find those in
        <CODE class="filename">.svn/text-base</CODE>.  The benefits of these
        pristine copies are multipleânetwork-free checks for
        local modifications and difference reporting, network-free
        reversion of modified or missing files, more efficient
        transmission of changes to the serverâbut they come at the
        cost of having each versioned file stored at least twice on
        disk.  These days, this seems to be a negligible penalty for
        most files.  However, the situation gets uglier as the size of
        your versioned files grows.  Some attention is being given to
        making the presence of the â<SPAN class="quote">text-base</SPAN>â an option.
        Ironically, though, it is as your versioned files' sizes get
        larger that the existence of the â<SPAN class="quote">text-base</SPAN>â
        becomes more crucialâwho wants to transmit a huge file
        across a network just because she wants to commit a tiny
        change to it?</P><P>Similar in purpose to the â<SPAN class="quote">text-base</SPAN>â files
        are the property files and their pristine
        â<SPAN class="quote">prop-base</SPAN>â copies, located in
        <CODE class="filename">.svn/props</CODE> and
        <CODE class="filename">.svn/prop-base</CODE>, respectively.  Since
        directories can have properties too, there are also
        <CODE class="filename">.svn/dir-props</CODE> and
        <CODE class="filename">.svn/dir-prop-base</CODE> files.</P></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.developer.usingapi"></A>Using the APIs</H2></DIV></DIV></DIV><P>Developing applications against the Subversion library APIs
      is fairly straightforward.  Subversion is primarily a set of C
      libraries, with header (<CODE class="filename">.h</CODE>) files that live
      in the <CODE class="filename">subversion/include</CODE> directory of the
      source tree.  These headers are copied into your system
      locations (e.g., <CODE class="filename">/usr/local/include</CODE>)
      when you build and install Subversion itself from source.  These
      headers represent the entirety of the functions and types meant
      to be accessible by users of the Subversion libraries.  The
      Subversion developer community is meticulous about ensuring that
      the public API is well documentedârefer directly to the
      header files for that documentation.</P><P>When examining the public header files, the first thing you
      might notice is that Subversion's datatypes and functions are
      namespace-protected.  That is, every public Subversion symbol
      name begins with <CODE class="literal">svn_</CODE>, followed by a short
      code for the library in which the symbol is defined (such as
      <CODE class="literal">wc</CODE>, <CODE class="literal">client</CODE>,
      <CODE class="literal">fs</CODE>, etc.), followed by a single underscore
      (<CODE class="literal">_</CODE>), and then the rest of the symbol name.
      Semipublic functions (used among source files of a given
      library but not by code outside that library, and found inside
      the library directories themselves) differ from this naming
      scheme in that instead of a single underscore after the library
      code, they use a double underscore
      (<CODE class="literal">_â_</CODE>).  Functions that are private to
      a given source file have no special prefixing and are declared
      <CODE class="literal">static</CODE>.  Of course, a compiler isn't
      interested in these naming conventions, but they help to clarify
      the scope of a given function or datatype.</P><P>Another good source of information about programming against
      the Subversion APIs is the project's own hacking guidelines,
      which you can find at <A class="ulink" href="http://subversion.tigris.org/hacking.html" target="_top">http://subversion.tigris.org/hacking.html</A>.  This
      document contains useful information, which, while aimed at
      developers and would-be developers of Subversion itself, is
      equally applicable to folks developing against Subversion as a
      set of third-party libraries.
      <SUP>[<A id="id562718" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id562718" class="footnote">53</A>]</SUP>
    </P><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.developer.usingapi.apr"></A>The Apache Portable Runtime Library</H3></DIV></DIV></DIV><P>Along with Subversion's own datatypes, you will see many
        references to datatypes that begin with
        <CODE class="literal">apr_</CODE>âsymbols from the Apache Portable
        Runtime (APR) library.  APR is Apache's portability library,
        originally carved out of its server code as an attempt to
        separate the OS-specific bits from the OS-independent portions
        of the code.  The result was a library that provides a generic
        API for performing operations that differ mildlyâor
        wildlyâfrom OS to OS.  While the Apache HTTP Server was
        obviously the first user of the APR library, the Subversion
        developers immediately recognized the value of using APR as
        well.  This means that there is practically no OS-specific
        code in Subversion itself.  Also, it means that the Subversion
        client compiles and runs anywhere that the Apache HTTP Server
        does.  Currently, this list includes all flavors of Unix,
        Win32, BeOS, OS/2, and Mac OS X.</P><P>In addition to providing consistent implementations of
        system calls that differ across operating systems,
        <SUP>[<A id="id562751" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id562751" class="footnote">54</A>]</SUP>
        APR gives Subversion immediate access to many custom
        datatypes, such as dynamic arrays and hash tables.  Subversion
        uses these types extensively.  But
        perhaps the most pervasive APR datatype, found in nearly every
        Subversion API prototype, is the
        <CODE class="literal">apr_pool_t</CODE>âthe APR memory pool.
        Subversion uses pools internally for all its memory allocation
        needs (unless an external library requires a different memory
        management mechanism for data passed through its API),
        <SUP>[<A id="id562780" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id562780" class="footnote">55</A>]</SUP>
        and while a person coding against the Subversion APIs is not
        required to do the same, she <SPAN class="emphasis"><EM>is</EM></SPAN>
        required to provide pools to the API functions that need them.
        This means that users of the Subversion API must also link
        against APR, must call <CODE class="function">apr_initialize()</CODE>
        to initialize the APR subsystem, and then must create and
        manage pools for use with Subversion API calls, typically by
        using <CODE class="function">svn_pool_create()</CODE>,
        <CODE class="function">svn_pool_clear()</CODE>, and
        <CODE class="function">svn_pool_destroy()</CODE>.</P><DIV class="sidebar"><P class="title"><B>Programming with Memory Pools</B></P><P>Almost every developer who has used the C programming
          language has at some point sighed at the daunting task of
          managing memory usage.  Allocating enough memory to use,
          keeping track of those allocations, freeing the memory when
          you no longer need itâthese tasks can be quite
          complex.  And of course, failure to do those things properly
          can result in a program that crashes itself, or worse,
          crashes the computer.</P><P>Higher-level languages, on the other hand, either take
          the job of memory management away from you completely or
          make it something you toy with only when doing extremely
          tight program optimization.  Languages such as Java and
          Python use <EM class="firstterm">garbage collection</EM>,
          allocating memory for objects when needed, and automatically
          freeing that memory when the object is no longer in
          use.</P><P>APR provides a middle-ground approach called
          <EM class="firstterm">pool-based memory management</EM>.  It
          allows the developer to control memory usage at a lower
          resolutionâper chunk (or â<SPAN class="quote">pool</SPAN>â) of
          memory, instead of per allocated object.  Rather than using
          <CODE class="function">malloc()</CODE> and friends to allocate enough
          memory for a given object, you ask APR to allocate the
          memory from a memory pool.  When you're finished using the
          objects you've created in the pool, you destroy the entire
          pool, effectively de-allocating the memory consumed by
          <SPAN class="emphasis"><EM>all</EM></SPAN> the objects you allocated from it.
          Thus, rather than keeping track of individual objects that
          need to be de-allocated, your program simply considers the
          general lifetimes of those objects and allocates the objects
          in a pool whose lifetime (the time between the pool's
          creation and its deletion) matches the object's
          needs.</P></DIV></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.developer.usingapi.urlpath"></A>URL and Path Requirements</H3></DIV></DIV></DIV><P>With remote version control operation as the whole point
        of Subversion's existence, it makes sense that some attention
        has been paid to internationalization (i18n) support.  After
        all, while â<SPAN class="quote">remote</SPAN>â might mean â<SPAN class="quote">across the
        office,</SPAN>â it could just as well mean â<SPAN class="quote">across the
        globe.</SPAN>â To facilitate this, all of Subversion's public
        interfaces that accept path arguments expect those paths to be
        canonicalizedâwhich is most easily accomplished by passing
        them through the <CODE class="function">svn_path_canonicalize()</CODE>
        functionâand encoded in UTF-8.  This means, for example, that
        any new client binary that drives the
        <CODE class="filename">libsvn_client</CODE> interface needs to first
        convert paths from the locale-specific encoding to UTF-8
        before passing those paths to the Subversion libraries, and
        then reconvert any resultant output paths from Subversion
        back into the locale's encoding before using those paths for
        non-Subversion purposes.  Fortunately, Subversion provides a
        suite of functions (see
        <CODE class="filename">subversion/include/svn_utf.h</CODE>) that 
        any program can use to do these conversions.</P><P>Also, Subversion APIs require all URL parameters to be
        properly URI-encoded.  So, instead of passing
        <CODE class="uri">file:///home/username/My File.txt</CODE> as the URL of a
        file named <CODE class="filename">My File.txt</CODE>, you need to pass
        <CODE class="uri">file:///home/username/My%20File.txt</CODE>.  Again,
        Subversion supplies helper functions that your application can
        useâ<CODE class="function">svn_path_uri_encode()</CODE> and
        <CODE class="function">svn_path_uri_decode()</CODE>, for URI encoding
        and decoding, respectively.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.developer.usingapi.otherlangs"></A>Using Languages Other Than C and C++</H3></DIV></DIV></DIV><P>If you are interested in using the Subversion libraries in
        conjunction with something other than a C programâsay, a
        Python or Perl scriptâSubversion has some support for this
        via the Simplified Wrapper and Interface Generator (SWIG).  The
        SWIG bindings for Subversion are located in
        <CODE class="filename">subversion/bindings/swig</CODE>.  They are still
        maturing, but they are usable.  These bindings allow you
        to call Subversion API functions indirectly, using wrappers that
        translate the datatypes native to your scripting language into
        the datatypes needed by Subversion's C libraries.</P><P>Significant efforts have been made toward creating
        functional SWIG-generated bindings for Python, Perl, and Ruby.
        To some extent, the work done preparing the SWIG interface
        files for these languages is reusable in efforts to generate
        bindings for other languages supported by SWIG (which include
        versions of C#, Guile, Java, MzScheme, OCaml, PHP, and Tcl,
        among others).  However, some extra programming is required to
        compensate for complex APIs that SWIG needs some help
        translating between languages.  For more information on SWIG
        itself, see the project's web site at <A class="ulink" href="http://www.swig.org/" target="_top">http://www.swig.org/</A>.</P><P>Subversion also has language bindings for Java.  The
        javahl bindings (located in
        <CODE class="filename">subversion/bindings/java</CODE> in the
        Subversion source tree) aren't SWIG-based, but are instead a
        mixture of Java and hand-coded JNI.  Javahl covers most
        Subversion client-side APIs and is specifically targeted at
        implementors of Java-based Subversion clients and IDE
        integrations.</P><P>Subversion's language bindings tend to lack the level of
        developer attention given to the core Subversion modules, but
        can generally be trusted as production-ready.  A number of
        scripts and applications, alternative Subversion GUI clients,
        and other third-party tools are successfully using
        Subversion's language bindings today to accomplish their
        Subversion integrations.</P><P>It's worth noting here that there are other options for
        interfacing with Subversion using other languages:  alternative
        bindings for Subversion that aren't provided by the
        Subversion development community at all.  You can find links
        to these alternative bindings on the Subversion project's
        links page (at <A class="ulink" href="http://subversion.tigris.org/links.html" target="_top">http://subversion.tigris.org/links.html</A>), but there
        are a couple of popular ones we feel are especially
        noteworthy.  First, Barry Scott's PySVN bindings (<A class="ulink" href="http://pysvn.tigris.org/" target="_top">http://pysvn.tigris.org/</A>) are a popular option for
        binding with Python.  PySVN boasts of a more Pythonic
        interface than the more C-like APIs provided by Subversion's
        own Python bindings.  And if you're looking for a pure Java
        implementation of Subversion, check out SVNKit (<A class="ulink" href="http://svnkit.com/" target="_top">http://svnkit.com/</A>), which is Subversion rewritten
        from the ground up in Java.</P><DIV class="sidebar"><P class="title"><B>SVNKit Versus javahl</B></P><P>In 2005, a small company called TMate announced the
          1.0.0 release of JavaSVNâa pure Java implementation of
          Subversion.  Since then, the project has been renamed to
          SVNKit (available at <A class="ulink" href="http://svnkit.com/" target="_top">http://svnkit.com/</A>)
          and has seen great success as a provider of Subversion
          functionality to various Subversion clients, IDE
          integrations, and other third-party tools.</P><P>The SVNKit library is interesting in that, unlike the
          javahl library, it is not merely a wrapper around the
          official Subversion core libraries.  In fact, it shares no
          code with Subversion at all.  But while it is easy to
          confuse SVNKit with javahl, and easier still to not even
          realize which of these libraries you are using, folks should
          be aware that SVNKit differs from javahl in some significant
          ways.  First, SVNKit is not developed as open source
          software and seems to have at any given time only a few
          developers working on it.  Also, SVNKit's license is more
          restrictive than that of Subversion.  Finally, by aiming to
          be a pure Java Subversion library, SVNKit is limited in
          which portions of Subversion can be reasonably cloned while
          still keeping up with Subversion's releases.  This has
          already happened onceâSVNKit cannot access BDB-backed
          Subversion repositories via the <CODE class="literal">file://</CODE>
          protocol because there's no pure Java implementation of
          Berkeley DB that is file-format-compatible with the native
          implementation of that library.</P><P>That said, SVNKit has a well-established track record of
          reliability.  And a pure Java solution is much more robust
          in the face of programming errorsâa bug in SVNKit
          might raise a catchable Java Exception, but a bug in the Subversion core
          libraries as accessed via javahl can bring down your entire
          Java Runtime Environment.  So, weigh the costs when choosing
          a Java-based Subversion implementation.</P></DIV></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.developer.usingapi.codesamples"></A>Code Samples</H3></DIV></DIV></DIV><P><A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.layerlib.repos.ex-1" title="Example&nbsp;8.1.&nbsp;Using the Repository Layer">Example&nbsp;8.1, âUsing the Repository Layerâ</A>
        contains a code segment (written in C) that illustrates some
        of the concepts we've been discussing.  It uses both the
        repository and filesystem interfaces (as can be determined by
        the prefixes <CODE class="literal">svn_repos_</CODE> and
        <CODE class="literal">svn_fs_</CODE> of the function names,
        respectively) to create a new revision in which a directory is
        added.  You can see the use of an APR pool, which is passed
        around for memory allocation purposes.  Also, the code reveals
        a somewhat obscure fact about Subversion error
        handlingâall Subversion errors must be explicitly
        handled to avoid memory leakage (and in some cases,
        application failure).</P><DIV class="example"><A id="svn.developer.layerlib.repos.ex-1"></A><P class="title"><B>Example&nbsp;8.1.&nbsp;Using the Repository Layer</B></P><DIV class="example-contents"><PRE class="programlisting">/* Convert a Subversion error into a simple boolean error code.
 *
 * NOTE:  Subversion errors must be cleared (using svn_error_clear())
 *        because they are allocated from the global pool, else memory
 *        leaking occurs.
 */
#define INT_ERR(expr)                           \
  do {                                          \
    svn_error_t *__temperr = (expr);            \
    if (__temperr)                              \
      {                                         \
        svn_error_clear(__temperr);             \
        return 1;                               \
      }                                         \
    return 0;                                   \
  } while (0)

/* Create a new directory at the path NEW_DIRECTORY in the Subversion
 * repository located at REPOS_PATH.  Perform all memory allocation in
 * POOL.  This function will create a new revision for the addition of
 * NEW_DIRECTORY.  Return zero if the operation completes
 * successfully, nonzero otherwise.
 */
static int
make_new_directory(const char *repos_path,
                   const char *new_directory,
                   apr_pool_t *pool)
{
  svn_error_t *err;
  svn_repos_t *repos;
  svn_fs_t *fs;
  svn_revnum_t youngest_rev;
  svn_fs_txn_t *txn;
  svn_fs_root_t *txn_root;
  const char *conflict_str;

  /* Open the repository located at REPOS_PATH. 
   */
  INT_ERR(svn_repos_open(&amp;repos, repos_path, pool));

  /* Get a pointer to the filesystem object that is stored in REPOS. 
   */
  fs = svn_repos_fs(repos);

  /* Ask the filesystem to tell us the youngest revision that
   * currently exists. 
   */
  INT_ERR(svn_fs_youngest_rev(&amp;youngest_rev, fs, pool));

  /* Begin a new transaction that is based on YOUNGEST_REV.  We are
   * less likely to have our later commit rejected as conflicting if we
   * always try to make our changes against a copy of the latest snapshot
   * of the filesystem tree. 
   */
  INT_ERR(svn_repos_fs_begin_txn_for_commit2(&amp;txn, repos, youngest_rev,
                                             apr_hash_make(pool), pool));

  /* Now that we have started a new Subversion transaction, get a root
   * object that represents that transaction. 
   */
  INT_ERR(svn_fs_txn_root(&amp;txn_root, txn, pool));
  
  /* Create our new directory under the transaction root, at the path
   * NEW_DIRECTORY. 
   */
  INT_ERR(svn_fs_make_dir(txn_root, new_directory, pool));

  /* Commit the transaction, creating a new revision of the filesystem
   * which includes our added directory path.
   */
  err = svn_repos_fs_commit_txn(&amp;conflict_str, repos, 
                                &amp;youngest_rev, txn, pool);
  if (! err)
    {
      /* No error?  Excellent!  Print a brief report of our success.
       */
      printf("Directory '%s' was successfully added as new revision "
             "'%ld'.\n", new_directory, youngest_rev);
    }
  else if (err-&gt;apr_err == SVN_ERR_FS_CONFLICT)
    {
      /* Uh-oh.  Our commit failed as the result of a conflict
       * (someone else seems to have made changes to the same area 
       * of the filesystem that we tried to modify).  Print an error
       * message.
       */
      printf("A conflict occurred at path '%s' while attempting "
             "to add directory '%s' to the repository at '%s'.\n", 
             conflict_str, new_directory, repos_path);
    }
  else
    {
      /* Some other error has occurred.  Print an error message.
       */
      printf("An error occurred while attempting to add directory '%s' "
             "to the repository at '%s'.\n", 
             new_directory, repos_path);
    }

  INT_ERR(err);
} 
</PRE></DIV></DIV><BR class="example-break"><P>Note that in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.layerlib.repos.ex-1" title="Example&nbsp;8.1.&nbsp;Using the Repository Layer">Example&nbsp;8.1, âUsing the Repository Layerâ</A>, the code could
        just as easily have committed the transaction using
        <CODE class="function">svn_fs_commit_txn()</CODE>.  But the filesystem
        API knows nothing about the repository library's hook
        mechanism.  If you want your Subversion repository to
        automatically perform some set of non-Subversion tasks every
        time you commit a transaction (e.g., sending an
        email that describes all the changes made in that transaction
        to your developer mailing list), you need to use the
        <CODE class="filename">libsvn_repos</CODE>-wrapped version of that
        function, which adds the hook triggering
        functionalityâin this case,
        <CODE class="function">svn_repos_fs_commit_txn()</CODE>.  (For more
        information regarding Subversion's repository hooks, see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.create.hooks" title="Implementing Repository Hooks">the section called âImplementing Repository Hooksâ</A>.)</P><P>Now let's switch languages.  <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.usingapi.otherlangs.ex-1" title="Example&nbsp;8.2.&nbsp;Using the Repository layer with Python">Example&nbsp;8.2, âUsing the Repository layer with Pythonâ</A> is a
        sample program that uses Subversion's SWIG Python bindings to
        recursively crawl the youngest repository revision, and to
        print the various paths reached during the crawl.</P><DIV class="example"><A id="svn.developer.usingapi.otherlangs.ex-1"></A><P class="title"><B>Example&nbsp;8.2.&nbsp;Using the Repository layer with Python</B></P><DIV class="example-contents"><PRE class="programlisting">#!/usr/bin/python

"""Crawl a repository, printing versioned object path names."""

import sys
import os.path
import svn.fs, svn.core, svn.repos

def crawl_filesystem_dir(root, directory):
    """Recursively crawl DIRECTORY under ROOT in the filesystem, and return
    a list of all the paths at or below DIRECTORY."""

    # Print the name of this path.
    print directory + "/"
    
    # Get the directory entries for DIRECTORY.
    entries = svn.fs.svn_fs_dir_entries(root, directory)

    # Loop over the entries.
    names = entries.keys()
    for name in names:
        # Calculate the entry's full path.
        full_path = directory + '/' + name

        # If the entry is a directory, recurse.  The recursion will return
        # a list with the entry and all its children, which we will add to
        # our running list of paths.
        if svn.fs.svn_fs_is_dir(root, full_path):
            crawl_filesystem_dir(root, full_path)
        else:
            # Else it's a file, so print its path here.
            print full_path

def crawl_youngest(repos_path):
    """Open the repository at REPOS_PATH, and recursively crawl its
    youngest revision."""
    
    # Open the repository at REPOS_PATH, and get a reference to its
    # versioning filesystem.
    repos_obj = svn.repos.svn_repos_open(repos_path)
    fs_obj = svn.repos.svn_repos_fs(repos_obj)

    # Query the current youngest revision.
    youngest_rev = svn.fs.svn_fs_youngest_rev(fs_obj)
    
    # Open a root object representing the youngest (HEAD) revision.
    root_obj = svn.fs.svn_fs_revision_root(fs_obj, youngest_rev)

    # Do the recursive crawl.
    crawl_filesystem_dir(root_obj, "")
    
if __name__ == "__main__":
    # Check for sane usage.
    if len(sys.argv) != 2:
        sys.stderr.write("Usage: %s REPOS_PATH\n"
                         % (os.path.basename(sys.argv[0])))
        sys.exit(1)

    # Canonicalize the repository path.
    repos_path = svn.core.svn_path_canonicalize(sys.argv[1])

    # Do the real work.
    crawl_youngest(repos_path)
</PRE></DIV></DIV><BR class="example-break"><P>This same program in C would need to deal with APR's
        memory pool system.  But Python handles memory usage
        automatically, and Subversion's Python bindings adhere to that
        convention.  In C, you'd be working with custom datatypes
        (such as those provided by the APR library) for representing
        the hash of entries and the list of paths, but Python has
        hashes (called â<SPAN class="quote">dictionaries</SPAN>â) and lists as
        built-in datatypes, and it provides a rich collection of
        functions for operating on those types.  So SWIG (with the
        help of some customizations in Subversion's language bindings
        layer) takes care of mapping those custom datatypes into the
        native datatypes of the target language.  This provides a more
        intuitive interface for users of that language.</P><P>The Subversion Python bindings can be used for working
        copy operations, too.  In the previous section of this
        chapter, we mentioned the <CODE class="filename">libsvn_client</CODE>
        interface and how it exists for the sole purpose of
        simplifying the process of writing a Subversion client.  <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.usingapi.otherlangs.ex-2" title="Example&nbsp;8.3.&nbsp;A Python status crawler">Example&nbsp;8.3, âA Python status crawlerâ</A> is a brief
        example of how that library can be accessed via the SWIG
        Python bindings to re-create a scaled-down version of the
        <SPAN class="command"><STRONG>svn status</STRONG></SPAN> command.</P><DIV class="example"><A id="svn.developer.usingapi.otherlangs.ex-2"></A><P class="title"><B>Example&nbsp;8.3.&nbsp;A Python status crawler</B></P><DIV class="example-contents"><PRE class="programlisting">#!/usr/bin/env python

"""Crawl a working copy directory, printing status information."""

import sys
import os.path
import getopt
import svn.core, svn.client, svn.wc

def generate_status_code(status):
    """Translate a status value into a single-character status code,
    using the same logic as the Subversion command-line client."""
    code_map = { svn.wc.svn_wc_status_none        : ' ',
                 svn.wc.svn_wc_status_normal      : ' ',
                 svn.wc.svn_wc_status_added       : 'A',
                 svn.wc.svn_wc_status_missing     : '!',
                 svn.wc.svn_wc_status_incomplete  : '!',
                 svn.wc.svn_wc_status_deleted     : 'D',
                 svn.wc.svn_wc_status_replaced    : 'R',
                 svn.wc.svn_wc_status_modified    : 'M',
                 svn.wc.svn_wc_status_merged      : 'G',
                 svn.wc.svn_wc_status_conflicted  : 'C',
                 svn.wc.svn_wc_status_obstructed  : '~',
                 svn.wc.svn_wc_status_ignored     : 'I',
                 svn.wc.svn_wc_status_external    : 'X',
                 svn.wc.svn_wc_status_unversioned : '?',
               }
    return code_map.get(status, '?')

def do_status(wc_path, verbose):
    # Build a client context baton.
    ctx = svn.client.svn_client_ctx_t()

    def _status_callback(path, status):
        """A callback function for svn_client_status."""

        # Print the path, minus the bit that overlaps with the root of
        # the status crawl
        text_status = generate_status_code(status.text_status)
        prop_status = generate_status_code(status.prop_status)
        print '%s%s  %s' % (text_status, prop_status, path)
        
    # Do the status crawl, using _status_callback() as our callback function.
    revision = svn.core.svn_opt_revision_t()
    revision.type = svn.core.svn_opt_revision_head
    svn.client.svn_client_status2(wc_path, revision, _status_callback,
                                  svn.core.svn_depth_infinity, verbose,
                                  0, 0, 1, ctx)

def usage_and_exit(errorcode):
    """Print usage message, and exit with ERRORCODE."""
    stream = errorcode and sys.stderr or sys.stdout
    stream.write("""Usage: %s OPTIONS WC-PATH
Options:
  --help, -h    : Show this usage message
  --verbose, -v : Show all statuses, even uninteresting ones
""" % (os.path.basename(sys.argv[0])))
    sys.exit(errorcode)
    
if __name__ == '__main__':
    # Parse command-line options.
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hv", ["help", "verbose"])
    except getopt.GetoptError:
        usage_and_exit(1)
    verbose = 0
    for opt, arg in opts:
        if opt in ("-h", "--help"):
            usage_and_exit(0)
        if opt in ("-v", "--verbose"):
            verbose = 1
    if len(args) != 1:
        usage_and_exit(2)
            
    # Canonicalize the repository path.
    wc_path = svn.core.svn_path_canonicalize(args[0])

    # Do the real work.
    try:
        do_status(wc_path, verbose)
    except svn.core.SubversionException, e:
        sys.stderr.write("Error (%d): %s\n" % (e.apr_err, e.message))
        sys.exit(1)
</PRE></DIV></DIV><BR class="example-break"><P>As was the case in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.developer.usingapi.otherlangs.ex-1" title="Example&nbsp;8.2.&nbsp;Using the Repository layer with Python">Example&nbsp;8.2, âUsing the Repository layer with Pythonâ</A>, this
        program is pool-free and uses, for the most part, normal
        Python datatypes.  The call to
        <CODE class="function">svn_client_ctx_t()</CODE> is deceiving because
        the public Subversion API has no such functionâthis just
        happens to be a case where SWIG's automatic language
        generation bleeds through a little bit (the function is a sort
        of factory function for Python's version of the corresponding
        complex C structure).  Also note that the path passed to this
        program (like the last one) gets run through
        <CODE class="function">svn_path_canonicalize()</CODE>, because to
        <SPAN class="emphasis"><EM>not</EM></SPAN> do so runs the risk of triggering the
        underlying Subversion C library's assertions about such
        things, which translates into rather immediate and
        unceremonious program abortion.</P></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.developer.summary"></A>Summary</H2></DIV></DIV></DIV><P>One of Subversion's greatest features isn't something you
      get from running its command-line client or other tools.  It's
      the fact that Subversion was designed modularly and provides a
      stable, public API so that othersâlike yourself,
      perhapsâcan write custom software that drives Subversion's
      core logic.</P><P>In this chapter, we took a closer look at Subversion's
      architecture, examining its logical layers and describing that
      public API, the very same API that Subversion's own layers use
      to communicate with each other.  Many developers have found
      interesting uses for the Subversion API, from simple repository
      hook scripts, to integrations between Subversion and some other
      application, to completely different version control systems.
      What unique itch will <SPAN class="emphasis"><EM>you</EM></SPAN> scratch with
      it?</P></DIV><DIV class="footnotes"><BR><HR width="100" align="left"><DIV class="footnote"><P><SUP>[<A id="ftn.id561795" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id561795" class="para">52</A>] </SUP>We understand that this may come as a shock to sci-fi
            fans who have long been under the impression that Time was
            actually the <SPAN class="emphasis"><EM>fourth</EM></SPAN> dimension, and we
            apologize for any emotional trauma induced by our
            assertion of a different theory.</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id562718" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id562718" class="para">53</A>] </SUP>After all, Subversion uses Subversion's APIs,
          too.</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id562751" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id562751" class="para">54</A>] </SUP>Subversion uses ANSI system calls and datatypes as much
            as possible.</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id562780" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id562780" class="para">55</A>] </SUP>Neon and Berkeley DB are examples of such libraries.</P></DIV></DIV></DIV><DIV class="chapter" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title"><A id="svn.ref"></A>Chapter&nbsp;9.&nbsp;Subversion Complete Reference</H2></DIV></DIV></DIV><DIV class="toc"><P><B>Table of Contents</B></P><DL><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn">The Subversion Command-Line Client: <SPAN class="command"><STRONG>svn</STRONG></SPAN></A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.sw">svn Options</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c">svn Subcommands</A></SPAN></DT><DD><DL><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.add">svn add</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.blame">svn blame</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.cat">svn cat</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.changelist">svn changelist</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.checkout">svn checkout</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.cleanup">svn cleanup</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.commit">svn commit</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.copy">svn copy</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.delete">svn delete</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.diff">svn diff</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.export">svn export</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.help">svn help</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.import">svn import</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.info">svn info</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.list">svn list</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.lock">svn lock</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.log">svn log</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.merge">svn merge</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.mergeinfo">svn mergeinfo</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.mkdir">svn mkdir</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.move">svn move</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.propdel">svn propdel</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.propedit">svn propedit</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.propget">svn propget</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.proplist">svn proplist</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.propset">svn propset</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.resolve">svn resolve</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.resolved">svn resolved</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.revert">svn revert</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.status">svn status</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.switch">svn switch</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.unlock">svn unlock</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.update">svn update</A></SPAN><SPAN class="refpurpose"></SPAN></DT></DL></DD></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin">svnadmin</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.sw"><SPAN class="command"><STRONG>svnadmin</STRONG></SPAN> Options</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c">svnadmin Subcommands</A></SPAN></DT><DD><DL><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.crashtest">svnadmin crashtest</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.create">svnadmin create</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.deltify">svnadmin deltify</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.dump">svnadmin dump</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.help">svnadmin help</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.hotcopy">svnadmin hotcopy</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.list-dblogs">svnadmin list-dblogs</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.list-unused-dblogs">svnadmin list-unused-dblogs</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.load">svnadmin load</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.lslocks">svnadmin lslocks</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.lstxns">svnadmin lstxns</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.recover">svnadmin recover</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.rmlocks">svnadmin rmlocks</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.rmtxns">svnadmin rmtxns</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.setlog">svnadmin setlog</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.setrevprop">svnadmin setrevprop</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.setuuid">svnadmin setuuid</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.upgrade">svnadmin upgrade</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.verify">svnadmin verify</A></SPAN><SPAN class="refpurpose"></SPAN></DT></DL></DD></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook">svnlook</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.sw">svnlook Options</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c">svnlook Subcommands</A></SPAN></DT><DD><DL><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.author">svnlook author</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.cat">svnlook cat</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.changed">svnlook changed</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.date">svnlook date</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.diff">svnlook diff</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.dirs-changed">svnlook dirs-changed</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.help">svnlook help</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.history">svnlook history</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.info">svnlook info</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.lock">svnlook lock</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.log">svnlook log</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.propget">svnlook propget</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.proplist">svnlook proplist</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.tree">svnlook tree</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.uuid">svnlook uuid</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.youngest">svnlook youngest</A></SPAN><SPAN class="refpurpose"></SPAN></DT></DL></DD></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnsync">svnsync</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnsync.sw">svnsync Options</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnsync.c">svnsync Subcommands</A></SPAN></DT><DD><DL><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnsync.c.copy-revprops">svnsync copy-revprops</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnsync.c.help">svnsync help</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnsync.c.init">svnsync initialize</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnsync.c.sync">svnsync synchronize</A></SPAN><SPAN class="refpurpose"></SPAN></DT></DL></DD></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnserve">svnserve</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnserve.sw">svnserve Options</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svndumpfilter">svndumpfilter</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svndumpfilter.options">svndumpfilter Options</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svndumpfilter.c">svndumpfilter Subcommands</A></SPAN></DT><DD><DL><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svndumpfilter.commands.c.exclude">svndumpfilter exclude</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svndumpfilter.commands.c.include">svndumpfilter include</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svndumpfilter.commands.c.help">svndumpfilter help</A></SPAN><SPAN class="refpurpose"></SPAN></DT></DL></DD></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnversion">svnversion</A></SPAN></DT><DD><DL><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnversion.re">svnversion</A></SPAN><SPAN class="refpurpose"></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.mod_dav_svn">mod_dav_svn</A></SPAN></DT><DD><DL><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.mod_dav_svn.conf">mod_dav_svn Configuration Directives</A></SPAN><SPAN class="refpurpose"></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.mod_authz_svn">mod_authz_svn</A></SPAN></DT><DD><DL><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.mod_authz_svn.conf">mod_authz_svn Configuration Directives</A></SPAN><SPAN class="refpurpose"></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.properties">Subversion Properties</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.properties.versioned-props">Versioned Properties</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.properties.unversioned-props">Unversioned Properties</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.reposhooks">Repository Hooks</A></SPAN></DT><DD><DL><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.reposhooks.start-commit">start-commit</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.reposhooks.pre-commit">pre-commit</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.reposhooks.post-commit">post-commit</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.reposhooks.pre-revprop-change">pre-revprop-change</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.reposhooks.post-revprop-change">post-revprop-change</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.reposhooks.pre-lock">pre-lock</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.reposhooks.post-lock">post-lock</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.reposhooks.pre-unlock">pre-unlock</A></SPAN><SPAN class="refpurpose"></SPAN></DT><DT><SPAN class="refentrytitle"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.reposhooks.post-unlock">post-unlock</A></SPAN><SPAN class="refpurpose"></SPAN></DT></DL></DD></DL></DIV><P>This chapter is intended to be a complete reference to using
    Subversion.  This includes the command-line client
    (<SPAN class="command"><STRONG>svn</STRONG></SPAN>) and all its subcommands, as well as the
    repository administration programs (<SPAN class="command"><STRONG>svnadmin</STRONG></SPAN>
    and <SPAN class="command"><STRONG>svnlook</STRONG></SPAN>) and their respective
    subcommands.</P><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.ref.svn"></A>The Subversion Command-Line Client: <SPAN class="command"><STRONG>svn</STRONG></SPAN></H2></DIV></DIV></DIV><P>To use the command-line client, type
      <SPAN class="command"><STRONG>svn</STRONG></SPAN>, the subcommand you wish to use,
      <SUP>[<A id="id565687" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id565687" class="footnote">56</A>]</SUP>
      and any options or targets that you wish to operate onâthe
      subcommand and the options need not appear in a specific order.
      For example, all of the following are valid ways to
      use <SPAN class="command"><STRONG>svn status</STRONG></SPAN>:</P><PRE class="screen">$ svn -v status
$ svn status -v 
$ svn status -v myfile
</PRE><P>You can find many more examples of how to use most client
      commands in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour" title="Chapter&nbsp;2.&nbsp;Basic Usage">Chapter&nbsp;2, <I>Basic Usage</I></A> and commands for managing
      properties in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props" title="Properties">the section called âPropertiesâ</A>.</P><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.ref.svn.sw"></A>svn Options</H3></DIV></DIV></DIV><P>While Subversion has different options for its
        subcommands, all options exist in a single
        namespaceâthat is, each option is guaranteed to mean the
        same thing regardless of the subcommand you use it with.  For
        example, <CODE class="option">--verbose</CODE> (<CODE class="option">-v</CODE>)
        always means â<SPAN class="quote">verbose output,</SPAN>â regardless of the
        subcommand you use it with.</P><P>The <SPAN class="command"><STRONG>svn</STRONG></SPAN> command-line client usually
        exits quickly with an error if you pass it an option which
        does not apply to the specified subcommand.  But as of
        Subversion 1.5, several of the options which apply to
        allâor nearly allâof the subcommands have been
        deemed acceptable by all subcommands, even if they have no
        effect on some of them.  They appear grouped together in the
        command-line client's usage messages as global options.  This
        was done to assist folks who write scripts which wrap the
        command-line client.  These global options are as
        follows:</P><DIV class="variablelist"><DL><DT><SPAN class="term"><CODE class="option">--config-dir</CODE>
            <EM class="replaceable"><CODE>DIR</CODE></EM></SPAN></DT><DD><P>Instructs Subversion to read configuration
              information from the specified directory instead of the
              default location (<CODE class="filename">.subversion</CODE> in
              the user's home directory).</P></DD><DT><SPAN class="term"><CODE class="option">--no-auth-cache</CODE></SPAN></DT><DD><P>Prevents caching of authentication information
              (e.g., username and password) in the Subversion
              runtime configuration directories.</P></DD><DT><SPAN class="term"><CODE class="option">--non-interactive</CODE></SPAN></DT><DD><P>Disables all interactive prompting.  Some examples
              of interactive prompting include requests for
              authentication credentials and conflict resolution
              decisions.  This is useful if you're running Subversion
              inside an automated script and it's more appropriate
              to have Subversion fail than to prompt for more
              information.</P></DD><DT><SPAN class="term"><CODE class="option">--password</CODE>
            <EM class="replaceable"><CODE>PASSWD</CODE></EM></SPAN></DT><DD><P>Specifies the password to use when authenticating
              against a Subversion server.  If not provided, or if
              incorrect, Subversion will prompt you for this
              information as needed.</P></DD><DT><SPAN class="term"><CODE class="option">--username</CODE>
            <EM class="replaceable"><CODE>NAME</CODE></EM></SPAN></DT><DD><P>Specifies the username to use when authenticating
              against a Subversion server.  If not provided, or if
              incorrect, Subversion will prompt you for this
              information as needed.</P></DD></DL></DIV><P>The rest of the options apply and are accepted by only a
        subset of the subcommand.  They are as follows:</P><DIV class="variablelist"><DL><DT><SPAN class="term"><CODE class="option">--accept</CODE>
            <EM class="replaceable"><CODE>ACTION</CODE></EM></SPAN></DT><DD><P>Specifies an action for automatic conflict resolution.
              Possible actions are <CODE class="literal">postpone</CODE>,
              <CODE class="literal">base</CODE>, <CODE class="literal">mine-full</CODE>,
              <CODE class="literal">theirs-full</CODE>, <CODE class="literal">edit</CODE>, and
              <CODE class="literal">launch</CODE>.</P></DD><DT><SPAN class="term"><CODE class="option">--auto-props</CODE></SPAN></DT><DD><P>Enables auto-props, overriding the
              <CODE class="literal">enable-auto-props</CODE> directive in the
              <CODE class="filename">config</CODE> file.</P></DD><DT><SPAN class="term"><CODE class="option">--change</CODE> (<CODE class="option">-c</CODE>)
            <EM class="replaceable"><CODE>ARG</CODE></EM></SPAN></DT><DD><P>Used as a means to refer to a specific
              â<SPAN class="quote">change</SPAN>â (a.k.a. a revision).  This option is
              syntactic sugar for â<SPAN class="quote">-r ARG-1:ARG</SPAN>â.</P></DD><DT><SPAN class="term"><CODE class="option">--changelist</CODE>
            <EM class="replaceable"><CODE>ARG</CODE></EM></SPAN></DT><DD><P>Instructs Subversion to operate only on members of the changelist named
              <EM class="replaceable"><CODE>ARG</CODE></EM>.  You can use this option
              multiple times to specify sets of changelists.</P></DD><DT><SPAN class="term"><CODE class="option">--cl</CODE>
            <EM class="replaceable"><CODE>ARG</CODE></EM></SPAN></DT><DD><P>An alias for the
              <CODE class="option">--changelist</CODE> option.</P></DD><DT><SPAN class="term"><CODE class="option">--depth</CODE>
            <EM class="replaceable"><CODE>ARG</CODE></EM></SPAN></DT><DD><P>Instructs Subversion to limit the scope of an operation to a particular tree
              depth.  <EM class="replaceable"><CODE>ARG</CODE></EM> is one of
              <CODE class="literal">empty</CODE>, <CODE class="literal">files</CODE>,
              <CODE class="literal">immediates</CODE>, or
              <CODE class="literal">infinity</CODE>.</P></DD><DT><SPAN class="term"><CODE class="option">--diff-cmd</CODE>
            <EM class="replaceable"><CODE>CMD</CODE></EM></SPAN></DT><DD><P>Specifies an external program to use to show
              differences between files.  When <SPAN class="command"><STRONG>svn
              diff</STRONG></SPAN> is invoked without this option, it uses
              Subversion's internal diff engine, which provides
              unified diffs by default.  If you want to use an
              external diff program, use <CODE class="option">--diff-cmd</CODE>.
              You can pass options to the diff program with the
              <CODE class="option">--extensions</CODE> option (more on that later
              in this section).</P></DD><DT><SPAN class="term"><CODE class="option">--diff3-cmd</CODE>
            <EM class="replaceable"><CODE>CMD</CODE></EM></SPAN></DT><DD><P>Specifies an external program to use to merge files.</P></DD><DT><SPAN class="term"><CODE class="option">--dry-run</CODE></SPAN></DT><DD><P>Goes through all the motions of running a command,
              but makes no actual changesâeither on disk or in
              the repository.</P></DD><DT><SPAN class="term"><CODE class="option">--editor-cmd</CODE>
            <EM class="replaceable"><CODE>CMD</CODE></EM></SPAN></DT><DD><P>Specifies an external program to use to edit a log message
              or a property value.  See the <CODE class="literal">editor-cmd</CODE>
              section in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.confarea.opts.config" title="Config">the section called âConfigâ</A>
              for ways to specify a default editor.</P></DD><DT><SPAN class="term"><CODE class="option">--encoding</CODE> <EM class="replaceable"><CODE>ENC</CODE></EM></SPAN></DT><DD><P>Tells Subversion that your commit message is encoded
              in the charset provided.  The default is your operating
              system's native locale, and you should specify the
              encoding if your commit message is in any other
              encoding.</P></DD><DT><SPAN class="term"><CODE class="option">--extensions</CODE> (<CODE class="option">-x</CODE>)
          <EM class="replaceable"><CODE>ARGS</CODE></EM></SPAN></DT><DD><P>Specifies an argument or arguments that Subversion
              should pass to an external diff command.  This option is
              valid only when used with the <SPAN class="command"><STRONG>svn
              diff</STRONG></SPAN> or <SPAN class="command"><STRONG>svn merge</STRONG></SPAN> commands,
              with the
              <CODE class="option">--diff-cmd</CODE> option.
              If you wish to pass multiple
              arguments, you must enclose all of them in quotes (e.g.,
              <STRONG class="userinput"><CODE>svn diff --diff-cmd /usr/bin/diff -x
              "-b -E"</CODE></STRONG>).</P></DD><DT><SPAN class="term"><CODE class="option">--file</CODE> (<CODE class="option">-F</CODE>)
            <EM class="replaceable"><CODE>FILENAME</CODE></EM>
          </SPAN></DT><DD><P>Uses the contents of the named file for the
              specified subcommand, though different subcommands do
              different things with this content.  For example,
              <SPAN class="command"><STRONG>svn commit</STRONG></SPAN> uses the content as a
              commit log, whereas <SPAN class="command"><STRONG>svn propset</STRONG></SPAN> uses
              it as a property value.</P></DD><DT><SPAN class="term"><CODE class="option">--force</CODE></SPAN></DT><DD><P>Forces a particular command or operation to run.
              Subversion will prevent you from performing some operations
              in normal usage, but you can pass the
              force option to tell Subversion â<SPAN class="quote">I know what I'm
              doing as well as the possible repercussions of doing it,
              so let me at 'em.</SPAN>â  This option is the
              programmatic equivalent of doing your own electrical
              work with the power onâif you don't know what
              you're doing, you're likely to get a nasty shock.</P></DD><DT><SPAN class="term"><CODE class="option">--force-log</CODE></SPAN></DT><DD><P>Forces a suspicious parameter passed to the
              <CODE class="option">--message</CODE> (<CODE class="option">-m</CODE>) or
              <CODE class="option">--file</CODE> (<CODE class="option">-F</CODE>) option to
              be accepted as valid.  By default, Subversion will
              produce an error if parameters to these options look
              like they might instead be targets of the subcommand.
              For example, if you pass a versioned file's path to the
              <CODE class="option">--file</CODE> (<CODE class="option">-F</CODE>) option,
              Subversion will assume you've made a mistake, that the
              path was instead intended as the target of the
              operation, and that you simply failed to provide some
              otherâunversionedâfile as the source of your
              log message.  To assert your intent and override these
              types of errors, pass the <CODE class="option">--force-log</CODE>
              option to subcommands that accept log messages.</P></DD><DT><SPAN class="term"><CODE class="option">--help</CODE> (<CODE class="option">-h</CODE>) or
                <CODE class="option">-?</CODE>)
          </SPAN></DT><DD><P>If used with one or more subcommands, shows the
              built-in help text for each.  If used alone, it displays
              the general client help text.</P></DD><DT><SPAN class="term"><CODE class="option">--ignore-ancestry</CODE></SPAN></DT><DD><P>Tells Subversion to ignore ancestry when calculating
              differences (rely on path contents alone).</P></DD><DT><SPAN class="term"><CODE class="option">--ignore-externals</CODE></SPAN></DT><DD><P>Tells Subversion to ignore externals definitions and
              the external working copies managed by them.</P></DD><DT><SPAN class="term"><CODE class="option">--incremental</CODE></SPAN></DT><DD><P>Prints output in a format suitable for
              concatenation.</P></DD><DT><SPAN class="term"><CODE class="option">--keep-changelists</CODE></SPAN></DT><DD><P>Tells Subversion not to delete changelists after committing.</P></DD><DT><SPAN class="term"><CODE class="option">--keep-local</CODE></SPAN></DT><DD><P>Keeps the local copy of a file or directory (used
              with the <SPAN class="command"><STRONG>svn delete</STRONG></SPAN> command).</P></DD><DT><SPAN class="term"><CODE class="option">--limit</CODE> (<CODE class="option">-l</CODE>)
            <EM class="replaceable"><CODE>NUM</CODE></EM></SPAN></DT><DD><P>Shows only the first <EM class="replaceable"><CODE>NUM</CODE></EM>
              log messages.</P></DD><DT><SPAN class="term"><CODE class="option">--message</CODE> (<CODE class="option">-m</CODE>)
            <EM class="replaceable"><CODE>MESSAGE</CODE></EM>
          </SPAN></DT><DD><P>Indicates that you will specify either a log message
              or a lock comment on the command line, following this
              option.  For example:</P><PRE class="screen">$ svn commit -m "They don't make Sunday."
</PRE></DD><DT><SPAN class="term"><CODE class="option">--new</CODE> <EM class="replaceable"><CODE>ARG</CODE></EM></SPAN></DT><DD><P>Uses <EM class="replaceable"><CODE>ARG</CODE></EM> as the newer
              target (for use with <SPAN class="command"><STRONG>svn diff</STRONG></SPAN>).</P></DD><DT><SPAN class="term"><CODE class="option">--no-auto-props</CODE></SPAN></DT><DD><P>Disables auto-props, overriding the
              <CODE class="literal">enable-auto-props</CODE> directive in the
              <CODE class="filename">config</CODE> file.</P></DD><DT><SPAN class="term"><CODE class="option">--no-diff-deleted</CODE></SPAN></DT><DD><P>Prevents Subversion from printing differences for
              deleted files.  The default behavior when you remove a
              file is for <SPAN class="command"><STRONG>svn diff</STRONG></SPAN> to print the
              same differences that you would see if you had left
              the file but removed all the content.</P></DD><DT><SPAN class="term"><CODE class="option">--no-ignore</CODE></SPAN></DT><DD><P>Shows files in the status listing that would
              normally be omitted since they match a pattern in the
              <CODE class="literal">global-ignores</CODE> configuration option
              or the <CODE class="literal">svn:ignore</CODE> property.  See <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.confarea.opts.config" title="Config">the section called âConfigâ</A> and <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.special.ignore" title="Ignoring Unversioned Items">the section called âIgnoring Unversioned Itemsâ</A> for more
              information.</P></DD><DT><SPAN class="term"><CODE class="option">--no-unlock</CODE></SPAN></DT><DD><P>Tells Subversion not to automatically unlock files (the default commit
              behavior is to unlock all files listed as part of the
              commit).  See <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.locking" title="Locking">the section called âLockingâ</A> for
              more information.</P></DD><DT><SPAN class="term"><CODE class="option">--non-recursive</CODE> (<CODE class="option">-N</CODE>)</SPAN></DT><DD><P><SPAN class="emphasis"><EM>Deprecated</EM></SPAN>.  Stops a subcommand
              from recursing into subdirectories.  Most subcommands
              recurse by default, but some subcommandsâusually
              those that have the potential to remove or undo your
              local modificationsâdo not.</P></DD><DT><SPAN class="term"><CODE class="option">--notice-ancestry</CODE></SPAN></DT><DD><P>Pays attention to ancestry when calculating 
              differences.</P></DD><DT><SPAN class="term"><CODE class="option">--old</CODE> <EM class="replaceable"><CODE>ARG</CODE></EM></SPAN></DT><DD><P>Uses <EM class="replaceable"><CODE>ARG</CODE></EM> as the older
              target (for use with <SPAN class="command"><STRONG>svn diff</STRONG></SPAN>).</P></DD><DT><SPAN class="term"><CODE class="option">--parents</CODE></SPAN></DT><DD><P>Creates and adds nonexistent or nonversioned parent
              subdirectories to the working copy or repository as part
              of an operation.  This is useful for automatically
              creating multiple subdirectories where none currently
              exist.  If performed on a URL, all the directories will
              be created in a single commit.</P></DD><DT><SPAN class="term"><CODE class="option">--quiet</CODE> (<CODE class="option">-q</CODE>)</SPAN></DT><DD><P>Requests that the client print only essential
              information while performing an operation.</P></DD><DT><SPAN class="term"><CODE class="option">--record-only</CODE></SPAN></DT><DD><P>Marks revisions as merged (for use with
              <CODE class="option">--revision</CODE>).</P></DD><DT><SPAN class="term"><CODE class="option">--recursive</CODE> (<CODE class="option">-R</CODE>)</SPAN></DT><DD><P>Makes a subcommand recurse into subdirectories.
              Most subcommands recurse by default.</P></DD><DT><SPAN class="term"><CODE class="option">--reintegrate</CODE></SPAN></DT><DD><P>Used with the <SPAN class="command"><STRONG>svn merge</STRONG></SPAN>
              subcommand, merges all of the source URL's changes into
              the working copy.  See
              <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchemerge.basicmerging.stayinsync" title="Keeping a Branch in Sync">the section called âKeeping a Branch in Syncâ</A>
              for details.</P></DD><DT><SPAN class="term"><CODE class="option">--relocate</CODE> <EM class="replaceable"><CODE>FROM TO
          [PATH...]</CODE></EM></SPAN></DT><DD><P>Used with the <SPAN class="command"><STRONG>svn switch</STRONG></SPAN>
              subcommand, changes the location of the repository that
              your working copy references.  This is useful if the
              location of your repository changes and you have an
              existing working copy that you'd like to continue to
              use.  See <SPAN class="command"><STRONG>svn switch</STRONG></SPAN> for an
              example.</P></DD><DT><SPAN class="term"><CODE class="option">--remove</CODE>
            <EM class="replaceable"><CODE>ARG</CODE></EM></SPAN></DT><DD><P>Disassociates <EM class="replaceable"><CODE>ARG</CODE></EM> from a
              changelist</P></DD><DT><SPAN class="term"><CODE class="option">--revision</CODE> (<CODE class="option">-r</CODE>)
            <EM class="replaceable"><CODE>REV</CODE></EM>
          </SPAN></DT><DD><P>Indicates that you're going to supply a revision (or
              range of revisions) for a particular operation.  You can
              provide revision numbers, keywords, or dates (in
              curly braces) as arguments to the revision option.  If
              you wish to offer a range of revisions, you can
              provide two revisions separated by a colon.  For
              example:</P><PRE class="screen">$ svn log -r 1729
$ svn log -r 1729:HEAD
$ svn log -r 1729:1744
$ svn log -r {2001-12-04}:{2002-02-17}
$ svn log -r 1729:{2002-02-17}
</PRE><P>See <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.revs.keywords" title="Revision Keywords">the section called âRevision Keywordsâ</A> for more
              information.</P></DD><DT><SPAN class="term"><CODE class="option">--revprop</CODE></SPAN></DT><DD><P>Operates on a revision property instead of a
              property specific to a file or directory.  This option
              requires that you also pass a revision with the
              <CODE class="option">--revision</CODE> (<CODE class="option">-r</CODE>)
              option.</P></DD><DT><SPAN class="term"><CODE class="option">--set-depth</CODE>
            <EM class="replaceable"><CODE>ARG</CODE></EM></SPAN></DT><DD><P>Sets the sticky depth on a directory in a working
              copy to one of <CODE class="literal">empty</CODE>,
              <CODE class="literal">files</CODE>, <CODE class="literal">immediates</CODE>,
              or <CODE class="literal">infinity</CODE>.</P></DD><DT><SPAN class="term"><CODE class="option">--show-revs</CODE> <EM class="replaceable"><CODE>ARG</CODE></EM></SPAN></DT><DD><P>Used to make <SPAN class="command"><STRONG>svn mergeinfo</STRONG></SPAN>
              display either <CODE class="literal">merged</CODE>
              or <CODE class="literal">eligible</CODE> revisions.</P></DD><DT><SPAN class="term"><CODE class="option">--show-updates</CODE> (<CODE class="option">-u</CODE>)</SPAN></DT><DD><P>Causes the client to display information about
              which files in your working copy are out of date.
              This doesn't actually update any of your
              filesâit just shows you which files will be
              updated if you then use <SPAN class="command"><STRONG>svn update</STRONG></SPAN>.
            </P></DD><DT><SPAN class="term"><CODE class="option">--stop-on-copy</CODE></SPAN></DT><DD><P>Causes a Subversion subcommand that traverses
              the history of a versioned resource to stop harvesting
              that historical information when a copyâthat is, a
              location in history where that resource was copied from
              another location in the repositoryâis
              encountered.</P></DD><DT><SPAN class="term"><CODE class="option">--strict</CODE></SPAN></DT><DD><P>Causes Subversion to use strict semantics, a notion
              that is rather vague unless talking about specific
              subcommands (namely, <SPAN class="command"><STRONG>svn propget</STRONG></SPAN>).</P></DD><DT><SPAN class="term"><CODE class="option">--targets</CODE>
            <EM class="replaceable"><CODE>FILENAME</CODE></EM></SPAN></DT><DD><P>Tells Subversion to get the list of files that you
              wish to operate on from the filename that you provide
              instead of listing all the files on the command line.
            </P></DD><DT><SPAN class="term"><CODE class="option">--use-merge-history</CODE>
            (<CODE class="option">-g</CODE>)</SPAN></DT><DD><P>Uses or displays additional information from merge
              history.</P></DD><DT><SPAN class="term"><CODE class="option">--verbose</CODE> (<CODE class="option">-v</CODE>)</SPAN></DT><DD><P>Requests that the client print out as much
              information as it can while running any subcommand.
              This may result in Subversion printing out additional
              fields, detailed information about every file, or
              additional information regarding its actions.</P></DD><DT><SPAN class="term"><CODE class="option">--version</CODE></SPAN></DT><DD><P>Prints the client version info.  This information
              includes not only the version number of the client, but
              also a listing of all repository access modules that the
              client can use to access a Subversion repository.
              With <CODE class="option">--quiet</CODE> (<CODE class="option">-q</CODE>) it
              prints only the version number in a compact form.</P></DD><DT><SPAN class="term"><CODE class="option">--with-all-revprops</CODE></SPAN></DT><DD><P>Used with the <CODE class="option">--xml</CODE> option to <SPAN class="command"><STRONG>svn log</STRONG></SPAN>,
            will retrieve and display all revision
            properties in the log output.</P></DD><DT><SPAN class="term"><CODE class="option">--with-revprop</CODE>
            <EM class="replaceable"><CODE>ARG</CODE></EM></SPAN></DT><DD><P>When used with any command that writes to the
              repository, sets the revision property, using the
              <EM class="replaceable"><CODE>NAME=VALUE</CODE></EM> format,
              <EM class="replaceable"><CODE>NAME</CODE></EM> to
              <EM class="replaceable"><CODE>VALUE</CODE></EM>.  When used with
              <SPAN class="command"><STRONG>svn log</STRONG></SPAN> in <CODE class="option">--xml</CODE> mode, this displays the value of
              <EM class="replaceable"><CODE>ARG</CODE></EM> in the log output.</P></DD><DT><SPAN class="term"><CODE class="option">--xml</CODE></SPAN></DT><DD><P>Prints output in XML format.</P></DD></DL></DIV></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.ref.svn.c"></A>svn Subcommands</H3></DIV></DIV></DIV><P>Here are the various subcommands for the <SPAN class="command"><STRONG>svn</STRONG></SPAN> program.  For the sake of
        brevity, we omit the global options (described in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.sw" title="svn Options">the section called âsvn Optionsâ</A>) from the subcommand descriptions
        which follow.</P><DIV class="refentry" lang="en" xml:lang="en"><A id="svn.ref.svn.c.add"></A><DIV class="titlepage"></DIV><A id="id567275" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svn add â Add files, directories, or symbolic links.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id567300"></A><H2>Synopsis</H2><PRE class="programlisting">svn add PATH...</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id567313"></A><H2>Description</H2><P>Schedule files, directories, or symbolic links in your
            working copy for addition to the repository.  They will be
            uploaded and added to the repository on your next commit.
            If you add something and change your mind before
            committing, you can unschedule the addition using
            <SPAN class="command"><STRONG>svn revert</STRONG></SPAN>.
          </P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id567332"></A><H2>Alternate names</H2><P>None</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id567342"></A><H2>Changes</H2><P>Working copy</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id567352"></A><H2>Accesses repository</H2><P>No</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id567362"></A><H2>Options</H2><PRE class="screen">--auto-props
--depth ARG
--force
--no-auto-props
--no-ignore
--parents
--quiet (-q)
--targets FILENAME
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id567375"></A><H2>Examples</H2><P>To add a file to your working copy:</P><PRE class="screen">$ svn add foo.c 
A         foo.c
</PRE><P>When adding a directory, the default behavior of
            <SPAN class="command"><STRONG>svn add</STRONG></SPAN> is to recurse:</P><PRE class="screen">$ svn add testdir
A         testdir
A         testdir/a
A         testdir/b
A         testdir/c
A         testdir/d
</PRE><P>You can add a directory without adding its
            contents:</P><PRE class="screen">$ svn add --depth=empty otherdir
A         otherdir
</PRE><P>Normally, the command <STRONG class="userinput"><CODE>svn add *</CODE></STRONG>
            will skip over any directories that are already under
            version control.  Sometimes, however, you may want to add
            every unversioned object in your working copy, including
            those hiding deeper.  Passing the
            <CODE class="option">--force</CODE> option makes <SPAN class="command"><STRONG>svn
            add</STRONG></SPAN> recurse into versioned directories:
          </P><PRE class="screen">$ svn add * --force
A         foo.c
A         somedir/bar.c
A  (bin)  otherdir/docs/baz.doc
â¦
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svn.c.blame"></A><DIV class="titlepage"></DIV><A id="id567453" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svn blame â Show author and revision information inline
            for the specified files or URLs.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id567479"></A><H2>Synopsis</H2><PRE class="programlisting">svn blame TARGET[@REV]...</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id567491"></A><H2>Description</H2><P>Show author and revision information inline for the
            specified files or URLs.  Each line of text is annotated
            at the beginning with the author (username) and the
            revision number for the last change to that line.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id567503"></A><H2>Alternate names</H2><P><SPAN class="command"><STRONG>praise</STRONG></SPAN>, <SPAN class="command"><STRONG>annotate</STRONG></SPAN>, <SPAN class="command"><STRONG>ann</STRONG></SPAN></P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id567528"></A><H2>Changes</H2><P>Nothing</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id567538"></A><H2>Accesses repository</H2><P>Yes</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id567548"></A><H2>Options</H2><PRE class="screen">--extensions (-x) ARG
--force
--incremental
--revision (-r) ARG
--use-merge-history (-g)
--verbose (-v)
--xml
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id567563"></A><H2>Examples</H2><P>If you want to see blame-annotated source for
            <CODE class="filename">readme.txt</CODE> in your test
            repository:</P><PRE class="screen">$ svn blame http://svn.red-bean.com/repos/test/readme.txt
     3      sally This is a README file.
     5      harry You should read this.
</PRE><P>Even if <SPAN class="command"><STRONG>svn blame</STRONG></SPAN> says that Harry
            last modified <CODE class="filename">readme.txt</CODE> in revision
            5, you'll have to examine exactly what the revision
            changed to be sure that Harry changed
            the <SPAN class="emphasis"><EM>context</EM></SPAN> of the lineâhe may
            have adjusted just the whitespace.
          </P><P>If you use the <CODE class="option">--xml</CODE> option, you can
            get XML output describing the blame annotations, but not
            the contents of the lines themselves:</P><PRE class="screen">$ svn blame --xml http://svn.red-bean.com/repos/test/readme.txt
&lt;?xml version="1.0"?&gt;
&lt;blame&gt;
&lt;target
   path="sandwich.txt"&gt;
&lt;entry
   line-number="1"&gt;
&lt;commit
   revision="3"&gt;
&lt;author&gt;sally&lt;/author&gt;
&lt;date&gt;2008-05-25T19:12:31.428953Z&lt;/date&gt;
&lt;/commit&gt;
&lt;/entry&gt;
&lt;entry
   line-number="2"&gt;
&lt;commit
   revision="5"&gt;
&lt;author&gt;harry&lt;/author&gt;
&lt;date&gt;2008-05-29T03:26:12.293121Z&lt;/date&gt;
&lt;/commit&gt;
&lt;/entry&gt;
&lt;/target&gt;
&lt;/blame&gt;
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svn.c.cat"></A><DIV class="titlepage"></DIV><A id="id567645" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svn cat â Output the contents of the specified files or
            URLs.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id567670"></A><H2>Synopsis</H2><PRE class="programlisting">svn cat TARGET[@REV]...</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id567683"></A><H2>Description</H2><P>Output the contents of the specified files or URLs.
            For listing the contents of directories, see <SPAN class="command"><STRONG>svn
            list</STRONG></SPAN> later in this chapter.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id567700"></A><H2>Alternate names</H2><P>None</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id567710"></A><H2>Changes</H2><P>Nothing</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id567720"></A><H2>Accesses repository</H2><P>Yes</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id567730"></A><H2>Options</H2><PRE class="screen">--revision (-r) REV
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id567742"></A><H2>Examples</H2><P>If you want to view <CODE class="filename">readme.txt</CODE> in
            your repository without checking it out:</P><PRE class="screen">$ svn cat http://svn.red-bean.com/repos/test/readme.txt
This is a README file.
You should read this.
</PRE><DIV class="tip" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Tip</H3><P>If your working copy is out of date (or you have
              local modifications) and you want to see the
              <CODE class="literal">HEAD</CODE> revision of a file in your
              working copy, <SPAN class="command"><STRONG>svn cat -r HEAD <EM class="replaceable"><CODE>FILENAME</CODE></EM></STRONG></SPAN> will
              automatically fetch the <CODE class="literal">HEAD</CODE> revision
              of the specified path:</P></DIV><PRE class="screen">$ cat foo.c
This file is in my local working copy 
and has changes that I've made.

$ svn cat -r HEAD foo.c
Latest revision fresh from the repository!
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svn.c.changelist"></A><DIV class="titlepage"></DIV><A id="id567809" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svn changelist â Associate (or deassociate) local paths with a
            changelist.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id567835"></A><H2>Synopsis</H2><PRE class="programlisting">changelist CLNAME TARGET...</PRE><PRE class="programlisting">changelist --remove TARGET...</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id567853"></A><H2>Description</H2><P>Used for dividing files in a working copy into a
            changelist (logical named grouping) in order to allow
            users to easily work on multiple file collections within a
            single working copy.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id567865"></A><H2>Alternate names</H2><P><SPAN class="command"><STRONG>cl</STRONG></SPAN></P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id567878"></A><H2>Changes</H2><P>Working copy</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id567888"></A><H2>Accesses repository</H2><P>No</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id567898"></A><H2>Options</H2><PRE class="screen">--changelist ARG
--depth ARG
--quiet (-q)
--recursive (-R)
--remove
--targets ARG
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id567911"></A><H2>Example</H2><P>Edit three files, add them to a changelist, then
            commit only files in that changelist:</P><PRE class="screen">$ svn cl issue1729 foo.c bar.c baz.c
Path 'foo.c' is now a member of changelist 'issue1729'.
Path 'bar.c' is now a member of changelist 'issue1729'.
Path 'baz.c' is now a member of changelist 'issue1729'.

$ svn status
A      someotherfile.c
A      test/sometest.c

--- Changelist 'issue1729':
A      foo.c
A      bar.c
A      baz.c

$ svn commit --changelist issue1729 -m "Fixing Issue 1729."
Adding         bar.c
Adding         baz.c
Adding         foo.c
Transmitting file data ...
Committed revision 2.

$ svn status
A      someotherfile.c
A      test/sometest.c
</PRE><P>Note that only the files in changelist
            <EM class="replaceable"><CODE>issue1729</CODE></EM> were
            committed.</P></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svn.c.checkout"></A><DIV class="titlepage"></DIV><A id="id567947" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svn checkout â Check out a working copy from a repository.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id567973"></A><H2>Synopsis</H2><PRE class="programlisting">svn checkout URL[@REV]... [PATH]</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id567985"></A><H2>Description</H2><P>Check out a working copy from a repository.  If
            <EM class="replaceable"><CODE>PATH</CODE></EM> is omitted, the
            basename of the URL will be used as the destination.
            If multiple URLs are given, each will be checked out into a
            subdirectory of <EM class="replaceable"><CODE>PATH</CODE></EM>, with the
            name of the subdirectory being the basename of the
            URL.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id568005"></A><H2>Alternate names</H2><P><SPAN class="command"><STRONG>co</STRONG></SPAN></P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id568018"></A><H2>Changes</H2><P>Creates a working copy</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id568029"></A><H2>Accesses repository</H2><P>Yes</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id568038"></A><H2>Options</H2><PRE class="screen">--depth ARG
--force
--ignore-externals
--quiet (-q)
--revision (-r) REV
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id568051"></A><H2>Examples</H2><P>Check out a working copy into a directory called
            <CODE class="filename">mine</CODE>:</P><PRE class="screen">$ svn checkout file:///var/svn/repos/test mine
A  mine/a
A  mine/b
A  mine/c
A  mine/d
Checked out revision 20.
$ ls
mine
</PRE><P>Check out two different directories into two separate
            working copies:</P><PRE class="screen">$ svn checkout file:///var/svn/repos/test  file:///var/svn/repos/quiz
A  test/a
A  test/b
A  test/c
A  test/d
Checked out revision 20.
A  quiz/l
A  quiz/m
Checked out revision 13.
$ ls
quiz  test
</PRE><P>Check out two different directories into two separate
            working copies, but place both into a directory called
            <CODE class="filename">working-copies</CODE>:</P><PRE class="screen">$ svn checkout file:///var/svn/repos/test  file:///var/svn/repos/quiz working-copies
A  working-copies/test/a
A  working-copies/test/b
A  working-copies/test/c
A  working-copies/test/d
Checked out revision 20.
A  working-copies/quiz/l
A  working-copies/quiz/m
Checked out revision 13.
$ ls
working-copies
</PRE><P>If you interrupt a checkout (or something else
            interrupts your checkout, such as loss of connectivity,
            etc.), you can restart it either by issuing the identical
            checkout command again or by updating the incomplete
            working copy:</P><PRE class="screen">$ svn checkout file:///var/svn/repos/test mine
A  mine/a
A  mine/b
^C
svn: The operation was interrupted
svn: caught SIGINT

$ svn checkout file:///var/svn/repos/test mine
A  mine/c
^C
svn: The operation was interrupted
svn: caught SIGINT

$ svn update mine
A  mine/d
Updated to revision 20.
</PRE><P>If you wish to check out some revision other than the
            most recent one, you can do so by providing the
            <CODE class="option">--revision</CODE> (<CODE class="option">-r</CODE>) option
            to the <SPAN class="command"><STRONG>svn checkout</STRONG></SPAN> command:</P><PRE class="screen">$ svn checkout -r 2 file:///var/svn/repos/test mine
A  mine/a
Checked out revision 2.
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svn.c.cleanup"></A><DIV class="titlepage"></DIV><A id="id568148" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svn cleanup â Recursively clean up the working copy</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id568174"></A><H2>Synopsis</H2><PRE class="programlisting">svn cleanup [PATH...]</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id568186"></A><H2>Description</H2><P>Recursively clean up the working copy, removing
            working copy locks and resuming unfinished operations.  If
            you ever get a <CODE class="literal">working copy locked</CODE>
            error, run this command to remove stale locks and get your
            working copy into a usable state again.</P><P>If, for some reason, an <SPAN class="command"><STRONG>svn update</STRONG></SPAN>
            fails due to a problem running an external diff program
            (e.g., user input or network failure), pass the
            <CODE class="option">--diff3-cmd</CODE> to allow cleanup to complete
            any merging with your external diff program.  You can also
            specify any configuration directory with the
            <CODE class="option">--config-dir</CODE> option, but you should need
            these options extremely infrequently.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id568225"></A><H2>Alternate names</H2><P>None</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id568235"></A><H2>Changes</H2><P>Working copy</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id568245"></A><H2>Accesses repository</H2><P>No</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id568255"></A><H2>Options</H2><PRE class="screen">--diff3-cmd CMD
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id568267"></A><H2>Examples</H2><P>Well, there's not much to the examples here, as
            <SPAN class="command"><STRONG>svn cleanup</STRONG></SPAN> generates no output.  If
            you pass no <EM class="replaceable"><CODE>PATH</CODE></EM>, then
            â<SPAN class="quote"><CODE class="filename">.</CODE></SPAN>â is used:</P><PRE class="screen">$ svn cleanup

$ svn cleanup /var/svn/working-copy
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svn.c.commit"></A><DIV class="titlepage"></DIV><A id="id568308" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svn commit â Send changes from your working copy to the repository.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id568334"></A><H2>Synopsis</H2><PRE class="programlisting">svn commit [PATH...]</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id568346"></A><H2>Description</H2><P>Send changes from your working copy to the
            repository.  If you do not supply a log message with your
            commit by using either the <CODE class="option">--file</CODE> or
            <CODE class="option">--message</CODE> option,
            <SPAN class="command"><STRONG>svn</STRONG></SPAN> will launch your editor for you
            to compose a commit message.  See the
            <CODE class="literal">editor-cmd</CODE> list entry in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.confarea.opts.config" title="Config">the section called âConfigâ</A>.</P><P><SPAN class="command"><STRONG>svn commit</STRONG></SPAN> will send any lock
            tokens that it finds and will release locks on all
            <EM class="replaceable"><CODE>PATH</CODE></EM>s committed (recursively)
            unless <CODE class="option">--no-unlock</CODE> is passed.</P><DIV class="tip" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Tip</H3><P>If you begin a commit and Subversion launches your
              editor to compose the commit message, you can still
              abort without committing your changes.  If you want to
              cancel your commit, just quit your editor without saving
              your commit message and Subversion will prompt you to
              either abort the commit, continue with no message, or
              edit the message again.</P></DIV></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id568410"></A><H2>Alternate names</H2><P><SPAN class="command"><STRONG>ci</STRONG></SPAN> (short for â<SPAN class="quote">check in</SPAN>â; not 
            <SPAN class="command"><STRONG>co</STRONG></SPAN>, which is an alias for the 
            <SPAN class="command"><STRONG>checkout</STRONG></SPAN> subcommand)</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id568440"></A><H2>Changes</H2><P>Working copy; repository</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id568450"></A><H2>Accesses repository</H2><P>Yes</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id568460"></A><H2>Options</H2><PRE class="screen">--changelist ARG
--depth ARG
--editor-cmd ARG
--encoding ENC
--file (-F) FILE
--force-log
--keep-changelists
--message (-m) TEXT
--no-unlock
--quiet (-q)
--targets FILENAME
--with-revprop ARG
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id568474"></A><H2>Examples</H2><P>Commit a simple modification to a file with the
            commit message on the command line and an implicit
            target of your current directory
            (â<SPAN class="quote"><CODE class="filename">.</CODE></SPAN>â):</P><PRE class="screen">$ svn commit -m "added howto section."
Sending        a
Transmitting file data .
Committed revision 3.
</PRE><P>Commit a modification to the file
            <CODE class="filename">foo.c</CODE> (explicitly specified on the
            command line) with the commit message in a file named
            <CODE class="filename">msg</CODE>:</P><PRE class="screen">$ svn commit -F msg foo.c
Sending        foo.c
Transmitting file data .
Committed revision 5.
</PRE><P>If you want to use a file that's under version
            control for your commit message with
            <CODE class="option">--file</CODE>, you need to pass the
            <CODE class="option">--force-log</CODE> option:</P><PRE class="screen">$ svn commit --file file_under_vc.txt foo.c
svn: The log message file is under version control
svn: Log message file is a versioned file; use '--force-log' to override

$ svn commit --force-log --file file_under_vc.txt foo.c
Sending        foo.c
Transmitting file data .
Committed revision 6.
</PRE><P>To commit a file scheduled for deletion:</P><PRE class="screen">$ svn commit -m "removed file 'c'."
Deleting       c

Committed revision 7.
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svn.c.copy"></A><DIV class="titlepage"></DIV><A id="id568558" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svn copy â Copy a file or directory in a working copy or
            in the repository.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id568584"></A><H2>Synopsis</H2><PRE class="programlisting">svn copy SRC[@REV]... DST</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id568597"></A><H2>Description</H2><P>Copy one or more files in a working copy or in the
            repository.  When copying multiple sources, they will be
            added as children of <EM class="replaceable"><CODE>DST</CODE></EM>, which must be a directory.
            <EM class="replaceable"><CODE>SRC</CODE></EM> and
            <EM class="replaceable"><CODE>DST</CODE></EM> can each be either a
            working copy (WC) path or URL:</P><DIV class="variablelist"><DL><DT><SPAN class="term">WC â WC</SPAN></DT><DD><P>Copy and schedule an item for
                    addition (with history).</P></DD><DT><SPAN class="term">WC â URL</SPAN></DT><DD><P>Immediately commit a copy of WC to URL.</P></DD><DT><SPAN class="term">URL â WC</SPAN></DT><DD><P>Check out URL into WC and schedule it for
                    addition.</P></DD><DT><SPAN class="term">URL â URL</SPAN></DT><DD><P>Complete server-side copy.  This is
                    usually used to branch and tag.</P></DD></DL></DIV><P>When copying multiple sources, they will be added as
            children of <EM class="replaceable"><CODE>DST</CODE></EM>, which must be
            a directory.</P><P>If no peg revision (i.e.,
            <EM class="replaceable"><CODE>@REV</CODE></EM>) is supplied, by default
            the <CODE class="literal">BASE</CODE> revision will be used for
            files copied from the working copy, while the
            <CODE class="literal">HEAD</CODE> revision will be used for files
            copied from a URL.</P><DIV class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Note</H3><P>You can only copy files within a single repository.
              Subversion does not support cross-repository copying.</P></DIV></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id568714"></A><H2>Alternate names</H2><P><SPAN class="command"><STRONG>cp</STRONG></SPAN></P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id568728"></A><H2>Changes</H2><P>Repository if destination is a URL; working copy if destination is a WC path</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id568738"></A><H2>Accesses repository</H2><P>Yes, if source or destination is in the repository, or if needed
            to look up the source revision number.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id568749"></A><H2>Options</H2><PRE class="screen">--editor-cmd EDITOR
--encoding ENC
--file (-F) FILE
--force-log
--message (-m) TEXT
--parents
--quiet (-q)
--revision (-r) REV
--with-revprop ARG
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id568763"></A><H2>Examples</H2><P>Copy an item within your working copy (this
            schedules the copyânothing goes into the repository
            until you commit):</P><PRE class="screen">$ svn copy foo.txt bar.txt
A         bar.txt
$ svn status
A  +   bar.txt
</PRE><P>Copy several files in a working copy into a
            subdirectory:</P><PRE class="screen">$ svn cp bat.c baz.c qux.c src
A         src/bat.c
A         src/baz.c
A         src/qux.c
</PRE><P>Copy revision 8 of <CODE class="filename">bat.c</CODE> into your
            working copy under a different name:</P><PRE class="screen">$ svn cp -r 8 bat.c ya-old-bat.c
A         ya-old-bat.c
</PRE><P>Copy an item in your working copy to a URL in the
            repository (this is an immediate commit, so you must supply a
            commit message):</P><PRE class="screen">$ svn copy near.txt file:///var/svn/repos/test/far-away.txt -m "Remote copy."

Committed revision 8.
</PRE><P>Copy an item from the repository to your working
            copy (this just schedules the copyânothing goes into the
            repository until you commit):</P><PRE class="screen">$ svn copy file:///var/svn/repos/test/far-away -r 6 near-here
A         near-here
</PRE><DIV class="tip" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Tip</H3><P>This is the recommended way to resurrect a dead
              file in your repository!</P></DIV><P>And finally, copy between two URLs:</P><PRE class="screen">$ svn copy file:///var/svn/repos/test/far-away \
           file:///var/svn/repos/test/over-there -m "remote copy."

Committed revision 9.
</PRE><PRE class="screen">$ svn copy file:///var/svn/repos/test/trunk \
           file:///var/svn/repos/test/tags/0.6.32-prerelease -m "tag tree"

Committed revision 12.
</PRE><DIV class="tip" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Tip</H3><P>This is the easiest way to â<SPAN class="quote">tag</SPAN>â a
              revision in your repositoryâjust <SPAN class="command"><STRONG>svn
              copy</STRONG></SPAN> that revision (usually
              <CODE class="literal">HEAD</CODE>) into your <CODE class="filename">tags</CODE> directory.</P></DIV><P>And don't worry if you forgot to tagâyou can
            always specify an older revision and tag anytime:</P><PRE class="screen">$ svn copy -r 11 file:///var/svn/repos/test/trunk \
           file:///var/svn/repos/test/tags/0.6.32-prerelease \
           -m "Forgot to tag at rev 11"

Committed revision 13.
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svn.c.delete"></A><DIV class="titlepage"></DIV><A id="id568900" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svn delete â Delete an item from a working copy
            or the repository.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id568926"></A><H2>Synopsis</H2><PRE class="programlisting">svn delete PATH...</PRE><PRE class="programlisting">svn delete URL...</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id568944"></A><H2>Description</H2><P>Items specified by <EM class="replaceable"><CODE>PATH</CODE></EM> are
            scheduled for deletion upon the next commit.  Files (and
            directories that have not been committed) are immediately
            removed from the working copy unless the
            <CODE class="option">--keep-local</CODE> option is given.  The
            command will not remove any unversioned or modified items;
            use the <CODE class="option">--force</CODE> option to override this
            behavior.</P><P>Items specified by URL are deleted from
            the repository via an immediate commit.  Multiple URLs are
            committed atomically.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id568973"></A><H2>Alternate names</H2><P><SPAN class="command"><STRONG>del</STRONG></SPAN>, <SPAN class="command"><STRONG>remove</STRONG></SPAN>, <SPAN class="command"><STRONG>rm</STRONG></SPAN></P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id568998"></A><H2>Changes</H2><P>Working copy if operating on files; repository if
            operating on URLs</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id569008"></A><H2>Accesses repository</H2><P>Only if operating on URLs</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id569018"></A><H2>Options</H2><PRE class="screen">--editor-cmd EDITOR
--encoding ENC
--file (-F) FILE
--force
--force-log
--keep-local
--message (-m) TEXT
--quiet (-q)
--targets FILENAME
--with-revprop ARG
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id569032"></A><H2>Examples</H2><P>Using <SPAN class="command"><STRONG>svn</STRONG></SPAN> to delete a file from
            your working copy deletes your local copy of the file, but
            it merely schedules the file to be deleted from the
            repository.  When you commit, the file is deleted in the
            repository.</P><PRE class="screen">$ svn delete myfile
D         myfile

$ svn commit -m "Deleted file 'myfile'."
Deleting       myfile
Transmitting file data .
Committed revision 14.
</PRE><P>Deleting a URL, however, is immediate, so you have
            to supply a log message:</P><PRE class="screen">$ svn delete -m "Deleting file 'yourfile'" \
             file:///var/svn/repos/test/yourfile

Committed revision 15.
</PRE><P>Here's an example of how to force deletion of a file
            that has local mods:</P><PRE class="screen">$ svn delete over-there 
svn: Attempting restricted operation for modified resource
svn: Use --force to override this restriction
svn: 'over-there' has local modifications

$ svn delete --force over-there 
D         over-there
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svn.c.diff"></A><DIV class="titlepage"></DIV><A id="id569085" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svn diff â This displays the differences between two revisions or paths.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id569111"></A><H2>Synopsis</H2><PRE class="programlisting">diff [-c M | -r N[:M]] [TARGET[@REV]...]</PRE><PRE class="programlisting">diff [-r N[:M]] --old=OLD-TGT[@OLDREV] [--new=NEW-TGT[@NEWREV]] [PATH...]</PRE><PRE class="programlisting">diff OLD-URL[@OLDREV] NEW-URL[@NEWREV]</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id569136"></A><H2>Description</H2><DIV class="itemizedlist"><UL type="disc"><LI><P>Display the differences between two paths.  You can
              use <SPAN class="command"><STRONG>svn diff</STRONG></SPAN> in the following ways:</P></LI><LI><P>Use just <SPAN class="command"><STRONG>svn diff</STRONG></SPAN> to display local
                modifications in a working copy.</P></LI><LI><P>Display the changes made to
                <EM class="replaceable"><CODE>TARGET</CODE></EM>s as they are seen in
                <EM class="replaceable"><CODE>REV</CODE></EM> between two revisions.
                <EM class="replaceable"><CODE>TARGET</CODE></EM>s may be all working copy
                paths or all <EM class="replaceable"><CODE>URL</CODE></EM>s.  If
                <EM class="replaceable"><CODE>TARGET</CODE></EM>s are working copy paths,
                <EM class="replaceable"><CODE>N</CODE></EM> defaults to
                <CODE class="literal">BASE</CODE> and <EM class="replaceable"><CODE>M</CODE></EM>
                to the working copy; if <EM class="replaceable"><CODE>TARGET</CODE></EM>s
                are <EM class="replaceable"><CODE>URL</CODE></EM>s,
                <EM class="replaceable"><CODE>N</CODE></EM> must be specified and
                <EM class="replaceable"><CODE>M</CODE></EM> defaults to
                <CODE class="literal">HEAD</CODE>.  The <CODE class="literal">-c M</CODE> option
                is equivalent to <CODE class="literal">-r N:M</CODE> where <CODE class="literal">N =
                M-1</CODE>.  Using <CODE class="literal">-c -M</CODE> does the
                reverse: <CODE class="literal">-r M:N</CODE> where <CODE class="literal">N =
                M-1</CODE>.</P></LI><LI><P>Display the differences between
                <EM class="replaceable"><CODE>OLD-TGT</CODE></EM> as it was seen in
                <EM class="replaceable"><CODE>OLDREV</CODE></EM> and
                <EM class="replaceable"><CODE>NEW-TGT</CODE></EM> as it was seen in
                <EM class="replaceable"><CODE>NEWREV</CODE></EM>.
                <EM class="replaceable"><CODE>PATH</CODE></EM>s, if given, are relative
                to <EM class="replaceable"><CODE>OLD-TGT</CODE></EM> and
                <EM class="replaceable"><CODE>NEW-TGT</CODE></EM> and restrict the output
                to differences for those paths.
                <EM class="replaceable"><CODE>OLD-TGT</CODE></EM> and
                <EM class="replaceable"><CODE>NEW-TGT</CODE></EM> may be working copy
                paths or <EM class="replaceable"><CODE>URL[@REV]</CODE></EM>.
                <EM class="replaceable"><CODE>NEW-TGT</CODE></EM> defaults to
                <EM class="replaceable"><CODE>OLD-TGT</CODE></EM> if not specified.
                <CODE class="literal">-r N</CODE>
                makes <EM class="replaceable"><CODE>OLDREV</CODE></EM> default to
                <CODE class="literal">N</CODE>; <CODE class="literal">-r N:M</CODE>
                makes <EM class="replaceable"><CODE>OLDREV</CODE></EM> default to
                <EM class="replaceable"><CODE>N</CODE></EM> and
                <EM class="replaceable"><CODE>NEWREV</CODE></EM> default to
                <EM class="replaceable"><CODE>M</CODE></EM>.</P></LI></UL></DIV><P><STRONG class="userinput"><CODE>svn diff OLD-URL[@OLDREV]
            NEW-URL[@NEWREV]</CODE></STRONG> is shorthand for <STRONG class="userinput"><CODE>svn
            diff --old=OLD-URL[@OLDREV]
            --new=NEW-URL[@NEWREV].</CODE></STRONG></P><P><STRONG class="userinput"><CODE>svn diff -r N:M URL</CODE></STRONG> is shorthand
            for <STRONG class="userinput"><CODE>svn diff -r N:M --old=URL
            --new=URL</CODE></STRONG>.</P><P><STRONG class="userinput"><CODE>svn diff [-r N[:M]] URL1[@N]
            URL2[@M]</CODE></STRONG> is shorthand for <STRONG class="userinput"><CODE>svn diff [-r
            N[:M]] --old=URL1 --new=URL2</CODE></STRONG>.</P><P>If <EM class="replaceable"><CODE>TARGET</CODE></EM> is a URL, then
            revs <CODE class="literal">N</CODE> and <CODE class="literal">M</CODE> can be given either via the
            <CODE class="option">--revision</CODE> option or by using the
            â<SPAN class="quote">@</SPAN>â notation as described earlier.</P><P>If <EM class="replaceable"><CODE>TARGET</CODE></EM> is a working copy
            path, the default behavior (when no
            <CODE class="option">--revision</CODE> option is provided) is to
            display the differences between the base and working
            copies of <EM class="replaceable"><CODE>TARGET</CODE></EM>.  If a
            <CODE class="option">--revision</CODE> option is specified in this
            scenario, though, it means:</P><DIV class="variablelist"><DL><DT><SPAN class="term"><CODE class="option">--revision N:M</CODE></SPAN></DT><DD><P>The server compares
                  <EM class="replaceable"><CODE>TARGET@N</CODE></EM>
                  and
                  <EM class="replaceable"><CODE>TARGET@M</CODE></EM>.</P></DD><DT><SPAN class="term"><CODE class="option">--revision N</CODE></SPAN></DT><DD><P>The client compares
                  <EM class="replaceable"><CODE>TARGET@N</CODE></EM>
                  against the working copy.</P></DD></DL></DIV><P>If the alternate syntax is used, the server compares
            <EM class="replaceable"><CODE>URL1</CODE></EM> and
            <EM class="replaceable"><CODE>URL2</CODE></EM> at revisions
            <EM class="replaceable"><CODE>N</CODE></EM> and
            <EM class="replaceable"><CODE>M</CODE></EM>, respectively.  If either
            <EM class="replaceable"><CODE>N</CODE></EM> or
            <EM class="replaceable"><CODE>M</CODE></EM> is omitted, a value of
            <CODE class="literal">HEAD</CODE> is assumed.</P><P>By default, <SPAN class="command"><STRONG>svn diff</STRONG></SPAN> ignores the
            ancestry of files and merely compares the contents of the
            two files being compared.  If you use
            <CODE class="option">--notice-ancestry</CODE>, the ancestry of the
            paths in question will be taken into consideration when
            comparing revisions (i.e., if you run <SPAN class="command"><STRONG>svn
            diff</STRONG></SPAN> on two files with identical contents but
            different ancestry, you will see the entire contents of
            the file as having been removed and added again).</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id569544"></A><H2>Alternate names</H2><P><SPAN class="command"><STRONG>di</STRONG></SPAN></P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id569558"></A><H2>Changes</H2><P>Nothing</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id569568"></A><H2>Accesses repository</H2><P>For obtaining differences against anything but
            <CODE class="literal">BASE</CODE> revision in your working copy</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id569584"></A><H2>Options</H2><PRE class="screen">--change (-c) ARG
--changelist ARG
--depth ARG
--diff-cmd CMD
--extensions (-x) "ARGS"
--force
--new ARG
--no-diff-deleted
--notice-ancestry
--old ARG
--revision (-r) ARG
--summarize
--xml
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id569598"></A><H2>Examples</H2><P>Compare <CODE class="literal">BASE</CODE> and your working copy
            (one of the most popular uses of <SPAN class="command"><STRONG>svn
            diff</STRONG></SPAN>):</P><PRE class="screen">$ svn diff COMMITTERS 
Index: COMMITTERS
===================================================================
--- COMMITTERS	(revision 4404)
+++ COMMITTERS	(working copy)
</PRE><P>See what changed in the file
            <CODE class="filename">COMMITTERS</CODE> revision 9115:</P><PRE class="screen">$ svn diff -c 9115 COMMITTERS 
Index: COMMITTERS
===================================================================
--- COMMITTERS	(revision 3900)
+++ COMMITTERS	(working copy)
</PRE><P>See how your working copy's modifications compare
            against an older revision:</P><PRE class="screen">$ svn diff -r 3900 COMMITTERS 
Index: COMMITTERS
===================================================================
--- COMMITTERS	(revision 3900)
+++ COMMITTERS	(working copy)
</PRE><P>Compare revision 3000 to revision 3500 using â<SPAN class="quote">@</SPAN>â
            syntax:</P><PRE class="screen">$ svn diff http://svn.collab.net/repos/svn/trunk/COMMITTERS@3000 \
           http://svn.collab.net/repos/svn/trunk/COMMITTERS@3500
Index: COMMITTERS
===================================================================
--- COMMITTERS	(revision 3000)
+++ COMMITTERS	(revision 3500)
â¦
</PRE><P>Compare revision 3000 to revision 3500 using range
            notation (pass only the one URL in this
            case):</P><PRE class="screen">$ svn diff -r 3000:3500 http://svn.collab.net/repos/svn/trunk/COMMITTERS
Index: COMMITTERS
===================================================================
--- COMMITTERS	(revision 3000)
+++ COMMITTERS	(revision 3500)
</PRE><P>Compare revision 3000 to revision 3500 of all the files in
            <CODE class="filename">trunk</CODE> using range notation:</P><PRE class="screen">$ svn diff -r 3000:3500 http://svn.collab.net/repos/svn/trunk
          </PRE><P>Compare revision 3000 to revision 3500 of only three
            files in <CODE class="filename">trunk</CODE> using range
            notation:</P><PRE class="screen">$ svn diff -r 3000:3500 --old http://svn.collab.net/repos/svn/trunk \
           COMMITTERS README HACKING
          </PRE><P>If you have a working copy, you can obtain the
            differences without typing in the long URLs:</P><PRE class="screen">$ svn diff -r 3000:3500 COMMITTERS 
Index: COMMITTERS
===================================================================
--- COMMITTERS	(revision 3000)
+++ COMMITTERS	(revision 3500)
</PRE><P>Use <CODE class="option">--diff-cmd</CODE>
            <EM class="replaceable"><CODE>CMD</CODE></EM> <CODE class="option">-x</CODE> to
            pass arguments directly to the external diff
            program:</P><PRE class="screen">$ svn diff --diff-cmd /usr/bin/diff -x "-i -b" COMMITTERS 
Index: COMMITTERS
===================================================================
0a1,2
&gt; This is a test
&gt; 
</PRE><P>Lastly, you can use the <CODE class="option">--xml</CODE> option
            along with the <CODE class="option">--summarize</CODE> option to view
            XML describing the changes that occurred between
            revisions, but not the contents of the diff itself:</P><PRE class="screen">$ svn diff --summarize --xml http://svn.red-bean.com/repos/test@r2 \
           http://svn.red-bean.com/repos/test
&lt;?xml version="1.0"?&gt;
&lt;diff&gt;
&lt;paths&gt;
&lt;path
   props="none"
   kind="file"
   item="modified"&amp;gt;http://svn.red-bean.com/repos/test/sandwich.txt&amp;lt;/path&amp;gt;
&lt;path
   props="none"
   kind="file"
   item="deleted"&amp;gt;http://svn.red-bean.com/repos/test/burrito.txt&amp;lt;/path&amp;gt;
&lt;path
   props="none"
   kind="dir"
   item="added"&amp;gt;http://svn.red-bean.com/repos/test/snacks&amp;lt;/path&amp;gt;
&lt;/paths&gt;
&lt;/diff&gt;
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svn.c.export"></A><DIV class="titlepage"></DIV><A id="id569779" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svn export â Export a clean directory tree.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id569805"></A><H2>Synopsis</H2><PRE class="programlisting">svn export [-r REV] URL[@PEGREV] [PATH]</PRE><PRE class="programlisting">svn export [-r REV] PATH1[@PEGREV] [PATH2]</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id569823"></A><H2>Description</H2><P>The first form exports a clean directory tree from the
            repository specified by <EM class="replaceable"><CODE>URL</CODE></EM>âat revision
            <EM class="replaceable"><CODE>REV</CODE></EM> if it is given; otherwise,
            at <CODE class="literal">HEAD</CODE>, into
            <EM class="replaceable"><CODE>PATH</CODE></EM>.  If
            <EM class="replaceable"><CODE>PATH</CODE></EM> is omitted, the last
            component of the <EM class="replaceable"><CODE>URL</CODE></EM> is used
            for the local directory name.</P><P>The second form exports a clean directory tree from
            the working copy specified by
            <EM class="replaceable"><CODE>PATH1</CODE></EM> into
            <EM class="replaceable"><CODE>PATH2</CODE></EM>.  All local changes will
            be preserved, but files not under version control will not
            be copied.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id569871"></A><H2>Alternate names</H2><P>None</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id569881"></A><H2>Changes</H2><P>Local disk</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id569892"></A><H2>Accesses repository</H2><P>Only if exporting from a URL</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id569902"></A><H2>Options</H2><PRE class="screen">--depth ARG
--force
--ignore-externals
--native-eol EOL
--quiet (-q)
--revision (-r) REV
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id569915"></A><H2>Examples</H2><P>Export from your working copy (doesn't print every
            file and directory):</P><PRE class="screen">$ svn export a-wc my-export
Export complete.
</PRE><P>Export directly from the repository (prints every
            file and directory):</P><PRE class="screen">$ svn export file:///var/svn/repos my-export
A  my-export/test
A  my-export/quiz
â¦
Exported revision 15.
</PRE><P>When rolling operating-system-specific release
            packages, it can be useful to export a tree that uses a
            specific EOL character for line endings.  The
            <CODE class="option">--native-eol</CODE> option will do this, but it
            affects only files that have <CODE class="literal">svn:eol-style =
            native</CODE> properties attached to them.  For
            example, to export a tree with all CRLF line endings
            (possibly for a Windows <CODE class="filename">.zip</CODE> file
            distribution):</P><PRE class="screen">$ svn export file:///var/svn/repos my-export --native-eol CRLF
A  my-export/test
A  my-export/quiz
â¦
Exported revision 15.
</PRE><P>You can specify <CODE class="literal">LR</CODE>,
            <CODE class="literal">CR</CODE>, or <CODE class="literal">CRLF</CODE> as a
            line-ending type with the <CODE class="option">--native-eol</CODE>
            option.</P></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svn.c.help"></A><DIV class="titlepage"></DIV><A id="id570004" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svn help â Help!</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id570029"></A><H2>Synopsis</H2><PRE class="programlisting">svn help [SUBCOMMAND...]</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id570042"></A><H2>Description</H2><P>This is your best friend when you're using
            Subversion and this book isn't within reach!</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id570052"></A><H2>Alternate names</H2><P><SPAN class="command"><STRONG>?</STRONG></SPAN>, <SPAN class="command"><STRONG>h</STRONG></SPAN></P><P>The options <CODE class="option">-?</CODE>, <CODE class="option">-h</CODE>,
            and <CODE class="option">--help</CODE> have the same effect as using the
            <SPAN class="command"><STRONG>help</STRONG></SPAN> subcommand.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id570091"></A><H2>Changes</H2><P>Nothing</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id570101"></A><H2>Accesses repository</H2><P>No</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id570111"></A><H2>Options</H2><PRE class="screen"></PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svn.c.import"></A><DIV class="titlepage"></DIV><A id="id570130" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svn import â Commit an unversioned file or tree into the 
            repository.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id570156"></A><H2>Synopsis</H2><PRE class="programlisting">svn import [PATH] URL</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id570168"></A><H2>Description</H2><P>Recursively commit a copy of
            <EM class="replaceable"><CODE>PATH</CODE></EM> to
            <EM class="replaceable"><CODE>URL</CODE></EM>.  If
            <EM class="replaceable"><CODE>PATH</CODE></EM> is omitted,
            â<SPAN class="quote"><CODE class="filename">.</CODE></SPAN>â is assumed.  Parent
            directories are created in the repository as necessary.
            Unversionable items such as device files and pipes are
            ignored even if <CODE class="option">--force</CODE> is
            specified.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id570202"></A><H2>Alternate names</H2><P>None</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id570212"></A><H2>Changes</H2><P>Repository</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id570222"></A><H2>Accesses repository</H2><P>Yes</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id570232"></A><H2>Options</H2><PRE class="screen">--auto-props
--depth ARG
--editor-cmd EDITOR
--encoding ENC
--file (-F) FILE
--force
--force-log
--message (-m) TEXT
--no-auto-props
--no-ignore
--quiet (-q)
--with-revprop ARG
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id570246"></A><H2>Examples</H2><P>This imports the local directory
            <CODE class="filename">myproj</CODE> into
            <CODE class="filename">trunk/misc</CODE> in your repository.  The
            directory <CODE class="filename">trunk/misc</CODE> need not exist
            before you import into itâ<SPAN class="command"><STRONG>svn
            import</STRONG></SPAN> will recursively create directories for
            you.</P><PRE class="screen">$ svn import -m "New import" myproj \
             http://svn.red-bean.com/repos/trunk/misc
Adding         myproj/sample.txt
â¦
Transmitting file data .........
Committed revision 16.
</PRE><P>Be aware that this will <SPAN class="emphasis"><EM>not</EM></SPAN>
            create a directory named <CODE class="filename">myproj</CODE> in
            the repository.  If that's what you want, simply add
            <CODE class="filename">myproj</CODE> to the end of the URL:</P><PRE class="screen">$ svn import -m "New import" myproj \
            http://svn.red-bean.com/repos/trunk/misc/myproj
Adding         myproj/sample.txt
â¦
Transmitting file data .........
Committed revision 16.
</PRE><P>After importing data, note that the original tree is
            <SPAN class="emphasis"><EM>not</EM></SPAN> under version control.  To start
            working, you still need to <SPAN class="command"><STRONG>svn checkout</STRONG></SPAN>
            a fresh working copy of the tree.</P></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svn.c.info"></A><DIV class="titlepage"></DIV><A id="id570337" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svn info â Display information about a local or remote 
            item.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id570363"></A><H2>Synopsis</H2><PRE class="programlisting">svn info [TARGET[@REV]...]</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id570376"></A><H2>Description</H2><P>Print information about the working copy paths or
           URLs specified.  The information shown for both may
           include:</P><DIV class="itemizedlist"><UL type="disc"><LI><P>Path</P></LI><LI><P>Name</P></LI><LI><P>URL</P></LI><LI><P>Repository root</P></LI><LI><P>Repository UUID</P></LI><LI><P>Revision</P></LI><LI><P>Node kind</P></LI><LI><P>Last changed author</P></LI><LI><P>Last changed revision</P></LI><LI><P>Last changed date</P></LI><LI><P>Lock token</P></LI><LI><P>Lock owner</P></LI><LI><P>Lock created (date)</P></LI><LI><P>Lock expires (date)</P></LI></UL></DIV><P>Additional kinds of information available only for
            working copy paths are:</P><DIV class="itemizedlist"><UL type="disc"><LI><P>Schedule</P></LI><LI><P>Copied from URL</P></LI><LI><P>Copied from rev</P></LI><LI><P>Text last updated</P></LI><LI><P>Properties last updated</P></LI><LI><P>Checksum</P></LI><LI><P>Conflict previous base file</P></LI><LI><P>Conflict previous working file</P></LI><LI><P>Conflict current base file</P></LI><LI><P>Conflict properties file</P></LI></UL></DIV></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id570506"></A><H2>Alternate names</H2><P>None</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id570516"></A><H2>Changes</H2><P>Nothing</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id570526"></A><H2>Accesses repository</H2><P>Only if operating on URLs</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id570537"></A><H2>Options</H2><PRE class="screen">--changelist ARG
--depth ARG
--incremental
--recursive (-R)
--revision (-r) REV
--targets FILENAME
--xml
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id570550"></A><H2>Examples</H2><P><SPAN class="command"><STRONG>svn info</STRONG></SPAN> will show you all the
            useful information that it has for items in your working
            copy.  It will show information for files:</P><PRE class="screen">$ svn info foo.c
Path: foo.c
Name: foo.c
URL: http://svn.red-bean.com/repos/test/foo.c
Repository Root: http://svn.red-bean.com/repos/test
Repository UUID: 5e7d134a-54fb-0310-bd04-b611643e5c25
Revision: 4417
Node Kind: file
Schedule: normal
Last Changed Author: sally
Last Changed Rev: 20
Last Changed Date: 2003-01-13 16:43:13 -0600 (Mon, 13 Jan 2003)
Text Last Updated: 2003-01-16 21:18:16 -0600 (Thu, 16 Jan 2003)
Properties Last Updated: 2003-01-13 21:50:19 -0600 (Mon, 13 Jan 2003)
Checksum: d6aeb60b0662ccceb6bce4bac344cb66
</PRE><P>It will also show information for directories:</P><PRE class="screen">$ svn info vendors
Path: vendors
URL: http://svn.red-bean.com/repos/test/vendors
Repository Root: http://svn.red-bean.com/repos/test
Repository UUID: 5e7d134a-54fb-0310-bd04-b611643e5c25
Revision: 19
Node Kind: directory
Schedule: normal
Last Changed Author: harry
Last Changed Rev: 19
Last Changed Date: 2003-01-16 23:21:19 -0600 (Thu, 16 Jan 2003)
Properties Last Updated: 2003-01-16 23:39:02 -0600 (Thu, 16 Jan 2003)
</PRE><P><SPAN class="command"><STRONG>svn info</STRONG></SPAN> also acts on URLs (also
             note that the file <CODE class="filename">readme.doc</CODE> in
             this example is locked, so lock information is also
             provided):</P><PRE class="screen">$ svn info http://svn.red-bean.com/repos/test/readme.doc
Path: readme.doc
Name: readme.doc
URL: http://svn.red-bean.com/repos/test/readme.doc
Repository Root: http://svn.red-bean.com/repos/test
Repository UUID: 5e7d134a-54fb-0310-bd04-b611643e5c25
Revision: 1
Node Kind: file
Schedule: normal
Last Changed Author: sally
Last Changed Rev: 42
Last Changed Date: 2003-01-14 23:21:19 -0600 (Tue, 14 Jan 2003)
Lock Token: opaquelocktoken:14011d4b-54fb-0310-8541-dbd16bd471b2
Lock Owner: harry
Lock Created: 2003-01-15 17:35:12 -0600 (Wed, 15 Jan 2003)
Lock Comment (1 line):
My test lock comment
</PRE><P>Lastly, <SPAN class="command"><STRONG>svn info</STRONG></SPAN> output is
             available in XML format by passing
             the<CODE class="option">--xml</CODE> option:</P><PRE class="screen">$ svn info --xml http://svn.red-bean.com/repos/test
&lt;?xml version="1.0"?&gt;
&lt;info&gt;
&lt;entry
   kind="dir"
   path="."
   revision="1"&gt;
&lt;url&gt;http://svn.red-bean.com/repos/test&lt;/url&gt;
&lt;repository&gt;
&lt;root&gt;http://svn.red-bean.com/repos/test&lt;/root&gt;
&lt;uuid&gt;5e7d134a-54fb-0310-bd04-b611643e5c25&lt;/uuid&gt;
&lt;/repository&gt;
&lt;wc-info&gt;
&lt;schedule&gt;normal&lt;/schedule&gt;
&lt;depth&gt;infinity&lt;/depth&gt;
&lt;/wc-info&gt;
&lt;commit
   revision="1"&gt;
&lt;author&gt;sally&lt;/author&gt;
&lt;date&gt;2003-01-15T23:35:12.847647Z&lt;/date&gt;
&lt;/commit&gt;
&lt;/entry&gt;
&lt;/info&gt;
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svn.c.list"></A><DIV class="titlepage"></DIV><A id="id570715" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svn list â List directory entries in the repository.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id570740"></A><H2>Synopsis</H2><PRE class="programlisting">svn list [TARGET[@REV]...]</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id570753"></A><H2>Description</H2><P>List each <EM class="replaceable"><CODE>TARGET</CODE></EM> file and
            the contents of each <EM class="replaceable"><CODE>TARGET</CODE></EM>
            directory as they exist in the repository.  If
            <EM class="replaceable"><CODE>TARGET</CODE></EM> is a working copy path,
            the corresponding repository URL will be used.</P><P>The default <EM class="replaceable"><CODE>TARGET</CODE></EM> is
            â<SPAN class="quote"><CODE class="filename">.</CODE></SPAN>â, meaning the
            repository URL of the current working copy
            directory.</P><P>With <CODE class="option">--verbose</CODE>, <SPAN class="command"><STRONG>svn
            list</STRONG></SPAN> shows the following fields for each
            item:</P><DIV class="itemizedlist"><UL type="disc"><LI><P>Revision number of the last
              commit</P></LI><LI><P>Author of the last commit</P></LI><LI><P>If locked, the letter â<SPAN class="quote">O</SPAN>â (see the preceding section on <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.info" title="svn info">svn info</A> for details).</P></LI><LI><P>Size (in bytes)</P></LI><LI><P>Date and time of the last
              commit</P></LI></UL></DIV><P>With <CODE class="option">--xml</CODE>, output is in XML format (with
            a header and an enclosing document element unless
            <CODE class="option">--incremental</CODE> is also specified).  All of the
            information is present; the <CODE class="option">--verbose</CODE> option
            is not accepted.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id570856"></A><H2>Alternate names</H2><P><SPAN class="command"><STRONG>ls</STRONG></SPAN></P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id570869"></A><H2>Changes</H2><P>Nothing</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id570879"></A><H2>Accesses repository</H2><P>Yes</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id570889"></A><H2>Options</H2><PRE class="screen">--depth ARG
--incremental
--recursive (-R)
--revision (-r) REV
--verbose (-v)
--xml
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id570902"></A><H2>Examples</H2><P><SPAN class="command"><STRONG>svn list</STRONG></SPAN> is most useful if you
            want to see what files a repository has without
            downloading a working copy:</P><PRE class="screen">$ svn list http://svn.red-bean.com/repos/test/support
README.txt
INSTALL
examples/
â¦
</PRE><P>You can pass the <CODE class="option">--verbose</CODE> option for
            additional information, rather like the Unix command
            <SPAN class="command"><STRONG>ls -l</STRONG></SPAN>:</P><PRE class="screen">$ svn list --verbose file:///var/svn/repos
     16 sally         28361 Jan 16 23:18 README.txt
     27 sally             0 Jan 18 15:27 INSTALL
     24 harry               Jan 18 11:27 examples/
</PRE><P>You can also get <SPAN class="command"><STRONG>svn list</STRONG></SPAN> output in
            XML format with the <CODE class="option">--xml</CODE> option:</P><PRE class="screen">$ svn list --xml http://svn.red-bean.com/repos/test
&lt;?xml version="1.0"?&gt;
&lt;lists&gt;
&lt;list
   path="http://svn.red-bean.com/repos/test"&gt;
&lt;entry
   kind="dir"&gt;
&lt;name&gt;examples&lt;/name&gt;
&lt;size&gt;0&lt;/size&gt;
&lt;commit
   revision="24"&gt;
&lt;author&gt;harry&lt;/author&gt;
&lt;date&gt;2008-01-18T06:35:53.048870Z&lt;/date&gt;
&lt;/commit&gt;
&lt;/entry&gt;
...
&lt;/list&gt;
&lt;/lists&gt;
</PRE><P>For further details, see the earlier section <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.history.browsing.list" title="svn list">the section called âsvn listâ</A>.</P></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svn.c.lock"></A><DIV class="titlepage"></DIV><A id="id570987" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svn lock â Lock working copy paths or URLs in the
              repository so that no other user can commit changes to
              them.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id571014"></A><H2>Synopsis</H2><PRE class="programlisting">svn lock TARGET...</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id571026"></A><H2>Description</H2><P>Lock each <EM class="replaceable"><CODE>TARGET</CODE></EM>.  If any
            <EM class="replaceable"><CODE>TARGET</CODE></EM> is already locked by
            another user, print a warning and continue locking the
            rest of the <EM class="replaceable"><CODE>TARGET</CODE></EM>s.  Use
            <CODE class="option">--force</CODE> to steal a lock from another user
            or working copy.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id571052"></A><H2>Alternate names</H2><P>None</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id571062"></A><H2>Changes</H2><P>Working copy, repository</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id571072"></A><H2>Accesses repository</H2><P>Yes</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id571082"></A><H2>Options</H2><PRE class="screen">--encoding ENC
--file (-F) FILE
--force
--force-log
--message (-m) TEXT
--targets FILENAME
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id571095"></A><H2>Examples</H2><P>Lock two files in your working copy:</P><PRE class="screen">$ svn lock tree.jpg house.jpg
'tree.jpg' locked by user 'harry'.
'house.jpg' locked by user 'harry'.
</PRE><P>Lock a file in your working copy that is currently
            locked by another user:</P><PRE class="screen">$ svn lock tree.jpg
svn: warning: Path '/tree.jpg is already locked by user 'sally in \
     filesystem '/var/svn/repos/db'

$ svn lock --force tree.jpg
'tree.jpg' locked by user 'harry'.
</PRE><P>Lock a file without a working copy:</P><PRE class="screen">$ svn lock http://svn.red-bean.com/repos/test/tree.jpg
'tree.jpg' locked by user 'harry'.
</PRE><P>For further details, see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.locking" title="Locking">the section called âLockingâ</A>.</P></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svn.c.log"></A><DIV class="titlepage"></DIV><A id="id571149" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svn log â Display commit log messages.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id571175"></A><H2>Synopsis</H2><PRE class="programlisting">svn log [PATH]</PRE><PRE class="programlisting">svn log URL[@REV] [PATH...]</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id571193"></A><H2>Description</H2><P>Shows log messages from the repository.
            If no arguments are supplied, <SPAN class="command"><STRONG>svn
            log</STRONG></SPAN> shows the log messages for all files and
            directories inside (and including) the current working
            directory of your working copy.  You can refine the
            results by specifying a path, one or more revisions, or
            any combination of the two.  The default revision range
            for a local path is <CODE class="literal">BASE:1</CODE>.</P><P>If you specify a URL alone, it prints log
            messages for everything the URL contains.  If you
            add paths past the URL, only messages for those paths
            under that URL will be printed.  The default revision range
            for a URL is <CODE class="literal">HEAD:1</CODE>.</P><P>With <CODE class="option">--verbose</CODE>, <SPAN class="command"><STRONG>svn log</STRONG></SPAN>
            will also print all affected paths with each log message.
            With <CODE class="option">--quiet</CODE>, <SPAN class="command"><STRONG>svn log</STRONG></SPAN>
            will not print the log message body itself (this is
            compatible with <CODE class="option">--verbose</CODE>).</P><P>Each log message is printed just once, even if more
            than one of the affected paths for that revision were
            explicitly requested.  Logs follow copy history by
            default.  Use <CODE class="option">--stop-on-copy</CODE> to disable
            this behavior, which can be useful for determining branch
            points.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id571266"></A><H2>Alternate names</H2><P>None</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id571276"></A><H2>Changes</H2><P>Nothing</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id571286"></A><H2>Accesses repository</H2><P>Yes</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id571296"></A><H2>Options</H2><PRE class="screen">--change (-c) ARG
--incremental
--limit (-l) NUM
--quiet (-q)
--revision (-r) REV
--stop-on-copy
--targets FILENAME
--use-merge-history (-g)
--verbose (-v)
--with-all-revprops
--with-revprop ARG
--xml
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id571310"></A><H2>Examples</H2><P>You can see the log messages for all the paths that
            changed in your working copy by running <STRONG class="userinput"><CODE>svn
            log</CODE></STRONG> from the top:</P><PRE class="screen">$ svn log
------------------------------------------------------------------------
r20 | harry | 2003-01-17 22:56:19 -0600 (Fri, 17 Jan 2003) | 1 line

Tweak.
------------------------------------------------------------------------
r17 | sally | 2003-01-16 23:21:19 -0600 (Thu, 16 Jan 2003) | 2 lines
â¦
</PRE><P>Examine all log messages for a particular file in
            your working copy:</P><PRE class="screen">$ svn log foo.c
------------------------------------------------------------------------
r32 | sally | 2003-01-13 00:43:13 -0600 (Mon, 13 Jan 2003) | 1 line

Added defines.
------------------------------------------------------------------------
r28 | sally | 2003-01-07 21:48:33 -0600 (Tue, 07 Jan 2003) | 3 lines
â¦
</PRE><P>If you don't have a working copy handy, you can log
            a URL:</P><PRE class="screen">$ svn log http://svn.red-bean.com/repos/test/foo.c
------------------------------------------------------------------------
r32 | sally | 2003-01-13 00:43:13 -0600 (Mon, 13 Jan 2003) | 1 line

Added defines.
------------------------------------------------------------------------
r28 | sally | 2003-01-07 21:48:33 -0600 (Tue, 07 Jan 2003) | 3 lines
â¦
</PRE><P>If you want several distinct paths underneath the
            same URL, you can use the <CODE class="literal">URL [PATH...]</CODE>
            syntax:</P><PRE class="screen">$ svn log http://svn.red-bean.com/repos/test/ foo.c bar.c
------------------------------------------------------------------------
r32 | sally | 2003-01-13 00:43:13 -0600 (Mon, 13 Jan 2003) | 1 line

Added defines.
------------------------------------------------------------------------
r31 | harry | 2003-01-10 12:25:08 -0600 (Fri, 10 Jan 2003) | 1 line

Added new file bar.c
------------------------------------------------------------------------
r28 | sally | 2003-01-07 21:48:33 -0600 (Tue, 07 Jan 2003) | 3 lines
â¦
</PRE><P>The <CODE class="option">--verbose</CODE> option causes
            <SPAN class="command"><STRONG>svn log</STRONG></SPAN> to include information about
            the paths that were changed in each displayed revision.
            These paths appear, one path per line of output, with
            action codes that indicate what type of change was made to
            the path.</P><PRE class="screen">$ svn log -v http://svn.red-bean.com/repos/test/ foo.c bar.c
------------------------------------------------------------------------
r32 | sally | 2003-01-13 00:43:13 -0600 (Mon, 13 Jan 2003) | 1 line
Changed paths:
   M /foo.c

Added defines.
------------------------------------------------------------------------
r31 | harry | 2003-01-10 12:25:08 -0600 (Fri, 10 Jan 2003) | 1 line
Changed paths:
   A /bar.c

Added new file bar.c
------------------------------------------------------------------------
r28 | sally | 2003-01-07 21:48:33 -0600 (Tue, 07 Jan 2003) | 3 lines
â¦
</PRE><P><SPAN class="command"><STRONG>svn log</STRONG></SPAN> uses just a handful of action codes,
            and they are similar to the
            ones the <SPAN class="command"><STRONG>svn update</STRONG></SPAN>
            command uses:</P><DIV class="variablelist"><DL><DT><SPAN class="term"><CODE class="literal">A</CODE></SPAN></DT><DD><P>The item was added.</P></DD><DT><SPAN class="term"><CODE class="literal">D</CODE></SPAN></DT><DD><P>The item was deleted.</P></DD><DT><SPAN class="term"><CODE class="literal">M</CODE></SPAN></DT><DD><P>Properties or textual contents on the
                item were changed.</P></DD><DT><SPAN class="term"><CODE class="literal">R</CODE></SPAN></DT><DD><P>The item was replaced by a different one
                at the same location.</P></DD></DL></DIV><P>In addition to the action codes which precede the
            changed paths, <SPAN class="command"><STRONG>svn log</STRONG></SPAN> with the <CODE class="option">--verbose</CODE> option will
            note whether a path was added or replaced as the result of a copy
            operation.  It does so by printing <CODE class="literal">(from
            <EM class="replaceable"><CODE>COPY-FROM-PATH</CODE></EM>:<EM class="replaceable"><CODE>COPY-FROM-REV</CODE></EM>)</CODE>
            after such paths.</P><P>When you're concatenating the results of multiple
            calls to the log command, you may want to use the
            <CODE class="option">--incremental</CODE> option. <SPAN class="command"><STRONG>svn
            log</STRONG></SPAN> normally prints out a dashed line at the
            beginning of a log message, after each subsequent log
            message, and following the final log message.  If you
            ran <SPAN class="command"><STRONG>svn log</STRONG></SPAN> on a range of two
            revisions, you would get this:</P><PRE class="screen">$ svn log -r 14:15
------------------------------------------------------------------------
r14 | â¦

------------------------------------------------------------------------
r15 | â¦

------------------------------------------------------------------------
</PRE><P>However, if you wanted to gather two nonsequential log
            messages into a file, you might do something like
            this:</P><PRE class="screen">$ svn log -r 14 &gt; mylog
$ svn log -r 19 &gt;&gt; mylog
$ svn log -r 27 &gt;&gt; mylog
$ cat mylog
------------------------------------------------------------------------
r14 | â¦

------------------------------------------------------------------------
------------------------------------------------------------------------
r19 | â¦

------------------------------------------------------------------------
------------------------------------------------------------------------
r27 | â¦

------------------------------------------------------------------------
</PRE><P>You can avoid the clutter of the double dashed lines
            in your output by using the <CODE class="option">--incremental</CODE>
            option:</P><PRE class="screen">$ svn log --incremental -r 14 &gt; mylog
$ svn log --incremental -r 19 &gt;&gt; mylog
$ svn log --incremental -r 27 &gt;&gt; mylog
$ cat mylog
------------------------------------------------------------------------
r14 | â¦

------------------------------------------------------------------------
r19 | â¦

------------------------------------------------------------------------
r27 | â¦
</PRE><P>The <CODE class="option">--incremental</CODE> option provides
            similar output control when using the
            <CODE class="option">--xml</CODE> option:</P><PRE class="screen">$ svn log --xml --incremental -r 1 sandwich.txt
&lt;logentry
   revision="1"&gt;
&lt;author&gt;harry&lt;/author&gt;
&lt;date&gt;2008-06-03T06:35:53.048870Z&lt;/date&gt;
&lt;msg&gt;Initial Import.&lt;/msg&gt;
&lt;/logentry&gt;
</PRE><DIV class="tip" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Tip</H3><P>Sometimes when you run <SPAN class="command"><STRONG>svn log</STRONG></SPAN> on
              a specific path and a specific revision, you see no log
              information output at all, as in the following:</P><PRE class="screen">$ svn log -r 20 http://svn.red-bean.com/untouched.txt
------------------------------------------------------------------------
</PRE><P>That just means the path wasn't modified in that
              revision.  To get log information for that revision,
              either run the log operation against the repository's
              root URL, or specify a path that you happen to know was
              changed in that revision:</P><PRE class="screen">$ svn log -r 20 touched.txt 
------------------------------------------------------------------------
r20 | sally | 2003-01-17 22:56:19 -0600 (Fri, 17 Jan 2003) | 1 line

Made a change.
------------------------------------------------------------------------
</PRE></DIV></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svn.c.merge"></A><DIV class="titlepage"></DIV><A id="id571632" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svn merge â Apply the differences between two sources to a
          working copy path.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id571658"></A><H2>Synopsis</H2><PRE class="programlisting">svn merge sourceURL1[@N] sourceURL2[@M] [WCPATH]</PRE><PRE class="programlisting">svn merge sourceWCPATH1@N sourceWCPATH2@M [WCPATH]</PRE><PRE class="programlisting">svn merge [[-c M]... | [-r N:M]...] [SOURCE[@REV] [WCPATH]]</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id571682"></A><H2>Description</H2><P>In the first form, the source URLs are specified at
            revisions <EM class="replaceable"><CODE>N</CODE></EM> and <EM class="replaceable"><CODE>M</CODE></EM>.
            These are the two sources to be compared.  The revisions
            default to <CODE class="literal">HEAD</CODE> if omitted.</P><P>In the second form, the URLs corresponding to the
            source working copy paths define the sources to be
            compared.  The revisions must be specified.</P><P>In the third form, <EM class="replaceable"><CODE>SOURCE</CODE></EM>
            can be either a URL or a working copy path (in which case
            its corresponding URL is used).  If not specified,
            <EM class="replaceable"><CODE>SOURCE</CODE></EM> will be the same as
            <EM class="replaceable"><CODE>WCPATH</CODE></EM>.
            <EM class="replaceable"><CODE>SOURCE</CODE></EM> in revision
            <EM class="replaceable"><CODE>REV</CODE></EM> is compared as it existed
            between revisions <EM class="replaceable"><CODE>N</CODE></EM> and
            <EM class="replaceable"><CODE>M</CODE></EM> for each revision range
            provided.  If <EM class="replaceable"><CODE>REV</CODE></EM> is not
            specified, <CODE class="literal">HEAD</CODE> is assumed.</P><P><CODE class="literal">-c M</CODE> is equivalent to <CODE class="literal">-r
            &lt;M-1&gt;:M</CODE>, and <CODE class="literal">-c -M</CODE> does
            the reverse: <CODE class="literal">-r M:&lt;M-1&gt;</CODE>.  If no
            revision ranges are specified, the default range of
            <CODE class="literal">1:HEAD</CODE> is used.  Multiple
            <CODE class="literal">-c</CODE> and/or <CODE class="literal">-r</CODE>
            instances may be specified, and mixing of forward and
            reverse ranges is allowedâthe ranges are internally
            compacted to their minimum representation before merging
            begins (which may result in no-op).</P><P><EM class="replaceable"><CODE>WCPATH</CODE></EM> is the working copy
            path that will receive the changes.  If
            <EM class="replaceable"><CODE>WCPATH</CODE></EM> is omitted, a default
            value of â<SPAN class="quote"><CODE class="filename">.</CODE></SPAN>â is assumed,
            unless the sources have identical basenames that match a
            file within â<SPAN class="quote"><CODE class="filename">.</CODE></SPAN>â.  In
            this case, the differences will be applied to that
            file.</P><P>Subversion will internally track metadata about
            the merge operation only if the two sources are ancestrally
            relatedâif the first source is an ancestor of the
            second or vice versa.  This is guaranteed to be the case
            when using the third form.  Unlike <SPAN class="command"><STRONG>svn
            diff</STRONG></SPAN>, the merge command takes the ancestry of a
            file into consideration when performing a merge operation.
            This is very important when you're merging changes from
            one branch into another and you've renamed a file on one
            branch but not the other.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id571837"></A><H2>Alternate names</H2><P>None</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id571847"></A><H2>Changes</H2><P>Working copy</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id571858"></A><H2>Accesses repository</H2><P>Only if working with URLs</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id571868"></A><H2>Options</H2><PRE class="screen">--accept ARG
--change (-c) REV
--depth ARG
--diff3-cmd CMD
--dry-run
--extensions (-x) ARG
--force
--ignore-ancestry
--quiet (-q)
--record-only
--reintegrate
--revision (-r) REV
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id571882"></A><H2>Examples</H2><P>Merge a branch back into the trunk (assuming that
            you have an up-to-date working copy of the trunk):</P><PRE class="screen">$ svn merge --reintegrate \
            http://svn.example.com/repos/calc/branches/my-calc-branch
--- Merging differences between repository URLs into '.':
U    button.c
U    integer.c
U    Makefile
 U   .

$ # build, test, verify, ...

$ svn commit -m "Merge my-calc-branch back into trunk!"
Sending        .
Sending        button.c
Sending        integer.c
Sending        Makefile
Transmitting file data ..
Committed revision 391.
</PRE><P>To merge changes to a single file:</P><PRE class="screen">$ cd myproj
$ svn merge -r 30:31 thhgttg.txt 
U  thhgttg.txt
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svn.c.mergeinfo"></A><DIV class="titlepage"></DIV><A id="id571918" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svn mergeinfo â Query merge-related information.  See <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.basicmerging.mergeinfo" title="Mergeinfo and Previews">the section called âMergeinfo and Previewsâ</A> for
            details.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id571950"></A><H2>Synopsis</H2><PRE class="programlisting">svn mergeinfo SOURCE_URL[@REV] [TARGET[@REV]...]</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id571962"></A><H2>Description</H2><P>Query information related to merges (or potential
            merges) between <EM class="replaceable"><CODE>SOURCE-URL</CODE></EM> and
            <EM class="replaceable"><CODE>TARGET</CODE></EM>.  If
            the <CODE class="option">--show-revs</CODE> option is not provided,
            display revisions which have been merged
            from <EM class="replaceable"><CODE>SOURCE-URL</CODE></EM>
            to <EM class="replaceable"><CODE>TARGET</CODE></EM>.  Otherwise, display
            either <CODE class="literal">merged</CODE>
            or <CODE class="literal">eligible</CODE> revisions as specified by
            the <CODE class="option">--show-revs</CODE> option.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572009"></A><H2>Alternate names</H2><P>None</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572019"></A><H2>Changes</H2><P>Nothing</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572029"></A><H2>Accesses repository</H2><P>Yes</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572039"></A><H2>Options</H2><PRE class="screen">--revision (-r) REV
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572051"></A><H2>Examples</H2><P>Find out which changesets your trunk directory has
            already received as well as what changesets it's still
            eligible to receive:</P><PRE class="screen">$ svn mergeinfo branches/test
Path: branches/test
  Source path: /trunk
    Merged ranges: r2:13
    Eligible ranges: r13:15
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svn.c.mkdir"></A><DIV class="titlepage"></DIV><A id="id572076" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svn mkdir â Create a new directory under version control.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572102"></A><H2>Synopsis</H2><PRE class="programlisting">svn mkdir PATH...</PRE><PRE class="programlisting">svn mkdir URL...</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572120"></A><H2>Description</H2><P>Create a directory with a name given by the final
            component of the <EM class="replaceable"><CODE>PATH</CODE></EM> or <EM class="replaceable"><CODE>URL</CODE></EM>.
            A directory specified by a working copy
            <EM class="replaceable"><CODE>PATH</CODE></EM> is scheduled for addition
            in the working copy.  A directory specified by a URL is
            created in the repository via an immediate commit.
            Multiple directory URLs are committed atomically.  In both
            cases, all the intermediate directories must already exist
            unless the <CODE class="option">--parents</CODE> option is
            used.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572149"></A><H2>Alternate names</H2><P>None</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572159"></A><H2>Changes</H2><P>Working copy; repository if operating on a URL</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572169"></A><H2>Accesses repository</H2><P>Only if operating on a URL</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572180"></A><H2>Options</H2><PRE class="screen">--editor-cmd EDITOR
--encoding ENC
--file (-F) FILE
--force-log
--message (-m) TEXT
--parents
--quiet (-q)
--with-revprop ARG
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572193"></A><H2>Examples</H2><P>Create a directory in your working copy:</P><PRE class="screen">$ svn mkdir newdir
A         newdir
</PRE><P>Create one in the repository (this is an instant commit, so a
            log message is required):</P><PRE class="screen">$ svn mkdir -m "Making a new dir." http://svn.red-bean.com/repos/newdir

Committed revision 26.
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svn.c.move"></A><DIV class="titlepage"></DIV><A id="id572226" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svn move â Move a file or directory.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572252"></A><H2>Synopsis</H2><PRE class="programlisting">svn move SRC... DST</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572264"></A><H2>Description</H2><P>This command moves files or directories in your
            working copy or in the repository.</P><DIV class="tip" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Tip</H3><P>This command is equivalent to an <SPAN class="command"><STRONG>svn
              copy</STRONG></SPAN> followed by <SPAN class="command"><STRONG>svn
              delete</STRONG></SPAN>.</P></DIV><P>When moving multiple sources, they will be added as
            children of <EM class="replaceable"><CODE>DST</CODE></EM>, which must be
            a directory.</P><DIV class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Note</H3><P>Subversion does not support moving between working
              copies and URLs.  In addition, you can only move files
              within a single repositoryâSubversion does not
              support cross-repository moving.  Subversion supports
              the following types of moves within a single repository:</P></DIV><DIV class="variablelist"><DL><DT><SPAN class="term">WC â WC</SPAN></DT><DD><P>Move and schedule a file or directory for
                  addition (with history).</P></DD><DT><SPAN class="term">URL â URL</SPAN></DT><DD><P>Complete server-side rename.</P></DD></DL></DIV></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572342"></A><H2>Alternate names</H2><P><SPAN class="command"><STRONG>mv</STRONG></SPAN>, <SPAN class="command"><STRONG>rename</STRONG></SPAN>, <SPAN class="command"><STRONG>ren</STRONG></SPAN></P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572366"></A><H2>Changes</H2><P>Working copy; repository if operating on a URL</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572377"></A><H2>Accesses repository</H2><P>Only if operating on a URL</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572387"></A><H2>Options</H2><PRE class="screen">--editor-cmd EDITOR
--encoding ENC
--file (-F) FILE
--force
--force-log
--message (-m) TEXT
--parents
--quiet (-q)
--revision (-r) REV
--with-revprop ARG
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572400"></A><H2>Examples</H2><P>Move a file in your working copy:</P><PRE class="screen">$ svn move foo.c bar.c
A         bar.c
D         foo.c
</PRE><P>Move several files in your working copy into a
            subdirectory:</P><PRE class="screen">$ svn move baz.c bat.c qux.c src
A         src/baz.c
D         baz.c
A         src/bat.c
D         bat.c
A         src/qux.c
D         qux.c
</PRE><P>Move a file in the repository (this is an immediate commit,
            so it requires a commit message):</P><PRE class="screen">$ svn move -m "Move a file" http://svn.red-bean.com/repos/foo.c \
                            http://svn.red-bean.com/repos/bar.c

Committed revision 27.
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svn.c.propdel"></A><DIV class="titlepage"></DIV><A id="id572446" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svn propdel â Remove a property from an item.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572472"></A><H2>Synopsis</H2><PRE class="programlisting">svn propdel PROPNAME [PATH...]</PRE><PRE class="programlisting">svn propdel PROPNAME --revprop -r REV [TARGET]</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572490"></A><H2>Description</H2><P>This removes properties from files, directories, or
            revisions.  The first form removes versioned properties in
            your working copy, and the second removes unversioned
            remote properties on a repository revision
            (<EM class="replaceable"><CODE>TARGET</CODE></EM> determines only which
            repository to access).</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572506"></A><H2>Alternate names</H2><P><SPAN class="command"><STRONG>pdel</STRONG></SPAN>, <SPAN class="command"><STRONG>pd</STRONG></SPAN></P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572526"></A><H2>Changes</H2><P>Working copy; repository only if operating on a URL</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572536"></A><H2>Accesses repository</H2><P>Only if operating on a URL</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572546"></A><H2>Options</H2><PRE class="screen">--changelist ARG
--depth ARG
--quiet (-q)
--recursive (-R)
--revision (-r) REV
--revprop
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572559"></A><H2>Examples</H2><P>Delete a property from a file in your working
            copy:</P><PRE class="screen">$ svn propdel svn:mime-type some-script
property 'svn:mime-type' deleted from 'some-script'.
</PRE><P>Delete a revision property:</P><PRE class="screen">$ svn propdel --revprop -r 26 release-date 
property 'release-date' deleted from repository revision '26'
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svn.c.propedit"></A><DIV class="titlepage"></DIV><A id="id572594" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svn propedit â Edit the property of one or more items under
            version control. See <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.propset" title="svn propset">svn propset</A> later in this chapter.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572625"></A><H2>Synopsis</H2><PRE class="programlisting">svn propedit PROPNAME TARGET...</PRE><PRE class="programlisting">svn propedit PROPNAME --revprop -r REV [TARGET]</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572644"></A><H2>Description</H2><P>Edit one or more properties using your favorite
            editor.  The first form edits versioned properties in
            your working copy, and the second edits unversioned
            remote properties on a repository revision
            (<EM class="replaceable"><CODE>TARGET</CODE></EM> determines only which
            repository to access).</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572660"></A><H2>Alternate names</H2><P><SPAN class="command"><STRONG>pedit</STRONG></SPAN>, <SPAN class="command"><STRONG>pe</STRONG></SPAN></P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572679"></A><H2>Changes</H2><P>Working copy; repository only if operating on a URL</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572690"></A><H2>Accesses repository</H2><P>Only if operating on a URL</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572700"></A><H2>Options</H2><PRE class="screen">--editor-cmd EDITOR
--encoding ENC
--file (-F) ARG
--force
--force-log
--message (-m) ARG
--revision (-r) REV
--revprop
--with-revprop ARG
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572713"></A><H2>Examples</H2><P><SPAN class="command"><STRONG>svn propedit</STRONG></SPAN> makes it easy to
            modify properties that have multiple values:</P><PRE class="screen">$ svn propedit svn:keywords  foo.c 
    &lt;svn will launch your favorite editor here, with a buffer open
    containing the current contents of the svn:keywords property.  You
    can add multiple values to a property easily here by entering one
    value per line.&gt;
Set new value for property 'svn:keywords' on 'foo.c'
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svn.c.propget"></A><DIV class="titlepage"></DIV><A id="id572747" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svn propget â Print the value of a property.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572772"></A><H2>Synopsis</H2><PRE class="programlisting">svn propget PROPNAME [TARGET[@REV]...]</PRE><PRE class="programlisting">svn propget PROPNAME --revprop -r REV [URL]</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572791"></A><H2>Description</H2><P>Print the value of a property on files,
            directories, or revisions.  The first form prints the
            versioned property of an item or items in your working
            copy, and the second prints unversioned remote
            properties on a repository revision.  See <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props" title="Properties">the section called âPropertiesâ</A> for more information on
            properties.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572809"></A><H2>Alternate names</H2><P><SPAN class="command"><STRONG>pget</STRONG></SPAN>, <SPAN class="command"><STRONG>pg</STRONG></SPAN></P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572828"></A><H2>Changes</H2><P>Working copy; repository only if operating on a URL</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572838"></A><H2>Accesses repository</H2><P>Only if operating on a URL</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572849"></A><H2>Options</H2><PRE class="screen">--changelist ARG
--depth ARG
--recursive (-R)
--revision (-r) REV
--revprop
--strict
--xml
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572862"></A><H2>Examples</H2><P>Examine a property of a file in your working
            copy:</P><PRE class="screen">$ svn propget svn:keywords foo.c
Author
Date
Rev
</PRE><P>The same goes for a revision property:</P><PRE class="screen">$ svn propget svn:log --revprop -r 20 
Began journal.
</PRE><P>Lastly, you can get <SPAN class="command"><STRONG>svn propget</STRONG></SPAN>
            output in XML format with the <CODE class="option">--xml</CODE>
            option:</P><PRE class="screen">$ svn propget --xml svn:ignore .
&lt;?xml version="1.0"?&gt;
&lt;properties&gt;
&lt;target
   path=""&gt;
&lt;property
   name="svn:ignore"&gt;*.o
&lt;/property&gt;
&lt;/target&gt;
&lt;/properties&gt;
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svn.c.proplist"></A><DIV class="titlepage"></DIV><A id="id572916" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svn proplist â List all properties.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572941"></A><H2>Synopsis</H2><PRE class="programlisting">svn proplist [TARGET[@REV]...]</PRE><PRE class="programlisting">svn proplist --revprop -r REV [TARGET]</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572960"></A><H2>Description</H2><P>List all properties on files, directories, or
            revisions.  The first form lists versioned properties in
            your working copy, and the second lists unversioned remote
            properties on a repository revision
            (<EM class="replaceable"><CODE>TARGET</CODE></EM> determines only which
            repository to access).</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572976"></A><H2>Alternate names</H2><P><SPAN class="command"><STRONG>plist</STRONG></SPAN>, <SPAN class="command"><STRONG>pl</STRONG></SPAN></P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id572995"></A><H2>Changes</H2><P>Working copy; repository only if operating on a URL</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id573005"></A><H2>Accesses repository</H2><P>Only if operating on a URL</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id573016"></A><H2>Options</H2><PRE class="screen">--changelist ARG
--depth ARG
--quiet (-q)
--recursive (-R)
--revision (-r) REV
--revprop
--verbose (-v)
--xml
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id573029"></A><H2>Examples</H2><P>You can use <SPAN class="command"><STRONG>proplist</STRONG></SPAN> to see the properties on an
            item in your working copy:</P><PRE class="screen">$ svn proplist foo.c
Properties on 'foo.c':
  svn:mime-type
  svn:keywords
  owner
</PRE><P>But with the <CODE class="option">--verbose</CODE> flag, <SPAN class="command"><STRONG>svn
            proplist</STRONG></SPAN> is extremely handy as it also shows you the
            values for the properties:</P><PRE class="screen">$ svn proplist --verbose foo.c
Properties on 'foo.c':
  svn:mime-type : text/plain
  svn:keywords : Author Date Rev
  owner : sally
</PRE><P>Lastly, you can get <SPAN class="command"><STRONG>svn proplist</STRONG></SPAN>
            output in xml format with the <CODE class="option">--xml</CODE>
            option:</P><PRE class="screen">$ svn proplist --xml 
&lt;?xml version="1.0"?&gt;
&lt;properties&gt;
&lt;target
   path="."&gt;
&lt;property
   name="svn:ignore"/&gt;
&lt;/target&gt;
&lt;/properties&gt;
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svn.c.propset"></A><DIV class="titlepage"></DIV><A id="id573100" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svn propset â Set <EM class="replaceable"><CODE>PROPNAME</CODE></EM> to <EM class="replaceable"><CODE>PROPVAL</CODE></EM> on files, directories, or revisions.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id573133"></A><H2>Synopsis</H2><PRE class="programlisting">svn propset PROPNAME [PROPVAL | -F VALFILE] PATH...</PRE><PRE class="programlisting">svn propset PROPNAME --revprop -r REV [PROPVAL | -F VALFILE] [TARGET]</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id573152"></A><H2>Description</H2><P>Set <EM class="replaceable"><CODE>PROPNAME</CODE></EM> to
            <EM class="replaceable"><CODE>PROPVAL</CODE></EM> on files, directories,
            or revisions.  The first example creates a versioned, local
            property change in the working copy, and the second
            creates an unversioned, remote property change on a
            repository revision
            (<EM class="replaceable"><CODE>TARGET</CODE></EM> determines only which
            repository to access).</P><DIV class="tip" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Tip</H3><P>Subversion has a number of â<SPAN class="quote">special</SPAN>â
              properties that affect its behavior.  See <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.properties" title="Subversion Properties">the section called âSubversion Propertiesâ</A> later in this chapter for more on these
              properties.</P></DIV></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id573193"></A><H2>Alternate names</H2><P><EM class="replaceable"><CODE>pset</CODE></EM>, <EM class="replaceable"><CODE>ps</CODE></EM></P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id573207"></A><H2>Changes</H2><P>Working copy; repository only if operating on a URL</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id573218"></A><H2>Accesses repository</H2><P>Only if operating on a URL</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id573228"></A><H2>Options</H2><PRE class="screen">--changelist ARG
--depth ARG
--encoding ENC
--file (-F) FILE
--force
--quiet (-q)
--recursive (-R)
--revision (-r) REV
--revprop
--targets FILENAME
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id573241"></A><H2>Examples</H2><P>Set the MIME type for a file:</P><PRE class="screen">$ svn propset svn:mime-type image/jpeg foo.jpg 
property 'svn:mime-type' set on 'foo.jpg'
</PRE><P>On a Unix system, if you want a file to have the
            executable permission set:</P><PRE class="screen">$ svn propset svn:executable ON somescript
property 'svn:executable' set on 'somescript'
</PRE><P>Perhaps you have an internal policy to set certain
            properties for the benefit of your coworkers:</P><PRE class="screen">$ svn propset owner sally foo.c
property 'owner' set on 'foo.c'
</PRE><P>If you made a mistake in a log message for a
            particular revision and want to change it, use
            <CODE class="option">--revprop</CODE> and set <CODE class="literal">svn:log</CODE>
            to the new log message:</P><PRE class="screen">$ svn propset --revprop -r 25 svn:log "Journaled about trip to New York."
property 'svn:log' set on repository revision '25'
</PRE><P>Or, if you don't have a working copy, you can
            provide a URL:</P><PRE class="screen">$ svn propset --revprop -r 26 svn:log "Document nap." \
              http://svn.red-bean.com/repos
property 'svn:log' set on repository revision '25'
</PRE><P>Lastly, you can tell <SPAN class="command"><STRONG>propset</STRONG></SPAN> to take its input from
            a file.  You could even use this to set the contents of a
            property to something binary:</P><PRE class="screen">$ svn propset owner-pic -F sally.jpg moo.c 
property 'owner-pic' set on 'moo.c'
</PRE><DIV class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Note</H3><P>By default, you cannot modify revision properties
              in a Subversion repository.  Your repository
              administrator must explicitly enable revision property
              modifications by creating a hook named
              <CODE class="literal">pre-revprop-change</CODE>.  See <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.create.hooks" title="Implementing Repository Hooks">the section called âImplementing Repository Hooksâ</A> for more information on
              hook scripts.</P></DIV></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svn.c.resolve"></A><DIV class="titlepage"></DIV><A id="id573356" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svn resolve â Resolve conflicts on working copy files or
            directories.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id573381"></A><H2>Synopsis</H2><PRE class="programlisting">svn resolve PATH...</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id573394"></A><H2>Description</H2><P>Resolve â<SPAN class="quote">conflicted</SPAN>â state on working
            copy files or directories.  This routine does not
            semantically resolve conflict markers; however, it
            replaces <EM class="replaceable"><CODE>PATH</CODE></EM> with the version
            specified by the <CODE class="option">--accept</CODE> argument and
            then removes conflict-related artifact files.  This allows
            <EM class="replaceable"><CODE>PATH</CODE></EM> to be committed
            againâthat is, it tells Subversion that the
            conflicts have been
            â<SPAN class="quote">resolved.</SPAN>â.  You can pass the following
            arguments to the <CODE class="option">--accept</CODE> command
            depending on your desired resolution:</P><DIV class="variablelist"><DL><DT><SPAN class="term"><CODE class="literal">base</CODE></SPAN></DT><DD><P>Choose the file that was the
                  <CODE class="literal">BASE</CODE> revision before you updated
                  your working copy.  That is, the file that you
                  checked out before you made your latest
                  edits.</P></DD><DT><SPAN class="term"><CODE class="literal">working</CODE></SPAN></DT><DD><P>Assuming that you've manually handled the
                conflict resolution, choose the version of the file as
                it currently stands in your working copy.</P></DD><DT><SPAN class="term"><CODE class="literal">mine-full</CODE></SPAN></DT><DD><P>Resolve all conflicted files with copies of the
                files as they stood immediately before you
                ran <SPAN class="command"><STRONG>svn update</STRONG></SPAN>.</P></DD><DT><SPAN class="term"><CODE class="literal">theirs-full</CODE></SPAN></DT><DD><P>Resolve all conflicted files with copies of the
                files that were fetched from the server when you
                ran <SPAN class="command"><STRONG>svn update</STRONG></SPAN>.</P></DD></DL></DIV><P>See <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.resolve" title="Resolve Conflicts (Merging Others&#39; Changes)">the section called âResolve Conflicts (Merging Others' Changes)â</A> for an in-depth look at
            resolving conflicts.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id573532"></A><H2>Alternate names</H2><P>None</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id573541"></A><H2>Changes</H2><P>Working copy</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id573552"></A><H2>Accesses repository</H2><P>No</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id573561"></A><H2>Options</H2><PRE class="screen">--accept ARG
--depth ARG
--quiet (-q)
--recursive (-R)
--targets FILENAME
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id573574"></A><H2>Examples</H2><P>Here's an example where, after a postponed conflict
            resolution during update, <SPAN class="command"><STRONG>svn resolve</STRONG></SPAN>
            replaces the all conflicts in
            file <CODE class="filename">foo.c</CODE> with your edits:</P><PRE class="screen">$ svn up
Conflict discovered in 'foo.c'.
Select: (p) postpone, (df) diff-full, (e) edit,
        (h) help for more options: p
C    foo.c
Updated to revision 5.

$ svn resolve --accept mine-full foo.c
Resolved conflicted state of 'foo.c'
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svn.c.resolved"></A><DIV class="titlepage"></DIV><A id="id573612" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svn resolved â <SPAN class="emphasis"><EM>Deprecated</EM></SPAN>.
            Remove â<SPAN class="quote">conflicted</SPAN>â state on working copy
            files or directories.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id573644"></A><H2>Synopsis</H2><PRE class="programlisting">svn resolved PATH...</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id573657"></A><H2>Description</H2><P>This command has been deprecated in favor of
            running <STRONG class="userinput"><CODE>svn resolve --accept working <EM class="replaceable"><CODE>PATH</CODE></EM></CODE></STRONG>.
            See <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.resolve" title="svn resolve">svn resolve</A> in the preceding section for
            details.</P><P>Remove â<SPAN class="quote">conflicted</SPAN>â state on working copy
            files or directories.  This routine does not semantically
            resolve conflict markers; it merely removes
            conflict-related artifact files and allows
            <EM class="replaceable"><CODE>PATH</CODE></EM> to be committed again;
            that is, it tells Subversion that the conflicts have been
            â<SPAN class="quote">resolved.</SPAN>â  See <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.resolve" title="Resolve Conflicts (Merging Others&#39; Changes)">the section called âResolve Conflicts (Merging Others' Changes)â</A> for an in-depth look at
            resolving conflicts.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id573706"></A><H2>Alternate names</H2><P>None</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id573716"></A><H2>Changes</H2><P>Working copy</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id573726"></A><H2>Accesses repository</H2><P>No</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id573736"></A><H2>Options</H2><PRE class="screen">--depth ARG
--quiet (-q)
--recursive (-R)
--targets FILENAME
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id573748"></A><H2>Examples</H2><P>If you get a conflict on an update, your working
            copy will sprout three new files:</P><PRE class="screen">$ svn update
C  foo.c
Updated to revision 31.
$ ls
foo.c
foo.c.mine
foo.c.r30
foo.c.r31
</PRE><P>Once you've resolved the conflict and
            <CODE class="filename">foo.c</CODE> is ready to be committed, run
            <SPAN class="command"><STRONG>svn resolved</STRONG></SPAN> to let your working copy
            know you've taken care of everything.</P><DIV class="warning" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Warning</H3><P>You <SPAN class="emphasis"><EM>can</EM></SPAN> just remove the
              conflict files and commit, but <SPAN class="command"><STRONG>svn
              resolved</STRONG></SPAN> fixes up some bookkeeping data
              in the working copy administrative area in addition
              to removing the conflict files, so we recommend that
              you use this command.</P></DIV></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svn.c.revert"></A><DIV class="titlepage"></DIV><A id="id573808" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svn revert â Undo all local edits.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id573833"></A><H2>Synopsis</H2><PRE class="programlisting">svn revert PATH...</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id573846"></A><H2>Description</H2><P>Reverts any local changes to a file or directory and
            resolves any conflicted states.  <SPAN class="command"><STRONG>svn
            revert</STRONG></SPAN> will revert not only the contents of an
            item in your working copy, but also any property
            changes.  Finally, you can use it to undo any scheduling
            operations that you may have performed (e.g., files scheduled
            for addition or deletion can be
            â<SPAN class="quote">unscheduled</SPAN>â).</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id573868"></A><H2>Alternate names</H2><P>None</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id573878"></A><H2>Changes</H2><P>Working copy</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id573889"></A><H2>Accesses repository</H2><P>No</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id573898"></A><H2>Options</H2><PRE class="screen">--changelist ARG
--depth ARG
--quiet (-q)
--recursive (-R)
--targets FILENAME
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id573911"></A><H2>Examples</H2><P>Discard changes to a file:</P><PRE class="screen">$ svn revert foo.c
Reverted foo.c
</PRE><P>If you want to revert a whole directory of files,
            use the <CODE class="option">--depth=infinity</CODE> option:</P><PRE class="screen">$ svn revert --depth=infinity .
Reverted newdir/afile
Reverted foo.c
Reverted bar.txt
</PRE><P>Lastly, you can undo any scheduling
            operations:</P><PRE class="screen">$ svn add mistake.txt whoops
A         mistake.txt
A         whoops
A         whoops/oopsie.c

$ svn revert mistake.txt whoops
Reverted mistake.txt
Reverted whoops

$ svn status
?      mistake.txt
?      whoops
</PRE><DIV class="warning" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Warning</H3><P><SPAN class="command"><STRONG>svn revert</STRONG></SPAN> is inherently
              dangerous, since its entire purpose is to throw away
              dataânamely, your uncommitted changes.  Once
              you've reverted, Subversion provides <SPAN class="emphasis"><EM>no
              way</EM></SPAN> to get back those uncommitted
              changes.</P><P>If you provide no targets to <SPAN class="command"><STRONG>svn
              revert</STRONG></SPAN>, it will do nothingâto protect
              you from accidentally losing changes in your working
              copy, <SPAN class="command"><STRONG>svn revert</STRONG></SPAN> requires you to
              provide at least one target.</P></DIV></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svn.c.status"></A><DIV class="titlepage"></DIV><A id="id573993" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svn status â Print the status of working copy files and directories.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id574019"></A><H2>Synopsis</H2><PRE class="programlisting">svn status [PATH...]</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id574031"></A><H2>Description</H2><P>Print the status of working copy files and
            directories.  With no arguments, it prints only locally
            modified items (no repository access).  With
            <CODE class="option">--show-updates</CODE>, it adds working revision
            and server out-of-date information.  With
            <CODE class="option">--verbose</CODE>, it prints full revision
            information on every item.  With <CODE class="option">--quiet</CODE>,
            it prints only summary information about locally modified
            items.</P><P>The first six columns in the output are each one
            character wide, and each column gives you information
            about different aspects of each working copy item.</P><P>The first column indicates that an item
            was added, deleted, or otherwise changed:</P><DIV class="variablelist"><DL><DT><SPAN class="term"><CODE class="literal">' '</CODE></SPAN></DT><DD><P>No modifications.</P></DD><DT><SPAN class="term"><CODE class="literal">'A'</CODE></SPAN></DT><DD><P>Item is scheduled for addition.</P></DD><DT><SPAN class="term"><CODE class="literal">'D'</CODE></SPAN></DT><DD><P>Item is scheduled for deletion.</P></DD><DT><SPAN class="term"><CODE class="literal">'M'</CODE></SPAN></DT><DD><P>Item has been modified.</P></DD><DT><SPAN class="term"><CODE class="literal">'R'</CODE></SPAN></DT><DD><P>Item has been replaced in your working copy.
                This means the file was scheduled for deletion, and
                then a new file with the same name was scheduled for
                addition in its place.</P></DD><DT><SPAN class="term"><CODE class="literal">'C'</CODE></SPAN></DT><DD><P>The contents (as opposed to the properties) of
                  the item conflict with updates received from the
                  repository.</P></DD><DT><SPAN class="term"><CODE class="literal">'X'</CODE></SPAN></DT><DD><P>Item is present because of an externals definition.</P></DD><DT><SPAN class="term"><CODE class="literal">'I'</CODE></SPAN></DT><DD><P>Item is being ignored (e.g., with the 
                  <CODE class="literal">svn:ignore</CODE> property).</P></DD><DT><SPAN class="term"><CODE class="literal">'?'</CODE></SPAN></DT><DD><P>Item is not under version control.</P></DD><DT><SPAN class="term"><CODE class="literal">'!'</CODE></SPAN></DT><DD><P>Item is missing (e.g., you moved or deleted it
                  without using <SPAN class="command"><STRONG>svn</STRONG></SPAN>).  This also
                  indicates that a directory is incomplete (a checkout
                  or update was interrupted).</P></DD><DT><SPAN class="term"><CODE class="literal">'~'</CODE></SPAN></DT><DD><P>Item is versioned as one kind of object (file,
                  directory, link), but has been replaced by a different
                  kind of object.</P></DD></DL></DIV><P>The second column tells the status of a file's or
            directory's properties:</P><DIV class="variablelist"><DL><DT><SPAN class="term"><CODE class="literal">' '</CODE></SPAN></DT><DD><P>No modifications.</P></DD><DT><SPAN class="term"><CODE class="literal">'M'</CODE></SPAN></DT><DD><P>Properties for this item have been
                  modified.</P></DD><DT><SPAN class="term"><CODE class="literal">'C'</CODE></SPAN></DT><DD><P>Properties for this item are in conflict with
                  property updates received from the
                  repository.</P></DD></DL></DIV><P>The third column is populated only if the
            working copy directory is locked (see
            <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cleanup" title="Sometimes You Just Need to Clean Up">the section called âSometimes You Just Need to Clean Upâ</A>):</P><DIV class="variablelist"><DL><DT><SPAN class="term"><CODE class="literal">' '</CODE></SPAN></DT><DD><P>Item is not locked.</P></DD><DT><SPAN class="term"><CODE class="literal">'L'</CODE></SPAN></DT><DD><P>Item is locked.</P></DD></DL></DIV><P>The fourth column is populated only if the item is
            scheduled for addition-with-history:</P><DIV class="variablelist"><DL><DT><SPAN class="term"><CODE class="literal">' '</CODE></SPAN></DT><DD><P>No history scheduled with commit.</P></DD><DT><SPAN class="term"><CODE class="literal">'+'</CODE></SPAN></DT><DD><P>History scheduled with commit.</P></DD></DL></DIV><P>The fifth column is populated only if the item is
            switched relative to its parent (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.switchwc" title="Traversing Branches">the section called âTraversing Branchesâ</A>):</P><DIV class="variablelist"><DL><DT><SPAN class="term"><CODE class="literal">' '</CODE></SPAN></DT><DD><P>Item is a child of its parent directory.</P></DD><DT><SPAN class="term"><CODE class="literal">'S'</CODE></SPAN></DT><DD><P>Item is switched.</P></DD></DL></DIV><P>The sixth column is populated with lock information:</P><DIV class="variablelist"><DL><DT><SPAN class="term"><CODE class="literal">' '</CODE></SPAN></DT><DD><P>When <CODE class="option">--show-updates</CODE> is used,
                the file is not locked.  If
                <CODE class="option">--show-updates</CODE> is
                <SPAN class="emphasis"><EM>not</EM></SPAN> used, this merely means that
                the file is not locked in this working copy.</P></DD><DT><SPAN class="term">K</SPAN></DT><DD><P>File is locked in this working copy.</P></DD><DT><SPAN class="term">O</SPAN></DT><DD><P>File is locked either by another user or in
                another working copy.  This appears only when
                <CODE class="option">--show-updates</CODE> is used.</P></DD><DT><SPAN class="term">T</SPAN></DT><DD><P>File was locked in this working copy, but the
                lock has been â<SPAN class="quote">stolen</SPAN>â and is invalid.
                The file is currently locked in the repository.  This
                appears only when <CODE class="option">--show-updates</CODE> is
                used.</P></DD><DT><SPAN class="term">B</SPAN></DT><DD><P>File was locked in this working copy, but the
                lock has been â<SPAN class="quote">broken</SPAN>â and is invalid.
                The file is no longer locked.  This appears only when
                <CODE class="option">--show-updates</CODE> is used.</P></DD></DL></DIV><P>The out-of-date information appears in the seventh
            column (only if you pass the
            <CODE class="option">--show-updates</CODE> option):</P><DIV class="variablelist"><DL><DT><SPAN class="term"><CODE class="literal">' '</CODE></SPAN></DT><DD><P>The item in your working copy is up to date.</P></DD><DT><SPAN class="term"><CODE class="literal">'*'</CODE></SPAN></DT><DD><P>A newer revision of the item exists on the
                  server.</P></DD></DL></DIV><P>The remaining fields are variable width and
            delimited by spaces.  The working revision is the next
            field if the <CODE class="option">--show-updates</CODE> or
            <CODE class="option">--verbose</CODE> option is passed.</P><P>If the <CODE class="option">--verbose</CODE> option is passed,
            the last committed revision and last committed author
            are displayed next.</P><P>The working copy path is always the final field, so
            it can include spaces.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id574635"></A><H2>Alternate names</H2><P><SPAN class="command"><STRONG>stat</STRONG></SPAN>, <SPAN class="command"><STRONG>st</STRONG></SPAN></P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id574654"></A><H2>Changes</H2><P>Nothing</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id574664"></A><H2>Accesses repository</H2><P>Only if using <CODE class="option">--show-updates</CODE></P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id574677"></A><H2>Options</H2><PRE class="screen">--changelist ARG
--depth ARG
--ignore-externals
--incremental
--no-ignore
--quiet (-q)
--show-updates (-u)
--verbose (-v)
--xml
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id574690"></A><H2>Examples</H2><P>This is the easiest way to find out what changes you
            have made to your working copy:</P><PRE class="screen">$ svn status wc
 M     wc/bar.c
A  +   wc/qax.c
</PRE><P>If you want to find out what files in your working
            copy are out of date, pass the
            <CODE class="option">--show-updates</CODE> option (this will
            <SPAN class="emphasis"><EM>not</EM></SPAN> make any changes to your
            working copy).  Here you can see that
            <CODE class="filename">wc/foo.c</CODE> has changed in the
            repository since we last updated our working
            copy:</P><PRE class="screen">$ svn status --show-updates wc
 M           965    wc/bar.c
       *     965    wc/foo.c
A  +         965    wc/qax.c
Status against revision:    981
</PRE><DIV class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Note</H3><P><CODE class="option">--show-updates</CODE>
              <SPAN class="emphasis"><EM>only</EM></SPAN> places an asterisk next to
              items that are out of date (i.e., items that will be
              updated from the repository if you later use <SPAN class="command"><STRONG>svn
              update</STRONG></SPAN>).  <CODE class="option">--show-updates</CODE> does
              <SPAN class="emphasis"><EM>not</EM></SPAN> cause the status listing to
              reflect the repository's version of the item (although
              you can see the revision number in the repository by
              passing the <CODE class="option">--verbose</CODE> option).</P></DIV><P>The most information you can get out of
            the status subcommand is as follows:</P><PRE class="screen">$ svn status --show-updates --verbose wc
 M           965       938 sally        wc/bar.c
       *     965       922 harry        wc/foo.c
A  +         965       687 harry        wc/qax.c
             965       687 harry        wc/zig.c
Head revision:   981
</PRE><P>Lastly, you can get <SPAN class="command"><STRONG>svn status</STRONG></SPAN>
            output in XML format with the <CODE class="option">--xml</CODE>
            option:</P><PRE class="screen">$ svn status --xml wc
&lt;?xml version="1.0"?&gt;
&lt;status&gt;
&lt;target
   path="wc"&gt;
&lt;entry
   path="qax.c"&gt;
&lt;wc-status
   props="none"
   item="added"
   revision="0"&gt;
&lt;/wc-status&gt;
&lt;/entry&gt;
&lt;entry
   path="bar.c"&gt;
&lt;wc-status
   props="normal"
   item="modified"
   revision="965"&gt;
&lt;commit
   revision="965"&gt;
&lt;author&gt;sally&lt;/author&gt;
&lt;date&gt;2008-05-28T06:35:53.048870Z&lt;/date&gt;
&lt;/commit&gt;
&lt;/wc-status&gt;
&lt;/entry&gt;
&lt;/target&gt;
&lt;/status&gt;
</PRE><P>For many more examples of <SPAN class="command"><STRONG>svn status</STRONG></SPAN>,
            see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.examine.status" title="See an overview of your changes">the section called âSee an overview of your changesâ</A>.</P></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svn.c.switch"></A><DIV class="titlepage"></DIV><A id="id574825" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svn switch â Update working copy to a different URL.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id574850"></A><H2>Synopsis</H2><PRE class="programlisting">svn switch URL[@PEGREV] [PATH]</PRE><PRE class="programlisting">switch --relocate FROM TO [PATH...]</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id574868"></A><H2>Description</H2><P>The first variant of this subcommand (without the
            <CODE class="option">--relocate</CODE> option) updates your working
            copy to point to a new URLâusually a URL that
            shares a common ancestor with your working copy, although
            not necessarily.  This is the Subversion way to move a
            working copy to a new branch.  If specified,
            <EM class="replaceable"><CODE>PEGREV</CODE></EM> determines in which
            revision the target is first looked up.  See <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.switchwc" title="Traversing Branches">the section called âTraversing Branchesâ</A> for an in-depth look
            at switching.</P><P>If <CODE class="option">--force</CODE> is used, unversioned
            obstructing paths in the working copy do not automatically
            cause a failure if the switch attempts to add the same
            path.  If the obstructing path is the same type (file or
            directory) as the corresponding path in the repository, it
            becomes versioned but its contents are left untouched in
            the working copy.  This means that an obstructing
            directory's unversioned children may also obstruct and
            become versioned.  For files, any content differences
            between the obstruction and the repository are treated
            like a local modification to the working copy.  All
            properties from the repository are applied to the
            obstructing path.</P><P>As with most subcommands, you can limit the scope of
            the switch operation to a particular tree depth using the
            <CODE class="option">--depth</CODE> option.  Alternatively, you can
            use the <CODE class="option">--set-depth</CODE> option to set a new
            â<SPAN class="quote">sticky</SPAN>â working copy depth on the switch
            target.  Currently, the depth of a working copy directory
            can only be increased (telescoped more deeply); you cannot
            make a directory more shallow.</P><P>The <CODE class="option">--relocate</CODE> option causes
            <SPAN class="command"><STRONG>svn switch</STRONG></SPAN> to do something different:
            it updates your working copy to point to <SPAN class="emphasis"><EM>the
            same</EM></SPAN> repository directory, only at a different
            URL (typically because an administrator has moved the
            repository to another server, or to another URL on the
            same server).</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id574946"></A><H2>Alternate names</H2><P><SPAN class="command"><STRONG>sw</STRONG></SPAN></P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id574960"></A><H2>Changes</H2><P>Working copy</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id574970"></A><H2>Accesses repository</H2><P>Yes</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id574980"></A><H2>Options</H2><PRE class="screen">--accept ARG
--depth ARG
--diff3-cmd CMD
--force
--ignore-externals
--quiet (-q)
--relocate
--revision (-r) REV
--set-depth ARG
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id574993"></A><H2>Examples</H2><P>If you're currently inside the directory
            <CODE class="filename">vendors</CODE>, which was branched to
            <CODE class="filename">vendors-with-fix</CODE>, and you'd like to
            switch your working copy to that branch:</P><PRE class="screen">$ svn switch http://svn.red-bean.com/repos/branches/vendors-with-fix .
U  myproj/foo.txt
U  myproj/bar.txt
U  myproj/baz.c
U  myproj/qux.c
Updated to revision 31.
</PRE><P>To switch back, just provide the URL to the
            location in the repository from which you originally
            checked out your working copy:</P><PRE class="screen">$ svn switch http://svn.red-bean.com/repos/trunk/vendors .
U  myproj/foo.txt
U  myproj/bar.txt
U  myproj/baz.c
U  myproj/qux.c
Updated to revision 31.
</PRE><DIV class="tip" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Tip</H3><P>You can switch just part of your working copy to a
              branch if you don't want to switch your entire working
              copy.</P></DIV><P>Sometimes an administrator might change the location
            (or apparent location) of your repositoryâin other
            words, the content of the repository doesn't change, but
            the repository's root URL does.  For example, the hostname
            may change, the URL scheme may change, or any part of the
            URL that leads to the repository itself may change.
            Rather than check out a new working copy, you can have the
            <SPAN class="command"><STRONG>svn switch</STRONG></SPAN> command
            â<SPAN class="quote">rewrite</SPAN>â your working copy's administrative
            metadata to refer to the new repository location.  If you
            use the <CODE class="option">--relocate</CODE> option to <SPAN class="command"><STRONG>svn
            switch</STRONG></SPAN>, Subversion will contact the repository
            to validate the relocation request (looking for the
            repository at the new URL, of course), and then do this
            metadata rewriting.  No file contents will be changed as
            the result of this type of switch operationâthis is
            a metadata-only modification to the working copy.</P><PRE class="screen">$ svn checkout file:///var/svn/repos test
A  test/a
A  test/b
â¦

$ mv repos newlocation
$ cd test/

$ svn update
svn: Unable to open an ra_local session to URL
svn: Unable to open repository 'file:///var/svn/repos'

$ svn switch --relocate file:///var/svn/repos file:///tmp/newlocation .
$ svn update
At revision 3.
</PRE><DIV class="warning" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Warning</H3><P>Be careful when using the
            <CODE class="option">--relocate</CODE> option.  If you mistype the
            argument, you might end up creating nonsensical URLs
            within your working copy that render the whole workspace
            unusable and tricky to fix.  It's also important to
            understand exactly when one should or shouldn't use
            <CODE class="option">--relocate</CODE>.  Here's the rule of
            thumb:</P><DIV class="itemizedlist"><UL type="disc"><LI><P>If the working copy needs to reflect a
                  new directory <SPAN class="emphasis"><EM>within</EM></SPAN> the
                  repository, use just <SPAN class="command"><STRONG>svn
                  switch</STRONG></SPAN>.</P></LI><LI><P>If the working copy still reflects the
                  same repository directory, but the location of the
                  repository itself has changed, use <SPAN class="command"><STRONG>svn
                  switch</STRONG></SPAN> with the <CODE class="option">--relocate</CODE> option.</P></LI></UL></DIV></DIV></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svn.c.unlock"></A><DIV class="titlepage"></DIV><A id="id575139" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svn unlock â Unlock working copy paths or URLs.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id575164"></A><H2>Synopsis</H2><PRE class="programlisting">svn unlock TARGET...</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id575177"></A><H2>Description</H2><P>Unlock each <EM class="replaceable"><CODE>TARGET</CODE></EM>.  If any
            <EM class="replaceable"><CODE>TARGET</CODE></EM> is locked by
            another user or no valid lock token exists in the working
            copy, print a warning and continue unlocking the rest of
            the <EM class="replaceable"><CODE>TARGET</CODE></EM>s.  Use
            <CODE class="option">--force</CODE> to break a lock belonging to
            another user or working copy.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id575204"></A><H2>Alternate names</H2><P>None</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id575214"></A><H2>Changes</H2><P>Working copy, repository</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id575224"></A><H2>Accesses repository</H2><P>Yes</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id575234"></A><H2>Options</H2><PRE class="screen">--force
--targets FILENAME
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id575246"></A><H2>Examples</H2><P>Unlock two files in your working copy:</P><PRE class="screen">$ svn unlock tree.jpg house.jpg
'tree.jpg' unlocked.
'house.jpg' unlocked.
</PRE><P>Unlock a file in your working copy that is currently
            locked by another user:</P><PRE class="screen">$ svn unlock tree.jpg
svn: 'tree.jpg' is not locked in this working copy
$ svn unlock --force tree.jpg
'tree.jpg' unlocked.
</PRE><P>Unlock a file without a working copy:</P><PRE class="screen">$ svn unlock http://svn.red-bean.com/repos/test/tree.jpg
'tree.jpg unlocked.
</PRE><P>For further details, see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.locking" title="Locking">the section called âLockingâ</A>.</P></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svn.c.update"></A><DIV class="titlepage"></DIV><A id="id575300" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svn update â Update your working copy.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id575325"></A><H2>Synopsis</H2><PRE class="programlisting">svn update [PATH...]</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id575338"></A><H2>Description</H2><P><SPAN class="command"><STRONG>svn update</STRONG></SPAN> brings changes from the
            repository into your working copy.  If no revision is given,
            it brings your working copy up to date with the
            <CODE class="literal">HEAD</CODE> revision.  Otherwise, it
            synchronizes the working copy to the revision given by the
            <CODE class="option">--revision</CODE> option.  As part of the
            synchronization, <SPAN class="command"><STRONG>svn update</STRONG></SPAN> also
            removes any stale locks (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cleanup" title="Sometimes You Just Need to Clean Up">the section called âSometimes You Just Need to Clean Upâ</A>) found in the
            working copy.</P><P>For each updated item, it prints a line that starts
            with a character reporting the action taken.  These
            characters have the following meaning:</P><DIV class="variablelist"><DL><DT><SPAN class="term"><CODE class="literal">A</CODE></SPAN></DT><DD><P>Added</P></DD><DT><SPAN class="term"><CODE class="literal">B</CODE></SPAN></DT><DD><P>Broken lock (third column only)</P></DD><DT><SPAN class="term"><CODE class="literal">D</CODE></SPAN></DT><DD><P>Deleted</P></DD><DT><SPAN class="term"><CODE class="literal">U</CODE></SPAN></DT><DD><P>Updated</P></DD><DT><SPAN class="term"><CODE class="literal">C</CODE></SPAN></DT><DD><P>Conflicted</P></DD><DT><SPAN class="term"><CODE class="literal">G</CODE></SPAN></DT><DD><P>Merged</P></DD><DT><SPAN class="term"><CODE class="literal">E</CODE></SPAN></DT><DD><P>Existed</P></DD></DL></DIV><P>A character in the first column signifies an update to
            the actual file, whereas updates to the file's properties
            are shown in the second column.  Lock information is
            printed in the third column.</P><P>As with most subcommands, you can limit the scope of
            the update operation to a particular tree depth using the
            <CODE class="option">--depth</CODE> option.  Alternatively, you can
            use the <CODE class="option">--set-depth</CODE> option to set a new
            â<SPAN class="quote">sticky</SPAN>â working copy depth on the update
            target.  Currently, the depth of a working copy directory
            can only be increased (telescoped more deeply); you cannot
            make a directory more shallow.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id575523"></A><H2>Alternate names</H2><P><SPAN class="command"><STRONG>up</STRONG></SPAN></P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id575536"></A><H2>Changes</H2><P>Working copy</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id575546"></A><H2>Accesses repository</H2><P>Yes</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id575556"></A><H2>Options</H2><PRE class="screen">--accept ARG
--changelist
--depth ARG
--diff3-cmd CMD
--editor-cmd ARG
--force
--ignore-externals
--quiet (-q)
--revision (-r) REV
--set-depth ARG
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id575569"></A><H2>Examples</H2><P>Pick up repository changes that have happened since
            your last update:</P><PRE class="screen">$ svn update
A  newdir/toggle.c
A  newdir/disclose.c
A  newdir/launch.c
D  newdir/README
Updated to revision 32.
</PRE><P>You can also â<SPAN class="quote">update</SPAN>â your working copy
            to an older revision (Subversion doesn't have the concept
            of â<SPAN class="quote">sticky</SPAN>â files like CVS does; see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.forcvs" title="Appendix&nbsp;B.&nbsp;Subversion for CVS Users">Appendix&nbsp;B, <I>Subversion for CVS Users</I></A>):</P><PRE class="screen">$ svn update -r30
A  newdir/README
D  newdir/toggle.c
D  newdir/disclose.c
D  newdir/launch.c
U  foo.c
Updated to revision 30.
</PRE><DIV class="tip" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Tip</H3><P>If you want to examine an older revision of a
              single file, you may want to use <SPAN class="command"><STRONG>svn
              cat</STRONG></SPAN> insteadâit won't change your working
              copy.</P></DIV></DIV></DIV></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.ref.svnadmin"></A>svnadmin</H2></DIV></DIV></DIV><P><SPAN class="command"><STRONG>svnadmin</STRONG></SPAN> is the administrative tool for
      monitoring and repairing your Subversion repository.  For
      detailed information on repository administration, see the maintenance section for <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.tk.svnadmin" title="svnadmin">the section called âsvnadminâ</A>.</P><P>Since <SPAN class="command"><STRONG>svnadmin</STRONG></SPAN> works via direct repository access
      (and thus can only be used on the machine that holds the
      repository), it refers to the repository with a path, not a URL.</P><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.ref.svnadmin.sw"></A><SPAN class="command"><STRONG>svnadmin</STRONG></SPAN> Options</H3></DIV></DIV></DIV><P>Options in <SPAN class="command"><STRONG>svmadin</STRONG></SPAN> are global, just
        as they are in <SPAN class="command"><STRONG>svn</STRONG></SPAN>:</P><DIV class="variablelist"><DL><DT><SPAN class="term"><CODE class="option">--bdb-log-keep</CODE></SPAN></DT><DD><P>(Berkeley DB-specific.) Disable automatic log removal
              of database logfiles.  Having these logfiles around
              can be convenient if you need to restore from a
              catastrophic repository failure.</P></DD><DT><SPAN class="term"><CODE class="option">--bdb-txn-nosync</CODE></SPAN></DT><DD><P>(Berkeley DB-specific.) Disables fsync when
              committing database transactions.  Used with the
              <SPAN class="command"><STRONG>svnadmin create</STRONG></SPAN> command to create a
              Berkeley DB-backed repository with
              <CODE class="literal">DB_TXN_NOSYNC</CODE> enabled (which improves
              speed but has some risks associated with it).</P></DD><DT><SPAN class="term"><CODE class="option">--bypass-hooks</CODE></SPAN></DT><DD><P>Bypass the repository hook system.</P></DD><DT><SPAN class="term"><CODE class="option">--clean-logs</CODE></SPAN></DT><DD><P>Remove unused Berkeley DB logs.</P></DD><DT><SPAN class="term"><CODE class="option">--force-uuid</CODE></SPAN></DT><DD><P>By default, when loading data into repository that
              already contains revisions, <SPAN class="command"><STRONG>svnadmin</STRONG></SPAN>
              will ignore the <CODE class="literal">UUID</CODE> from the dump
              stream.  This option will cause the repository's
              <CODE class="literal">UUID</CODE> to be set to the
              <CODE class="literal">UUID</CODE> from the stream.</P></DD><DT><SPAN class="term"><CODE class="option">--ignore-uuid</CODE></SPAN></DT><DD><P>By default, when loading an empty repository,
              <SPAN class="command"><STRONG>svnadmin</STRONG></SPAN> will ignore the
              <CODE class="literal">UUID</CODE> from the dump stream.  This
              option will force that UUID to be ignored (useful for
              overriding your configuration file if it has
              <CODE class="option">--force-uuid</CODE> set).</P></DD><DT><SPAN class="term"><CODE class="option">--incremental</CODE></SPAN></DT><DD><P>Dump a revision only as a diff against the
              previous revision, instead of the usual
              fulltext.</P></DD><DT><SPAN class="term"><CODE class="option">--parent-dir
          <EM class="replaceable"><CODE>DIR</CODE></EM></CODE></SPAN></DT><DD><P>When loading a dump file, root paths at
              <EM class="replaceable"><CODE>DIR</CODE></EM> instead of
              <CODE class="filename">/</CODE>.</P></DD><DT><SPAN class="term"><CODE class="option">--pre-1.4-compatible</CODE></SPAN></DT><DD><P>When creating a new repository, use a format that is
            compatible with versions of Subversion earlier than
            Subversion 1.4.</P></DD><DT><SPAN class="term"><CODE class="option">--pre-1.5-compatible</CODE></SPAN></DT><DD><P>When creating a new repository, use a format that is
            compatible with versions of Subversion earlier than
            Subversion 1.5.</P></DD><DT><SPAN class="term"><CODE class="option">--revision</CODE> (<CODE class="option">-r</CODE>)
          <EM class="replaceable"><CODE>ARG</CODE></EM></SPAN></DT><DD><P>Specify a particular revision to operate
              on.</P></DD><DT><SPAN class="term"><CODE class="option">--quiet</CODE></SPAN></DT><DD><P>Do not show normal progressâshow only
              errors.</P></DD><DT><SPAN class="term"><CODE class="option">--use-post-commit-hook</CODE></SPAN></DT><DD><P>When loading a dump file, runs the repository's
              <CODE class="literal">post-commit</CODE> hook after finalizing each newly loaded
              revision.</P></DD><DT><SPAN class="term"><CODE class="option">--use-post-revprop-change-hook</CODE></SPAN></DT><DD><P>When changing a revision property, runs the
              repository's <CODE class="literal">post-revprop-change</CODE> hook after changing the
              revision property.</P></DD><DT><SPAN class="term"><CODE class="option">--use-pre-commit-hook</CODE></SPAN></DT><DD><P>When loading a dump file, runs the repository's
              <CODE class="literal">pre-commit</CODE> hook before finalizing each newly loaded
              revision.  If the hook fails, aborts the commit and
              terminates the load process.</P></DD><DT><SPAN class="term"><CODE class="option">--use-pre-revprop-change-hook</CODE></SPAN></DT><DD><P>When changing a revision property, runs the
              repository's <CODE class="literal">pre-revprop-change</CODE> hook before changing the
              revision property.  If the hook fails, aborts the
              modification and terminates.</P></DD></DL></DIV></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.ref.svnadmin.c"></A>svnadmin Subcommands</H3></DIV></DIV></DIV><P>Here are the various subcommands
        for the <SPAN class="command"><STRONG>svnadmin</STRONG></SPAN> program.</P><DIV class="refentry" lang="en" xml:lang="en"><A id="svn.ref.svnadmin.c.crashtest"></A><DIV class="titlepage"></DIV><A id="id576085" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnadmin crashtest â Simulate a process that crashes.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id576111"></A><H2>Synopsis</H2><PRE class="programlisting">svnadmin crashtest REPOS_PATH</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id576123"></A><H2>Description</H2><P>Open the repository at <EM class="replaceable"><CODE>REPOS_PATH</CODE></EM>, then abort, thus
              simulating a process that crashes while holding an open
              repository handle.  This is used for testing automatic
              repository recovery (a new feature in Berkeley DB 4.4).
              It's unlikely that you'll need to run this
              command.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id576139"></A><H2>Options</H2><P>None</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id576150"></A><H2>Examples</H2><PRE class="screen">$ svnadmin crashtest /var/svn/repos
Aborted
</PRE><P>Exciting, isn't it?</P></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svnadmin.c.create"></A><DIV class="titlepage"></DIV><A id="id576173" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnadmin create â Create a new, empty repository.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id576199"></A><H2>Synopsis</H2><PRE class="programlisting">svnadmin create REPOS_PATH</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id576211"></A><H2>Description</H2><P>Create a new, empty repository at the path provided.
              If the provided directory does not exist, it will be
              created for you.
              <SUP>[<A id="id576220" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id576220" class="footnote">57</A>]</SUP>
              As of Subversion 1.2, <SPAN class="command"><STRONG>svnadmin</STRONG></SPAN>
              creates new repositories with the
              <CODE class="literal">FSFS</CODE> filesystem backend by
              default.</P><P>While <SPAN class="command"><STRONG>svnadmin create</STRONG></SPAN> will create
              the base directory for a new repository, it will not
              create intermediate directories.  For example, if you
              have an empty directory named
              <CODE class="filename">/var/svn</CODE>, creating
              <CODE class="filename">/var/svn/repos</CODE> will work, while
              attempting to create
              <CODE class="filename">/var/svn/subdirectory/repos</CODE> will
              fail with an error.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id576285"></A><H2>Options</H2><PRE class="screen">--bdb-log-keep
--bdb-txn-nosync
--config-dir DIR
--fs-type TYPE
--pre-1.4-compatible
--pre-1.5-compatible
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id576298"></A><H2>Examples</H2><P>Creating a new repository is this easy:</P><PRE class="screen">$ svnadmin create /var/svn/repos
</PRE><P>In Subversion 1.0, a Berkeley DB repository is always
            created.  In Subversion 1.1, a Berkeley DB repository is
            the default repository type, but an FSFS repository can be
            created using the <CODE class="option">--fs-type</CODE>
            option:</P><PRE class="screen">$ svnadmin create /var/svn/repos --fs-type fsfs
</PRE></DIV><DIV class="footnotes"><BR><HR width="100" align="left"><DIV class="footnote"><P><SUP>[<A id="ftn.id576220" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id576220" class="para">57</A>] </SUP>Remember, <SPAN class="command"><STRONG>svnadmin</STRONG></SPAN> works only
                  with local <SPAN class="emphasis"><EM>paths</EM></SPAN>, not
                  <SPAN class="emphasis"><EM>URLs</EM></SPAN>.</P></DIV></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svnadmin.c.deltify"></A><DIV class="titlepage"></DIV><A id="id576337" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnadmin deltify â Deltify changed paths in a revision range.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id576363"></A><H2>Synopsis</H2><PRE class="programlisting">svnadmin deltify [-r LOWER[:UPPER]] REPOS_PATH</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id576376"></A><H2>Description</H2><P><SPAN class="command"><STRONG>svnadmin deltify</STRONG></SPAN> exists in
            current versions of Subversion only for historical reasons.
            This command is deprecated and no longer needed.</P><P>It dates from a time when Subversion offered
            administrators greater control over compression strategies
            in the repository.  This turned out to be a lot of
            complexity for <SPAN class="emphasis"><EM>very</EM></SPAN> little gain, and
            this â<SPAN class="quote">feature</SPAN>â was deprecated.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id576404"></A><H2>Options</H2><PRE class="screen">--quiet (-q)
--revision (-r) REV
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svnadmin.c.dump"></A><DIV class="titlepage"></DIV><A id="id576424" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnadmin dump â Dump the contents of the filesystem to <CODE class="filename">stdout</CODE>.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id576456"></A><H2>Synopsis</H2><PRE class="programlisting">svnadmin dump REPOS_PATH [-r LOWER[:UPPER]] [--incremental]</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id576468"></A><H2>Description</H2><P>Dump the contents of the filesystem to <CODE class="filename">stdout</CODE> in a
            â<SPAN class="quote">dump file</SPAN>â portable format, sending feedback
            to <CODE class="filename">stderr</CODE>.  Dump revisions
            <EM class="replaceable"><CODE>LOWER</CODE></EM> rev through
            <EM class="replaceable"><CODE>UPPER</CODE></EM> rev.  If no revisions are
            given, dump all revision trees.  If only
            <EM class="replaceable"><CODE>LOWER</CODE></EM> is given, dump that one
            revision tree.  See <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.migrate" title="Migrating Repository Data Elsewhere">the section called âMigrating Repository Data Elsewhereâ</A>
            for a practical use.</P><P>By default, the Subversion dump stream contains a
            single revision (the first revision in the requested
            revision range) in which every file and directory in the
            repository in that revision is presented as though that whole
            tree was added at once, followed by other revisions (the
            remainder of the revisions in the requested range), which
            contain only the files and directories that were modified
            in those revisions.  For a modified file, the complete
            full-text representation of its contents, as well as all of
            its properties, are presented in the dump file; for a
            directory, all of its properties are presented.</P><P>Two useful options modify the dump file
            generator's behavior.  The first is the
            <CODE class="option">--incremental</CODE> option, which simply causes
            that first revision in the dump stream to contain only
            the files and directories modified in that revision,
            instead of being presented as the addition of a new tree,
            and in exactly the same way that every other revision in
            the dump file is presented.  This is useful for generating
            a relatively small dump file to be loaded into another
            repository that already has the files and directories
            that exist in the original repository.</P><P>The second useful option is <CODE class="option">--deltas</CODE>.
            This option causes <SPAN class="command"><STRONG>svnadmin dump</STRONG></SPAN> to,
            instead of emitting full-text representations of file
            contents and property lists, emit only deltas of those
            items against their previous versions.  This reduces (in
            some cases, drastically) the size of the dump file that
            <SPAN class="command"><STRONG>svnadmin dump</STRONG></SPAN> creates.  There are, however,
            disadvantages to using this optionâdeltified
            dump files are more CPU-intensive to create, cannot be
            operated on by <SPAN class="command"><STRONG>svndumpfilter</STRONG></SPAN>, and tend
            not to compress as well as their nondeltified counterparts
            when using third-party tools such as <SPAN class="command"><STRONG>gzip</STRONG></SPAN>
            and <SPAN class="command"><STRONG>bzip2</STRONG></SPAN>.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id576577"></A><H2>Options</H2><PRE class="screen">--deltas
--incremental
--quiet (-q)
--revision (-r) REV
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id576590"></A><H2>Examples</H2><P>Dump your whole repository:</P><PRE class="screen">$ svnadmin dump /var/svn/repos &gt; full.dump
* Dumped revision 0.
* Dumped revision 1.
* Dumped revision 2.
â¦
</PRE><P>Incrementally dump a single transaction from your
            repository:</P><PRE class="screen">$ svnadmin dump /var/svn/repos -r 21 --incremental &gt; incr.dump
* Dumped revision 21.
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svnadmin.c.help"></A><DIV class="titlepage"></DIV><A id="id576624" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnadmin help â Help!</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id576650"></A><H2>Synopsis</H2><PRE class="programlisting">svnadmin help [SUBCOMMAND...]</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id576662"></A><H2>Description</H2><P>This subcommand is useful when you're trapped on a
            desert island with neither a Net connection nor a copy of
            this book.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id576674"></A><H2>Alternate names</H2><P><SPAN class="command"><STRONG>?</STRONG></SPAN>, <SPAN class="command"><STRONG>h</STRONG></SPAN></P></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svnadmin.c.hotcopy"></A><DIV class="titlepage"></DIV><A id="id576700" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnadmin hotcopy â Make a hot copy of a repository.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id576726"></A><H2>Synopsis</H2><PRE class="programlisting">svnadmin hotcopy REPOS_PATH NEW_REPOS_PATH</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id576738"></A><H2>Description</H2><P>This subcommand makes a full â<SPAN class="quote">hot</SPAN>â backup
            of your repository, including all hooks, configuration
            files, and, of course, database files.  If you pass the
            <CODE class="option">--clean-logs</CODE> option,
            <SPAN class="command"><STRONG>svnadmin</STRONG></SPAN> will perform a hot copy of your
            repository, and then remove unused Berkeley DB logs from
            the original repository.  You can run this command at any
            time and make a safe copy of the repository, regardless of
            whether other processes are using the repository.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id576766"></A><H2>Options</H2><PRE class="screen">--clean-logs
</PRE><DIV class="warning" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Warning</H3><P>As described in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.basics.backends.bdb" title="Berkeley DB">the section called âBerkeley DBâ</A>, hot-copied
              Berkeley DB repositories are <SPAN class="emphasis"><EM>not</EM></SPAN>
              portable across operating systems, nor will they work on
              machines with a different â<SPAN class="quote">endianness</SPAN>â than
              the machine where they were created.</P></DIV></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svnadmin.c.list-dblogs"></A><DIV class="titlepage"></DIV><A id="id576807" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnadmin list-dblogs â Ask Berkeley DB which logfiles exist for a
            given Subversion repository (applies only to repositories
            using the <CODE class="literal">bdb</CODE> backend).</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id576839"></A><H2>Synopsis</H2><PRE class="programlisting">svnadmin list-dblogs REPOS_PATH</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id576852"></A><H2>Description</H2><P>Berkeley DB creates logs of all changes to the
            repository, which allow it to recover in the face of
            catastrophe.  Unless you enable
            <CODE class="literal">DB_LOG_AUTOREMOVE</CODE>, the logfiles
            accumulate, although most are no longer used and can be
            deleted to reclaim disk space.  See <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.diskspace" title="Managing Disk Space">the section called âManaging Disk Spaceâ</A> for more
            information.</P></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svnadmin.c.list-unused-dblogs"></A><DIV class="titlepage"></DIV><A id="id576884" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnadmin list-unused-dblogs â Ask Berkeley DB which logfiles can be safely
          deleted (applies only to repositories using the
          <CODE class="literal">bdb</CODE> backend).</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id576916"></A><H2>Synopsis</H2><PRE class="programlisting">svnadmin list-unused-dblogs REPOS_PATH</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id576928"></A><H2>Description</H2><P>Berkeley DB creates logs of all changes to the
            repository, which allow it to recover in the face of
            catastrophe.  Unless you enable
            <CODE class="literal">DB_LOG_AUTOREMOVE</CODE>, the logfiles
            accumulate, although most are no longer used and can be
            deleted to reclaim disk space.  See <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.diskspace" title="Managing Disk Space">the section called âManaging Disk Spaceâ</A> for more
            information.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id576953"></A><H2>Examples</H2><P>Remove all unused logfiles from the repository:</P><PRE class="screen">$ svnadmin list-unused-dblogs /var/svn/repos
/var/svn/repos/log.0000000031
/var/svn/repos/log.0000000032
/var/svn/repos/log.0000000033

$ svnadmin list-unused-dblogs /var/svn/repos | xargs rm
## disk space reclaimed!
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svnadmin.c.load"></A><DIV class="titlepage"></DIV><A id="id576978" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnadmin load â Read a
            repository dump stream from
            <CODE class="filename">stdin</CODE>.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id577009"></A><H2>Synopsis</H2><PRE class="programlisting">svnadmin load REPOS_PATH</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id577022"></A><H2>Description</H2><P>Read a repository dump stream from
            <CODE class="filename">stdin</CODE>, committing new revisions into the repository's
            filesystem.  Send progress feedback to <CODE class="filename">stdout</CODE>.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id577045"></A><H2>Options</H2><PRE class="screen">--force-uuid
--ignore-uuid
--parent-dir
--quiet (-q)
--use-post-commit-hook
--use-pre-commit-hook
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id577058"></A><H2>Examples</H2><P>This shows the beginning of loading a repository from
            a backup file (made, of course, with <SPAN class="command"><STRONG>svnadmin
            dump</STRONG></SPAN>):</P><PRE class="screen">$ svnadmin load /var/svn/restored &lt; repos-backup
&lt;&lt;&lt; Started new txn, based on original revision 1
     * adding path : test ... done.
     * adding path : test/a ... done.
â¦
</PRE><P>Or if you want to load into a subdirectory:</P><PRE class="screen">$ svnadmin load --parent-dir new/subdir/for/project \
                /var/svn/restored &lt; repos-backup
&lt;&lt;&lt; Started new txn, based on original revision 1
     * adding path : test ... done.
     * adding path : test/a ... done.
â¦
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svnadmin.c.lslocks"></A><DIV class="titlepage"></DIV><A id="id577100" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnadmin lslocks â Print descriptions of all locks.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id577126"></A><H2>Synopsis</H2><PRE class="programlisting">svnadmin lslocks REPOS_PATH [PATH-IN-REPOS]</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id577139"></A><H2>Description</H2><P>Print descriptions of all locks in
            repository <EM class="replaceable"><CODE>REPOS_PATH</CODE></EM>
            underneath the
            path <EM class="replaceable"><CODE>PATH-IN-REPOS</CODE></EM>.
            If <EM class="replaceable"><CODE>PATH-IN-REPOS</CODE></EM> is not
            provided, it defaults to the root directory of the
            repository.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id577161"></A><H2>Options</H2><P>None</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id577171"></A><H2>Examples</H2><P>This lists the one locked file in the repository at
            <CODE class="filename">/var/svn/repos</CODE>:</P><PRE class="screen">$ svnadmin lslocks /var/svn/repos
Path: /tree.jpg
UUID Token: opaquelocktoken:ab00ddf0-6afb-0310-9cd0-dda813329753
Owner: harry
Created: 2005-07-08 17:27:36 -0500 (Fri, 08 Jul 2005)
Expires: 
Comment (1 line):
Rework the uppermost branches on the bald cypress in the foreground.
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svnadmin.c.lstxns"></A><DIV class="titlepage"></DIV><A id="id577203" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnadmin lstxns â Print the names of all uncommitted transactions.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id577230"></A><H2>Synopsis</H2><PRE class="programlisting">svnadmin lstxns REPOS_PATH</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id577242"></A><H2>Description</H2><P>Print the names of all uncommitted transactions.  See
            <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.diskspace.deadtxns" title="Removing dead transactions">the section called âRemoving dead transactionsâ</A>
            for information on how uncommitted transactions are
            created and what you should do with them.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id577260"></A><H2>Examples</H2><P>List all outstanding transactions in a
            repository:</P><PRE class="screen">$ svnadmin lstxns /var/svn/repos/ 
1w
1x
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svnadmin.c.recover"></A><DIV class="titlepage"></DIV><A id="id577284" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnadmin recover â Bring a repository database back into a
          consistent state (applies only to repositories using the
          <CODE class="literal">bdb</CODE> backend).  In addition, if
          <CODE class="filename">repos/conf/passwd</CODE> does not exist, it
          will create a default passwordfile .</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id577323"></A><H2>Synopsis</H2><PRE class="programlisting">svnadmin recover REPOS_PATH</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id577336"></A><H2>Description</H2><P>Run this command if you get an error indicating that
            your repository needs to be recovered.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id577346"></A><H2>Options</H2><PRE class="screen">--wait
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id577359"></A><H2>Examples</H2><P>Recover a hung repository:</P><PRE class="screen">$ svnadmin recover /var/svn/repos/ 
Repository lock acquired.
Please wait; recovering the repository may take some time...

Recovery completed.
The latest repos revision is 34.
</PRE><P>Recovering the database requires an exclusive lock on
            the repository. (This is a â<SPAN class="quote">database lock</SPAN>â;
            see the sidebar <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.locking.meanings" title="The Three Meanings of &ldquo;Lock&rdquo;">The Three Meanings of â<SPAN class="quote">Lock</SPAN>â</A>.)
            If another process is accessing the repository,
            then <SPAN class="command"><STRONG>svnadmin recover</STRONG></SPAN> will error:</P><PRE class="screen">$ svnadmin recover /var/svn/repos
svn: Failed to get exclusive repository access; perhaps another process
such as httpd, svnserve or svn has it open?

$
</PRE><P>The <CODE class="option">--wait</CODE> option, however, will
            cause <SPAN class="command"><STRONG>svnadmin recover</STRONG></SPAN> to wait
            indefinitely for other processes to disconnect:</P><PRE class="screen">$ svnadmin recover /var/svn/repos --wait
Waiting on repository lock; perhaps another process has it open?

### time goes byâ¦

Repository lock acquired.
Please wait; recovering the repository may take some time...

Recovery completed.
The latest repos revision is 34.
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svnadmin.c.rmlocks"></A><DIV class="titlepage"></DIV><A id="id577433" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnadmin rmlocks â Unconditionally remove one or more locks from a
          repository.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id577459"></A><H2>Synopsis</H2><PRE class="programlisting">svnadmin rmlocks REPOS_PATH LOCKED_PATH...</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id577472"></A><H2>Description</H2><P>Remove one or more locks from each <EM class="replaceable"><CODE>LOCKED_PATH</CODE></EM>.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id577485"></A><H2>Options</H2><P>None</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id577496"></A><H2>Examples</H2><P>This deletes the locks on
            <CODE class="filename">tree.jpg</CODE> and
            <CODE class="filename">house.jpg</CODE> in the repository at
            <CODE class="filename">/var/svn/repos</CODE>:</P><PRE class="screen">$ svnadmin rmlocks /var/svn/repos tree.jpg house.jpg
Removed lock on '/tree.jpg.
Removed lock on '/house.jpg.
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svnadmin.c.rmtxns"></A><DIV class="titlepage"></DIV><A id="id577538" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnadmin rmtxns â Delete transactions from a repository.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id577564"></A><H2>Synopsis</H2><PRE class="programlisting">svnadmin rmtxns REPOS_PATH TXN_NAME...</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id577576"></A><H2>Description</H2><P>Delete outstanding transactions from a repository.
            This is covered in detail in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.diskspace.deadtxns" title="Removing dead transactions">the section called âRemoving dead transactionsâ</A>.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id577593"></A><H2>Options</H2><PRE class="screen">--quiet (-q)
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id577605"></A><H2>Examples</H2><P>Remove named transactions:</P><PRE class="screen">$ svnadmin rmtxns /var/svn/repos/ 1w 1x
</PRE><P>Fortunately, the output of <SPAN class="command"><STRONG>lstxns</STRONG></SPAN>
            works great as the input for <SPAN class="command"><STRONG>rmtxns</STRONG></SPAN>:</P><PRE class="screen">$ svnadmin rmtxns /var/svn/repos/  `svnadmin lstxns /var/svn/repos/`
</PRE><P>This removes all uncommitted transactions from
            your repository.</P></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svnadmin.c.setlog"></A><DIV class="titlepage"></DIV><A id="id577655" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnadmin setlog â Set the log message on a revision.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id577680"></A><H2>Synopsis</H2><PRE class="programlisting">svnadmin setlog REPOS_PATH -r REVISION FILE</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id577693"></A><H2>Description</H2><P>Set the log message on
            revision <EM class="replaceable"><CODE>REVISION</CODE></EM> to the
            contents of <EM class="replaceable"><CODE>FILE</CODE></EM>.</P><P>This is similar to using <SPAN class="command"><STRONG>svn propset</STRONG></SPAN>
            with the <CODE class="option">--revprop</CODE> option to set the <CODE class="literal">svn:log</CODE> property
            on a revision, except that you can also use the option
            <CODE class="option">--bypass-hooks</CODE> to avoid running any pre-
            or post-commit hooks, which is useful if the modification
            of revision properties has not been enabled in
            the <CODE class="literal">pre-revprop-change</CODE> hook.</P><DIV class="warning" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Warning</H3><P>Revision properties are not under version control,
              so this command will permanently overwrite the previous
              log message.</P></DIV></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id577750"></A><H2>Options</H2><PRE class="screen">--bypass-hooks
--revision (-r) REV
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id577762"></A><H2>Examples</H2><P>Set the log message for revision 19 to the contents of
            the file <CODE class="filename">msg</CODE>:</P><PRE class="screen">$ svnadmin setlog /var/svn/repos/ -r 19 msg
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svnadmin.c.setrevprop"></A><DIV class="titlepage"></DIV><A id="id577792" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnadmin setrevprop â Set a property on a revision.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id577818"></A><H2>Synopsis</H2><PRE class="programlisting">svnadmin setrevprop REPOS_PATH -r REVISION NAME FILE</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id577830"></A><H2>Description</H2><P>Set the property <EM class="replaceable"><CODE>NAME</CODE></EM> on
              revision <EM class="replaceable"><CODE>REVISION</CODE></EM> to the
              contents of <EM class="replaceable"><CODE>FILE</CODE></EM>. Use
              <CODE class="option">--use-pre-revprop-change-hook</CODE>
              or <CODE class="option">--use-post-revprop-change-hook</CODE> to
              trigger the revision property-related hooks (e.g., if
              you want an email notification sent from your <CODE class="literal">post-revprop-change-hook</CODE>).</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id577867"></A><H2>Options</H2><PRE class="screen">--revision (-r) ARG
--use-post-revprop-change-hook
--use-pre-revprop-change-hook
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id577880"></A><H2>Examples</H2><P>The following sets the revision
          property <CODE class="literal">repository-photo</CODE> to the contents
          of the file <CODE class="filename">sandwich.png</CODE>:</P><PRE class="screen">$svnadmin setrevprop /var/svn/repos -r 0 repository-photo sandwich.png
</PRE><P>As you can see, <SPAN class="command"><STRONG>svnadmin setrevprop</STRONG></SPAN>
            has no output upon success.</P></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svnadmin.c.setuuid"></A><DIV class="titlepage"></DIV><A id="id577926" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnadmin setuuid â Reset the repository UUID.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id577951"></A><H2>Synopsis</H2><PRE class="programlisting">svnadmin setuuid REPOS_PATH [NEW_UUID]</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id577964"></A><H2>Description</H2><P>Reset the repository UUID for the repository located
              at <EM class="replaceable"><CODE>REPOS_PATH</CODE></EM>.
              If <EM class="replaceable"><CODE>NEW_UUID</CODE></EM> is provided, use
              that as the new repository UUID; otherwise, generate a
              brand-new UUID for the repository.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id577983"></A><H2>Options</H2><P>None</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id577993"></A><H2>Examples</H2><P>If you've <SPAN class="command"><STRONG>svnsync</STRONG></SPAN>ed <CODE class="filename">/var/svn/repos</CODE>
            to <CODE class="filename">/var/svn/repos-new</CODE> and intend to use <CODE class="filename">repos-new</CODE> as your
            canonical repository, you may want to change the UUID for
            <CODE class="filename">repos-new</CODE> to the UUID of <CODE class="filename">repos</CODE> so that your users don't
            have to check out a new working copy to accommodate the
            change:</P><PRE class="screen">$ svnadmin setuuid /var/svn/repos-new 2109a8dd-854f-0410-ad31-d604008985ab
</PRE><P>As you can see, <SPAN class="command"><STRONG>svnadmin setuuid</STRONG></SPAN>
            has no output upon success.</P></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svnadmin.c.upgrade"></A><DIV class="titlepage"></DIV><A id="id578064" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnadmin upgrade â Upgrade a repository to the latest supported
            schema version.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id578090"></A><H2>Synopsis</H2><PRE class="programlisting">svnadmin upgrade REPOS_PATH</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id578103"></A><H2>Description</H2><P>Upgrade the repository located
              at <EM class="replaceable"><CODE>REPOS_PATH</CODE></EM> to the latest
              supported schema version.</P><P>This functionality is provided as a convenience for
              repository administrators who wish to make use of new
              Subversion functionality without having to undertake a
              potentially costly full repository dump and load
              operation.  As such, the upgrade performs only the
              minimum amount of work needed to accomplish this while
              still maintaining the integrity of the repository.
              While a dump and subsequent load guarantee the most
              optimized repository state, <SPAN class="command"><STRONG>svnadmin
              upgrade</STRONG></SPAN> does not.</P><DIV class="warning" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Warning</H3><P>You should <SPAN class="emphasis"><EM>always</EM></SPAN> back up your
                repository before upgrading.</P></DIV></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id578142"></A><H2>Options</H2><P>None</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id578152"></A><H2>Examples</H2><P>Upgrade the repository at
            path <CODE class="filename">/var/repos/svn</CODE>:</P><PRE class="screen">$ svnadmin upgrade /var/repos/svn
Repository lock acquired.
Please wait; upgrading the repository may take some time...

Upgrade completed.
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svnadmin.c.verify"></A><DIV class="titlepage"></DIV><A id="id578186" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnadmin verify â Verify the data stored in the repository.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id578212"></A><H2>Synopsis</H2><PRE class="programlisting">svnadmin verify REPOS_PATH</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id578224"></A><H2>Description</H2><P>Run this command if you wish to verify the integrity
            of your repository.  This basically iterates through all
            revisions in the repository by internally dumping all
            revisions and discarding the outputâit's a good idea
            to run this on a regular basis to guard against latent
            hard disk failures and â<SPAN class="quote">bitrot.</SPAN>â  If this
            command failsâwhich it will do at the first sign of
            a problemâthat means your repository has at
            least one corrupted revision, and you should restore the
            corrupted revision from a backup (you did make a backup,
            didn't you?).</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id578244"></A><H2>Options</H2><PRE class="screen">--quiet (-q)
--revision (-r) ARG
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id578256"></A><H2>Examples</H2><P>Verify a hung repository:</P><PRE class="screen">$ svnadmin verify /var/svn/repos/ 
* Verified revision 1729.
</PRE></DIV></DIV></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.ref.svnlook"></A>svnlook</H2></DIV></DIV></DIV><P><SPAN class="command"><STRONG>svnlook</STRONG></SPAN> is a command-line utility for
      examining different aspects of a Subversion repository.  It
      does not make any changes to the repositoryâit's just
      used for â<SPAN class="quote">peeking.</SPAN>â
      <SPAN class="command"><STRONG>svnlook</STRONG></SPAN> is typically used by the
      repository hooks, but a repository administrator might find it
      useful for diagnostic purposes.</P><P>Since <SPAN class="command"><STRONG>svnlook</STRONG></SPAN> works via direct repository access
      (and thus can be used only on the machine that holds the
      repository), it refers to the repository with a path, not a URL.</P><P>If no revision or transaction is specified,
      <SPAN class="command"><STRONG>svnlook</STRONG></SPAN> defaults to the youngest (most
      recent) revision of the repository.</P><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.ref.svnlook.sw"></A>svnlook Options</H3></DIV></DIV></DIV><P>Options in <SPAN class="command"><STRONG>svnlook</STRONG></SPAN> are global, just
        as they are in <SPAN class="command"><STRONG>svn</STRONG></SPAN> and
        <SPAN class="command"><STRONG>svnadmin</STRONG></SPAN>; however, most options apply
        to only one subcommand since the functionality of
        <SPAN class="command"><STRONG>svnlook</STRONG></SPAN> is (intentionally) limited in
        scope:</P><DIV class="variablelist"><DL><DT><SPAN class="term"><CODE class="option">--copy-info</CODE></SPAN></DT><DD><P>Causes <SPAN class="command"><STRONG>svnlook changed</STRONG></SPAN> to show
              detailed copy source information.</P></DD><DT><SPAN class="term"><CODE class="option">--no-diff-deleted</CODE></SPAN></DT><DD><P>Prevents <SPAN class="command"><STRONG>svnlook diff</STRONG></SPAN> from printing
              differences for deleted files.  The default behavior
              when a file is deleted in a transaction/revision is
              to print the same differences that you would see if
              you had left the file but removed all the content.</P></DD><DT><SPAN class="term"><CODE class="option">--no-diff-added</CODE></SPAN></DT><DD><P>Prevents <SPAN class="command"><STRONG>svnlook diff</STRONG></SPAN> from printing
            differences for added files.  The default behavior when
            you add a file is to print the same differences that you
            would see if you had added the entire contents of an
            existing (empty) file.</P></DD><DT><SPAN class="term"><CODE class="option">--revision</CODE>
            (<CODE class="option">-r</CODE>)</SPAN></DT><DD><P>Specifies a particular revision number that you wish
              to examine.</P></DD><DT><SPAN class="term"><CODE class="option">--revprop</CODE></SPAN></DT><DD><P>Operates on a revision property instead of a
              property specific to a file or directory.  This option
              requires that you also pass a revision with the
              <CODE class="option">--revision</CODE> (<CODE class="option">-r</CODE>)
              option.</P></DD><DT><SPAN class="term"><CODE class="option">--transaction</CODE>
            (<CODE class="option">-t</CODE>)</SPAN></DT><DD><P>Specifies a particular transaction ID that you wish to
              examine.</P></DD><DT><SPAN class="term"><CODE class="option">--show-ids</CODE></SPAN></DT><DD><P>Shows the filesystem node revision IDs for each path in the filesystem
              tree.</P></DD></DL></DIV></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.ref.svnlook.c"></A>svnlook Subcommands</H3></DIV></DIV></DIV><P>Here are the various subcommands
        for the <SPAN class="command"><STRONG>svnlook</STRONG></SPAN> program.</P><DIV class="refentry" lang="en" xml:lang="en"><A id="svn.ref.svnlook.c.author"></A><DIV class="titlepage"></DIV><A id="id578552" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnlook author â Print the author.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id578578"></A><H2>Synopsis</H2><PRE class="programlisting">svnlook author REPOS_PATH</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id578591"></A><H2>Description</H2><P>Print the author of a revision or transaction in
            the repository.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id578601"></A><H2>Options</H2><PRE class="screen">--revision (-r) REV
--transaction (-t) TXN
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id578614"></A><H2>Examples</H2><P><SPAN class="command"><STRONG>svnlook author</STRONG></SPAN> is handy, but not
          very exciting:</P><PRE class="screen">$ svnlook author -r 40 /var/svn/repos 
sally
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svnlook.c.cat"></A><DIV class="titlepage"></DIV><A id="id578643" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnlook cat â Print the contents of a file.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id578668"></A><H2>Synopsis</H2><PRE class="programlisting">svnlook cat REPOS_PATH PATH_IN_REPOS</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id578681"></A><H2>Description</H2><P>Print the contents of a file.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id578691"></A><H2>Options</H2><PRE class="screen">--revision (-r) REV
--transaction (-t) TXN
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id578704"></A><H2>Examples</H2><P>This shows the contents of a file in transaction
            <CODE class="literal">ax8</CODE>, located at 
            <CODE class="filename">/trunk/README</CODE>:</P><PRE class="screen">$ svnlook cat -t ax8 /var/svn/repos /trunk/README

               Subversion, a version control system.
               =====================================

$LastChangedDate: 2003-07-17 10:45:25 -0500 (Thu, 17 Jul 2003) $

Contents:

     I. A FEW POINTERS
    II. DOCUMENTATION
   III. PARTICIPATING IN THE SUBVERSION COMMUNITY
â¦
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svnlook.c.changed"></A><DIV class="titlepage"></DIV><A id="id578741" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnlook changed â Print the paths that were changed.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id578767"></A><H2>Synopsis</H2><PRE class="programlisting">svnlook changed REPOS_PATH</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id578779"></A><H2>Description</H2><P>Print the paths that were changed in a particular
            revision or transaction, as well as â<SPAN class="quote">svn
            update-style</SPAN>â status letters in the first two
            columns:</P><DIV class="variablelist"><DL><DT><SPAN class="term"><CODE class="literal">'A '</CODE></SPAN></DT><DD><P>Item added to repository</P></DD><DT><SPAN class="term"><CODE class="literal">'D '</CODE></SPAN></DT><DD><P>Item deleted from repository</P></DD><DT><SPAN class="term"><CODE class="literal">'U '</CODE></SPAN></DT><DD><P>File contents changed</P></DD><DT><SPAN class="term"><CODE class="literal">'_U'</CODE></SPAN></DT><DD><P>Properties of item changed; note the leading underscore</P></DD><DT><SPAN class="term"><CODE class="literal">'UU'</CODE></SPAN></DT><DD><P>File contents and properties changed</P></DD></DL></DIV><P>Files and directories can be distinguished, as
            directory paths are displayed with a
            trailing â<SPAN class="quote"><CODE class="literal">/</CODE></SPAN>â
            character.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id578892"></A><H2>Options</H2><PRE class="screen">--copy-info
--revision (-r) REV
--transaction (-t) TXN
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id578905"></A><H2>Examples</H2><P>This shows a list of all the changed files and
            directories in revision 39 of a test repository.  Note
            that the first changed item is a directory, as evidenced
            by the trailing <CODE class="literal">/</CODE>:</P><PRE class="screen">$ svnlook changed -r 39 /var/svn/repos
A   trunk/vendors/deli/
A   trunk/vendors/deli/chips.txt
A   trunk/vendors/deli/sandwich.txt
A   trunk/vendors/deli/pickle.txt
U   trunk/vendors/baker/bagel.txt
_U  trunk/vendors/baker/croissant.txt
UU  trunk/vendors/baker/pretzel.txt
D   trunk/vendors/baker/baguette.txt
</PRE><P>Here's an example that shows a revision in which a
            file was renamed:</P><PRE class="screen">$ svnlook changed -r 64 /var/svn/repos
A   trunk/vendors/baker/toast.txt
D   trunk/vendors/baker/bread.txt
</PRE><P>Unfortunately, nothing in the preceding output reveals
            the connection between the deleted and added files.  Use
            the <CODE class="option">--copy-info</CODE> option to make this
            relationship more apparent:</P><PRE class="screen">$ svnlook changed -r 64 --copy-info /var/svn/repos
A + trunk/vendors/baker/toast.txt
    (from trunk/vendors/baker/bread.txt:r63)
D   trunk/vendors/baker/bread.txt
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svnlook.c.date"></A><DIV class="titlepage"></DIV><A id="id578964" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnlook date â Print the datestamp.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id578990"></A><H2>Synopsis</H2><PRE class="programlisting">svnlook date REPOS_PATH</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579002"></A><H2>Description</H2><P>Print the datestamp of a revision or transaction in
            a repository.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579013"></A><H2>Options</H2><PRE class="screen">--revision (-r) REV
--transaction (-t) TXN
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579026"></A><H2>Examples</H2><P>This shows the date of revision 40 of a test
            repository:</P><PRE class="screen">$ svnlook date -r 40 /var/svn/repos/
2003-02-22 17:44:49 -0600 (Sat, 22 Feb 2003)
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svnlook.c.diff"></A><DIV class="titlepage"></DIV><A id="id579050" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnlook diff â Print differences of changed files and properties.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579076"></A><H2>Synopsis</H2><PRE class="programlisting">svnlook diff REPOS_PATH</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579088"></A><H2>Description</H2><P>Print GNU-style differences of changed files and
            properties in a repository.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579099"></A><H2>Options</H2><PRE class="screen">--diff-copy-from
--no-diff-added
--no-diff-deleted
--revision (-r) REV
--transaction (-t) TXN
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579112"></A><H2>Examples</H2><P>This shows a newly added (empty) file, a deleted
            file, and a copied file:</P><PRE class="screen">$ svnlook diff -r 40 /var/svn/repos/
Copied: egg.txt (from rev 39, trunk/vendors/deli/pickle.txt)

Added: trunk/vendors/deli/soda.txt
==============================================================================

Modified: trunk/vendors/deli/sandwich.txt
==============================================================================
--- trunk/vendors/deli/sandwich.txt	(original)
+++ trunk/vendors/deli/sandwich.txt	2003-02-22 17:45:04.000000000 -0600
@@ -0,0 +1 @@
+Don't forget the mayo!

Modified: trunk/vendors/deli/logo.jpg
==============================================================================
(Binary files differ)

Deleted: trunk/vendors/deli/chips.txt
==============================================================================

Deleted: trunk/vendors/deli/pickle.txt
==============================================================================
</PRE><P>If a file has a nontextual
            <CODE class="literal">svn:mime-type</CODE> property, the
            differences are not explicitly shown.</P></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svnlook.c.dirs-changed"></A><DIV class="titlepage"></DIV><A id="id579153" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnlook dirs-changed â Print the directories that were themselves changed.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579179"></A><H2>Synopsis</H2><PRE class="programlisting">svnlook dirs-changed REPOS_PATH</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579191"></A><H2>Description</H2><P>Print the directories that were themselves changed
            (property edits) or whose file children were
            changed.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579202"></A><H2>Options</H2><PRE class="screen">--revision (-r) REV
--transaction (-t) TXN
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579215"></A><H2>Examples</H2><P>This shows the directories that changed in
            revision 40 in our sample repository:</P><PRE class="screen">$ svnlook dirs-changed -r 40 /var/svn/repos
trunk/vendors/deli/
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svnlook.c.help"></A><DIV class="titlepage"></DIV><A id="id579239" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnlook help â Help!</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579265"></A><H2>Synopsis</H2><PRE class="programlisting">Also svnlook -h and svnlook -?.</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579277"></A><H2>Description</H2><P>Displays the help message
            for <SPAN class="command"><STRONG>svnlook</STRONG></SPAN>.  This command, like its
            brother, <SPAN class="command"><STRONG>svn help</STRONG></SPAN>, is also your friend,
            even though you never call it anymore and forgot to invite
            it to your last party.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579301"></A><H2>Options</H2><P>None</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579311"></A><H2>Alternate names</H2><P><SPAN class="command"><STRONG>?</STRONG></SPAN>, <SPAN class="command"><STRONG>h</STRONG></SPAN></P></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svnlook.c.history"></A><DIV class="titlepage"></DIV><A id="id579337" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnlook history â Print information about the history of a path in
            the repository (or the root directory if no path is
            supplied).</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579364"></A><H2>Synopsis</H2><PRE class="programlisting">svnlook history REPOS_PATH [PATH_IN_REPOS]</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579377"></A><H2>Description</H2><P>Print information about the history of a path in
            the repository (or the root directory if no path is
            supplied).</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579387"></A><H2>Options</H2><PRE class="screen">--limit (-l) ARG
--revision (-r) REV
--show-ids
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579400"></A><H2>Examples</H2><P>This shows the history output for the path
            <CODE class="filename">/branches/bookstore</CODE> as of revision 13 in our
            sample repository:</P><PRE class="screen">$ svnlook history -r 13 /var/svn/repos /branches/bookstore --show-ids
REVISION   PATH &lt;ID&gt;
--------   ---------
      13   /branches/bookstore &lt;1.1.r13/390&gt;
      12   /branches/bookstore &lt;1.1.r12/413&gt;
      11   /branches/bookstore &lt;1.1.r11/0&gt;
       9   /trunk &lt;1.0.r9/551&gt;
       8   /trunk &lt;1.0.r8/131357096&gt;
       7   /trunk &lt;1.0.r7/294&gt;
       6   /trunk &lt;1.0.r6/353&gt;
       5   /trunk &lt;1.0.r5/349&gt;
       4   /trunk &lt;1.0.r4/332&gt;
       3   /trunk &lt;1.0.r3/335&gt;
       2   /trunk &lt;1.0.r2/295&gt;
       1   /trunk &lt;1.0.r1/532&gt;
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svnlook.c.info"></A><DIV class="titlepage"></DIV><A id="id579437" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnlook info â Print the author, datestamp, log message size,
            and log message.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579463"></A><H2>Synopsis</H2><PRE class="programlisting">svnlook info REPOS_PATH</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579475"></A><H2>Description</H2><P>Print the author, datestamp, log message size (in bytes),
            and log message, followed by a newline character.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579486"></A><H2>Options</H2><PRE class="screen">--revision (-r) REV
--transaction (-t) TXN
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579499"></A><H2>Examples</H2><P>This shows the info output for revision 40 in our
            sample repository:</P><PRE class="screen">$ svnlook info -r 40 /var/svn/repos
sally
2003-02-22 17:44:49 -0600 (Sat, 22 Feb 2003)
16
Rearrange lunch.
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svnlook.c.lock"></A><DIV class="titlepage"></DIV><A id="id579523" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnlook lock â If a lock exists on a path in the repository,
            describe it.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579550"></A><H2>Synopsis</H2><PRE class="programlisting">svnlook lock REPOS_PATH PATH_IN_REPOS</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579562"></A><H2>Description</H2><P>Print all information available for the lock at
              <EM class="replaceable"><CODE>PATH_IN_REPOS</CODE></EM>.  If
              <EM class="replaceable"><CODE>PATH_IN_REPOS</CODE></EM> is not locked,
              print nothing.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579580"></A><H2>Options</H2><P>None</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579591"></A><H2>Examples</H2><P>This describes the lock on the file
            <CODE class="filename">tree.jpg</CODE>:</P><PRE class="screen">$ svnlook lock /var/svn/repos tree.jpg
UUID Token: opaquelocktoken:ab00ddf0-6afb-0310-9cd0-dda813329753
Owner: harry
Created: 2005-07-08 17:27:36 -0500 (Fri, 08 Jul 2005)
Expires: 
Comment (1 line):
Rework the uppermost branches on the bald cypress in the foreground.
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svnlook.c.log"></A><DIV class="titlepage"></DIV><A id="id579622" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnlook log â Print the log message, followed by a newline 
            character.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579647"></A><H2>Synopsis</H2><PRE class="programlisting">svnlook log REPOS_PATH</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579660"></A><H2>Description</H2><P>Print the log message.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579670"></A><H2>Options</H2><PRE class="screen">--revision (-r) REV
--transaction (-t) TXN
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579683"></A><H2>Examples</H2><P>This shows the log output for revision 40 in our sample
            repository:</P><PRE class="screen">$ svnlook log /var/svn/repos/
Rearrange lunch.
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svnlook.c.propget"></A><DIV class="titlepage"></DIV><A id="id579707" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnlook propget â Print the raw value of a property on a path in
            the repository.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579734"></A><H2>Synopsis</H2><PRE class="programlisting">svnlook propget REPOS_PATH PROPNAME [PATH_IN_REPOS]</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579746"></A><H2>Description</H2><P>List the value of a property on a path in the
            repository.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579757"></A><H2>Alternate names</H2><P><SPAN class="command"><STRONG>pg</STRONG></SPAN>, <SPAN class="command"><STRONG>pget</STRONG></SPAN></P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579776"></A><H2>Options</H2><PRE class="screen">--revision (-r) REV
--revprop
--transaction (-t) TXN
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579788"></A><H2>Examples</H2><P>This shows the value of the â<SPAN class="quote">seasonings</SPAN>â property
            on the file <CODE class="filename">/trunk/sandwich</CODE> in the
            <CODE class="literal">HEAD</CODE> revision:</P><PRE class="screen">$ svnlook pg /var/svn/repos seasonings /trunk/sandwich
mustard
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svnlook.c.proplist"></A><DIV class="titlepage"></DIV><A id="id579827" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnlook proplist â Print the names and values of versioned file and
            directory properties.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579854"></A><H2>Synopsis</H2><PRE class="programlisting">svnlook proplist REPOS_PATH [PATH_IN_REPOS]</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579867"></A><H2>Description</H2><P>List the properties of a path in the repository.  With
            <CODE class="option">--verbose</CODE>, show the property values too.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579881"></A><H2>Alternate names</H2><P><SPAN class="command"><STRONG>pl</STRONG></SPAN>, <SPAN class="command"><STRONG>plist</STRONG></SPAN></P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579900"></A><H2>Options</H2><PRE class="screen">--revision (-r) REV
--revprop
--transaction (-t) TXN
--verbose (-v)
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579912"></A><H2>Examples</H2><P>This shows the names of properties set on the file
            <CODE class="filename">/trunk/README</CODE> in the
            <CODE class="literal">HEAD</CODE> revision:</P><PRE class="screen">$ svnlook proplist /var/svn/repos /trunk/README
  original-author
  svn:mime-type
</PRE><P>This is the same command as in the preceding example,
            but this time showing the property values as well:</P><PRE class="screen">$ svnlook --verbose proplist /var/svn/repos /trunk/README
  original-author : harry
  svn:mime-type : text/plain
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svnlook.c.tree"></A><DIV class="titlepage"></DIV><A id="id579959" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnlook tree â Print the tree.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579984"></A><H2>Synopsis</H2><PRE class="programlisting">svnlook tree REPOS_PATH [PATH_IN_REPOS]</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id579997"></A><H2>Description</H2><P>Print the tree, starting at
            <EM class="replaceable"><CODE>PATH_IN_REPOS</CODE></EM> (if supplied; at
            the root of the tree otherwise), optionally showing node
            revision IDs.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id580012"></A><H2>Options</H2><PRE class="screen">--full-paths
--non-recursive (-N)
--revision (-r) REV
--show-ids
--transaction (-t) TXN
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id580025"></A><H2>Example</H2><P>This shows the tree output (with nodeIDs) for revision
            13 in our sample repository:</P><PRE class="screen">$ svnlook tree -r 13 /var/svn/repos --show-ids
/ &lt;0.0.r13/811&gt;
 trunk/ &lt;1.0.r9/551&gt;
  button.c &lt;2.0.r9/238&gt;
  Makefile &lt;3.0.r7/41&gt;
  integer.c &lt;4.0.r6/98&gt;
 branches/ &lt;5.0.r13/593&gt;
  bookstore/ &lt;1.1.r13/390&gt;
   button.c &lt;2.1.r12/85&gt;
   Makefile &lt;3.0.r7/41&gt;
   integer.c &lt;4.1.r13/109&gt;
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svnlook.c.uuid"></A><DIV class="titlepage"></DIV><A id="id580052" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnlook uuid â Print the repository's
          <CODE class="literal">UUID</CODE>.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id580084"></A><H2>Synopsis</H2><PRE class="programlisting">svnlook uuid REPOS_PATH</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id580096"></A><H2>Description</H2><P>Print the <CODE class="literal">UUID</CODE> for the repository.
            The <CODE class="literal">UUID</CODE> is the repository's
            <SPAN class="emphasis"><EM>u</EM></SPAN>niversal <SPAN class="emphasis"><EM>u</EM></SPAN>nique
            <SPAN class="emphasis"><EM>id</EM></SPAN>entifier.  The Subversion client
            uses this identifier to differentiate between one
            repository and another.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id580130"></A><H2>Options</H2><P>None</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id580140"></A><H2>Examples</H2><PRE class="screen">$ svnlook uuid /var/svn/repos
e7fe1b91-8cd5-0310-98dd-2f12e793c5e8
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svnlook.c.youngest"></A><DIV class="titlepage"></DIV><A id="id580161" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnlook youngest â Print the youngest revision number.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id580187"></A><H2>Synopsis</H2><PRE class="programlisting">svnlook youngest REPOS_PATH</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id580199"></A><H2>Description</H2><P>Print the youngest revision number of a repository.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id580210"></A><H2>Options</H2><P>None</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id580220"></A><H2>Examples</H2><P>This shows the youngest revision of our sample
          repository:</P><PRE class="screen">$ svnlook youngest /var/svn/repos/ 
42
</PRE></DIV></DIV></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.ref.svnsync"></A>svnsync</H2></DIV></DIV></DIV><P><SPAN class="command"><STRONG>svnsync</STRONG></SPAN> is the Subversion remote
      repository mirroring tool.  Put simply, it allows you to replay
      the revisions of one repository into another one.</P><P>In any mirroring scenario, there are two repositories: the
      source repository, and the mirror (or â<SPAN class="quote">sink</SPAN>â)
      repository.  The source repository is the repository from which
      <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> pulls revisions.  The mirror
      repository is the destination for the revisions pulled from the
      source repository.  Each of the repositories may be local or
      remoteâthey are only ever addressed by their URLs.</P><P>The <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> process requires only read
      access to the source repository; it never attempts to modify it.
      But obviously, <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> requires both read and
      write access to the mirror repository.</P><DIV class="warning" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Warning</H3><P><SPAN class="command"><STRONG>svnsync</STRONG></SPAN> is very sensitive to changes
        made in the mirror repository that weren't made as part of a
        mirroring operation.  To prevent this from happening, it's
        best if the <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> process is the only
        process permitted to modify the mirror repository.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.ref.svnsync.sw"></A>svnsync Options</H3></DIV></DIV></DIV><P>Options in <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> are global, just
        as they are in <SPAN class="command"><STRONG>svn</STRONG></SPAN> and
        <SPAN class="command"><STRONG>svnadmin</STRONG></SPAN>:</P><DIV class="variablelist"><DL><DT><SPAN class="term"><CODE class="option">--config-dir</CODE>
            <EM class="replaceable"><CODE>DIR</CODE></EM></SPAN></DT><DD><P>Instructs Subversion to read configuration
              information from the specified directory instead of the
              default location (<CODE class="filename">.subversion</CODE> in
              the user's home directory).</P></DD><DT><SPAN class="term"><CODE class="option">--no-auth-cache</CODE></SPAN></DT><DD><P>Prevents caching of authentication information
              (e.g., username and password) in the Subversion
              runtime configuration directories.</P></DD><DT><SPAN class="term"><CODE class="option">--non-interactive</CODE></SPAN></DT><DD><P>In the case of an authentication failure or
              insufficient credentials, prevents prompting for
              credentials (e.g., username or password).  This is useful
              if you're running Subversion inside an automated
              script and it's more appropriate to have Subversion fail
              than to prompt for more information.</P></DD><DT><SPAN class="term"><CODE class="option">--quiet</CODE> (<CODE class="option">-q</CODE>)</SPAN></DT><DD><P>Requests that the client print only essential
              information while performing an operation.</P></DD><DT><SPAN class="term"><CODE class="option">--source-password</CODE>
            <EM class="replaceable"><CODE>PASSWD</CODE></EM></SPAN></DT><DD><P>Specifies the password for the Subversion server
              from which you are syncing.  If not provided, or if
              incorrect, Subversion will prompt you for this
              information as needed.</P></DD><DT><SPAN class="term"><CODE class="option">--source-username</CODE>
            <EM class="replaceable"><CODE>NAME</CODE></EM></SPAN></DT><DD><P>Specifies the username for the Subversion server
              from which you are syncing.  If not provided, or if
              incorrect, Subversion will prompt you for this
              information as needed.</P></DD><DT><SPAN class="term"><CODE class="option">--sync-password</CODE>
            <EM class="replaceable"><CODE>PASSWD</CODE></EM></SPAN></DT><DD><P>Specifies the password for the Subversion server to
              which you are syncing.  If not provided, or if
              incorrect, Subversion will prompt you for this
              information as needed.</P></DD><DT><SPAN class="term"><CODE class="option">--sync-username</CODE>
            <EM class="replaceable"><CODE>NAME</CODE></EM></SPAN></DT><DD><P>Specifies the username for the Subversion server to
              which you are syncing.  If not provided, or if
              incorrect, Subversion will prompt you for this
              information as needed.</P></DD></DL></DIV></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.ref.svnsync.c"></A>svnsync Subcommands</H3></DIV></DIV></DIV><P>Here are the various subcommands
        for the <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> program.</P><DIV class="refentry" lang="en" xml:lang="en"><A id="svn.ref.svnsync.c.copy-revprops"></A><DIV class="titlepage"></DIV><A id="id580542" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnsync copy-revprops â Copy all revision properties for a particular
            revision (or range of revisions) from the source
            repository to the mirror repository.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id580569"></A><H2>Synopsis</H2><PRE class="programlisting">svnsync copy-revprops DEST_URL [REV[:REV2]</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id580582"></A><H2>Description</H2><P>Because Subversion revision properties can be changed
            at any time, it's possible that the properties for some
            revision might be changed after that revision has already
            been synchronized to another repository.  Because the
            <SPAN class="command"><STRONG>svnsync synchronize</STRONG></SPAN> command operates
            only on the range of revisions that have not yet been
            synchronized, it won't notice a revision property change
            outside that range.  Left as is, this causes a deviation
            in the values of that revision's properties between the
            source and mirror repositories.  <SPAN class="command"><STRONG>svnsync
            copy-revprops</STRONG></SPAN> is the answer to this problem.
            Use it to resynchronize the revision properties for a
            particular revision or range of revisions.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id580610"></A><H2>Alternate name</H2><P>None</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id580620"></A><H2>Options</H2><PRE class="screen">--config-dir DIR
--no-auth-cache
--non-interactive
--quiet (-q)
--source-password ARG
--source-username ARG
--sync-password ARG
--sync-username ARG
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id580633"></A><H2>Examples</H2><P>Resynchronize revision properties for a single revision:</P><PRE class="screen">$ svnsync copy-revprops file:///var/svn/repos-mirror 6
Copied properties for revision 6.
$
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svnsync.c.help"></A><DIV class="titlepage"></DIV><A id="id580657" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnsync help â Help!</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id580682"></A><H2>Synopsis</H2><PRE class="programlisting">svnsync help</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id580695"></A><H2>Description</H2><P>This subcommand is useful when you're trapped in a
            foreign prison with neither a Net connection nor a copy of
            this book, but you do have a local Wi-Fi network running
            and you'd like to sync a copy of your repository over to
            the backup server that Ira The Knife is running over in
            cell block D.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id580708"></A><H2>Alternate name</H2><P>None</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id580718"></A><H2>Options</H2><P>None</P></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svnsync.c.init"></A><DIV class="titlepage"></DIV><A id="id580735" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnsync initialize â Initialize a mirror repository for
            synchronization from the source repository.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id580762"></A><H2>Synopsis</H2><PRE class="programlisting">svnsync initialize MIRROR_URL SOURCE_URL</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id580774"></A><H2>Description</H2><P><SPAN class="command"><STRONG>svnsync initialize</STRONG></SPAN> verifies that a
            repository meets the requirements of a new mirror
            repositoryâthat it has no previous existing version
            history and that it allows revision property
            modificationsâand records the initial administrative
            information that associates the mirror repository with
            the source repository.  This is the first
            <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> operation you run on a would-be
            mirror repository.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id580799"></A><H2>Alternate name</H2><P><SPAN class="command"><STRONG>init</STRONG></SPAN></P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id580812"></A><H2>Options</H2><PRE class="screen">--config-dir DIR
--no-auth-cache
--non-interactive
--quiet (-q)
--source-password ARG
--source-username ARG
--sync-password ARG
--sync-username ARG
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id580826"></A><H2>Examples</H2><P>Fail to initialize a mirror repository due to
            inability to modify revision properties:</P><PRE class="screen">$ svnsync initialize file:///var/svn/repos-mirror http://svn.example.com/repos
svnsync: Repository has not been enabled to accept revision propchanges;
ask the administrator to create a pre-revprop-change hook
$
</PRE><P>Initialize a repository as a mirror, having already
            created a <CODE class="literal">pre-revprop-change</CODE> hook that
            permits all revision property changes:</P><PRE class="screen">$ svnsync initialize file:///var/svn/repos-mirror http://svn.example.com/repos
Copied properties for revision 0.
$
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svnsync.c.sync"></A><DIV class="titlepage"></DIV><A id="id580868" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnsync synchronize â Transfer all pending revisions from the source
            repository to the mirror repository.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id580894"></A><H2>Synopsis</H2><PRE class="programlisting">svnsync synchronize DEST_URL</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id580907"></A><H2>Description</H2><P>The <SPAN class="command"><STRONG>svnsync synchronize</STRONG></SPAN> command
            does all the heavy lifting of a repository mirroring
            operation.  After consulting with the mirror repository to
            see which revisions have already been copied into it, it
            then begins to copy any not-yet-mirrored revisions from
            the source repository.</P><P><SPAN class="command"><STRONG>svnsync synchronize</STRONG></SPAN> can be
            gracefully canceled and restarted.</P><P>As of Subversion 1.5, you can limit <SPAN class="command"><STRONG>svnsync</STRONG></SPAN> to a
            subdirectory of the source repository by specifying the
            subdirectory as part of
            the <EM class="replaceable"><CODE>SOURCE_URL</CODE></EM>.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id580948"></A><H2>Alternate name</H2><P><SPAN class="command"><STRONG>sync</STRONG></SPAN></P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id580961"></A><H2>Options</H2><PRE class="screen">--config-dir DIR
--no-auth-cache
--non-interactive
--quiet (-q)
--source-password ARG
--source-username ARG
--sync-password ARG
--sync-username ARG
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id580975"></A><H2>Examples</H2><P>Copy unsynchronized revisions from the source
            repository to the mirror repository:</P><PRE class="screen">$ svnsync synchronize file:///var/svn/repos-mirror
Committed revision 1.
Copied properties for revision 1.
Committed revision 2.
Copied properties for revision 2.
Committed revision 3.
Copied properties for revision 3.
â¦
Committed revision 45.
Copied properties for revision 45.
Committed revision 46.
Copied properties for revision 46.
Committed revision 47.
Copied properties for revision 47.
$
</PRE></DIV></DIV></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.ref.svnserve"></A>svnserve</H2></DIV></DIV></DIV><P><SPAN class="command"><STRONG>svnserve</STRONG></SPAN> allows access to Subversion
      repositories using Subversion's custom network protocol.</P><P>You can run <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> as a standalone
      server process (for clients that are using the
      <CODE class="literal">svn://</CODE> access method); you can have a daemon
      such as <SPAN class="command"><STRONG>inetd</STRONG></SPAN> or <SPAN class="command"><STRONG>xinetd</STRONG></SPAN>
      launch it for you on demand (also for
      <CODE class="literal">svn://</CODE>), or you can have
      <SPAN class="command"><STRONG>sshd</STRONG></SPAN> launch it on demand for the
      <CODE class="literal">svn+ssh://</CODE> access method.</P><P>Regardless of the access method, once the client has
      selected a repository by transmitting its URL,
      <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> reads a file named
      <CODE class="filename">conf/svnserve.conf</CODE> in the repository
      directory to determine repository-specific settings such as
      what authentication database to use and what authorization
      policies to apply.  See <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve" title="svnserve, a Custom Server">the section called âsvnserve, a Custom Serverâ</A> for details of the
      <CODE class="filename">svnserve.conf</CODE> file.</P><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.ref.svnserve.sw"></A>svnserve Options</H3></DIV></DIV></DIV><P>Unlike the previous commands we've
        described, <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> has no
        subcommandsâit is controlled exclusively by
        options.</P><DIV class="variablelist"><DL><DT><SPAN class="term"><CODE class="option">--daemon</CODE> (<CODE class="option">-d</CODE>)</SPAN></DT><DD><P>Causes <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> to run in daemon
              mode.  <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> backgrounds itself
              and accepts and serves TCP/IP connections on
              the <CODE class="literal">svn</CODE> port (3690, by
              default).</P></DD><DT><SPAN class="term"><CODE class="option">--foreground</CODE></SPAN></DT><DD><P>When used together with <CODE class="option">-d</CODE>,
              causes <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> to stay in the
              foreground.  This is mainly useful for debugging.</P></DD><DT><SPAN class="term"><CODE class="option">--inetd</CODE> (<CODE class="option">-i</CODE>)</SPAN></DT><DD><P>Causes <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> to use the
              <CODE class="filename">stdin</CODE> and <CODE class="filename">stdout</CODE> file descriptors, as is appropriate for a
              daemon running out of <SPAN class="command"><STRONG>inetd</STRONG></SPAN>.</P></DD><DT><SPAN class="term"><CODE class="option">--help</CODE> (<CODE class="option">-h</CODE>)</SPAN></DT><DD><P>Displays a usage summary and exits.</P></DD><DT><SPAN class="term"><CODE class="option">--listen-host</CODE>=<EM class="replaceable"><CODE>HOST</CODE></EM></SPAN></DT><DD><P>Causes <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> to listen on the
              interface specified by <EM class="replaceable"><CODE>HOST</CODE></EM>,
              which may be either a hostname or an IP address.</P></DD><DT><SPAN class="term"><CODE class="option">--listen-once</CODE> (<CODE class="option">-X</CODE>)</SPAN></DT><DD><P>Causes <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> to accept one
              connection on the <CODE class="literal">svn</CODE> port, serve it,
              and exit.  This option is mainly useful for
              debugging.</P></DD><DT><SPAN class="term"><CODE class="option">--listen-port</CODE>=<EM class="replaceable"><CODE>PORT</CODE></EM></SPAN></DT><DD><P>Causes <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> to listen on
              <EM class="replaceable"><CODE>PORT</CODE></EM> when run in daemon mode.
              (FreeBSD daemons listen only on tcp6 by defaultâthis
              option tells them to also listen on tcp4.)</P></DD><DT><SPAN class="term"><CODE class="option">--pid-file <EM class="replaceable"><CODE>FILENAME</CODE></EM></CODE></SPAN></DT><DD><P>Causes <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> to write its
              process ID to <EM class="replaceable"><CODE>FILENAME</CODE></EM>, which
              must be writable by the user under
              which <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> is running.</P></DD><DT><SPAN class="term"><CODE class="option">--root</CODE>=<EM class="replaceable"><CODE>ROOT</CODE></EM>
          (<CODE class="option">-r</CODE>=<EM class="replaceable"><CODE>ROOT</CODE></EM>)</SPAN></DT><DD><P>Sets the virtual root for repositories served by
              <SPAN class="command"><STRONG>svnserve</STRONG></SPAN>.  The pathname in URLs
              provided by the client will be interpreted relative to
              this root and will not be allowed to escape this
              root.</P></DD><DT><SPAN class="term"><CODE class="option">--threads</CODE> (<CODE class="option">-T</CODE>)</SPAN></DT><DD><P>When running in daemon mode, causes
              <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> to spawn a thread instead of
              a process for each connection (e.g., for when running on
              Windows).  The <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> process still
              backgrounds itself at startup time.</P></DD><DT><SPAN class="term"><CODE class="option">--tunnel</CODE> (<CODE class="option">-t</CODE>)</SPAN></DT><DD><P>Causes <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> to run in tunnel
              mode, which is just like the <SPAN class="command"><STRONG>inetd</STRONG></SPAN>
              mode of operation (both modes serve one connection over
              <CODE class="filename">stdin</CODE>/<CODE class="filename">stdout</CODE>, and then exit), except that the connection
              is considered to be preauthenticated with the username
              of the current UID.  This flag is automatically passed
              for you by the client when running over a tunnel agent
              such as <SPAN class="command"><STRONG>ssh</STRONG></SPAN>.  That means there's
              rarely any need for <SPAN class="emphasis"><EM>you</EM></SPAN> to pass
              this option to <SPAN class="command"><STRONG>svnserve</STRONG></SPAN>.  So, if you
              find yourself
              typing <CODE class="literal">svnserve --tunnel</CODE> on the
              command line and wondering what to do next, see
              <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.svnserve.sshauth" title="Tunneling over SSH">the section called âTunneling over SSHâ</A>.
              </P></DD><DT><SPAN class="term"><CODE class="option">--tunnel-user NAME</CODE></SPAN></DT><DD><P>Used in conjunction with the <CODE class="option">--tunnel</CODE>
              option, tells <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> to assume that
              <EM class="replaceable"><CODE>NAME</CODE></EM> is the authenticated
              user, rather than the UID of the <SPAN class="command"><STRONG>svnserve</STRONG></SPAN>
              process.  This is useful for users wishing to share a single
              system account over SSH, but to maintain separate commit
              identities.</P></DD><DT><SPAN class="term"><CODE class="option">--version</CODE></SPAN></DT><DD><P>Displays version information and a list of repository
            backend modules available, and then exits.</P></DD></DL></DIV></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.ref.svndumpfilter"></A>svndumpfilter</H2></DIV></DIV></DIV><P><SPAN class="command"><STRONG>svndumpfilter</STRONG></SPAN> is a command-line utility
      for removing history from a Subversion dump file by either
      excluding or including paths beginning with one or more named
      prefixes.  For details, see
      <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.maint.tk.svndumpfilter" title="svndumpfilter">the section called âsvndumpfilterâ</A>.</P><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.ref.svndumpfilter.options"></A>svndumpfilter Options</H3></DIV></DIV></DIV><P>Options in <SPAN class="command"><STRONG>svndumpfilter</STRONG></SPAN> are global, just
        as they are in <SPAN class="command"><STRONG>svn</STRONG></SPAN> and
        <SPAN class="command"><STRONG>svnadmin</STRONG></SPAN>:</P><DIV class="variablelist"><DL><DT><SPAN class="term"><CODE class="option">--drop-empty-revs</CODE></SPAN></DT><DD><P>If filtering causes any revision to be empty (i.e.,
              causes no change to the repository), removes these
              revisions from the final dump file.</P></DD><DT><SPAN class="term"><CODE class="option">--renumber-revs</CODE></SPAN></DT><DD><P>Renumbers revisions that remain after
              filtering.</P></DD><DT><SPAN class="term"><CODE class="option">--skip-missing-merge-sources</CODE></SPAN></DT><DD><P>Skips merge sources that have been removed as part of
              the filtering.  Without this
              option, <SPAN class="command"><STRONG>svndumpfilter</STRONG></SPAN> will exit with
              an error if the merge source for a retained path is
              removed by filtering.</P></DD><DT><SPAN class="term"><CODE class="option">--preserve-revprops</CODE></SPAN></DT><DD><P>If all nodes in a revision are removed by filtering
              and <CODE class="option">--drop-empty-revs</CODE> is not passed,
              the default behavior of <SPAN class="command"><STRONG>svndumpfilter</STRONG></SPAN>
              is to remove all revision properties except for the date
              and the log message (which will merely indicate that the
              revision is empty).  Passing this option will preserve
              existing revision properties (which may or may not make
              sense since the related content is no longer present in
              the dump file).</P></DD><DT><SPAN class="term"><CODE class="option">--quiet</CODE></SPAN></DT><DD><P>Does not display filtering statistics.</P></DD></DL></DIV></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.ref.svndumpfilter.c"></A>svndumpfilter Subcommands</H3></DIV></DIV></DIV><P>Here are the various subcommands
        for the <SPAN class="command"><STRONG>svndumpfilter</STRONG></SPAN> program.</P><DIV class="refentry" lang="en" xml:lang="en"><A id="svn.ref.svndumpfilter.commands.c.exclude"></A><DIV class="titlepage"></DIV><A id="id581764" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svndumpfilter exclude â Filter out nodes with given prefixes from the dump stream.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id581790"></A><H2>Synopsis</H2><PRE class="programlisting">svndumpfilter exclude PATH_PREFIX...</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id581802"></A><H2>Description</H2><P>This can be used to exclude nodes that begin with one or
            more <EM class="replaceable"><CODE>PATH_PREFIX</CODE></EM>es from a
            filtered dump file.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id581816"></A><H2>Options</H2><PRE class="screen">--drop-empty-revs
--preserve-revprops
--quiet
--renumber-revs
--skip-missing-merge-sources
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id581829"></A><H2>Examples</H2><P>If we have a dump file from a repository with a number of
          different picnic-related directories in it, but we want to keep
          everything <SPAN class="emphasis"><EM>except</EM></SPAN>
          the <CODE class="filename">sandwiches</CODE> part of the repository,
          we'll exclude only that path:</P><PRE class="screen">$ svndumpfilter exclude sandwiches &lt; dumpfile &gt; filtered-dumpfile
Excluding prefixes:
   '/sandwiches'

Revision 0 committed as 0.
Revision 1 committed as 1.
Revision 2 committed as 2.
Revision 3 committed as 3.
Revision 4 committed as 4.

Dropped 1 node(s):
   '/sandwiches'
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svndumpfilter.commands.c.include"></A><DIV class="titlepage"></DIV><A id="id581870" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svndumpfilter include â Filter out nodes without given prefixes from
            dump stream.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id581896"></A><H2>Synopsis</H2><PRE class="programlisting">svndumpfilter include PATH_PREFIX...</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id581908"></A><H2>Description</H2><P>Can be used to include nodes that begin with one or
            more <EM class="replaceable"><CODE>PATH_PREFIX</CODE></EM>es in a
            filtered dump file (thus excluding all other paths).</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id581923"></A><H2>Options</H2><PRE class="screen">--drop-empty-revs
--preserve-revprops
--quiet
--renumber-revs
--skip-missing-merge-sources
</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id581936"></A><H2>Example</H2><P>If we have a dump file from a repository with a number of
          different picnic-related directories in it, but want to
          keep only the <CODE class="filename">sandwiches</CODE> part of the
          repository, we'll include only that path:</P><PRE class="screen">$ svndumpfilter include sandwiches &lt; dumpfile &gt; filtered-dumpfile
Including prefixes:
   '/sandwiches'

Revision 0 committed as 0.
Revision 1 committed as 1.
Revision 2 committed as 2.
Revision 3 committed as 3.
Revision 4 committed as 4.

Dropped 3 node(s):
   '/drinks'
   '/snacks'
   '/supplies'
</PRE></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.svndumpfilter.commands.c.help"></A><DIV class="titlepage"></DIV><A id="id581972" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svndumpfilter help â Help!.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id581998"></A><H2>Synopsis</H2><PRE class="programlisting">svndumpfilter help [SUBCOMMAND...]</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id582010"></A><H2>Description</H2><P>Displays the help message
            for <SPAN class="command"><STRONG>svndumpfilter</STRONG></SPAN>.  Unlike other help
            commands documented in this chapter, there is no witty
            commentary for this help command.  The authors of this
            book deeply regret the omission.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id582028"></A><H2>Options</H2><P>None</P></DIV></DIV></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.ref.svnversion"></A>svnversion</H2></DIV></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><A id="svn.ref.svnversion.re"></A><DIV class="titlepage"></DIV><A id="id582066" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>svnversion â Summarize the local revision(s) of a working
                    copy.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="svn.ref.svnversion.re.syn"></A><H2>Synopsis</H2><PRE class="programlisting">svnversion [OPTIONS] [WC_PATH [TRAIL_URL]]</PRE></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="svn.ref.svnversion.re.desc"></A><H2>Description</H2><P><SPAN class="command"><STRONG>svnversion</STRONG></SPAN> is a program for
          summarizing the revision mixture of a working copy.  The
          resultant revision number, or revision range, is written to
          standard output.</P><P>It's common to use this output in your build process
          when defining the version number of your program.</P><P><EM class="replaceable"><CODE>TRAIL_URL</CODE></EM>, if present, is the
          trailing portion of the URL used to determine whether
          <EM class="replaceable"><CODE>WC_PATH</CODE></EM> itself is switched
          (detection of switches within
          <EM class="replaceable"><CODE>WC_PATH</CODE></EM> does not rely on
          <EM class="replaceable"><CODE>TRAIL_URL</CODE></EM>).</P><P>When <EM class="replaceable"><CODE>WC_PATH</CODE></EM> is not defined,
          the current directory will be used as the working copy path.
          <EM class="replaceable"><CODE>TRAIL_URL</CODE></EM> cannot be defined if
          <EM class="replaceable"><CODE>WC_PATH</CODE></EM> is not explicitly
          given.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="svn.ref.svnversion.re.sw"></A><H2>Options</H2><P>Like <SPAN class="command"><STRONG>svnserve</STRONG></SPAN>,
          <SPAN class="command"><STRONG>svnversion</STRONG></SPAN> has no subcommandsâonly
          options:</P><DIV class="variablelist"><DL><DT><SPAN class="term"><CODE class="option">--no-newline</CODE> (<CODE class="option">-n</CODE>)</SPAN></DT><DD><P>Omits the usual trailing newline from the output.</P></DD><DT><SPAN class="term"><CODE class="option">--committed</CODE> (<CODE class="option">-c</CODE>)</SPAN></DT><DD><P>Uses the last-changed revisions rather than the
              current (i.e., highest locally available) revisions.</P></DD><DT><SPAN class="term"><CODE class="option">--help</CODE> (<CODE class="option">-h</CODE>)</SPAN></DT><DD><P>Prints a help summary.</P></DD><DT><SPAN class="term"><CODE class="option">--version</CODE></SPAN></DT><DD><P>Prints the version of <SPAN class="command"><STRONG>svnversion</STRONG></SPAN>
              and exit with no error.</P></DD></DL></DIV></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="svn.ref.svnversion.re.examples"></A><H2>Examples</H2><P>If the working copy is all at the same revision (e.g.,
          immediately after an update), then that revision is
          printed out:</P><PRE class="screen">$ svnversion
4168
</PRE><P>You can add <EM class="replaceable"><CODE>TRAIL_URL</CODE></EM> to make
          sure the working copy is not switched from what you
          expect.  Note that the <EM class="replaceable"><CODE>WC_PATH</CODE></EM>
          is required in this command:</P><PRE class="screen">$ svnversion . /var/svn/trunk
4168
</PRE><P>For a mixed-revision working copy, the range of
          revisions present is printed:</P><PRE class="screen">$ svnversion
4123:4168
</PRE><P>If the working copy contains modifications, a trailing
          "M" is added:</P><PRE class="screen">$ svnversion
4168M
</PRE><P>If the working copy is switched, a trailing "S" is
          added:</P><PRE class="screen">$ svnversion
4168S
</PRE><P>Thus, here is a mixed-revision, switched working copy
          containing some local modifications:</P><PRE class="screen">$ svnversion
4212:4168MS
</PRE><P>If invoked on a directory that is not a working copy,
          <SPAN class="command"><STRONG>svnversion</STRONG></SPAN> assumes it is an exported
          working copy and prints "exported":</P><PRE class="screen">$ svnversion
exported
</PRE></DIV></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.ref.mod_dav_svn"></A>mod_dav_svn</H2></DIV></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><A id="svn.ref.mod_dav_svn.conf"></A><DIV class="titlepage"></DIV><DIV class="refnamediv"><H2>Name</H2><P>mod_dav_svn Configuration Directives â Apache configuration
        directives for serving Subversion repositories through the
        Apache HTTP Server.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="svn.ref.mod_dav_svn.conf.desc"></A><H2>Description</H2><P>This section briefly describes each Subversion
          Apache configuration directive.  For an in-depth
          description of configuring Apache with Subversion, see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd" title="httpd, the Apache HTTP Server">the section called âhttpd, the Apache HTTP Serverâ</A>.)</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="svn.ref.mod_dav_svn.conf.directives"></A><H2>Directives</H2><P>These are the <CODE class="filename">httpd.conf</CODE> directives
          that apply to <SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN>:</P><DIV class="variablelist"><DL><DT><SPAN class="term"><CODE class="literal">DAV svn</CODE></SPAN></DT><DD><P>Must be included in any
                <CODE class="literal">Directory</CODE> or
                <CODE class="literal">Location</CODE> block for a Subversion
                repository.  It tells <SPAN class="command"><STRONG>httpd</STRONG></SPAN> to use the Subversion
                backend for <CODE class="literal">mod_dav</CODE> to handle all
                requests.</P></DD><DT><SPAN class="term"><CODE class="literal">SVNAllowBulkUpdates On|Off</CODE></SPAN></DT><DD><P>Toggles support for all-inclusive
                responses to update-style <CODE class="literal">REPORT</CODE>
                requests.  Subversion clients use
                <CODE class="literal">REPORT</CODE> requests to get information
                about directory tree checkouts and updates from
                <SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN>.  They can ask the
                server to send that information in one of two ways:
                with the entirety of the tree's information in one
                massive response, or with a
                <EM class="firstterm">skelta</EM> (a skeletal
                representation of a tree delta) which contains just
                enough information for the client to know what
                <SPAN class="emphasis"><EM>additional</EM></SPAN> data to request from
                the server.  When this directive is included with a
                value of <CODE class="literal">Off</CODE>,
                <SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN> will only ever respond
                to these <CODE class="literal">REPORT</CODE> requests with
                skelta responses, regardless of the type of responses
                requested by the client.</P><P>Most folks won't need to use this directive at
                all.  It primarily exists for administrators who
                wishâfor security or auditing reasonsâto
                force Subversion clients to fetch individually all the
                files and directories needed for updates and
                checkouts, thus leaving an audit trail of
                <CODE class="literal">GET</CODE> and <CODE class="literal">PROPFIND</CODE>
                requests in Apache's logs.  The default value of this
                directive is <CODE class="literal">On</CODE>.</P></DD><DT><SPAN class="term"><CODE class="literal">SVNAutoversioning On|Off</CODE></SPAN></DT><DD><P>When its value is
                <CODE class="literal">On</CODE>, allows write requests from
                WebDAV clients to result in automatic commits.  A
                generic log message is auto-generated and attached to
                each revision.  If you enable autoversioning, you'll
                likely want to set <CODE class="literal">ModMimeUsePathInfo
                On</CODE> so that <CODE class="literal">mod_mime</CODE> can
                set <CODE class="literal">svn:mime-type</CODE> to the correct
                MIME type automatically (as best as
                <CODE class="literal">mod_mime</CODE> is able to, of course).
                For more information, see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.webdav" title="Appendix&nbsp;C.&nbsp;WebDAV and Autoversioning">Appendix&nbsp;C, <I>WebDAV and Autoversioning</I></A>.  The default value of this
                directive is <CODE class="literal">Off</CODE>.</P></DD><DT><SPAN class="term"><CODE class="literal">SVNPath
              <EM class="replaceable"><CODE>directory-path</CODE></EM></CODE></SPAN></DT><DD><P>Specifies the location in the
                filesystem for a Subversion repository's files.  In a
                configuration block for a Subversion repository,
                either this directive or
                <CODE class="literal">SVNParentPath</CODE> must be present, but
                not both.</P></DD><DT><SPAN class="term"><CODE class="literal">SVNSpecialURI
              <EM class="replaceable"><CODE>component</CODE></EM></CODE></SPAN></DT><DD><P>Specifies the URI component (namespace) for
                special Subversion resources.  The default is
                <CODE class="literal">!svn</CODE>, and most
                administrators will never use this directive.  Set
                this only if there is a pressing need to have a file
                named <CODE class="filename">!svn</CODE> in your repository.
                If you change this on a server already in use, it will
                break all of the outstanding working copies, and your
                users will hunt you down with pitchforks and flaming
                torches.</P></DD><DT><SPAN class="term"><CODE class="literal">SVNReposName
              <EM class="replaceable"><CODE>name</CODE></EM></CODE></SPAN></DT><DD><P>Specifies the name of a Subversion repository for
                use in <CODE class="literal">HTTP GET</CODE> responses.  This
                value will be prepended to the title of all directory
                listings (which are served when you navigate to a
                Subversion repository with a web browser).  This
                directive is optional.</P></DD><DT><SPAN class="term"><CODE class="literal">SVNIndexXSLT
              <EM class="replaceable"><CODE>directory-path</CODE></EM></CODE></SPAN></DT><DD><P>Specifies the URI of an XSL transformation for
                directory indexes.  This directive is optional.</P></DD><DT><SPAN class="term"><CODE class="literal">SVNParentPath
              <EM class="replaceable"><CODE>directory-path</CODE></EM></CODE></SPAN></DT><DD><P>Specifies the location in the filesystem of a
                parent directory whose child directories are
                Subversion repositories.  In a configuration block for
                a Subversion repository, either this directive or
                <CODE class="literal">SVNPath</CODE> must be present, but not
                both.</P></DD><DT><SPAN class="term"><CODE class="literal">SVNPathAuthz On|Off|short_circuit</CODE></SPAN></DT><DD><P>Controls path-based authorization by enabling
                subrequests (<CODE class="literal">On</CODE>), disabling
                subrequests (<CODE class="literal">Off</CODE>; see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.authz.pathauthzoff" title="Disabling path-based checks">the section called âDisabling path-based checksâ</A>),
                or querying <SPAN class="command"><STRONG>mod_authz_svn</STRONG></SPAN> directly
                (<CODE class="literal">short_circuit</CODE>).  The default
                value of this directive is <CODE class="literal">On</CODE>.</P></DD><DT><SPAN class="term"><CODE class="literal">SVNListParentPath On|Off</CODE></SPAN></DT><DD><P>When set to <CODE class="literal">On</CODE>, allows
                a <CODE class="literal">GET</CODE>
                of <CODE class="literal">SVNParentPath</CODE>, which results in
                a listing of all repositories under that path.  The
                default setting is
                <CODE class="literal">Off</CODE>.</P></DD><DT><SPAN class="term"><CODE class="literal">SVNMasterURI
              <EM class="replaceable"><CODE>url</CODE></EM></CODE></SPAN></DT><DD><P>Specifies a URI to the master Subversion
                repository (used for a write-through proxy).</P></DD><DT><SPAN class="term"><CODE class="literal">SVNActivitiesDB
              <EM class="replaceable"><CODE>directory-path</CODE></EM></CODE></SPAN></DT><DD><P>Specifies the location in the filesystem where the
                activities database should be stored.  By default,
                <SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN> creates and uses a directory in the
                repository
                called <CODE class="filename">dav/activities.d</CODE>.  The
                path specified with this option must be an absolute
                path.</P><P>If specified for
                an <CODE class="literal">SVNParentPath</CODE> area, <SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN>
                appends the basename of the repository to the path
                specified here.  For example:</P><PRE class="screen">&lt;Location /svn&gt;
  DAV svn

  # any "/svn/foo" URL will map to a repository in 
  # /net/svn.nfs/repositories/foo
  SVNParentPath         "/net/svn.nfs/repositories"

  # any "/svn/foo" URL will map to an activities db in
  #  /var/db/svn/activities/foo
  SVNActivitiesDB       "/var/db/svn/activities"
&lt;/Location&gt;
</PRE></DD></DL></DIV></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="svn.ref.mod_dav_svn.conf.logging"></A><H2>High-level logging</H2><P>This is a list of Subversion action log messages
          produced by Apache's high-level logging mechanism, followed
          by an example of the log message.  See <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.httpd.extra.logging" title="Apache logging">the section called âApache loggingâ</A> for details
          on logging.</P><DIV class="variablelist"><DL><DT><SPAN class="term">Checkout or export</SPAN></DT><DD><P><CODE class="literal">checkout-or-export /path r62
            depth=infinity</CODE></P></DD><DT><SPAN class="term">Commit</SPAN></DT><DD><P><CODE class="literal">commit harry r100</CODE></P></DD><DT><SPAN class="term">Diffs</SPAN></DT><DD><P><CODE class="literal">diff /path r15:20 depth=infinity ignore-ancestry</CODE></P><P><CODE class="literal">diff /path1@15 /path2@20 depth=infinity ignore-ancestry</CODE></P></DD><DT><SPAN class="term">Fetch a directory</SPAN></DT><DD><P><CODE class="literal">get-dir /trunk r17 text</CODE></P></DD><DT><SPAN class="term">Fetch a file</SPAN></DT><DD><P><CODE class="literal">get-file /path r20 props</CODE></P></DD><DT><SPAN class="term">Fetch a file revision</SPAN></DT><DD><P><CODE class="literal">get-file-revs /path r12:15 include-merged-revisions</CODE></P></DD><DT><SPAN class="term">Fetch merge information</SPAN></DT><DD><P><CODE class="literal">get-mergeinfo (/path1 /path2)</CODE></P></DD><DT><SPAN class="term">Lock</SPAN></DT><DD><P><CODE class="literal">lock /path steal</CODE></P></DD><DT><SPAN class="term">Log</SPAN></DT><DD><P><CODE class="literal">log (/path1,/path2,/path3) r20:90
            discover-changed-paths revprops=()</CODE></P></DD><DT><SPAN class="term">Replay revisions (svnsync)</SPAN></DT><DD><P><CODE class="literal">replay /path r19</CODE></P></DD><DT><SPAN class="term">Revision property change</SPAN></DT><DD><P><CODE class="literal">change-rev-prop r50
            propertyname</CODE></P></DD><DT><SPAN class="term">Revision property list</SPAN></DT><DD><P><CODE class="literal">rev-proplist r34</CODE></P></DD><DT><SPAN class="term">Status</SPAN></DT><DD><P><CODE class="literal">status /path r62
                depth=infinity</CODE></P></DD><DT><SPAN class="term">Switch</SPAN></DT><DD><P><CODE class="literal">switch /pathA /pathB@50 depth=infinity</CODE></P></DD><DT><SPAN class="term">Unlock</SPAN></DT><DD><P><CODE class="literal">unlock /path break</CODE></P></DD><DT><SPAN class="term">Update</SPAN></DT><DD><P><CODE class="literal">update /path r17 send-copyfrom-args</CODE></P></DD></DL></DIV></DIV></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.ref.mod_authz_svn"></A>mod_authz_svn</H2></DIV></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><A id="svn.ref.mod_authz_svn.conf"></A><DIV class="titlepage"></DIV><DIV class="refnamediv"><H2>Name</H2><P>mod_authz_svn Configuration Directives â Apache configuration directives for configuring
        path-based authorization for Subversion repositories served
        through the Apache HTTP Server.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="svn.ref.mod_authz_svn.conf.desc"></A><H2>Description</H2><P>This section briefly describes each Apache configuration
          directive offered by <SPAN class="command"><STRONG>mod_authz_svn</STRONG></SPAN>.  For
          an in-depth description of using path-based authorization in
          Subversion, see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.pathbasedauthz" title="Path-Based Authorization">the section called âPath-Based Authorizationâ</A>.)</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="svn.ref.mod_authz_svn.conf.directives"></A><H2>Directives</H2><P>These are the <CODE class="filename">httpd.conf</CODE> directives
          that apply to <SPAN class="command"><STRONG>mod_authz_svn</STRONG></SPAN>:</P><DIV class="variablelist"><DL><DT><SPAN class="term"><CODE class="literal">AuthzSVNAccessFile
              <EM class="replaceable"><CODE>file-path</CODE></EM></CODE></SPAN></DT><DD><P>Consult <EM class="replaceable"><CODE>file-path</CODE></EM> for
                access rules describing the permissions for paths in
                Subversion repository.</P></DD><DT><SPAN class="term"><CODE class="literal">AuthzSVNAnonymous On|Off</CODE></SPAN></DT><DD><P>Set to <CODE class="literal">Off</CODE> to disable two
                special-case behaviours of this module: interaction
                with the <CODE class="literal">Satisfy Any</CODE> directive and
                enforcement of the authorization policy even when no
                <CODE class="literal">Require</CODE> directives are present.
                The default value of this directive is
                <CODE class="literal">On</CODE>.</P></DD><DT><SPAN class="term"><CODE class="literal">AuthzSVNAuthoritative On|Off</CODE></SPAN></DT><DD><P>Set to <CODE class="literal">Off</CODE> to allow access
                control to be passed along to lower modules.  The
                default value of this directive is
                <CODE class="literal">On</CODE>.</P></DD><DT><SPAN class="term"><CODE class="literal">AuthzSVNNoAuthWhenAnonymousAllowed On|Off</CODE></SPAN></DT><DD><P>Set to <CODE class="literal">On</CODE> to suppress
                authentication and authorization for requests which
                anonymous users are allowed to perform.  The default
                value of this directive is
                <CODE class="literal">On</CODE>.</P></DD></DL></DIV></DIV></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.ref.properties"></A>Subversion Properties</H2></DIV></DIV></DIV><P>Subversion allows users to invent arbitrarily named
      versioned properties on files and directories, as well as
      unversioned properties on revisions.  The only restriction is on
      properties whose names begin with <CODE class="literal">svn:</CODE> (those
      are reserved for Subversion's own use).  While these properties
      may be set by users to control Subversion's behavior, users may
      not invent new <CODE class="literal">svn:</CODE> properties.</P><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.ref.properties.versioned-props"></A>Versioned Properties</H3></DIV></DIV></DIV><P>These are the versioned properties that Subversion reserves
        for its own use:</P><DIV class="variablelist"><DL><DT><SPAN class="term"><CODE class="literal">svn:executable</CODE></SPAN></DT><DD><P>If present on a file, the client will make the
              file executable in Unix-hosted working copies.  See
              <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.special.executable" title="File Executability">the section called âFile Executabilityâ</A>.</P></DD><DT><SPAN class="term"><CODE class="literal">svn:mime-type</CODE></SPAN></DT><DD><P>If present on a file, the value indicates the
              file's MIME type.  This allows the client to decide
              whether line-based contextual merging is safe to
              perform during updates, and can also affect how the
              file behaves when fetched via a web browser.  See
              <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.special.mime-type" title="File Content Type">the section called âFile Content Typeâ</A>. </P></DD><DT><SPAN class="term"><CODE class="literal">svn:ignore</CODE></SPAN></DT><DD><P>If present on a directory, the value is a list of
              <SPAN class="emphasis"><EM>unversioned</EM></SPAN> file patterns to be ignored
              by <SPAN class="command"><STRONG>svn status</STRONG></SPAN> and other
              subcommands.  See
              <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.special.ignore" title="Ignoring Unversioned Items">the section called âIgnoring Unversioned Itemsâ</A>.</P></DD><DT><SPAN class="term"><CODE class="literal">svn:keywords</CODE></SPAN></DT><DD><P>If present on a file, the value tells the client
              how to expand particular keywords within the file.
              See
              <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.special.keywords" title="Keyword Substitution">the section called âKeyword Substitutionâ</A>.</P></DD><DT><SPAN class="term"><CODE class="literal">svn:eol-style</CODE></SPAN></DT><DD><P>If present on a file, the value tells the client how
              to manipulate the file's line-endings in the working
              copy and in exported trees.  See <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.special.eol-style" title="End-of-Line Character Sequences">the section called âEnd-of-Line Character Sequencesâ</A> and
              <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.export" title="svn export">svn export</A> earlier in this chapter.</P></DD><DT><SPAN class="term"><CODE class="literal">svn:externals</CODE></SPAN></DT><DD><P>If present on a directory, the value is a multiline
              list of other paths and URLs the client should check
              out.  See
              <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.externals" title="Externals Definitions">the section called âExternals Definitionsâ</A>.</P></DD><DT><SPAN class="term"><CODE class="literal">svn:special</CODE></SPAN></DT><DD><P>If present on a file, indicates that the file is not
              an ordinary file, but a symbolic link or other special
              object.
              <SUP>[<A id="id583707" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id583707" class="footnote">58</A>]</SUP>
            </P></DD><DT><SPAN class="term"><CODE class="literal">svn:needs-lock</CODE></SPAN></DT><DD><P>If present on a file, tells the client to make the
              file read-only in the working copy, as a reminder that
              the file should be locked before editing begins.  See
              <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.locking.lock-communication" title="Lock Communication">the section called âLock Communicationâ</A>.</P></DD><DT><SPAN class="term"><CODE class="literal">svn:mergeinfo</CODE></SPAN></DT><DD><P>Used by Subversion to track merge data.  See
              <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge.basicmerging.mergeinfo" title="Mergeinfo and Previews">the section called âMergeinfo and Previewsâ</A>
              for details, but you should never edit this property
              unless you <SPAN class="emphasis"><EM>really</EM></SPAN> know what you're
              doing.</P></DD></DL></DIV></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.ref.properties.unversioned-props"></A>Unversioned Properties</H3></DIV></DIV></DIV><P>These are the unversioned properties tht Subversion reserves
        for its own use:</P><DIV class="variablelist"><DL><DT><SPAN class="term"><CODE class="literal">svn:author</CODE></SPAN></DT><DD><P>If present, contains the authenticated username of
              the person who created the revision.  (If not present,
              the revision was committed anonymously.)</P></DD><DT><SPAN class="term"><CODE class="literal">svn:date</CODE></SPAN></DT><DD><P>Contains the UTC time the revision was created, in
              ISO 8601 format.  The value comes from the
              <SPAN class="emphasis"><EM>server</EM></SPAN> machine's clock, not the
              client's.</P></DD><DT><SPAN class="term"><CODE class="literal">svn:log</CODE></SPAN></DT><DD><P>Contains the log message describing the
              revision.</P></DD><DT><SPAN class="term"><CODE class="literal">svn:autoversioned</CODE></SPAN></DT><DD><P>If present, the revision was created via the
              autoversioning feature.  See
              <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.webdav.autoversioning" title="Autoversioning">the section called âAutoversioningâ</A>.</P></DD></DL></DIV></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.ref.reposhooks"></A>Repository Hooks</H2></DIV></DIV></DIV><P>These are the repository hooks that Subversion provides:</P><DIV class="refentry" lang="en" xml:lang="en"><A id="svn.ref.reposhooks.start-commit"></A><DIV class="titlepage"></DIV><A id="id583908" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>start-commit â Notification of the beginning of a commit.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id583934"></A><H2>Description</H2><P>The start-commit hook is run before the commit
          transaction is even created.  It is typically used to
          decide whether the user has commit privileges at all.</P><P>If the start-commit hook program returns a nonzero exit
          value, the commit is stopped before the commit transaction
          is even created, and anything printed to <CODE class="filename">stderr</CODE> is
          marshalled back to the client.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id583956"></A><H2>Input Parameter(s)</H2><P>The command-line arguments passed to the hook program,
          in order, are:</P><DIV class="orderedlist"><OL type="1"><LI><P>Repository path</P></LI><LI><P>Authenticated username attempting the commit</P></LI><LI><P>Colon-separated list of
              capabilities that a client passes to the server,
              including <CODE class="literal">depth</CODE>,
              <CODE class="literal">mergeinfo</CODE>, and
              <CODE class="literal">log-revprops</CODE> (new in Subversion 1.5).</P></LI></OL></DIV></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id584014"></A><H2>Common uses</H2><P>Access control (e.g., temporarily lock out commits for
          some reason).</P><P>A means to allow access only from clients that have
          certain capabilities.</P></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.reposhooks.pre-commit"></A><DIV class="titlepage"></DIV><A id="id584039" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>pre-commit â Notification just prior to commit completion.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id584065"></A><H2>Description</H2><P>The <CODE class="literal">pre-commit</CODE> hook is run just
          before a commit transaction is promoted to a new revision.
          Typically, this hook is used to protect against commits that
          are disallowed due to content or location (e.g., your
          site might require that all commits to a certain branch
          include a ticket number from the bug tracker, or that the
          incoming log message is nonempty).</P><P>If the <CODE class="literal">pre-commit</CODE> hook program
          returns a nonzero exit value, the commit is aborted, the
          commit transaction is removed, and anything printed to
          <CODE class="filename">stderr</CODE> is marshalled back to the client.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id584104"></A><H2>Input parameter(s)</H2><P>The command-line arguments passed to the hook program,
          in order, are:</P><DIV class="orderedlist"><OL type="1"><LI><P>Repository path</P></LI><LI><P>Commit transaction name</P></LI></OL></DIV></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id584136"></A><H2>Common uses</H2><P>Change validation and control</P></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.reposhooks.post-commit"></A><DIV class="titlepage"></DIV><A id="id584157" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>post-commit â Notification of a successful commit.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id584182"></A><H2>Description</H2><P>The <CODE class="literal">post-commit</CODE> hook is run after the
          transaction is committed and a new revision is created.  Most
          people use this hook to send out descriptive emails about
          the commit or to notify some other tool (such as an issue
          tracker) that a commit has happened.  Some configurations
          also use this hook to trigger backup processes.</P><P>If the <CODE class="literal">post-commit</CODE> hook returns a
          nonzero exit status, the commit <SPAN class="emphasis"><EM>will
          not</EM></SPAN> be aborted since it has already
          completed.  However, anything that the hook printed
          to <CODE class="filename">stderr</CODE> will be marshalled back to the
          client, making it easier to diagnose hook failures.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id584222"></A><H2>Input parameter(s)</H2><P>The command-line arguments passed to the hook program,
          in order, are:</P><DIV class="orderedlist"><OL type="1"><LI><P>Repository path</P></LI><LI><P>Revision number created by the commit</P></LI></OL></DIV></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id584254"></A><H2>Common uses</H2><P>Commit notification; tool integration</P></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.reposhooks.pre-revprop-change"></A><DIV class="titlepage"></DIV><A id="id584275" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>pre-revprop-change â Notification of a revision property change
          attempt.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id584301"></A><H2>Description</H2><P>The <CODE class="literal">pre-revprop-change</CODE> hook is run
          immediately prior to the modification of a revision property
          when performed outside the scope of a normal commit.  Unlike
          the other hooks, the default state of this one is to deny
          the proposed action.  The hook must actually exist and
          return a zero exit value before a revision property
          modification can happen.</P><P>If the <CODE class="literal">pre-revprop-change</CODE> hook
          doesn't exist, isn't executable, or returns a nonzero exit
          value, no change to the property will be made, and anything
          printed to <CODE class="filename">stderr</CODE> is marshalled back to the client.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id584336"></A><H2>Input parameter(s)</H2><P>The command-line arguments passed to the hook program,
          in order, are:</P><DIV class="orderedlist"><OL type="1"><LI><P>Repository path</P></LI><LI><P>Revision whose property is about to be modified</P></LI><LI><P>Authenticated username attempting the property change</P></LI><LI><P>Name of the property changed</P></LI><LI><P>Change description: <CODE class="literal">A</CODE> (added),
              <CODE class="literal">D</CODE> (deleted), or <CODE class="literal">M</CODE>
              (modified)</P></LI></OL></DIV><P>Additionally, Subversion passes the intended new value
           of the property to the hook program via standard
           input.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id584411"></A><H2>Common uses</H2><P>Access control; change validation and control</P></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.reposhooks.post-revprop-change"></A><DIV class="titlepage"></DIV><A id="id584433" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>post-revprop-change â Notification of a successful revision property 
          change.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id584458"></A><H2>Description</H2><P>The <CODE class="literal">post-revprop-change</CODE> hook is run
          immediately after the modification of a revision property
          when performed outside the scope of a normal commit.  As you can
          derive from the description of its counterpart, the
          <CODE class="literal">pre-revprop-change</CODE> hook, this hook will
          not run at all unless
          the <CODE class="literal">pre-revprop-change</CODE> hook is
          implemented.  It is typically used to send email
          notification of the property change.</P><P>If the <CODE class="literal">post-revprop-change</CODE> hook returns a
          nonzero exit status, the change <SPAN class="emphasis"><EM>will
          not</EM></SPAN> be aborted since it has already
          completed.  However, anything that the hook printed
          to <CODE class="filename">stderr</CODE> will be marshalled back to the
          client, making it easier to diagnose hook failures.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id584510"></A><H2>Input parameter(s)</H2><P>The command-line arguments passed to the hook program,
          in order, are:</P><DIV class="orderedlist"><OL type="1"><LI><P>Repository path</P></LI><LI><P>Revision whose property was modified</P></LI><LI><P>Authenticated username of the person making the change</P></LI><LI><P>Name of the property changed</P></LI><LI><P>Change description: <CODE class="literal">A</CODE> (added),
              <CODE class="literal">D</CODE> (deleted), or <CODE class="literal">M</CODE>
              (modified)</P></LI></OL></DIV><P>Additionally, Subversion passes to the hook program, via
          standard input, the previous value of the property.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id584584"></A><H2>Common uses</H2><P>Property change notification</P></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.reposhooks.pre-lock"></A><DIV class="titlepage"></DIV><A id="id584606" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>pre-lock â Notification of a path lock attempt.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id584632"></A><H2>Description</H2><P>The <CODE class="literal">pre-lock</CODE> hook runs whenever
          someone attempts to lock a path.  It can be used to prevent
          locks altogether or to create a more complex policy
          specifying exactly which users are allowed to lock
          particular paths.  If the hook notices a preexisting lock,
          it can also decide whether a user is allowed
          to â<SPAN class="quote">steal</SPAN>â the existing lock.</P><P>If the <CODE class="literal">pre-lock</CODE> hook program returns
          a nonzero exit value, the lock action is aborted and
          anything printed to <CODE class="filename">stderr</CODE> is marshalled back to the
          client.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id584671"></A><H2>Input parameter(s)</H2><P>The command-line arguments passed to the hook program,
          in order, are:</P><DIV class="orderedlist"><OL type="1"><LI><P>Repository path</P></LI><LI><P>Versioned path that is to be locked</P></LI><LI><P>Authenticated username of the person attempting the 
              lock</P></LI></OL></DIV></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id584709"></A><H2>Common uses</H2><P>Access control</P></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.reposhooks.post-lock"></A><DIV class="titlepage"></DIV><A id="id584731" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>post-lock â Notification of a successful path lock.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id584756"></A><H2>Description</H2><P>The <CODE class="literal">post-lock</CODE> hook runs after one or
          more paths have been locked.  It is typically used to send
          email notification of the lock event.</P><P>If the <CODE class="literal">post-lock</CODE> hook returns a
          nonzero exit status, the lock <SPAN class="emphasis"><EM>will
          not</EM></SPAN> be aborted since it has already
          completed.  However, anything that the hook printed
          to <CODE class="filename">stderr</CODE> will be marshalled back to the
          client, making it easier to diagnose hook failures.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id584794"></A><H2>Input parameter(s)</H2><P>The command-line arguments passed to the hook program,
          in order, are:</P><DIV class="orderedlist"><OL type="1"><LI><P>Repository path</P></LI><LI><P>Authenticated username of the person who locked the 
              paths</P></LI></OL></DIV><P>Additionally, the list of paths locked is passed to the
          hook program via standard input, one path per line.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id584830"></A><H2>Common uses</H2><P>Lock notification</P></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.reposhooks.pre-unlock"></A><DIV class="titlepage"></DIV><A id="id584852" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>pre-unlock â Notification of a path unlock attempt.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id584878"></A><H2>Description</H2><P>The <CODE class="literal">pre-unlock</CODE> hook runs whenever
          someone attempts to remove a lock on a file.  It can be used
          to create policies that specify which users are allowed to
          unlock particular paths.  It's particularly important for
          determining policies about lock breakage.  If user A locks a
          file, is user B allowed to break the lock?  What if the lock
          is more than a week old?  These sorts of things can be
          decided and enforced by the hook.</P><P>If the <CODE class="literal">pre-unlock</CODE> hook program
          returns a nonzero exit value, the unlock action is aborted
          and anything printed to <CODE class="filename">stderr</CODE> is marshalled back to the
          client.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id584914"></A><H2>Input parameter(s)</H2><P>The command-line arguments passed to the hook program,
          in order, are:</P><DIV class="orderedlist"><OL type="1"><LI><P>Repository path</P></LI><LI><P>Versioned path which is to be locked</P></LI><LI><P>Authenticated username of the person attempting the 
              lock</P></LI></OL></DIV></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id584953"></A><H2>Common uses</H2><P>Access control</P></DIV></DIV><DIV class="refentry" lang="en" xml:lang="en"><DIV class="refentry.separator"><HR></DIV><A id="svn.ref.reposhooks.post-unlock"></A><DIV class="titlepage"></DIV><A id="id584974" class="indexterm"></A><DIV class="refnamediv"><H2>Name</H2><P>post-unlock â Notification of a successful path unlock.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id585000"></A><H2>Description</H2><P>The <CODE class="literal">post-unlock</CODE> hook runs after one
          or more paths have been unlocked.  It is typically used to
          send email notification of the unlock event.</P><P>If the <CODE class="literal">post-unlock</CODE> hook returns a
          nonzero exit status, the unlock <SPAN class="emphasis"><EM>will
          not</EM></SPAN> be aborted since it has already
          completed.  However, anything that the hook printed
          to <CODE class="filename">stderr</CODE> will be marshalled back to the
          client, making it easier to diagnose hook failures.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id585037"></A><H2>Input parameter(s)</H2><P>The command-line arguments passed to the hook program,
          in order, are:</P><DIV class="orderedlist"><OL type="1"><LI><P>Repository path</P></LI><LI><P>Authenticated username of the person who unlocked the 
              paths</P></LI></OL></DIV><P>Additionally, the list of paths unlocked is passed to the
          hook program via standard input, one path per line.</P></DIV><DIV class="refsect1" lang="en" xml:lang="en"><A id="id585074"></A><H2>Common uses</H2><P>Unlock notification</P></DIV></DIV></DIV><DIV class="footnotes"><BR><HR width="100" align="left"><DIV class="footnote"><P><SUP>[<A id="ftn.id565687" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id565687" class="para">56</A>] </SUP>Well, you don't need a subcommand to use the
          <CODE class="option">--version</CODE> option, but we'll get to that in
          just a minute.</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id576220" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id576220" class="para">57</A>] </SUP>Remember, <SPAN class="command"><STRONG>svnadmin</STRONG></SPAN> works only
                  with local <SPAN class="emphasis"><EM>paths</EM></SPAN>, not
                  <SPAN class="emphasis"><EM>URLs</EM></SPAN>.</P></DIV><DIV class="footnote"><P><SUP>[<A id="ftn.id583707" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id583707" class="para">58</A>] </SUP>As of this writing, symbolic links are indeed
                  the only â<SPAN class="quote">special</SPAN>â objects.  But there
                  might be more in future releases of
                  Subversion.</P></DIV></DIV></DIV><DIV class="appendix" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title"><A id="svn.intro"></A>Appendix&nbsp;A.&nbsp;Subversion Quick-Start Guide</H2></DIV></DIV></DIV><DIV class="toc"><P><B>Table of Contents</B></P><DL><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.intro.install">Installing Subversion</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.intro.quickstart">High-Speed Tutorial</A></SPAN></DT></DL></DIV><P>If you're eager to get Subversion up and running (and you
    enjoy learning by experimentation), this appendix will show you how
    to create a repository, import code, and then check it back out
    again as a working copy.  Along the way, we give links to the
    relevant chapters of this book.</P><DIV class="warning" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Warning</H3><P>If you're new to the entire concept of version control or to
    the â<SPAN class="quote">copy-modify-merge</SPAN>â model used by both CVS and
    Subversion, you should read <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic" title="Chapter&nbsp;1.&nbsp;Fundamental Concepts">Chapter&nbsp;1, <I>Fundamental Concepts</I></A>
    before going any further.</P></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.intro.install"></A>Installing Subversion</H2></DIV></DIV></DIV><P>Subversion is built on a portability layer called
      APRâthe Apache Portable Runtime library.  The APR library
      provides all the interfaces that Subversion needs to function on
      different operating systems: disk access, network access, memory
      management, and so on.  While Subversion is able to use Apache
      as one of its network server programs, its dependence on APR
      <SPAN class="emphasis"><EM>does not</EM></SPAN> mean that Apache is a required
      component.  APR is a standalone library usable by any
      application.  It does mean, however, that like Apache,
      Subversion clients and servers run on any operating system that
      the Apache <SPAN class="command"><STRONG>httpd</STRONG></SPAN> server runs on: Windows,
      Linux, all flavors of BSD, Mac OS X, NetWare, and others.</P><P>The easiest way to get Subversion is to download a binary
      package built for your operating system.  Subversion's web site
      (<A class="ulink" href="http://subversion.tigris.org/" target="_top">http://subversion.tigris.org</A>) often has these
      packages available for download, posted by volunteers.  The site
      usually contains graphical installer packages for users of
      Microsoft operating systems.  If you run a Unix-like operating
      system, you can use your system's native package distribution
      system (RPMs, DEBs, the ports tree, etc.) to get
      Subversion.</P><P>Alternatively, you can build Subversion directly from source
      code, though it's not always an easy task. (If you're not
      experienced at building open source software packages, you're
      probably better off downloading a binary distribution instead!)
      From the Subversion web site, download the latest source code
      release.  After unpacking it, follow the instructions in
      the <CODE class="filename">INSTALL</CODE> file to build it.  Note that a
      released source package may not contain everything you need to
      build a command-line client capable of talking to a remote
      repository.  Starting with Subversion 1.4 and later, the
      libraries Subversion depends on (apr, apr-util, and neon) are
      distributed in a separate source package suffixed
      with <CODE class="filename">-deps</CODE>.  These libraries are now common
      enough that they may already be installed on your system.  If
      not, you'll need to unpack the dependency package into the same
      directory where you unpacked the main Subversion source.
      Regardless, it's possible that you may want to fetch other
      optional dependencies such as Berkeley DB and possibly Apache
      <SPAN class="command"><STRONG>httpd</STRONG></SPAN>.  If you want to do a complete build,
      make sure you have all of the packages documented in
      the <CODE class="filename">INSTALL</CODE> file.</P><P>If you're one of those folks that likes to use bleeding-edge
      software, you can also get the Subversion source code from the
      Subversion repository in which it lives.  Obviously, you'll need
      to already have a Subversion client on hand to do this.  But
      once you do, you can check out a working copy of the Subversion source
      repository from <A class="ulink" href="http://svn.collab.net/repos/svn/trunk/" target="_top">http://svn.collab.net/repos/svn/trunk/</A>:
      <SUP>[<A id="id605643" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id605643" class="footnote">59</A>]</SUP>
    </P><PRE class="screen">$ svn checkout http://svn.collab.net/repos/svn/trunk subversion
A    subversion/HACKING
A    subversion/INSTALL
A    subversion/README
A    subversion/autogen.sh
A    subversion/build.conf
â¦
</PRE><P>The preceding command will create a working copy of the
      latest (unreleased) Subversion source code into a subdirectory
      named <CODE class="filename">subversion</CODE> in your current working
      directory.  You can adjust that last argument as you see fit.
      Regardless of what you call the new working copy directory,
      though, after this operation completes, you will now have the
      Subversion source code.  Of course, you will still need to fetch
      a few helper libraries (apr, apr-util, etc.)âsee the
      <CODE class="filename">INSTALL</CODE> file in the top level of the
      working copy for details.</P></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.intro.quickstart"></A>High-Speed Tutorial</H2></DIV></DIV></DIV><DIV class="blockquote"><BLOCKQUOTE class="blockquote"><P>â<SPAN class="quote">Please make sure your seat backs are in their full,
        upright position and that your tray tables are stored.  Flight
        attendants, prepare for take-offâ¦.</SPAN>â</P></BLOCKQUOTE></DIV><P>What follows is a quick tutorial that walks you through some
      basic Subversion configuration and operation.  When you finish
      it, you should have a general understanding of Subversion's
      typical usage.</P><DIV class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Note</H3><P>The examples used in this appendix assume that you have
        <SPAN class="command"><STRONG>svn</STRONG></SPAN>, the Subversion command-line client,
        and <SPAN class="command"><STRONG>svnadmin</STRONG></SPAN>, the administrative tool,
        ready to go on a Unix-like operating system.  (This tutorial
        also works at the Windows command-line prompt, assuming you
        make some obvious tweaks.)  We also assume you are using
        Subversion 1.2 or later (run <STRONG class="userinput"><CODE>svn --version</CODE></STRONG>
        to check.)</P></DIV><P>Subversion stores all versioned data in a central
      repository.  To begin, create a new repository:</P><PRE class="screen">$ svnadmin create /var/svn/repos
$ ls /var/svn/repos
conf/  dav/  db/  format  hooks/  locks/  README.txt
</PRE><P>This command creates a new directory,
      <CODE class="filename">/var/svn/repos</CODE>, which contains a Subversion
      repository.  This new directory contains (among other things) a
      collection of database files.  You won't see your versioned
      files if you peek inside.  For more information about repository
      creation and maintenance, see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin" title="Chapter&nbsp;5.&nbsp;Repository Administration">Chapter&nbsp;5, <I>Repository Administration</I></A>.</P><P>Subversion has no concept of a â<SPAN class="quote">project.</SPAN>â The
      repository is just a virtual versioned filesystem, a large tree
      that can hold anything you wish.  Some administrators prefer to
      store only one project in a repository, and others prefer to
      store multiple projects in a repository by placing them into
      separate directories.  We discuss the merits of each approach
      in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.reposadmin.projects.chooselayout" title="Planning Your Repository Organization">the section called âPlanning Your Repository Organizationâ</A>.
      Either way, the repository manages only files and directories,
      so it's up to humans to interpret particular directories as
      â<SPAN class="quote">projects.</SPAN>â  So while you might see references to
      projects throughout this book, keep in mind that we're only ever
      talking about some directory (or collection of directories) in
      the repository.</P><P>In this example, we assume you already have some sort
      of project (a collection of files and directories) that you wish
      to import into your newly created Subversion repository.  Begin
      by organizing your data into a single directory called
      <CODE class="filename">myproject</CODE> (or whatever you wish).  For
      reasons explained in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge" title="Chapter&nbsp;4.&nbsp;Branching and Merging">Chapter&nbsp;4, <I>Branching and Merging</I></A>, your
      project's tree structure should contain three top-level
      directories named <CODE class="filename">branches</CODE>,
      <CODE class="filename">tags</CODE>, and <CODE class="filename">trunk</CODE>.  The
      <CODE class="filename">trunk</CODE> directory should contain all of your
      data, and the <CODE class="filename">branches</CODE> and
      <CODE class="filename">tags</CODE> directories should be empty:</P><PRE class="screen">/tmp/myproject/branches/
/tmp/myproject/tags/
/tmp/myproject/trunk/
                     foo.c
                     bar.c
                     Makefile
                     â¦
</PRE><P>The <CODE class="filename">branches</CODE>, <CODE class="filename">tags</CODE>,
      and <CODE class="filename">trunk</CODE> subdirectories aren't actually
      required by Subversion.  They're merely a popular convention
      that you'll most likely want to use later on.</P><P>Once you have your tree of data ready to go, import it into
      the repository with the <SPAN class="command"><STRONG>svn import</STRONG></SPAN> command
      (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.importing" title="Getting Data into Your Repository">the section called âGetting Data into Your Repositoryâ</A>):</P><PRE class="screen">$ svn import /tmp/myproject file:///var/svn/repos/myproject -m "initial import"
Adding         /tmp/myproject/branches
Adding         /tmp/myproject/tags
Adding         /tmp/myproject/trunk
Adding         /tmp/myproject/trunk/foo.c
Adding         /tmp/myproject/trunk/bar.c
Adding         /tmp/myproject/trunk/Makefile
â¦
Committed revision 1.
$ 
</PRE><P>Now the repository contains this tree of data.  As mentioned
      earlier, you won't see your files by directly peeking into the
      repository;  they're all stored within a database.  But the
      repository's imaginary filesystem now contains a top-level
      directory named <CODE class="filename">myproject</CODE>, which in turn
      contains your data.</P><P>Note that the original <CODE class="filename">/tmp/myproject</CODE>
      directory is unchanged; Subversion is unaware of it.  (In fact,
      you can even delete that directory if you wish.)  To
      start manipulating repository data, you need to create a new
      â<SPAN class="quote">working copy</SPAN>â of the data, a sort of private
      workspace.  Ask Subversion to â<SPAN class="quote">check out</SPAN>â a working
      copy of the <CODE class="filename">myproject/trunk</CODE> directory in
      the repository:</P><PRE class="screen">$ svn checkout file:///var/svn/repos/myproject/trunk myproject
A  myproject/foo.c
A  myproject/bar.c
A  myproject/Makefile
â¦
Checked out revision 1.
</PRE><P>Now you have a personal copy of part of the repository in a
      new directory named <CODE class="filename">myproject</CODE>.  You can edit
      the files in your working copy and then commit those changes
      back into the repository.</P><DIV class="itemizedlist"><UL type="disc"><LI><P>Enter your working copy and edit a file's
          contents.</P></LI><LI><P>Run <STRONG class="userinput"><CODE>svn diff</CODE></STRONG> to see unified diff
          output of your changes.</P></LI><LI><P>Run <STRONG class="userinput"><CODE>svn commit</CODE></STRONG> to commit the new
          version of your file to the repository.</P></LI><LI><P>Run <STRONG class="userinput"><CODE>svn update</CODE></STRONG> to bring your working
          copy â<SPAN class="quote">up to date</SPAN>â with the repository.</P></LI></UL></DIV><P>For a full tour of all the things you can do with your
      working copy, read <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour" title="Chapter&nbsp;2.&nbsp;Basic Usage">Chapter&nbsp;2, <I>Basic Usage</I></A>.</P><P>At this point, you have the option of making your repository
      available to others over a network.  See <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig" title="Chapter&nbsp;6.&nbsp;Server Configuration">Chapter&nbsp;6, <I>Server Configuration</I></A> to learn about the different sorts of
      server processes available and how to configure them.</P></DIV><DIV class="footnotes"><BR><HR width="100" align="left"><DIV class="footnote"><P><SUP>[<A id="ftn.id605643" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id605643" class="para">59</A>] </SUP>Note that the URL checked out in the example ends not
          with <CODE class="literal">svn</CODE>, but with a subdirectory thereof
          called <CODE class="literal">trunk</CODE>.  See our discussion of
          Subversion's branching and tagging model for the reasoning
          behind this.</P></DIV></DIV></DIV><DIV class="appendix" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title"><A id="svn.forcvs"></A>Appendix&nbsp;B.&nbsp;Subversion for CVS Users</H2></DIV></DIV></DIV><DIV class="toc"><P><B>Table of Contents</B></P><DL><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.forcvs.revnums">Revision Numbers Are Different Now</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.forcvs.directories">Directory Versions</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.forcvs.disconnected">More Disconnected Operations</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.forcvs.status-vs-update">Distinction Between Status and Update</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.forcvs.status-vs-update.status">Status</A></SPAN></DT><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.forcvs.status-vs-update.update">Update</A></SPAN></DT></DL></DD><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.forcvs.branches-and-tags">Branches and Tags</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.forcvs.properties">Metadata Properties</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.forcvs.conflicts">Conflict Resolution</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.forcvs.binary-and-trans">Binary Files and Translation</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.forcvs.modules">Versioned Modules</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.forcvs.auth">Authentication</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.forcvs.convert">Converting a Repository from CVS to Subversion</A></SPAN></DT></DL></DIV><P>This appendix is a guide for CVS users new to Subversion.
    It's essentially a list of differences between the two systems
    as â<SPAN class="quote">viewed from 10,000 feet.</SPAN>â  For each section, we
    provide references to relevant chapters when
    possible.</P><P>Although the goal of Subversion is to take over the current
    and future CVS user base, some new features and design changes
    were required to fix certain â<SPAN class="quote">broken</SPAN>â behaviors
    that CVS had.  This means that, as a CVS user, you may need to
    break habitsâones that you forgot were odd to begin
    with.</P><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.forcvs.revnums"></A>Revision Numbers Are Different Now</H2></DIV></DIV></DIV><P>In CVS, revision numbers are per file.  This is because CVS
      stores its data in RCS files; each file has a corresponding RCS
      file in the repository, and the repository is roughly laid out
      according to the structure of your project tree.</P><P>In Subversion, the repository looks like a single
      filesystem.  Each commit results in an entirely new filesystem
      tree; in essence, the repository is an array of trees.  Each of
      these trees is labeled with a single revision number.  When
      someone talks about â<SPAN class="quote">revision 54</SPAN>â, he's talking
      about a particular tree (and indirectly, the way the filesystem
      looked after the 54th commit).</P><P>Technically, it's not valid to talk about â<SPAN class="quote">revision 5
      of <CODE class="filename">foo.c</CODE>.</SPAN>â  Instead, one would say
      â<SPAN class="quote"><CODE class="filename">foo.c</CODE> as it appears in revision
      5.</SPAN>â  Also, be careful when making assumptions about the
      evolution of a file.  In CVS, revisions 5 and 6 of
      <CODE class="filename">foo.c</CODE> are always different.  In Subversion,
      it's most likely that <CODE class="filename">foo.c</CODE> did
      <SPAN class="emphasis"><EM>not</EM></SPAN> change between revisions 5 and
      6.</P><P>Similarly, in CVS, a tag or branch is an annotation on the
      file or on the version information for that individual file,
      whereas in Subversion, a tag or branch is a copy of an entire
      tree (by convention, into the <CODE class="filename">/branches</CODE>
      or <CODE class="filename">/tags</CODE> directories that appear at the top
      level of the repository, beside <CODE class="filename">/trunk</CODE>). In
      the repository as a whole, many versions of each file may be
      visible: the latest version on each branch, every tagged
      version, and of course the latest version on the trunk
      itself. So, to refine the terms even further, one would often
      say â<SPAN class="quote"><CODE class="filename">foo.c</CODE> as it appears in
      <CODE class="filename">/branches/REL1</CODE> in revision
      5.</SPAN>â</P><P>For more details on this topic, see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.in-action.revs" title="Revisions">the section called âRevisionsâ</A>.</P></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.forcvs.directories"></A>Directory Versions</H2></DIV></DIV></DIV><P>Subversion tracks tree structures, not just file contents.
      It's one of the biggest reasons Subversion was written to
      replace CVS.</P><P>Here's what this means to you, as a former CVS user:</P><DIV class="itemizedlist"><UL type="disc"><LI><P>The <SPAN class="command"><STRONG>svn add</STRONG></SPAN> and <SPAN class="command"><STRONG>svn
          delete</STRONG></SPAN> commands work on directories now, just as
          they work on files.  So do <SPAN class="command"><STRONG>svn copy</STRONG></SPAN> and
          <SPAN class="command"><STRONG>svn move</STRONG></SPAN>.  However, these commands do
          <SPAN class="emphasis"><EM>not</EM></SPAN> cause any kind of immediate change
          in the repository.  Instead, the working items are simply
          â<SPAN class="quote">scheduled</SPAN>â for addition or deletion.  No
          repository changes happen until you run <STRONG class="userinput"><CODE>svn
          commit</CODE></STRONG>.</P></LI><LI><P>Directories aren't dumb containers anymore; they have
          revision numbers like files.  (Or more properly, it's
          correct to talk about â<SPAN class="quote">directory
          <CODE class="filename">foo/</CODE> in revision 5.</SPAN>â)</P></LI></UL></DIV><P>Let's talk more about that last point.  Directory versioning
      is a hard problem; because we want to allow mixed-revision
      working copies, there are some limitations on how far we can
      abuse this model.</P><P>From a theoretical point of view, we define â<SPAN class="quote">revision
      5 of directory <CODE class="filename">foo</CODE></SPAN>â to mean a
      specific collection of directory entries and properties.  Now
      suppose we start adding and removing files from
      <CODE class="filename">foo</CODE>, and then commit.  It would be a lie
      to say that we still have revision 5 of
      <CODE class="filename">foo</CODE>.  However, if we bumped
      <CODE class="filename">foo</CODE>'s revision number after the commit,
      that would be a lie too; there may be other changes to
      <CODE class="filename">foo</CODE> we haven't yet received, because we
      haven't updated yet.</P><P>Subversion deals with this problem by quietly tracking
      committed adds and deletes in the <CODE class="filename">.svn</CODE>
      area.  When you eventually run <STRONG class="userinput"><CODE>svn update</CODE></STRONG>,
      all accounts are settled with the repository, and the
      directory's new revision number is set correctly.
      <SPAN class="emphasis"><EM>Therefore, only after an update is it truly safe to
      say that you have a â<SPAN class="quote">perfect</SPAN>â revision of a
      directory.</EM></SPAN> Most of the time, your working copy will
      contain â<SPAN class="quote">imperfect</SPAN>â directory revisions.</P><P>Similarly, a problem arises if you attempt to commit
      property changes on a directory.  Normally, the commit would
      bump the working directory's local revision number.  But again,
      that would be a lie, as there may be adds or deletes that
      the directory doesn't yet have, because no update has happened.
      <SPAN class="emphasis"><EM>Therefore, you are not allowed to commit
      property changes on a directory unless the directory is
      up to date.</EM></SPAN></P><P>For more discussion about the limitations of directory
      versioning, see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.basic.in-action.mixedrevs" title="Mixed Revision Working Copies">the section called âMixed Revision Working Copiesâ</A>.</P></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.forcvs.disconnected"></A>More Disconnected Operations</H2></DIV></DIV></DIV><P>In recent years, disk space has become outrageously cheap
      and abundant, but network bandwidth has not.  Therefore, the
      Subversion working copy has been optimized around the scarcer
      resource.</P><P>The <CODE class="filename">.svn</CODE> administrative directory
      serves the same purpose as the <CODE class="filename">CVS</CODE>
      directory, except that it also stores read-only,
      â<SPAN class="quote">pristine</SPAN>â copies of your files.  This allows you
      to do many things offline:</P><DIV class="variablelist"><DL><DT><SPAN class="term"><SPAN class="command"><STRONG>svn status</STRONG></SPAN></SPAN></DT><DD><P>Shows you any local changes you've made (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.examine.status" title="See an overview of your changes">the section called âSee an overview of your changesâ</A>)</P></DD><DT><SPAN class="term"><SPAN class="command"><STRONG>svn diff</STRONG></SPAN></SPAN></DT><DD><P>Shows you the details of your changes (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.examine.diff" title="Examine the details of your local modifications">the section called âExamine the details of your local modificationsâ</A>)</P></DD><DT><SPAN class="term"><SPAN class="command"><STRONG>svn revert</STRONG></SPAN></SPAN></DT><DD><P>Removes your local changes (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.revert" title="Undoing Working Changes">the section called âUndoing Working Changesâ</A>)</P></DD></DL></DIV><P>Also, the cached pristine files allow the Subversion client
      to send differences when committing, which CVS cannot do.</P><P>The last subcommand in the listâ<SPAN class="command"><STRONG>svn
      revert</STRONG></SPAN>âis new.  It will not only remove local
      changes, but also unschedule operations such as adds and
      deletes.  Although deleting the file and then running <STRONG class="userinput"><CODE>svn
      update</CODE></STRONG> will still work, doing so distorts the true
      purpose of updating.  And, while we're on this subjectâ¦

    </P></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.forcvs.status-vs-update"></A>Distinction Between Status and Update</H2></DIV></DIV></DIV><P>Subversion attempts to erase a lot of the confusion
      between the <SPAN class="command"><STRONG>cvs status</STRONG></SPAN> and
      <SPAN class="command"><STRONG>cvs update</STRONG></SPAN> commands.</P><P>The <SPAN class="command"><STRONG>cvs status</STRONG></SPAN> command has two purposes:
      first, to show the user any local modifications in the working
      copy, and second, to show the user which files are out of date.
      Unfortunately, because of CVS's hard-to-read status output, many
      CVS users don't take advantage of this command at all.  Instead,
      they've developed a habit of running <STRONG class="userinput"><CODE>cvs
      update</CODE></STRONG> or <STRONG class="userinput"><CODE>cvs -n update</CODE></STRONG> to quickly
      see their changes.  If users forget to use
      the <CODE class="option">-n</CODE> option, this has the side effect of
      merging repository changes they may not be ready to deal
      with.</P><P>Subversion removes this muddle by making the output of
      <SPAN class="command"><STRONG>svn status</STRONG></SPAN> easy to read for both humans and
      parsers.  Also, <SPAN class="command"><STRONG>svn update</STRONG></SPAN> prints only
      information about files that are updated,
      <SPAN class="emphasis"><EM>not</EM></SPAN> local modifications.</P><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.forcvs.status-vs-update.status"></A>Status</H3></DIV></DIV></DIV><P><SPAN class="command"><STRONG>svn status</STRONG></SPAN> prints all files that have
        local modifications.  By default, the repository is not
        contacted.  While this subcommand accepts a fair number of
        options, the following are the most commonly used ones:</P><DIV class="variablelist"><DL><DT><SPAN class="term"><CODE class="option">-u</CODE></SPAN></DT><DD><P>Contact the repository to determine, and then display,
              out-of-dateness information.</P></DD><DT><SPAN class="term"><CODE class="option">-v</CODE></SPAN></DT><DD><P>Show <SPAN class="emphasis"><EM>all</EM></SPAN> entries under
              version control.</P></DD><DT><SPAN class="term"><CODE class="option">-N</CODE></SPAN></DT><DD><P>Run nonrecursively (do not descend into
              subdirectories).</P></DD></DL></DIV><P>The <SPAN class="command"><STRONG>svn status</STRONG></SPAN> command has two output
        formats.  In the default â<SPAN class="quote">short</SPAN>â format, local
        modifications look like this:</P><PRE class="screen">$ svn status
M      foo.c
M      bar/baz.c
</PRE><P>If you specify the <CODE class="option">--show-updates</CODE>
        (<CODE class="option">-u</CODE>) option, a longer output format is
        used:</P><PRE class="screen">$ svn status -u
M            1047   foo.c
       *     1045   faces.html
       *            bloo.png
M            1050   bar/baz.c
Status against revision:   1066
</PRE><P>In this case, two new columns appear.  The second column
        contains an asterisk if the file or directory is out of date.
        The third column shows the working copy's revision number of the
        item.  In the previous example, the asterisk indicates that
        <CODE class="filename">faces.html</CODE> would be patched if we updated,
        and that <CODE class="filename">bloo.png</CODE> is a newly added file in
        the repository.  (The absence of any revision number next to
        <CODE class="filename">bloo.png</CODE> means that it doesn't yet exist in
        the working copy.)</P><P>At this point, you should take a quick look at the list of
        all possible status codes in
        <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.status" title="svn status">svn status</A>.  Here are a few of the
        more common status codes you'll see:</P><PRE class="screen">A    Resource is scheduled for Addition
D    Resource is scheduled for Deletion
M    Resource has local Modifications
C    Resource has Conflicts (changes have not been completely merged
       between the repository and working copy version)
X    Resource is eXternal to this working copy (may come from another
       repository).  See <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.externals" title="Externals Definitions">the section called âExternals Definitionsâ</A>
?    Resource is not under version control
!    Resource is missing or incomplete (removed by a tool other than
       Subversion)
</PRE><P>For a more detailed discussion of <SPAN class="command"><STRONG>svn
        status</STRONG></SPAN>, see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.examine.status" title="See an overview of your changes">the section called âSee an overview of your changesâ</A>.</P></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.forcvs.status-vs-update.update"></A>Update</H3></DIV></DIV></DIV><P><SPAN class="command"><STRONG>svn update</STRONG></SPAN> updates your working copy,
        and prints only information about files that it updates.</P><P>Subversion has combined CVS's <CODE class="literal">P</CODE> and
        <CODE class="literal">U</CODE> codes into just <CODE class="literal">U</CODE>.  When
        a merge or conflict occurs, Subversion simply prints
        <CODE class="literal">G</CODE> or <CODE class="literal">C</CODE>, rather than a
        whole sentence about it.</P><P>For a more detailed discussion of <SPAN class="command"><STRONG>svn
        update</STRONG></SPAN>, see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.update" title="Update Your Working Copy">the section called âUpdate Your Working Copyâ</A>.</P></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.forcvs.branches-and-tags"></A>Branches and Tags</H2></DIV></DIV></DIV><P>Subversion doesn't distinguish between filesystem space and
      â<SPAN class="quote">branch</SPAN>â space; branches and tags are ordinary
      directories within the filesystem.  This is probably the single
      biggest mental hurdle that a CVS user will need to cross.  Read
      all about it in <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.branchmerge" title="Chapter&nbsp;4.&nbsp;Branching and Merging">Chapter&nbsp;4, <I>Branching and Merging</I></A>.</P><DIV class="warning" style="margin-left: 0.5in; margin-right: 0.5in;"><H3 class="title">Warning</H3><P>Since Subversion treats branches and tags as ordinary
        directories, your project's various lines of development
        probably live in subdirectories of the main project directory.
        So remember to check out using the URL of the subdirectory
        that contains the particular line of development you want, not
        the project's root URL.  If you make the mistake of checking
        out the root of the project, you may very well wind up with a
        working copy that contains a complete copy of your project's
        content for each and every one of its branches and tags.
        <SUP>[<A id="id607443" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id607443" class="footnote">60</A>]</SUP>
      </P></DIV></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.forcvs.properties"></A>Metadata Properties</H2></DIV></DIV></DIV><P>A new feature of Subversion is that you can attach arbitrary
      metadata (or â<SPAN class="quote">properties</SPAN>â) to files and
      directories.  Properties are arbitrary name/value pairs
      associated with files and directories in your working
      copy.</P><P>To set or get a property name, use the <SPAN class="command"><STRONG>svn
      propset</STRONG></SPAN> and <SPAN class="command"><STRONG>svn propget</STRONG></SPAN>
      subcommands.  To list all properties on an object, use
      <SPAN class="command"><STRONG>svn proplist</STRONG></SPAN>.</P><P>For more information, see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props" title="Properties">the section called âPropertiesâ</A>.</P></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.forcvs.conflicts"></A>Conflict Resolution</H2></DIV></DIV></DIV><P>CVS marks conflicts with inline â<SPAN class="quote">conflict
      markers,</SPAN>â and then prints a <CODE class="literal">C</CODE> during
      an update or merge operation.  Historically, this has caused
      problems, because CVS isn't doing enough.  Many users forget
      about (or don't see) the <CODE class="literal">C</CODE> after it whizzes
      by on their terminal.  They often forget that the conflict
      markers are even present, and then accidentally commit files
      containing those conflict markers.</P><P>Subversion solves this problem in a pair of ways.  First,
      when a conflict occurs in a file, Subversion records the fact
      that the file is in a state of conflict, and won't allow you to
      commit changes to that file until you explicitly resolve the
      conflict.  Second, Subversion 1.5 provides interactive
      conflict resolution, which allows you to resolve conflicts as
      they happen instead of having to go back and do so after the
      update or merge operation completes.  See <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.cycle.resolve" title="Resolve Conflicts (Merging Others&#39; Changes)">the section called âResolve Conflicts (Merging Others' Changes)â</A> for more about conflict
      resolution in Subversion.</P></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.forcvs.binary-and-trans"></A>Binary Files and Translation</H2></DIV></DIV></DIV><P>In the most general sense, Subversion handles binary files
      more gracefully than CVS does.  Because CVS uses RCS, it can
      only store successive full copies of a changing binary file.
      Subversion, however, expresses differences between files using a
      binary differencing algorithm, regardless of whether they
      contain textual or binary data.  That means all files are
      stored differentially (compressed) in the repository.</P><P>CVS users have to mark binary files with
      <CODE class="option">-kb</CODE> flags to prevent data from being
      garbled (due to keyword expansion and line-ending translations).
      They sometimes forget to do this.</P><P>Subversion takes the more paranoid route.  First, it never
      performs any kind of keyword or line-ending translation unless
      you explicitly ask it to do so (see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.special.keywords" title="Keyword Substitution">the section called âKeyword Substitutionâ</A> and <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props.special.eol-style" title="End-of-Line Character Sequences">the section called âEnd-of-Line Character Sequencesâ</A> for more details).  By default,
      Subversion treats all file data as literal byte strings, and
      files are always stored in the repository in an untranslated
      state.</P><P>Second, Subversion maintains an internal notion of whether a
      file is â<SPAN class="quote">text</SPAN>â or â<SPAN class="quote">binary</SPAN>â data, but
      this notion is <SPAN class="emphasis"><EM>only</EM></SPAN> extant in the working
      copy.  During an <SPAN class="command"><STRONG>svn update</STRONG></SPAN>, Subversion will
      perform contextual merges on locally modified text files, but
      will not attempt to do so for binary files.</P><P>To determine whether a contextual merge is possible,
      Subversion examines the <CODE class="literal">svn:mime-type</CODE>
      property.  If the file has no <CODE class="literal">svn:mime-type</CODE>
      property, or has a MIME type that is textual (e.g.,
      <CODE class="literal">text/*</CODE>),
      Subversion assumes it is text.  Otherwise, Subversion assumes
      the file is binary.  Subversion also helps users by running a
      binary-detection algorithm in the <SPAN class="command"><STRONG>svn import</STRONG></SPAN>
      and <SPAN class="command"><STRONG>svn add</STRONG></SPAN> commands.  These commands will
      make a good guess and then (possibly) set a binary
      <CODE class="literal">svn:mime-type</CODE> property on the file being
      added.  (If Subversion guesses wrong, the user can always remove
      or hand-edit the property.)</P></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.forcvs.modules"></A>Versioned Modules</H2></DIV></DIV></DIV><P>Unlike CVS, a Subversion working copy is aware that it has
      checked out a module.  That means if somebody changes the
      definition of a module (e.g., adds or removes components), a
      call to <SPAN class="command"><STRONG>svn update</STRONG></SPAN> will update the working
      copy appropriately, adding and removing components.</P><P>Subversion defines modules as a list of directories within a
      directory property; see <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.externals" title="Externals Definitions">the section called âExternals Definitionsâ</A>.</P></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.forcvs.auth"></A>Authentication</H2></DIV></DIV></DIV><P>With CVS's pserver, you are required to log in to the server
      (using the <SPAN class="command"><STRONG>cvs login</STRONG></SPAN> command) before
      performing any read or write operationâyou sometimes even
      have to log in for anonymous operations.  With a Subversion
      repository using Apache <SPAN class="command"><STRONG>httpd</STRONG></SPAN> or
      <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> as the server, you don't provide any
      authentication credentials at the outsetâif an operation
      that you perform requires authentication, the server will
      challenge you for your credentials (whether those credentials
      are username and password, a client certificate, or even both).
      So if your repository is world-readable, you will not be
      required to authenticate at all for read operations.</P><P>As with CVS, Subversion still caches your credentials on
      disk (in your <CODE class="filename">~/.subversion/auth/</CODE>
      directory) unless you tell it not to by using the
      <CODE class="option">--no-auth-cache</CODE> option.</P><P>The exception to this behavior, however, is in the case of
      accessing an <SPAN class="command"><STRONG>svnserve</STRONG></SPAN> server over an SSH
      tunnel, using the <CODE class="literal">svn+ssh://</CODE> URL scheme.  In
      that case, the <SPAN class="command"><STRONG>ssh</STRONG></SPAN> program unconditionally
      demands authentication just to start the tunnel.</P></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.forcvs.convert"></A>Converting a Repository from CVS to Subversion</H2></DIV></DIV></DIV><P>Perhaps the most important way to familiarize CVS users with
      Subversion is to let them continue to work on their projects
      using the new system.  And while that can be somewhat
      accomplished using a flat import into a Subversion repository of
      an exported CVS repository, the more thorough solution involves
      transferring not just the latest snapshot of their data, but all
      the history behind it as well, from one system to another.  This
      is an extremely difficult problem to solve; it involves
      deducing changesets in the absence of atomicity and translating
      between the systems' completely orthogonal branching policies,
      among other complications.  Still, a handful of tools claim
      to at least partially support the ability to convert
      existing CVS repositories into Subversion ones.</P><P>The most popular (and mature) conversion tool is
      cvs2svn (<A class="ulink" href="http://cvs2svn.tigris.org/" target="_top">http://cvs2svn.tigris.org/</A>), a Python
      program originally created by members of Subversion's own
      development community.  This tool is meant to run exactly once:
      it scans your CVS repository multiple times and attempts to
      deduce commits, branches, and tags as best it can.  When it
      finishes, the result is either a Subversion repository or a
      portable Subversion dump file representing your code's history.
      See the web site for detailed instructions and caveats.</P></DIV><DIV class="footnotes"><BR><HR width="100" align="left"><DIV class="footnote"><P><SUP>[<A id="ftn.id607443" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id607443" class="para">60</A>] </SUP>That is, providing you don't run out of disk space
            before your checkout finishes.</P></DIV></DIV></DIV><DIV class="appendix" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title"><A id="svn.webdav"></A>Appendix&nbsp;C.&nbsp;WebDAV and Autoversioning</H2></DIV></DIV></DIV><DIV class="toc"><P><B>Table of Contents</B></P><DL><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.webdav.basic">What Is WebDAV?</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.webdav.autoversioning">Autoversioning</A></SPAN></DT><DT><SPAN class="sect1"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.webdav.clients">Client Interoperability</A></SPAN></DT><DD><DL><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.webdav.clients.standalone">Standalone WebDAV Applications</A></SPAN></DT><DD><DL><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.webdav.clients.standalone.windows">Microsoft Office, Dreamweaver, Photoshop</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.webdav.clients.standalone.free">cadaver, DAV Explorer</A></SPAN></DT></DL></DD><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.webdav.clients.file-explorer-extensions">File-Explorer WebDAV Extensions</A></SPAN></DT><DD><DL><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.webdav.clients.file-explorer-extensions.windows">Microsoft Web Folders</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.webdav.clients.file-explorer-extensions.linux-de">Nautilus, Konqueror</A></SPAN></DT></DL></DD><DT><SPAN class="sect2"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.webdav.clients.fs-impl">WebDAV Filesystem Implementation</A></SPAN></DT><DD><DL><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.webdav.clients.fs-impl.windows">WebDrive, NetDrive</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.webdav.clients.fs-impl.macosx">Mac OS X</A></SPAN></DT><DT><SPAN class="sect3"><A href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.webdav.clients.fs-impl.linux">Linux davfs2</A></SPAN></DT></DL></DD></DL></DD></DL></DIV><P>WebDAV is an extension to HTTP, and it is growing more and more
    popular as a standard for file sharing.  Today's operating systems
    are becoming extremely web-aware, and many now have built-in
    support for mounting â<SPAN class="quote">shares</SPAN>â exported by WebDAV
    servers.</P><P>If you use Apache as your Subversion network server, to
    some extent you are also running a WebDAV server.  This appendix
    gives some background on the nature of this protocol, how
    Subversion uses it, and how well Subversion interoperates with
    other software that is WebDAV-aware.</P><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.webdav.basic"></A>What Is WebDAV?</H2></DIV></DIV></DIV><P><EM class="firstterm">DAV</EM> stands for â<SPAN class="quote">Distributed
      Authoring and Versioning.</SPAN>â  RFC 2518 defines a set of
      concepts and accompanying extension methods to HTTP 1.1 that
      make the Web a more universal read/write medium.  The basic
      idea is that a WebDAV-compliant web server can act like a
      generic file server; clients can â<SPAN class="quote">mount</SPAN>â shared
      folders over HTTP that behave much like other network
      filesystems (such as NFS or SMB).</P><P>The tragedy, though, is that despite the acronym, the RFC
      specification doesn't actually describe any sort of version
      control.  Basic WebDAV clients and servers assume that only one
      version of each file or directory exists, and that it can be
      repeatedly overwritten.</P><P>Because RFC 2518 left out versioning concepts, another
      committee was left with the responsibility of writing RFC 3253 a
      few years later.  The new RFC adds versioning concepts to
      WebDAV, placing the â<SPAN class="quote">V</SPAN>â back in
      â<SPAN class="quote">DAV</SPAN>ââhence the term â<SPAN class="quote">DeltaV.</SPAN>â
      WebDAV/DeltaV clients and servers are often called just
      â<SPAN class="quote">DeltaV</SPAN>â programs, since DeltaV implies the
      existence of basic WebDAV.</P><P>The original WebDAV standard has been widely successful.
      Every modern computer operating system has a general WebDAV
      client built in (details to follow), and a number of popular
      standalone applications are also able to speak
      WebDAVâMicrosoft Office, Dreamweaver, and Photoshop, to
      name a few.  On the server end, Apache HTTP Server has been
      able to provide WebDAV services since 1998 and is considered the
      de facto open source standard.  Several other
      commercial WebDAV servers are available, including Microsoft's own
      IIS.</P><P>DeltaV, unfortunately, has not been so successful.  It's
      very difficult to find any DeltaV clients or servers.  The few
      that do exist are relatively unknown commercial products, and
      thus it's very difficult to test interoperability.  It's not
      entirely clear as to why DeltaV has remained stagnant.  Some
      opine that the specification is just too complex.  Others argue
      that while WebDAV's features have mass appeal (even the least
      technical users appreciate network file sharing), its version
      control features just aren't interesting or necessary for most
      users.  Finally, some believe that DeltaV remains unpopular
      because there's still no open source server product that
      implements it well.</P><P>When Subversion was still in its design phase, it seemed
      like a great idea to use Apache as a network server.  It already
      had a module to provide WebDAV services.  DeltaV was a
      relatively new specification.  The hope was that the Subversion
      server module (<SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN>) would eventually
      evolve into an open source DeltaV reference implementation.
      Unfortunately, DeltaV has a very specific versioning model that
      doesn't quite line up with Subversion's model.  Some concepts
      were mappable; others were not.</P><P>What does this mean, then?</P><P>First, the Subversion client is not a fully implemented
      DeltaV client.  It needs certain types of things from the server
      that DeltaV itself cannot provide, and thus is largely dependent
      on a number of Subversion-specific
      HTTP <CODE class="literal">REPORT</CODE> requests that
      only <SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN> understands.</P><P>Second, <SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN> is not a
      fully realized DeltaV server.  Many portions of the DeltaV
      specification were irrelevant to Subversion, and thus were left
      unimplemented.</P><P>There is still some debate in the developer community as to
      whether or not it's worthwhile to remedy either of these
      situations.  It's fairly unrealistic to change Subversion's
      design to match DeltaV, so there's probably no way the client
      can ever learn to get everything it needs from a general DeltaV
      server.  On the other hand,
      <SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN> <SPAN class="emphasis"><EM>could</EM></SPAN> be
      further developed to implement all of DeltaV, but it's hard to
      find motivation to do soâthere are almost no DeltaV
      clients to interoperate with.</P></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.webdav.autoversioning"></A>Autoversioning</H2></DIV></DIV></DIV><P>While the Subversion client is not a full DeltaV client, and
      the Subversion server is not a full DeltaV server, there's still a
      glimmer of WebDAV interoperability to be happy about:
      <EM class="firstterm">autoversioning</EM>.</P><P>Autoversioning is an optional feature defined in the DeltaV
      standard.  A typical DeltaV server will reject an ignorant
      WebDAV client attempting to do a <CODE class="literal">PUT</CODE> to a
      file that's under version control.  To change a
      version-controlled file, the server expects a series of proper
      versioning requests: something like
      <CODE class="literal">MKACTIVITY</CODE>, <CODE class="literal">CHECKOUT</CODE>,
      <CODE class="literal">PUT</CODE>, <CODE class="literal">CHECKIN</CODE>.  But if the
      DeltaV server supports autoversioning, write requests from
      basic WebDAV clients are accepted.  The server behaves as though the
      client <SPAN class="emphasis"><EM>had</EM></SPAN> issued the proper series of
      versioning requests, performing a commit under the hood.  In
      other words, it allows a DeltaV server to interoperate with
      ordinary WebDAV clients that don't understand versioning.</P><P>Because so many operating systems already have integrated
      WebDAV clients, the use case for this feature can be incredibly
      appealing to administrators working with non-technical users.
      Imagine an office of ordinary users running Microsoft Windows or
      Mac OS.  Each user â<SPAN class="quote">mounts</SPAN>â the Subversion
      repository, which appears to be an ordinary network folder.
      They use the shared folder as they always do:  open files, edit
      them, and save them.  Meanwhile, the server is automatically
      versioning everything.  Any administrator (or knowledgeable
      user) can still use a Subversion client to search history and
      retrieve older versions of data.</P><P>This scenario isn't fictionâit's real and it works, as
      of Subversion 1.2 and later.  To activate autoversioning in
      <SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN>, use the
      <CODE class="literal">SVNAutoversioning</CODE> directive within the
      <CODE class="filename">httpd.conf</CODE> <CODE class="literal">Location</CODE>
      block, like so:</P><PRE class="screen">&lt;Location /repos&gt;
  DAV svn
  SVNPath /var/svn/repository
  SVNAutoversioning on
&lt;/Location&gt;
</PRE><P>When Subversion autoversioning is active, write requests
      from WebDAV clients result in automatic commits.  A generic log
      message is automatically generated and attached to each
      revision.</P><P>Before activating this feature, however, understand what
      you're getting into.  WebDAV clients tend to do
      <SPAN class="emphasis"><EM>many</EM></SPAN> write requests, resulting in a huge
      number of automatically committed revisions.  For example, when
      saving data, many clients will do a <CODE class="literal">PUT</CODE> of a
      0-byte file (as a way of reserving a name) followed by another
      <CODE class="literal">PUT</CODE> with the real file data.  The single
      file-write results in two separate commits.  Also consider that
      many applications auto-save every few minutes, resulting in even
      more commits.</P><P>If you have a post-commit hook program that sends email, you
      may want to disable email generation either altogether or on
      certain sections of the repository; it depends on whether you
      think the influx of emails will still prove to be valuable
      notifications or not.  Also, a smart post-commit hook program
      can distinguish between a transaction created via autoversioning
      and one created through a normal Subversion commit operation.
      The trick is to look for a revision property
      named <CODE class="literal">svn:autoversioned</CODE>.  If present, the
      commit was made by a generic WebDAV client.</P><P>Another feature that may be a useful complement for
      Subversion's autoversioning comes from Apache's
      <CODE class="literal">mod_mime</CODE> module.  If a WebDAV client adds a
      new file to the repository, there's no opportunity for the user
      to set the the <CODE class="literal">svn:mime-type</CODE> property.  This
      might cause the file to appear as a generic icon when viewed
      within a WebDAV shared folder, not having an association with
      any application.  One remedy is to have a sysadmin (or other
      Subversion-knowledgeable person) check out a working copy and
      manually set the <CODE class="literal">svn:mime-type</CODE> property on
      necessary files. But there's potentially no end to such cleanup
      tasks.  Instead, you can use the
      <CODE class="literal">ModMimeUsePathInfo</CODE> directive in your
      Subversion <CODE class="literal">&lt;Location&gt;</CODE> block:</P><PRE class="screen">&lt;Location /repos&gt;
  DAV svn
  SVNPath /var/svn/repository
  SVNAutoversioning on

  ModMimeUsePathInfo on

&lt;/Location&gt;
</PRE><P>This directive allows <CODE class="literal">mod_mime</CODE> to attempt
      automatic deduction of the MIME type on new files that enter the
      repository via autoversioning.  The module looks at the file's
      named extension and possibly the contents as well; if the file
      matches some common patterns, the
      file's <CODE class="literal">svn:mime-type</CODE> property will be set
      automatically.</P></DIV><DIV class="sect1" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title" style="clear: both"><A id="svn.webdav.clients"></A>Client Interoperability</H2></DIV></DIV></DIV><P>All WebDAV clients fall into one of three
      categoriesâstandalone applications, file-explorer
      extensions, or filesystem implementations.  These categories
      broadly define the types of WebDAV functionality available to
      users.  <A class="xref" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.webdav.clients.tbl-1" title="Table&nbsp;C.1.&nbsp;Common WebDAV clients">Table&nbsp;C.1, âCommon WebDAV clientsâ</A> gives our
      categorization as well as a quick description of some common pieces of
      WebDAV-enabled software.  You can find more details about these software
      offerings, as well as their general category, in
      the sections that follow.</P><DIV class="table"><A id="svn.webdav.clients.tbl-1"></A><P class="title"><B>Table&nbsp;C.1.&nbsp;Common WebDAV clients</B></P><DIV class="table-contents"><TABLE summary="Common WebDAV clients" border="1"><COLGROUP><COL><COL><COL><COL><COL><COL></COLGROUP><THEAD><TR><TH>Software</TH><TH>Type</TH><TH>Windows</TH><TH>Mac</TH><TH>Linux</TH><TH>Description</TH></TR></THEAD><TBODY><TR><TD>Adobe Photoshop</TD><TD>Standalone WebDAV application</TD><TD>X</TD><TD>&nbsp;</TD><TD>&nbsp;</TD><TD>Image editing software, allowing direct opening
              from, and writing to, WebDAV URLs</TD></TR><TR><TD>cadaver</TD><TD>Standalone WebDAV application</TD><TD>&nbsp;</TD><TD>X</TD><TD>X</TD><TD>Command-line WebDAV client supporting file
              transfer, tree, and locking operations</TD></TR><TR><TD>DAV Explorer</TD><TD>Standalone WebDAV application</TD><TD>X</TD><TD>X</TD><TD>X</TD><TD>Java GUI tool for exploring WebDAV shares</TD></TR><TR><TD>Adobe Dreamweaver</TD><TD>Standalone WebDAV application</TD><TD>X</TD><TD>&nbsp;</TD><TD>&nbsp;</TD><TD>Web production software able to directly read from
              and write to WebDAV URLs</TD></TR><TR><TD>Microsoft Office</TD><TD>Standalone WebDAV application</TD><TD>X</TD><TD>&nbsp;</TD><TD>&nbsp;</TD><TD>Office productivity suite with several components
              able to directly read from and write to WebDAV
              URLs</TD></TR><TR><TD>Microsoft Web Folders</TD><TD>File-explorer WebDAV extension</TD><TD>X</TD><TD>&nbsp;</TD><TD>&nbsp;</TD><TD>GUI file explorer program able to perform tree
              operations on a WebDAV share</TD></TR><TR><TD>GNOME Nautilus</TD><TD>File-explorer WebDAV extension</TD><TD>&nbsp;</TD><TD>&nbsp;</TD><TD>X</TD><TD>GUI file explorer able to perform tree
              operations on a WebDAV share</TD></TR><TR><TD>KDE Konqueror</TD><TD>File-explorer WebDAV extension</TD><TD>&nbsp;</TD><TD>&nbsp;</TD><TD>X</TD><TD>GUI file explorer able to perform tree
              operations on a WebDAV share</TD></TR><TR><TD>Mac OS X</TD><TD>WebDAV filesystem implementation</TD><TD>&nbsp;</TD><TD>X</TD><TD>&nbsp;</TD><TD>Operating system that has built-in support for mounting
              WebDAV shares.</TD></TR><TR><TD>Novell NetDrive</TD><TD>WebDAV filesystem implementation</TD><TD>X</TD><TD>&nbsp;</TD><TD>&nbsp;</TD><TD>Drive-mapping program for assigning Windows drive
              letters to a mounted remote WebDAV share</TD></TR><TR><TD>SRT WebDrive</TD><TD>WebDAV filesystem implementation</TD><TD>X</TD><TD>&nbsp;</TD><TD>&nbsp;</TD><TD>File transfer software, which, among other things,
              allows the assignment of Windows drive letters to a
              mounted remote WebDAV share</TD></TR><TR><TD>davfs2</TD><TD>WebDAV filesystem implementation</TD><TD>&nbsp;</TD><TD>&nbsp;</TD><TD>X</TD><TD>Linux filesystem driver that allows you to mount a
              WebDAV share</TD></TR></TBODY></TABLE></DIV></DIV><BR class="table-break"><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.webdav.clients.standalone"></A>Standalone WebDAV Applications</H3></DIV></DIV></DIV><P>A WebDAV application is a program that speaks WebDAV
        protocols with a WebDAV server.  We'll cover some of the most
        popular programs with this kind of WebDAV support.</P><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.webdav.clients.standalone.windows"></A>Microsoft Office, Dreamweaver, Photoshop</H4></DIV></DIV></DIV><P>On Windows, several well-known applications
          contain integrated WebDAV client functionality, such as
          Microsoft's Office,
          <SUP>[<A id="id609904" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#ftn.id609904" class="footnote">61</A>]</SUP>
          Adobe's Photoshop and Dreamweaver programs.
          They're able to directly open and save to URLs, and tend to
          make heavy use of WebDAV locks when editing a file.</P><P>Note that while many of these programs also exist for
          Mac OS X, they do not appear to support WebDAV directly
          on that platform.  In fact, on Mac OS X, the
          <SPAN class="guimenu">FileâOpen</SPAN> dialog box doesn't allow
          one to type a path or URL at all.  It's likely that the
          WebDAV features were deliberately left out of Macintosh
          versions of these programs, since OS X already provides such
          excellent low-level filesystem support for WebDAV.</P></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.webdav.clients.standalone.free"></A>cadaver, DAV Explorer</H4></DIV></DIV></DIV><P>cadaver is a bare-bones Unix command-line program for
          browsing and changing WebDAV shares.  Like the Subversion
          client, it uses the neon HTTP libraryânot
          surprisingly, since both neon and cadaver are written by the
          same author.  cadaver is free software (GPL license) and is
          available at
          <A class="ulink" href="http://www.webdav.org/cadaver/" target="_top">http://www.webdav.org/cadaver/</A>.</P><P>Using cadaver is similar to using a command-line FTP
          program, and thus it's extremely useful for basic WebDAV
          debugging.  It can be used to upload or download files in a
          pinch, to examine properties, and to copy, move,
          lock, or unlock files:</P><PRE class="screen">$ cadaver http://host/repos
dav:/repos/&gt; ls
Listing collection `/repos/': succeeded.
Coll: &gt; foobar                                 0  May 10 16:19
      &gt; playwright.el                       2864  May  4 16:18
      &gt; proofbypoem.txt                     1461  May  5 15:09
      &gt; westcoast.jpg                      66737  May  5 15:09

dav:/repos/&gt; put README
Uploading README to `/repos/README':
Progress: [=============================&gt;] 100.0% of 357 bytes succeeded.

dav:/repos/&gt; get proofbypoem.txt
Downloading `/repos/proofbypoem.txt' to proofbypoem.txt:
Progress: [=============================&gt;] 100.0% of 1461 bytes succeeded.
</PRE><P>DAV Explorer is another standalone WebDAV client, written
          in Java.  It's under a free Apache-like license and is
          available at <A class="ulink" href="http://www.ics.uci.edu/~webdav/" target="_top">http://www.ics.uci.edu/~webdav/</A>.
          It does everything cadaver does, but has the
          advantages of being portable and being a more user-friendly GUI
          application.  It's also one of the first clients to support
          the new WebDAV Access Control Protocol (RFC 3744).</P><P>Of course, DAV Explorer's ACL support is useless in this
          case, since <SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN> doesn't support
          it.  The fact that both cadaver and DAV Explorer support
          some limited DeltaV commands isn't particularly useful
          either, since they don't allow <CODE class="literal">MKACTIVITY</CODE>
          requests.  But it's not relevant anyway; we're assuming all
          of these clients are operating against an autoversioning
          repository.</P></DIV></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.webdav.clients.file-explorer-extensions"></A>File-Explorer WebDAV Extensions</H3></DIV></DIV></DIV><P>Some popular file explorer GUI programs support WebDAV
        extensions that allow a user to browse a DAV share as though it
        was just another directory on the local computer, and to
        perform basic tree editing operations on the items in that
        share.  For example, Windows Explorer is able to browse a
        WebDAV server as a â<SPAN class="quote">network place.</SPAN>â  Users can
        drag files to and from the desktop, or can rename, copy, or
        delete files in the usual way.  But because it's only a
        feature of the file explorer, the DAV share isn't visible to
        ordinary applications.  All DAV interaction must happen
        through the explorer interface.</P><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.webdav.clients.file-explorer-extensions.windows"></A>Microsoft Web Folders</H4></DIV></DIV></DIV><P>Microsoft was one of the original backers of the WebDAV
          specification, and first started shipping a client in
          Windows 98, which was known as Web Folders.  This client was
          also shipped in Windows NT 4.0 and Windows 2000.</P><P>The original Web Folders client was an extension to
          Explorer, the main GUI program used to browse filesystems.  It
          works well enough.  In Windows 98, the feature might need to
          be explicitly installed if Web Folders aren't already visible
          inside My Computer.  In Windows 2000, simply
          add a new â<SPAN class="quote">network place,</SPAN>â enter the URL, and the
          WebDAV share will pop up for browsing.</P><P>With the release of Windows XP, Microsoft started shipping
          a new implementation of Web Folders, known as the WebDAV
          Mini-Redirector.  The new implementation is a
          filesystem-level client, allowing WebDAV shares to be mounted
          as drive letters.  Unfortunately, this implementation is
          incredibly buggy.  The client usually tries to convert HTTP
          URLs (<CODE class="literal">http://host/repos</CODE>) into UNC share
          notation (<CODE class="literal">\\host\repos</CODE>); it also often
          tries to use Windows Domain authentication to respond to
          basic-auth HTTP challenges, sending usernames as
          <CODE class="literal">HOST\username</CODE>.  These interoperability
          problems are severe and are documented in numerous places around
          the Web, to the frustration of many users.  Even Greg Stein,
          the original author of Apache's WebDAV module, bluntly
          states that XP Web Folders simply can't operate against an Apache
          server.</P><P>Windows Vista's initial implementation of Web Folders seems to
          be almost the same as XP's, so it has the same sort of
          problems.  With luck, Microsoft will remedy these issues in
          a Vista Service Pack.</P><P>However, there seem to be workarounds for both XP and
          Vista that allow Web Folders to work against Apache.  Users
          have mostly reported success with these techniques, so we'll
          relay them here.</P><P>On Windows XP, you have two options.  First, search
          Microsoft's web site for update KB90730, â<SPAN class="quote">Software
          Update for Web Folders.</SPAN>â  This may fix all your
          problems.  If it doesn't, it seems that the original pre-XP
          Web Folders implementation is still buried within the
          system.  You can unearth it by going to Network
          Places and adding a new network place.  When prompted,
          enter the URL of the repository, but <SPAN class="emphasis"><EM>include a
          port number</EM></SPAN> in the URL.  For
          example, you should enter <STRONG class="userinput"><CODE>http://host/repos</CODE></STRONG> 
          as <STRONG class="userinput"><CODE>http://host:80/repos</CODE></STRONG> instead.
          Respond to any authentication prompts with your Subversion
          credentials.</P><P>On Windows Vista, the same KB90730 update may clear
          everything up.  But there may still be other issues.  Some
          users have reported that Vista considers
          all <CODE class="literal">http://</CODE> connections insecure, and thus
          will always fail any authentication challenges from Apache
          unless the connection happens
          over <CODE class="literal">https://</CODE>.  If you're unable to connect
          to the Subversion repository via SSL, you can tweak the
          system registry to turn off this behavior.  Just change the
          value of the <CODE class="literal">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\WebClient\Parameters\BasicAuthLevel</CODE>
          key from <STRONG class="userinput"><CODE>1</CODE></STRONG> to <STRONG class="userinput"><CODE>2</CODE></STRONG>.  A final warning:  be sure to set up the Web
          Folder to point to the repository's root directory
          (<CODE class="filename">/</CODE>), rather than some subdirectory
          such as <CODE class="filename">/trunk</CODE>.  Vista Web Folders
          seems to work only against repository roots.</P><P>In general, while these workarounds may function for
          you, you might get a better overall experience using a
          third-party WebDAV client such as WebDrive or NetDrive.</P></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.webdav.clients.file-explorer-extensions.linux-de"></A>Nautilus, Konqueror</H4></DIV></DIV></DIV><P>Nautilus is the official file manager/browser for the
          GNOME desktop (<A class="ulink" href="http://www.gnome.org/" target="_top">http://www.gnome.org</A>), and
          Konqueror is the manager/browser for the KDE desktop (<A class="ulink" href="http://www.kde.org/" target="_top">http://www.kde.org</A>).  Both of these applications
          have an explorer-level WebDAV client built in, and they
          operate just fine against an autoversioning repository.</P><P>In GNOME's Nautilus, select the <SPAN class="guimenuitem">FileâOpen
          location</SPAN> menu item and enter the URL in the
          dialog box presented.  The repository should then be
          displayed like any other filesystem.</P><P>In KDE's Konqueror, you need to use the
          <CODE class="literal">webdav://</CODE> scheme when entering the URL in
          the location bar.  If you enter
          an <CODE class="literal">http://</CODE> URL, Konqueror will behave
          like an ordinary web browser.  You'll likely see the generic
          HTML directory listing produced
          by <SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN>.  When you enter
          <STRONG class="userinput"><CODE>webdav://host/repos</CODE></STRONG> instead of
          <STRONG class="userinput"><CODE>http://host/repos</CODE></STRONG>, Konqueror becomes a
          WebDAV client and displays the repository as a
          filesystem.</P></DIV></DIV><DIV class="sect2" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H3 class="title"><A id="svn.webdav.clients.fs-impl"></A>WebDAV Filesystem Implementation</H3></DIV></DIV></DIV><P>The WebDAV filesystem implementation is arguably the best
        sort of WebDAV client.  It's implemented as a low-level
        filesystem module, typically within the operating system's
        kernel.  This means that the DAV share is mounted like any
        other network filesystem, similar to mounting an NFS share on
        Unix or attaching an SMB share as a drive letter in Windows.
        As a result, this sort of client provides completely
        transparent read/write WebDAV access to all programs.
        Applications aren't even aware that WebDAV requests are
        happening.</P><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.webdav.clients.fs-impl.windows"></A>WebDrive, NetDrive</H4></DIV></DIV></DIV><P>Both WebDrive and NetDrive are excellent commercial
          products that allow a WebDAV share to be attached as drive
          letters in Windows.  As a result, you can operate on the
          contents of these WebDAV-backed pseudodrives as easily as
          you can against real local hard drives, and in the same
          ways.  You can purchase WebDrive from South River
          Technologies (<A class="ulink" href="http://www.southrivertech.com/" target="_top">http://www.southrivertech.com</A>).
          Novell's NetDrive is freely available online, but requires
          users to have a NetWare license.</P></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.webdav.clients.fs-impl.macosx"></A>Mac OS X</H4></DIV></DIV></DIV><P>Apple's OS X operating system has an integrated
          filesystem-level WebDAV client.  From the Finder, select the
          <SPAN class="guimenuitem">GoâConnect to Server</SPAN> menu
          item.  Enter a WebDAV URL, and it appears as a disk on the
          desktop, just like any other mounted volume.  You can also
          mount a WebDAV share from the Darwin terminal by using the
          <CODE class="literal">webdav</CODE> filesystem type with the
          <SPAN class="command"><STRONG>mount</STRONG></SPAN> command:</P><PRE class="screen">$ mount -t webdav http://svn.example.com/repos/project /some/mountpoint
$
</PRE><P>Note that if your <SPAN class="command"><STRONG>mod_dav_svn</STRONG></SPAN> is
          older than version 1.2, OS X will refuse to mount the share
          as read/write; it will appear as read-only.  This is because
          OS X insists on locking support for read/write shares, and
          the ability to lock files first appeared in Subversion
          1.2.</P><P>Also, OS X's WebDAV client can sometimes be overly
          sensitive to HTTP redirects.  If OS X is unable to mount the
          repository at all, you may need to enable the <CODE class="literal">BrowserMatch</CODE>
          directive in the Apache server's
          <CODE class="filename">httpd.conf</CODE>:</P><PRE class="screen">BrowserMatch "^WebDAVFS/1.[012]" redirect-carefully
</PRE></DIV><DIV class="sect3" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H4 class="title"><A id="svn.webdav.clients.fs-impl.linux"></A>Linux davfs2</H4></DIV></DIV></DIV><P>Linux davfs2 is a filesystem module for the Linux kernel,
          whose development is organized at <A class="ulink" href="http://dav.sourceforge.net/" target="_top">http://dav.sourceforge.net/</A>.  Once you install
          davfs2, you can mount a WebDAV network share using the usual Linux mount
          command:</P><PRE class="screen">$ mount.davfs http://host/repos /mnt/dav
</PRE></DIV></DIV></DIV><DIV class="footnotes"><BR><HR width="100" align="left"><DIV class="footnote"><P><SUP>[<A id="ftn.id609904" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#id609904" class="para">61</A>] </SUP>WebDAV support was removed from Microsoft Access for
              some reason, but it exists in the rest of the Office
              suite.</P></DIV></DIV></DIV><DIV class="appendix" lang="en" xml:lang="en"><DIV class="titlepage"><DIV><DIV><H2 class="title"><A id="svn.copyright"></A>Appendix&nbsp;D.&nbsp;Copyright</H2></DIV></DIV></DIV><PRE class="programlisting">
Copyright (c) 2002-2008
Ben Collins-Sussman, Brian W. Fitzpatrick, C. Michael Pilato.  

This work is licensed under the Creative Commons Attribution License.
To view a copy of this license, visit
http://creativecommons.org/licenses/by/2.0/ or send a letter to
Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305,
USA.

A summary of the license is given below, followed by the full legal
text.

--------------------------------------------------------------------

You are free:

    * to copy, distribute, display, and perform the work
    * to make derivative works
    * to make commercial use of the work

Under the following conditions:
	
Attribution. You must give the original author credit.

    * For any reuse or distribution, you must make clear to others the
      license terms of this work.

    * Any of these conditions can be waived if you get permission from
      the author.

Your fair use and other rights are in no way affected by the above.

The above is a summary of the full license below.

====================================================================

Creative Commons Legal Code
Attribution 2.0

CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE
LEGAL SERVICES. DISTRIBUTION OF THIS LICENSE DOES NOT CREATE AN
ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS
INFORMATION ON AN "AS-IS" BASIS. CREATIVE COMMONS MAKES NO WARRANTIES
REGARDING THE INFORMATION PROVIDED, AND DISCLAIMS LIABILITY FOR
DAMAGES RESULTING FROM ITS USE.

License

THE WORK (AS DEFINED BELOW) IS PROVIDED UNDER THE TERMS OF THIS
CREATIVE COMMONS PUBLIC LICENSE ("CCPL" OR "LICENSE"). THE WORK IS
PROTECTED BY COPYRIGHT AND/OR OTHER APPLICABLE LAW. ANY USE OF THE
WORK OTHER THAN AS AUTHORIZED UNDER THIS LICENSE OR COPYRIGHT LAW IS
PROHIBITED.

BY EXERCISING ANY RIGHTS TO THE WORK PROVIDED HERE, YOU ACCEPT AND
AGREE TO BE BOUND BY THE TERMS OF THIS LICENSE. THE LICENSOR GRANTS
YOU THE RIGHTS CONTAINED HERE IN CONSIDERATION OF YOUR ACCEPTANCE OF
SUCH TERMS AND CONDITIONS.

1. Definitions

   a. "Collective Work" means a work, such as a periodical issue,
      anthology or encyclopedia, in which the Work in its entirety in
      unmodified form, along with a number of other contributions,
      constituting separate and independent works in themselves, are
      assembled into a collective whole. A work that constitutes a
      Collective Work will not be considered a Derivative Work (as
      defined below) for the purposes of this License.

   b. "Derivative Work" means a work based upon the Work or upon the
      Work and other pre-existing works, such as a translation,
      musical arrangement, dramatization, fictionalization, motion
      picture version, sound recording, art reproduction, abridgment,
      condensation, or any other form in which the Work may be recast,
      transformed, or adapted, except that a work that constitutes a
      Collective Work will not be considered a Derivative Work for the
      purpose of this License. For the avoidance of doubt, where the
      Work is a musical composition or sound recording, the
      synchronization of the Work in timed-relation with a moving
      image ("synching") will be considered a Derivative Work for the
      purpose of this License.

   c. "Licensor" means the individual or entity that offers the Work
      under the terms of this License.

   d. "Original Author" means the individual or entity who created the Work.

   e. "Work" means the copyrightable work of authorship offered under
      the terms of this License.

   f. "You" means an individual or entity exercising rights under this
      License who has not previously violated the terms of this
      License with respect to the Work, or who has received express
      permission from the Licensor to exercise rights under this
      License despite a previous violation.

2. Fair Use Rights. Nothing in this license is intended to reduce,
   limit, or restrict any rights arising from fair use, first sale or
   other limitations on the exclusive rights of the copyright owner
   under copyright law or other applicable laws.

3. License Grant. Subject to the terms and conditions of this License,
   Licensor hereby grants You a worldwide, royalty-free,
   non-exclusive, perpetual (for the duration of the applicable
   copyright) license to exercise the rights in the Work as stated
   below:

   a. to reproduce the Work, to incorporate the Work into one or more
      Collective Works, and to reproduce the Work as incorporated in
      the Collective Works;

   b. to create and reproduce Derivative Works;

   c. to distribute copies or phonorecords of, display publicly,
      perform publicly, and perform publicly by means of a digital
      audio transmission the Work including as incorporated in
      Collective Works;

   d. to distribute copies or phonorecords of, display publicly,
      perform publicly, and perform publicly by means of a digital
      audio transmission Derivative Works.

   e.

      For the avoidance of doubt, where the work is a musical composition:

         i. Performance Royalties Under Blanket Licenses. Licensor
            waives the exclusive right to collect, whether
            individually or via a performance rights society
            (e.g. ASCAP, BMI, SESAC), royalties for the public
            performance or public digital performance (e.g. webcast)
            of the Work.

        ii. Mechanical Rights and Statutory Royalties. Licensor waives
            the exclusive right to collect, whether individually or
            via a music rights agency or designated agent (e.g. Harry
            Fox Agency), royalties for any phonorecord You create from
            the Work ("cover version") and distribute, subject to the
            compulsory license created by 17 USC Section 115 of the US
            Copyright Act (or the equivalent in other jurisdictions).

   f. Webcasting Rights and Statutory Royalties. For the avoidance of
      doubt, where the Work is a sound recording, Licensor waives the
      exclusive right to collect, whether individually or via a
      performance-rights society (e.g. SoundExchange), royalties for
      the public digital performance (e.g. webcast) of the Work,
      subject to the compulsory license created by 17 USC Section 114
      of the US Copyright Act (or the equivalent in other
      jurisdictions).

The above rights may be exercised in all media and formats whether now
known or hereafter devised. The above rights include the right to make
such modifications as are technically necessary to exercise the rights
in other media and formats. All rights not expressly granted by
Licensor are hereby reserved.

4. Restrictions.The license granted in Section 3 above is expressly
   made subject to and limited by the following restrictions:

   a. You may distribute, publicly display, publicly perform, or
      publicly digitally perform the Work only under the terms of this
      License, and You must include a copy of, or the Uniform Resource
      Identifier for, this License with every copy or phonorecord of
      the Work You distribute, publicly display, publicly perform, or
      publicly digitally perform. You may not offer or impose any
      terms on the Work that alter or restrict the terms of this
      License or the recipients' exercise of the rights granted
      hereunder. You may not sublicense the Work. You must keep intact
      all notices that refer to this License and to the disclaimer of
      warranties. You may not distribute, publicly display, publicly
      perform, or publicly digitally perform the Work with any
      technological measures that control access or use of the Work in
      a manner inconsistent with the terms of this License
      Agreement. The above applies to the Work as incorporated in a
      Collective Work, but this does not require the Collective Work
      apart from the Work itself to be made subject to the terms of
      this License. If You create a Collective Work, upon notice from
      any Licensor You must, to the extent practicable, remove from
      the Collective Work any reference to such Licensor or the
      Original Author, as requested. If You create a Derivative Work,
      upon notice from any Licensor You must, to the extent
      practicable, remove from the Derivative Work any reference to
      such Licensor or the Original Author, as requested.

   b. If you distribute, publicly display, publicly perform, or
      publicly digitally perform the Work or any Derivative Works or
      Collective Works, You must keep intact all copyright notices for
      the Work and give the Original Author credit reasonable to the
      medium or means You are utilizing by conveying the name (or
      pseudonym if applicable) of the Original Author if supplied; the
      title of the Work if supplied; to the extent reasonably
      practicable, the Uniform Resource Identifier, if any, that
      Licensor specifies to be associated with the Work, unless such
      URI does not refer to the copyright notice or licensing
      information for the Work; and in the case of a Derivative Work,
      a credit identifying the use of the Work in the Derivative Work
      (e.g., "French translation of the Work by Original Author," or
      "Screenplay based on original Work by Original Author"). Such
      credit may be implemented in any reasonable manner; provided,
      however, that in the case of a Derivative Work or Collective
      Work, at a minimum such credit will appear where any other
      comparable authorship credit appears and in a manner at least as
      prominent as such other comparable authorship credit.

5. Representations, Warranties and Disclaimer

UNLESS OTHERWISE MUTUALLY AGREED TO BY THE PARTIES IN WRITING,
LICENSOR OFFERS THE WORK AS-IS AND MAKES NO REPRESENTATIONS OR
WARRANTIES OF ANY KIND CONCERNING THE WORK, EXPRESS, IMPLIED,
STATUTORY OR OTHERWISE, INCLUDING, WITHOUT LIMITATION, WARRANTIES OF
TITLE, MERCHANTIBILITY, FITNESS FOR A PARTICULAR PURPOSE,
NONINFRINGEMENT, OR THE ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY,
OR THE PRESENCE OF ABSENCE OF ERRORS, WHETHER OR NOT
DISCOVERABLE. SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OF IMPLIED
WARRANTIES, SO SUCH EXCLUSION MAY NOT APPLY TO YOU.

6. Limitation on Liability. EXCEPT TO THE EXTENT REQUIRED BY
   APPLICABLE LAW, IN NO EVENT WILL LICENSOR BE LIABLE TO YOU ON ANY
   LEGAL THEORY FOR ANY SPECIAL, INCIDENTAL, CONSEQUENTIAL, PUNITIVE
   OR EXEMPLARY DAMAGES ARISING OUT OF THIS LICENSE OR THE USE OF THE
   WORK, EVEN IF LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
   DAMAGES.

7. Termination

   a. This License and the rights granted hereunder will terminate
      automatically upon any breach by You of the terms of this
      License. Individuals or entities who have received Derivative
      Works or Collective Works from You under this License, however,
      will not have their licenses terminated provided such
      individuals or entities remain in full compliance with those
      licenses. Sections 1, 2, 5, 6, 7, and 8 will survive any
      termination of this License.

   b. Subject to the above terms and conditions, the license granted
      here is perpetual (for the duration of the applicable copyright
      in the Work). Notwithstanding the above, Licensor reserves the
      right to release the Work under different license terms or to
      stop distributing the Work at any time; provided, however that
      any such election will not serve to withdraw this License (or
      any other license that has been, or is required to be, granted
      under the terms of this License), and this License will continue
      in full force and effect unless terminated as stated above.

8. Miscellaneous

   a. Each time You distribute or publicly digitally perform the Work
      or a Collective Work, the Licensor offers to the recipient a
      license to the Work on the same terms and conditions as the
      license granted to You under this License.

   b. Each time You distribute or publicly digitally perform a
      Derivative Work, Licensor offers to the recipient a license to
      the original Work on the same terms and conditions as the
      license granted to You under this License.

   c. If any provision of this License is invalid or unenforceable
      under applicable law, it shall not affect the validity or
      enforceability of the remainder of the terms of this License,
      and without further action by the parties to this agreement,
      such provision shall be reformed to the minimum extent necessary
      to make such provision valid and enforceable.

   d. No term or provision of this License shall be deemed waived and
      no breach consented to unless such waiver or consent shall be in
      writing and signed by the party to be charged with such waiver
      or consent.

   e. This License constitutes the entire agreement between the
      parties with respect to the Work licensed here. There are no
      understandings, agreements or representations with respect to
      the Work not specified here. Licensor shall not be bound by any
      additional provisions that may appear in any communication from
      You. This License may not be modified without the mutual written
      agreement of the Licensor and You.

Creative Commons is not a party to this License, and makes no warranty
whatsoever in connection with the Work. Creative Commons will not be
liable to You or any party on any legal theory for any damages
whatsoever, including without limitation any general, special,
incidental or consequential damages arising in connection to this
license. Notwithstanding the foregoing two (2) sentences, if Creative
Commons has expressly identified itself as the Licensor hereunder, it
shall have all rights and obligations of Licensor.

Except for the limited purpose of indicating to the public that the
Work is licensed under the CCPL, neither party will use the trademark
"Creative Commons" or any related trademark or logo of Creative
Commons without the prior written consent of Creative Commons. Any
permitted use will be in compliance with Creative Commons'
then-current trademark usage guidelines, as may be published on its
website or otherwise made available upon request from time to time.

Creative Commons may be contacted at http://creativecommons.org/.

====================================================================
</PRE></DIV><DIV class="index"><DIV class="titlepage"><DIV><DIV><H2 class="title"><A id="svn.index"></A>Index</H2></DIV></DIV></DIV><DIV class="index"><DIV class="indexdiv"><H3>B</H3><DL><DT>BASE, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.revs.keywords">Revision Keywords</A></DT></DL></DIV><DIV class="indexdiv"><H3>C</H3><DL><DT>COMMITTED, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.revs.keywords">Revision Keywords</A></DT><DT>Concurrent Versions System (CVS), <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.preface">Preface</A></DT></DL></DIV><DIV class="indexdiv"><H3>H</H3><DL><DT>HEAD, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.revs.keywords">Revision Keywords</A></DT></DL></DIV><DIV class="indexdiv"><H3>P</H3><DL><DT>PREV, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.revs.keywords">Revision Keywords</A></DT><DT>properties, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.advanced.props">Properties</A></DT></DL></DIV><DIV class="indexdiv"><H3>R</H3><DL><DT>repository</DT><DD><DL><DT>hooks</DT><DD><DL><DT>post-commit, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.reposhooks.post-commit">post-commit</A></DT><DT>post-lock, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.reposhooks.post-lock">post-lock</A></DT><DT>post-revprop-change, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.reposhooks.post-revprop-change">post-revprop-change</A></DT><DT>post-unlock, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.reposhooks.post-unlock">post-unlock</A></DT><DT>pre-commit, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.reposhooks.pre-commit">pre-commit</A></DT><DT>pre-lock, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.reposhooks.pre-lock">pre-lock</A></DT><DT>pre-revprop-change, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.reposhooks.pre-revprop-change">pre-revprop-change</A></DT><DT>pre-unlock, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.reposhooks.pre-unlock">pre-unlock</A></DT><DT>start-commit, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.reposhooks.start-commit">start-commit</A></DT></DL></DD></DL></DD><DT>revisions</DT><DD><DL><DT>revision keywords, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.revs.keywords">Revision Keywords</A></DT><DT>specified as dates, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.tour.revs.dates">Revision Dates</A></DT></DL></DD></DL></DIV><DIV class="indexdiv"><H3>S</H3><DL><DT>Subversion</DT><DD><DL><DT>history of, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.intro.history">Subversion's History</A></DT></DL></DD><DT>svn</DT><DD><DL><DT>subcommands</DT><DD><DL><DT>add, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.add">svn add</A></DT><DT>blame, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.blame">svn blame</A></DT><DT>cat, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.cat">svn cat</A></DT><DT>changelist, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.changelist">svn changelist</A></DT><DT>checkout, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.checkout">svn checkout</A></DT><DT>cleanup, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.cleanup">svn cleanup</A></DT><DT>commit, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.commit">svn commit</A></DT><DT>copy, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.copy">svn copy</A></DT><DT>delete, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.delete">svn delete</A></DT><DT>diff, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.diff">svn diff</A></DT><DT>export, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.export">svn export</A></DT><DT>help, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.help">svn help</A></DT><DT>import, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.import">svn import</A></DT><DT>info, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.info">svn info</A></DT><DT>list, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.list">svn list</A></DT><DT>lock, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.lock">svn lock</A></DT><DT>log, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.log">svn log</A></DT><DT>merge, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.merge">svn merge</A></DT><DT>mergeinfo, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.mergeinfo">svn mergeinfo</A></DT><DT>mkdir, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.mkdir">svn mkdir</A></DT><DT>move, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.move">svn move</A></DT><DT>propdel, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.propdel">svn propdel</A></DT><DT>propedit, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.propedit">svn propedit</A></DT><DT>propget, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.propget">svn propget</A></DT><DT>proplist, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.proplist">svn proplist</A></DT><DT>propset, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.propset">svn propset</A></DT><DT>resolve, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.resolve">svn resolve</A></DT><DT>resolved, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.resolved">svn resolved</A></DT><DT>revert, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.revert">svn revert</A></DT><DT>status, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.status">svn status</A></DT><DT>switch, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.switch">svn switch</A></DT><DT>unlock, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.unlock">svn unlock</A></DT><DT>update, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svn.c.update">svn update</A></DT></DL></DD></DL></DD><DT>svnadmin</DT><DD><DL><DT>subcommands</DT><DD><DL><DT>crashtest, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.crashtest">svnadmin crashtest</A></DT><DT>create, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.create">svnadmin create</A></DT><DT>deltify, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.deltify">svnadmin deltify</A></DT><DT>dump, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.dump">svnadmin dump</A></DT><DT>help, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.help">svnadmin help</A></DT><DT>hotcopy, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.hotcopy">svnadmin hotcopy</A></DT><DT>list-dblogs, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.list-dblogs">svnadmin list-dblogs</A></DT><DT>list-unused-dblogs, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.list-unused-dblogs">svnadmin list-unused-dblogs</A></DT><DT>load, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.load">svnadmin load</A></DT><DT>lslocks, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.lslocks">svnadmin lslocks</A></DT><DT>lstxns, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.lstxns">svnadmin lstxns</A></DT><DT>recover, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.recover">svnadmin recover</A></DT><DT>rmlocks, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.rmlocks">svnadmin rmlocks</A></DT><DT>rmtxns, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.rmtxns">svnadmin rmtxns</A></DT><DT>setlog, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.setlog">svnadmin setlog</A></DT><DT>setrevprop, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.setrevprop">svnadmin setrevprop</A></DT><DT>setuuid, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.setuuid">svnadmin setuuid</A></DT><DT>upgrade, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.upgrade">svnadmin upgrade</A></DT><DT>verify, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnadmin.c.verify">svnadmin verify</A></DT></DL></DD></DL></DD><DT>svndumpfilter</DT><DD><DL><DT>subcommands</DT><DD><DL><DT>exclude, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svndumpfilter.commands.c.exclude">svndumpfilter exclude</A></DT><DT>help, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svndumpfilter.commands.c.help">svndumpfilter help</A></DT><DT>include, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svndumpfilter.commands.c.include">svndumpfilter include</A></DT></DL></DD></DL></DD><DT>svnlook</DT><DD><DL><DT>subcommands</DT><DD><DL><DT>author, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.author">svnlook author</A></DT><DT>cat, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.cat">svnlook cat</A></DT><DT>changed, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.changed">svnlook changed</A></DT><DT>date, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.date">svnlook date</A></DT><DT>diff, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.diff">svnlook diff</A></DT><DT>dirs-changed, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.dirs-changed">svnlook dirs-changed</A></DT><DT>help, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.help">svnlook help</A></DT><DT>history, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.history">svnlook history</A></DT><DT>info, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.info">svnlook info</A></DT><DT>lock, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.lock">svnlook lock</A></DT><DT>log, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.log">svnlook log</A></DT><DT>propget, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.propget">svnlook propget</A></DT><DT>proplist, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.proplist">svnlook proplist</A></DT><DT>tree, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.tree">svnlook tree</A></DT><DT>uuid, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.uuid">svnlook uuid</A></DT><DT>youngest, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnlook.c.youngest">svnlook youngest</A></DT></DL></DD></DL></DD><DT>svnsync</DT><DD><DL><DT>subcommands</DT><DD><DL><DT>copy-revprops, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnsync.c.copy-revprops">svnsync copy-revprops</A></DT><DT>help, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnsync.c.help">svnsync help</A></DT><DT>initialize, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnsync.c.init">svnsync initialize</A></DT><DT>synchronize, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnsync.c.sync">svnsync synchronize</A></DT></DL></DD></DL></DD><DT>svnversion, <A class="indexterm" href="http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.ref.svnversion.re">svnversion</A></DT></DL></DIV></DIV></DIV></DIV>
<SCRIPT src="./0101 Version Control with Subversion_files/urchin.js" type="text/javascript"></SCRIPT>
<SCRIPT type="text/javascript">
_uacct = "UA-557726-1";
urchinTracker();
</SCRIPT>

</BODY></HTML>