<html>
<head><title>Print Story</title>
<link rel="stylesheet" type="text/css" media="all" href="/modules/logintoboggan/logintoboggan.css"/>
<link rel="stylesheet" type="text/css" media="all" href="/modules/node/node.css"/>
<link rel="stylesheet" type="text/css" media="all" href="/modules/system/defaults.css"/>
<link rel="stylesheet" type="text/css" media="all" href="/modules/system/system.css"/>
<link rel="stylesheet" type="text/css" media="all" href="/modules/system/system-menus.css"/>
<link rel="stylesheet" type="text/css" media="all" href="/modules/user/user.css"/>
<link rel="stylesheet" type="text/css" media="all" href="/sites/all/themes/uz_theme/node.css"/>
<link rel="stylesheet" type="text/css" media="all" href="/sites/all/themes/uz_theme/defaults.css"/>
<link rel="stylesheet" type="text/css" media="all" href="/sites/all/themes/uz_theme/system.css"/>
<link rel="stylesheet" type="text/css" media="all" href="/sites/all/themes/uz_theme/system-menus.css"/>
<link rel="stylesheet" type="text/css" media="all" href="/sites/all/themes/uz_theme/user.css"/>
<script type="text/javascript" language="JavaScript">
function printArticle() {
  if (window.print) {
    setTimeout('window.print();',200);
  } else if (navigator.userAgent.toLowerCase().indexOf("mac") != -1) {
    alert("Press 'CMD+p' on your keyboard to print article.");
  } else {
    alert("Press 'Ctrl+p' on your keyboard to print article.")
  }
}
</script>
</head>
<body style="margin: 15px;">

<table width="100%">
<tr>
  <td>
  </td>
  <td align="right"><a href="#" onclick="window.close(); return false;">Close Window</a>

  <p>
  <a href="#" onclick="printArticle(); return false;">Print Story</a>
  </td>
</tr>
</table>

<h1>JavaServer Faces (JSF) vs Struts</h1>

<div class="storybody">

  <p><i>My JSF article series and Meet the Experts appearance on IBM developerWorks received a lot of feedback.</i></p>
<p>I would have to say, the most common question or feedback came along the lines of comparing Struts to JSF. I thought it would be a good idea to compare JSF to Struts by evaluating various features that an application architect would look for in a Web application framework. This article will compare specific features. Those on which I will focus include:</p>
<ul>
<li>Maturity </li>
<li>Controller Flexibility/Event Handling </li>
<li>Navigation </li>
<li>Page development </li>
<li>Integration </li>
<li>Extensibility </li>
</ul>
<p>Certainly, there are other places in which you might want to do a comparison, such as performance, but I'll focus on the set I just mentioned. I'll also spend more time on the Controller and Navigation sections because they are the heart of the frameworks. Performance of JSF is specific to the vendor implementation, and I always encourage people to perform their own performance tests against their own set of requirements because there are too many factors that can affect performance. A performance evaluation would be unfair. Other areas such as page layout, validation, and exception handling were also left out in the interest of saving space.</p>
<h2>Maturity</h2>
<p>Struts has been around for a few years and has the edge on maturity. I know of several successful production systems that were built using the Struts framework. One example is the WebSphere Application Server Web-based administrative console. JavaServer Faces(JSF), however, has been in draft for 2 years. Several companies, including IBM as well as the creator of Struts, Craig McClanahan, have contributed to the creation of JSF during that time. Nonetheless, it will take some time to see a few systems deployed.</p>
<p>Struts definitely has the edge in this category. With JSF, however, you can rely on different levels of support depending on which implementation you choose. For example, the JSF framework inside WebSphere Studio comes with IBM support.</p>
<h2>Controller Flexibility/Event Handling</h2>
<p>One of the major goals of Struts was to implement a framework that utilized Sun's Model 2 framework and reduced the common and often repetitive tasks in Servlet and JSP development. The heart of Struts is the Controller. Struts uses the Front Controller Pattern and Command Pattern. A single servlet takes a request, translates HTTP parameters into a Java ActionForm, and passes the ActionForm into a Struts Action class, which is a command. The URI denotes which Action class to go to. The Struts framework has one single event handler for the HTTP request. Once the request is met, the Action returns the result back to the front controller, which then uses it to choose where to navigate next. The interaction is demonstrated in Figure 1.</p>
<p>JSF uses the Page Controller Pattern. Although there is a single servlet every faces request goes through, the job of the servlet is to receive a faces page with components. It will then fire off events for each component and render the components using a render toolkit. The components can also be bound to data from the model. The faces life-cycle is illustrated in Figure 2.</p>
<p>JSF is the winner in this area, because it adds many benefits of a front controller, but at the same time gives you the flexibility of the Page Controller. JSF can have several event handlers on a page while Struts is geared to one event per request. In addition, with Struts, your ActionForms have to extend Struts classes, creating another layer of tedious coding or bad design by forcing your model to be ActionForms. JSF, on the other hand, gives developers the ability to hook into the model without breaking layering. In other words, the model is still unaware of JSF.</p>
<h2>Navigation</h2>
<p>Navigation is a key feature of both Struts and JSF. Both frameworks have a declarative navigation model and define navigation using rules inside their XML configuration file. There are 2 types of navigation: static navigation - when one page flows directly to the next; and dynamic navigation - when some action or logic determines which page to go to.</p>
<p>Both JSF and Struts currently support both types of navigation.</p>
<p><b>Struts</b><br />Struts uses the notion of forwards to define navigation. Based on some string, the Struts framework decides which JSP to forward to and render. You can define a forward by creating an Action as shown in the snippet below.</p>
<p><font color="#008000">&lt;action path="/myForward" forward="/target.jsp"&gt; &lt;/action&gt; </font></p>
<p>Struts supports dynamic forwarding by defining a forward specifically on an Action definition. Struts allows an Action to have multiple forwards.</p>
<p> </p>
<pre><font size="2" color="#008000">
&lt;action-mappings&gt;
		&lt;action name="myForm" path="/myACtion" scope="request"
		 type="strutsnav.actions.MyAction"&gt;
			&lt;forward name="success" path="./target.jsp"&gt;
			&lt;/forward&gt;
			&lt;forward name="error" path="./error.jsp"&gt;
			&lt;/forward&gt;

		&lt;/action&gt;
	&lt;/action-mappings&gt;
</font></pre>
<p>Developers can then programmatically choose which forward to return.</p>
<p> </p>
<pre><font size="2" color="#008000">
public ActionForward execute(
		ActionMapping mapping,
		ActionForm form,
		HttpServletRequest request,
		HttpServletResponse response)
		throws Exception {

		ActionErrors errors = new ActionErrors();
		ActionForward forward = new ActionForward(); // return value
		MyForm myForm = (MyForm) form;

		try {

			// do something here

		} catch (Exception e) {

			// Report the error using the appropriate name and ID.
			errors.add("name", new ActionError("id"));
			forward = mapping.findForward("success");
			return (forward);
		}

		forward = mapping.findForward("success");
		return (forward);

	}
</font></pre>
<p><b>JSF Static Navigation</b><br />JSF supports navigation by defining navigation rules in the faces configuration file. The example below shows a navigation rule defining how one page goes to the next.</p>
<p> </p>
<pre><font size="2" color="#008000">
&lt;navigation-rule&gt;
		&lt;from-view-id&gt;/FromPage.jsp&lt;/from-view-id&gt;
		&lt;navigation-case&gt;
			&lt;from-outcome&gt;success&lt;/from-outcome&gt;
			&lt;to-view-id&gt;/ToPage.jsp&lt;/to-view-id&gt;
		&lt;/navigation-case&gt;
	&lt;/navigation-rule&gt;
</font></pre>
<p>However, unlike Struts, JSF navigation is applied on the page level and can be action-independent. The action is hard coded into the component allowing for finer grain control on the page. You can have various components on the page define different actions sharing the same navigation rule.</p>
<!--portletbreak-->
<p><font color="#008000">&lt;hx:commandExButton type="submit" value="Submit"<br />styleClass="commandExButton" id="button1" action="success" /&gt; </font></p>
<p>JSF also supports dynamic navigation by allowing components go to an action handler.</p>
<p><font color="#008000">&lt;hx:commandExButton type="submit" value="Submit"<br />styleClass="commandExButton" id="button1" action="#<br />{pc_FromPage.doButton1Action}" /&gt; </font></p>
<p>Developers can then code action handlers on any class to make the dynamic navigation decision.</p>
<p> </p>
<pre><font size="2" color="#008000">
public String doButton1Action() {
		return "success";
	}
</font></pre>
<p>Even though navigation rules don't need to specify the action in order to support dynamic navigation, JSF allows you to define the action on the navigation rule if you so choose. This allows you to force a specific navigation rule to go through an action.</p>
<p> </p>
<pre><font size="2" color="#008000">
&lt;navigation-rule&gt;
		&lt;from-view-id&gt;/FromPage.jsp&lt;/from-view-id&gt;
		&lt;navigation-case&gt;
			&lt;from-action&gt;#{pc_FromPage.doButton1Action}&lt;/from-action&gt;
			&lt;from-outcome&gt;success&lt;/from-outcome&gt;
			&lt;to-view-id&gt;/ToPage.jsp&lt;/to-view-id&gt;
		&lt;/navigation-case&gt;
	&lt;/navigation-rule&gt;
</font></pre>
<p>Both Struts and JSF are pretty flexible from a navigation stand point, but JSF allows for a more flexible approach and a better design because the navigation rule is decoupled from the Action. Struts forces you to hook into an action, either by a dummy URI or an action class. In addition, it is easier in JSF to have one page with various navigation rules without having to code a lot of if-else logic.</p>
<h2>Page Development</h2>
<p>JSF was built with a component model in mind to allow tool developers to support RAD development. Struts had no such vision. Although the Struts framework provides custom libraries to hook into Action Forms and offers some helper utilities, it is geared toward a JSP- and HTTP-centric approach. SF provides the ability to build components from a variety of view technologies and does it in such a way to be toolable. JSF, therefore, is the winner in this area.</p>
<h2>Integration</h2>
<p>Struts was designed to be model neutral, so there is no special hooks into a model layer. There are a view reflection-based copy utilities, but that's it. Usually, page data must be moved from an Action Form into another Model input format and requires manual coding. The ActionForm class, provides an extra layer of tedious coding and state transition.</p>
<p>JSF, on the other hand, hides the details of any data inside the component tree. Rich components such as data grids can be bound to any Java class. This allows powerful RAD development, such as the combination of JSF and SDO. I will discuss this further in future articles.</p>
<h2>Extensibility</h2>
<p>Both Struts and JSF provides opportunities to extend the framework to meet expanding requirements. The main hook for Struts is a RequestProcessor class that has various callback methods throughout the life-cycle of a request. A developer can extend this class to replace or enhance the framework.</p>
<p>JSF provides equivalent functionality by allowing you to extend special life-cycle interfaces. In addition, JSF totally decouples the render phase from the controller allowing developers to provide their own render toolkits for building custom components. This is one of the powerful features in JSF that Struts does not provide. JSF clearly has the advantage in this area.</p>
<h2>Conclusion</h2>
<p>In general, JSF is a much more flexible framework, but this is no accident. Struts is a sturdy framework and works well. JSF was actually able to learn a great deal from Struts projects. I see JSF becoming a dominant framework because of its flexible controller and navigation. Furthermore, JSF is built with integration and extensibility in mind. If you are starting a new project today, you'd have to consider many factors. If you have an aggressive schedule with not much time to deal with evaluating different vendors or dealing with support for new JSF implementations, Struts may be the way to go. But from a strategic direction and programming model, JSF should be the target of new applications. I encourage developers to take time to learn JSF and begin using them for new projects. In addition, I would consider choosing JSF vendors based on component set and RAD tools. JSF isn't easier than Struts when developing by hand, but using a RAD JSF tool like WebSphere Studio can greatly increase your productivity.</p>
<h2>References</h2>
<li><i>Developing JSF Applications Using WebSphere Studio:</i> <a target="new" href="http://www-106.ibm.com/developerworks/websphere/techjournal/0401_barcia/barcia.html">www-106.ibm.com/developerworks/ websphere/techjournal/0401_barcia/barcia.html</a> </li>
<li><i>Developing JavaServer Faces Portlets Using WebSphere Studio:</i> <a target="new" href="http://www-106.ibm.com/developerworks/websphere/techjournal/0406_barcia/0406_barcia.html">www-106.ibm.com/developerworks/ websphere/techjournal/0406_barcia/0406_barcia.html</a> </li>
<li><i>Meet the Experts: Roland Barcia on JSF and JMS:</i> <a target="new" href="http://www-106.ibm.com/developerworks/websphere/library/techarticles/0407_barcia/0407_barcia.html">www-106.ibm.com/developerworks/websphere/ library/techarticles/0407_barcia/0407_barcia.html</a> </li>
<li><i>JSF Central:</i> <a target="new" href="http://www.jsfcentral.com">www.jsfcentral.com</a> </li>
<li><i>IBM WebSphere -Deployment and Advanced Configuration:</i> <a target="new" href="http://www.amazon.com/exec/obidos/tg/detail/-/0131468626/qid=1092062894/sr=8-1/ref=sr_8_xs_ap_i1_xgl14/103-2058110-8899867?v=glance&amp;s=books&amp;n=507846">Click Here !</a> </li>
  <p>

</div>

<p>
<small>&copy; 2008 SYS-CON Media Inc.</small>
</body>
</html>
