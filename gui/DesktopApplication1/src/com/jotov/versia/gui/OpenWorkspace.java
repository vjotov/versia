/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * OpenWorkspace.java
 *
 * Created on 2009-12-31, 10:39:48
 */
package com.jotov.versia.gui;

import com.jotov.versia.WorkEnvironment;
import com.jotov.versia.command.CommandFactory;
import com.jotov.versia.command.ICommand;
import com.jotov.versia.worspaceInfo;
import desktopapplication1.DesktopApplication1;
import desktopapplication1.DesktopApplication1View;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import org.jdesktop.application.Action;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 *
 * @author v
 */
public class OpenWorkspace extends javax.swing.JDialog {

    private JSONArray projects;
    private JSONArray releases;
    private JSONArray workspaces;
    DefaultMutableTreeNode workspaceRoot;
    DefaultTreeModel workspaceModel;
    private String actionCommand;

    /** Creates new form OpenWorkspace */
    public OpenWorkspace(java.awt.Frame parent) {
        super(parent, true);

        workspaceRoot = new DefaultMutableTreeNode();
        workspaceModel = new DefaultTreeModel(workspaceRoot);

        initComponents();
        getRootPane().setDefaultButton(jbCancel);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlProduct = new javax.swing.JLabel();
        jbNewProduct = new javax.swing.JButton();
        jbEditProduct = new javax.swing.JButton();
        jspProjects = new javax.swing.JScrollPane();
        jlstProducts = new javax.swing.JList();
        jlRelease = new javax.swing.JLabel();
        jbNewRelease = new javax.swing.JButton();
        jbEditRelease = new javax.swing.JButton();
        jspReleases = new javax.swing.JScrollPane();
        jlstReleases = new javax.swing.JList();
        jlWorkspace = new javax.swing.JLabel();
        jbNewWorkspace = new javax.swing.JButton();
        jbEditWorkspace = new javax.swing.JButton();
        jspWorkspaces = new javax.swing.JScrollPane();
        jtWorkspaces = new javax.swing.JTree();
        jbOK = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jbLoadWS = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(desktopapplication1.DesktopApplication1.class).getContext().getResourceMap(OpenWorkspace.class);
        jlProduct.setText(resourceMap.getString("jlProduct.text")); // NOI18N
        jlProduct.setName("jlProduct"); // NOI18N

        jbNewProduct.setText(resourceMap.getString("jbNewProduct.text")); // NOI18N
        jbNewProduct.setName("jbNewProduct"); // NOI18N
        jbNewProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNewProductActionPerformed(evt);
            }
        });

        jbEditProduct.setText(resourceMap.getString("jbEditProduct.text")); // NOI18N
        jbEditProduct.setEnabled(false);
        jbEditProduct.setName("jbEditProduct"); // NOI18N

        jspProjects.setName("jspProjects"); // NOI18N

        jlstProducts.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jlstProducts.setName("jlstProducts"); // NOI18N
        loadProducts();
        jlstProducts.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jlstProductsValueChanged(evt);
            }
        });
        jspProjects.setViewportView(jlstProducts);

        jlRelease.setText(resourceMap.getString("jlRelease.text")); // NOI18N
        jlRelease.setName("jlRelease"); // NOI18N

        jbNewRelease.setText(resourceMap.getString("jbNewRelease.text")); // NOI18N
        jbNewRelease.setEnabled(false);
        jbNewRelease.setName("jbNewRelease"); // NOI18N

        jbEditRelease.setText(resourceMap.getString("jbEditRelease.text")); // NOI18N
        jbEditRelease.setEnabled(false);
        jbEditRelease.setName("jbEditRelease"); // NOI18N

        jspReleases.setName("jspReleases"); // NOI18N

        jlstReleases.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jlstReleases.setName("jlstReleases"); // NOI18N
        jlstReleases.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jlstReleasesValueChanged(evt);
            }
        });
        jspReleases.setViewportView(jlstReleases);

        jlWorkspace.setText(resourceMap.getString("jlWorkspace.text")); // NOI18N
        jlWorkspace.setName("jlWorkspace"); // NOI18N

        jbNewWorkspace.setText(resourceMap.getString("jbNewWorkspace.text")); // NOI18N
        jbNewWorkspace.setEnabled(false);
        jbNewWorkspace.setName("jbNewWorkspace"); // NOI18N
        jbNewWorkspace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNewWorkspaceActionPerformed(evt);
            }
        });

        jbEditWorkspace.setText(resourceMap.getString("jbEditWorkspace.text")); // NOI18N
        jbEditWorkspace.setEnabled(false);
        jbEditWorkspace.setName("jbEditWorkspace"); // NOI18N
        jbEditWorkspace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEditWorkspaceActionPerformed(evt);
            }
        });

        jspWorkspaces.setName("jspWorkspaces"); // NOI18N

        jtWorkspaces.setModel(workspaceModel);
        jtWorkspaces.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jtWorkspaces.setName("jtWorkspaces"); // NOI18N
        jtWorkspaces.setRootVisible(false);
        jtWorkspaces.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jtWorkspacesValueChanged(evt);
            }
        });
        jspWorkspaces.setViewportView(jtWorkspaces);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(desktopapplication1.DesktopApplication1.class).getContext().getActionMap(OpenWorkspace.class, this);
        jbOK.setAction(actionMap.get("doOK")); // NOI18N
        jbOK.setText(resourceMap.getString("jbOK.text")); // NOI18N
        jbOK.setActionCommand(resourceMap.getString("jbOK.actionCommand")); // NOI18N
        jbOK.setName("jbOK"); // NOI18N

        jbCancel.setAction(actionMap.get("doCancel")); // NOI18N
        jbCancel.setText(resourceMap.getString("jbCancel.text")); // NOI18N
        jbCancel.setActionCommand(resourceMap.getString("jbCancel.actionCommand")); // NOI18N
        jbCancel.setName("jbCancel"); // NOI18N

        jbLoadWS.setText(resourceMap.getString("jbLoadWS.text")); // NOI18N
        jbLoadWS.setName("jbLoadWS"); // NOI18N
        jbLoadWS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbLoadWSActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jlProduct)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jbNewProduct)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jbEditProduct))
                    .add(jspProjects, 0, 0, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(jlRelease)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jbNewRelease)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jbEditRelease))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jspReleases, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 160, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jbLoadWS)
                .add(6, 6, 6)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(jbOK)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jbCancel))
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                        .add(jspWorkspaces, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 175, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                            .add(jlWorkspace)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(jbNewWorkspace)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(jbEditWorkspace))))
                .addContainerGap())
        );

        layout.linkSize(new java.awt.Component[] {jbCancel, jbOK}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jlProduct)
                    .add(jlWorkspace)
                    .add(jbNewProduct, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 15, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jbEditProduct, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 15, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jlRelease)
                    .add(jbNewRelease, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 15, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jbEditRelease, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 15, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jbNewWorkspace, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 15, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jbEditWorkspace, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 15, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jbLoadWS)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jspWorkspaces, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                            .add(jspReleases, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                            .add(jspProjects, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jbCancel)
                            .add(jbOK))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jlstProductsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jlstProductsValueChanged
        try {
            WorkEnvironment we = WorkEnvironment.getWorkEnvironment();
            int idx = jlstProducts.getSelectedIndex();
            we.setProject(Integer.parseInt(((JSONObject) projects.get(idx)).get("product_id").toString()));
            loadReleases();
            uiRefreshProductChanged();
        } catch (Exception ex) {
            ex.printStackTrace(System.err);
        }
}//GEN-LAST:event_jlstProductsValueChanged

    private void jlstReleasesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jlstReleasesValueChanged
        try {
            WorkEnvironment we = WorkEnvironment.getWorkEnvironment();
            int idx = jlstReleases.getSelectedIndex();
            we.setRelease(Integer.parseInt(((JSONObject) releases.get(idx)).get("release_id").toString()));
            uiRefreshReleaseChanged();
        } catch (Exception ex) {
            ex.printStackTrace(System.err);
        }
}//GEN-LAST:event_jlstReleasesValueChanged

    private void jtWorkspacesValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jtWorkspacesValueChanged
        WorkEnvironment we = WorkEnvironment.getWorkEnvironment();
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) jtWorkspaces.getLastSelectedPathComponent();
        if (node == null) {
            return;
        }
        worspaceInfo nodeInfo = (worspaceInfo) node.getUserObject();
        we.setWorkspace(nodeInfo.getWs_id());
        uiRefreshWorkspaceChanged();
    }//GEN-LAST:event_jtWorkspacesValueChanged

    private void jbNewProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNewProductActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jbNewProductActionPerformed

    private void jbLoadWSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLoadWSActionPerformed
        loadWorkspaces();
        jbEditWorkspace.setEnabled(false);
        jbNewWorkspace.setEnabled(false);
    }//GEN-LAST:event_jbLoadWSActionPerformed

    private void jbEditWorkspaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEditWorkspaceActionPerformed
        JFrame mainFrame = DesktopApplication1.getApplication().getMainFrame();
        String wsName = "";
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) jtWorkspaces.getLastSelectedPathComponent();
        if (node == null) {
            wsName = "";
        } else {
            worspaceInfo nodeInfo = (worspaceInfo) node.getUserObject();
            wsName = nodeInfo.getName();
        }
        NewEditWorkspace dlg = new NewEditWorkspace(mainFrame, wsName);
        dlg.setLocationRelativeTo(mainFrame);
        dlg.setTitle("Edit Workspace");

        DesktopApplication1.getApplication().show(dlg);
        if (dlg.getActionCommand().equals("BTN_SAVE")) {
            String newWSName = dlg.getWSName();
            saveWS(newWSName);
        }
    }//GEN-LAST:event_jbEditWorkspaceActionPerformed

    private void jbNewWorkspaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNewWorkspaceActionPerformed
        JFrame mainFrame = DesktopApplication1.getApplication().getMainFrame();
        NewEditWorkspace dlg = new NewEditWorkspace(mainFrame);
        dlg.setLocationRelativeTo(mainFrame);
        dlg.setTitle("New Workspace");

        DesktopApplication1.getApplication().show(dlg);
        if (dlg.getActionCommand().equals("BTN_SAVE")) {
            String newWSName = dlg.getWSName();
            createWS(newWSName);
        }
    }//GEN-LAST:event_jbNewWorkspaceActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbEditProduct;
    private javax.swing.JButton jbEditRelease;
    private javax.swing.JButton jbEditWorkspace;
    private javax.swing.JButton jbLoadWS;
    private javax.swing.JButton jbNewProduct;
    private javax.swing.JButton jbNewRelease;
    private javax.swing.JButton jbNewWorkspace;
    private javax.swing.JButton jbOK;
    private javax.swing.JLabel jlProduct;
    private javax.swing.JLabel jlRelease;
    private javax.swing.JLabel jlWorkspace;
    private javax.swing.JList jlstProducts;
    private javax.swing.JList jlstReleases;
    private javax.swing.JScrollPane jspProjects;
    private javax.swing.JScrollPane jspReleases;
    private javax.swing.JScrollPane jspWorkspaces;
    private javax.swing.JTree jtWorkspaces;
    // End of variables declaration//GEN-END:variables

    private void loadProducts() {
        try {
            CommandFactory cf = new CommandFactory();
            ICommand cmd = cf.createCommand(CommandFactory.CmdCode.GET_PRODUCTS);
            projects = (JSONArray) cmd.doRequest();
            if (projects != null) {
                displayProducts();
            }
        } catch (JSONException ex) {
            Logger.getLogger(DesktopApplication1View.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace(System.err);
            JOptionPane.showMessageDialog(this,
                    "Communication Problem.",
                    "Error during products load",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private void displayProducts() {
        try {
            int pr_len = projects.length();
            JSONObject tmpProduct;
            Vector v = new Vector();
            for (int i = 0; i < pr_len; i++) {
                tmpProduct = (JSONObject) projects.get(i);
                v.add(i, tmpProduct.get("product_name"));
            }
            jlstProducts.setListData(v);

        } catch (Exception ex) {
            ex.printStackTrace(System.err);
            JOptionPane.showMessageDialog(this,
                    "Problem.",
                    "Error during products display",
                    JOptionPane.ERROR_MESSAGE);

        }
    }

    private void loadReleases() {
        try {
            CommandFactory cf = new CommandFactory();
            ICommand cmd = cf.createCommand(CommandFactory.CmdCode.GET_RELEASE_LIST);
            releases = (JSONArray) cmd.doRequest();
            if (releases != null) {
                displayReleases();
            }
        } catch (JSONException ex) {
            Logger.getLogger(DesktopApplication1View.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void displayReleases() {
        try {
            int pr_len = releases.length();
            JSONObject tmpRelease;
            Vector v = new Vector();
            for (int i = 0; i < pr_len; i++) {
                tmpRelease = (JSONObject) releases.get(i);
                v.add(i, tmpRelease.get("release_name"));
            }
            jlstReleases.setListData(v);

        } catch (Exception ex) {
            ex.printStackTrace(System.err);
        }
    }

    @Action
    public void doCancel() {
        actionCommand = jbCancel.getActionCommand();
        dispose();
    }

    @Action
    public void doOK() {
        actionCommand = jbOK.getActionCommand();
        dispose();

    }

    public String getActionCommand() {
        return actionCommand;
    }

    private void loadWorkspaces() {
        try {
            CommandFactory cf = new CommandFactory();
            ICommand cmd = cf.createCommand(CommandFactory.CmdCode.GET_WORKSPACE_LIST);
            workspaces = (JSONArray) cmd.doRequest();
            if (workspaces != null) {
                displayWorkspaces();
            }
        } catch (JSONException ex) {
            Logger.getLogger(DesktopApplication1View.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void clearWorkspaces() {
        workspaceRoot.removeAllChildren();
        ((DefaultTreeModel) jtWorkspaces.getModel()).reload();
        jtWorkspaces.setRootVisible(false);
    }

    private void displayWorkspaces() {
        try {
            workspaceRoot.removeAllChildren();
            int pr_len = workspaces.length();
            JSONObject tmpWorkspace;
            DefaultMutableTreeNode tmpNode, tmpNode2 = null;
            Map wsMap = new HashMap();
            for (int i = 0; i < pr_len; i++) {
                tmpWorkspace = (JSONObject) workspaces.get(i);
                worspaceInfo wsInfo = new worspaceInfo(tmpWorkspace.getString("name"),
                        tmpWorkspace.getInt("ws_id"), i);
                int ancestor_ws_id = tmpWorkspace.getInt("ancestor_ws_id");

                if (ancestor_ws_id == 0) {
                    workspaceRoot.setUserObject(wsInfo);
                    wsMap.put(wsInfo.getWs_id(), workspaceRoot);
                } else {
                    tmpNode = new DefaultMutableTreeNode(wsInfo);
                    tmpNode2 = (DefaultMutableTreeNode) wsMap.get(ancestor_ws_id);
                    tmpNode2.add(tmpNode);
                    wsMap.put(wsInfo.getWs_id(), tmpNode);
                }
            }
            jtWorkspaces.setRootVisible(true);
            ((DefaultTreeModel) jtWorkspaces.getModel()).reload();

        } catch (Exception ex) {
            ex.printStackTrace(System.err);
        }
    }

    private void uiRefreshProductChanged() {
        clearWorkspaces();
        jbEditProduct.setEnabled(true);
        jbEditRelease.setEnabled(false);
        jbEditWorkspace.setEnabled(false);
        jbNewRelease.setEnabled(true);
        jbNewWorkspace.setEnabled(false);
        jbOK.setEnabled(false);
    }

    private void uiRefreshReleaseChanged() {
        clearWorkspaces();
        jbEditProduct.setEnabled(true);
        jbEditRelease.setEnabled(true);
        jbEditWorkspace.setEnabled(false);
        jbNewRelease.setEnabled(true);
        jbNewWorkspace.setEnabled(false);
        jbOK.setEnabled(false);
    }

    private void uiRefreshWorkspaceChanged() {
        jbEditProduct.setEnabled(true);
        jbEditRelease.setEnabled(true);
        jbEditWorkspace.setEnabled(true);
        jbNewRelease.setEnabled(true);
        jbNewWorkspace.setEnabled(true);
        jbOK.setEnabled(true);
    }

    private void saveWS(String newWSName) {
        try {
            CommandFactory cf = new CommandFactory();
            ICommand cmd = cf.createCommand(CommandFactory.CmdCode.UPDATE_WORKSPACE);
            HashMap params = new HashMap();
            params.put("new_workspace_name", newWSName);
            cmd.setParameters(params);
            Integer result = (Integer) cmd.doRequest();
            if (result != null) {
                loadWorkspaces();
                displayWorkspaces();
            }

        } catch (JSONException ex) {
            Logger.getLogger(OpenWorkspace.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void createWS(String newWSName) {
        try {
            WorkEnvironment we = WorkEnvironment.getWorkEnvironment();
            CommandFactory cf = new CommandFactory();
            ICommand cmd = cf.createCommand(CommandFactory.CmdCode.CREATE_WORKSPACE);
            HashMap params = new HashMap();
            params.put("ancestor_workspace_id", we.getWorkspace());
            params.put("new_workspace_name", newWSName);
            cmd.setParameters(params);
            Integer result = (Integer) cmd.doRequest();
            if (result != null) {
                loadWorkspaces();
                displayWorkspaces();
            }
        } catch (JSONException ex) {
            Logger.getLogger(OpenWorkspace.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
