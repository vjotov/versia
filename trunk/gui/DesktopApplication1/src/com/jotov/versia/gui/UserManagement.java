/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * OpenWorkspace.java
 *
 * Created on 2009-12-31, 10:39:48
 */
package com.jotov.versia.gui;

import com.jotov.versia.WorkEnvironment;
import com.jotov.versia.gui2.command.CommandFactory;
import com.jotov.versia.gui2.command.ICommand;
import com.jotov.versia.json.JSONObjectListItem;
import desktopapplication1.DesktopApplication1View;
import java.util.HashMap;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JList;
import javax.swing.JOptionPane;
import org.jdesktop.application.Action;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 *
 * @author v
 */
public class UserManagement extends javax.swing.JDialog {

    private JSONArray users;
    private int selectedUserIdx;
    private WorkEnvironment workEnvironment;
    private String actionCommand;

    /** Creates new form OpenWorkspace */
    public UserManagement(java.awt.Frame parent) {
        super(parent, true);
        workEnvironment = WorkEnvironment.getWorkEnvironment();

        initComponents();
        getRootPane().setDefaultButton(jbCancel);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlUsers = new javax.swing.JLabel();
        jbNewUser = new javax.swing.JButton();
        jbEditUser = new javax.swing.JButton();
        jspUsers = new javax.swing.JScrollPane();
        jlstUsers = new javax.swing.JList();
        jbOK = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jlAvailablePermitions = new javax.swing.JLabel();
        jlGrantedPermitions = new javax.swing.JLabel();
        jspAvailablePermitions = new javax.swing.JScrollPane();
        jlstAvailablePermitions = new javax.swing.JList();
        jbGrantPermition = new javax.swing.JButton();
        jbRevokePermition = new javax.swing.JButton();
        jspGrantedPermitions = new javax.swing.JScrollPane();
        jlstGrantedPermitions = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(desktopapplication1.DesktopApplication1.class).getContext().getResourceMap(UserManagement.class);
        jlUsers.setText(resourceMap.getString("jlUsers.text")); // NOI18N
        jlUsers.setName("jlUsers"); // NOI18N

        jbNewUser.setText(resourceMap.getString("jbNewUser.text")); // NOI18N
        jbNewUser.setName("jbNewUser"); // NOI18N
        jbNewUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNewUserActionPerformed(evt);
            }
        });

        jbEditUser.setText(resourceMap.getString("jbEditUser.text")); // NOI18N
        jbEditUser.setEnabled(false);
        jbEditUser.setName("jbEditUser"); // NOI18N

        jspUsers.setName("jspUsers"); // NOI18N

        jlstUsers.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jlstUsers.setName("jlstUsers"); // NOI18N
        loadUsers();
        jlstUsers.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jlstUsersValueChanged(evt);
            }
        });
        jspUsers.setViewportView(jlstUsers);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(desktopapplication1.DesktopApplication1.class).getContext().getActionMap(UserManagement.class, this);
        jbOK.setAction(actionMap.get("doOK")); // NOI18N
        jbOK.setText(resourceMap.getString("jbOK.text")); // NOI18N
        jbOK.setActionCommand(resourceMap.getString("jbOK.actionCommand")); // NOI18N
        jbOK.setName("jbOK"); // NOI18N

        jbCancel.setAction(actionMap.get("doCancel")); // NOI18N
        jbCancel.setText(resourceMap.getString("jbCancel.text")); // NOI18N
        jbCancel.setActionCommand(resourceMap.getString("jbCancel.actionCommand")); // NOI18N
        jbCancel.setName("jbCancel"); // NOI18N

        jlAvailablePermitions.setText(resourceMap.getString("jlAvailablePermitions.text")); // NOI18N
        jlAvailablePermitions.setName("jlAvailablePermitions"); // NOI18N

        jlGrantedPermitions.setText(resourceMap.getString("jlGrantedPermitions.text")); // NOI18N
        jlGrantedPermitions.setName("jlGrantedPermitions"); // NOI18N

        jspAvailablePermitions.setName("jspAvailablePermitions"); // NOI18N

        jlstAvailablePermitions.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jlstAvailablePermitions.setName("jlstAvailablePermitions"); // NOI18N
        jlstAvailablePermitions.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jlstAvailablePermitionsValueChanged(evt);
            }
        });
        jspAvailablePermitions.setViewportView(jlstAvailablePermitions);

        jbGrantPermition.setAction(actionMap.get("GrantPrivilege")); // NOI18N
        jbGrantPermition.setText(resourceMap.getString("jbGrantPermition.text")); // NOI18N
        jbGrantPermition.setEnabled(false);
        jbGrantPermition.setName("jbGrantPermition"); // NOI18N

        jbRevokePermition.setAction(actionMap.get("RevokePrivilege")); // NOI18N
        jbRevokePermition.setText(resourceMap.getString("jbRevokePermition.text")); // NOI18N
        jbRevokePermition.setEnabled(false);
        jbRevokePermition.setName("jbRevokePermition"); // NOI18N

        jspGrantedPermitions.setName("jspGrantedPermitions"); // NOI18N

        jlstGrantedPermitions.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jlstGrantedPermitions.setName("jlstGrantedPermitions"); // NOI18N
        jlstGrantedPermitions.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jlstGrantedPermitionsValueChanged(evt);
            }
        });
        jspGrantedPermitions.setViewportView(jlstGrantedPermitions);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jspUsers)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jlAvailablePermitions)
                                    .add(layout.createSequentialGroup()
                                        .add(jlUsers)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(jbNewUser)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(jbEditUser))
                                    .add(layout.createSequentialGroup()
                                        .add(jspAvailablePermitions, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 252, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(jbRevokePermition)
                                            .add(jbGrantPermition))))
                                .add(6, 6, 6)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jlGrantedPermitions)
                                    .add(jspGrantedPermitions, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 272, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                    .add(layout.createSequentialGroup()
                        .add(242, 242, 242)
                        .add(jbOK)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jbCancel)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(new java.awt.Component[] {jbCancel, jbOK}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.linkSize(new java.awt.Component[] {jbGrantPermition, jbRevokePermition}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jlUsers)
                    .add(jbNewUser, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 15, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jbEditUser, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 15, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jspUsers, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jlAvailablePermitions, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jlGrantedPermitions))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jspGrantedPermitions)
                            .add(jspAvailablePermitions, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)))
                    .add(layout.createSequentialGroup()
                        .add(89, 89, 89)
                        .add(jbGrantPermition)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jbRevokePermition)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jbOK)
                    .add(jbCancel))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jlstUsersValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jlstUsersValueChanged
        //TODO
        if (jlstUsers.isSelectionEmpty()) {
            clearPermitions();
            return;
        }
        try {
            loadPermitions();
        } catch (Exception ex) {
            ex.printStackTrace(System.err);
        }
}//GEN-LAST:event_jlstUsersValueChanged

    private void jbNewUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNewUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jbNewUserActionPerformed

    private void jlstAvailablePermitionsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jlstAvailablePermitionsValueChanged
        // TODO add your handling code here:
        if (jlstAvailablePermitions.isSelectionEmpty()) {
            jbGrantPermition.setEnabled(false);
        } else {
            jbGrantPermition.setEnabled(true);
        }
    }//GEN-LAST:event_jlstAvailablePermitionsValueChanged

    private void jlstGrantedPermitionsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jlstGrantedPermitionsValueChanged
        // TODO add your handling code here:
        if (jlstGrantedPermitions.isSelectionEmpty()) {
            jbRevokePermition.setEnabled(false);
        } else {
            jbRevokePermition.setEnabled(true);
        }
    }//GEN-LAST:event_jlstGrantedPermitionsValueChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbEditUser;
    private javax.swing.JButton jbGrantPermition;
    private javax.swing.JButton jbNewUser;
    private javax.swing.JButton jbOK;
    private javax.swing.JButton jbRevokePermition;
    private javax.swing.JLabel jlAvailablePermitions;
    private javax.swing.JLabel jlGrantedPermitions;
    private javax.swing.JLabel jlUsers;
    private javax.swing.JList jlstAvailablePermitions;
    private javax.swing.JList jlstGrantedPermitions;
    private javax.swing.JList jlstUsers;
    private javax.swing.JScrollPane jspAvailablePermitions;
    private javax.swing.JScrollPane jspGrantedPermitions;
    private javax.swing.JScrollPane jspUsers;
    // End of variables declaration//GEN-END:variables

    @Action
    public void doCancel() {
        actionCommand = jbCancel.getActionCommand();
        dispose();
    }

    @Action
    public void doOK() {
        actionCommand = jbOK.getActionCommand();
        dispose();

    }

    @Action
    public void GrantPrivilege() throws JSONException {
        changePrivilage(jlstAvailablePermitions, 1);
    }

    @Action
    public void RevokePrivilege() {
        changePrivilage(jlstGrantedPermitions, 0);
    }

    private void changePrivilage(JList lst, int newValue) {
        JSONObjectListItem selection = (JSONObjectListItem) lst.getSelectedValue();
        try {
            JSONObject permition = loadUserPermitionByID(selection.getInt("permition_id"));
            if (permition != null) {
                permition.put("permited", newValue);
                savePermition(permition);
            }
        } catch (JSONException ex) {
            Logger.getLogger(UserManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private JSONObject loadUserPermitionByID(int permitionID) throws JSONException {
        JSONObject user = users.getJSONObject(selectedUserIdx);
        JSONArray permitions = user.getJSONArray("permitions");
        int perm_len = permitions.length();
        for (int i = 0; i < perm_len; i++) {
            JSONObject permition = permitions.getJSONObject(i);
            if (permition.getInt("permition_id") == permitionID) {
                return permition;
            }
        }
        return null;
    }

    private void savePermition(JSONObject permition) {
        try {
            CommandFactory cf = new CommandFactory();
            ICommand cmd = cf.createCommand(CommandFactory.CmdCode.UPDATE_PERMITION);

            HashMap params = new HashMap();
            params.put("permition_id", permition.getInt("permition_id"));
            params.put("permition_value", permition.getInt("permited"));
            cmd.setParameters(params);
            Integer res = (Integer) cmd.doRequest();
            if (res != null) {
                loadPermitions();
            }
        } catch (JSONException ex) {
            Logger.getLogger(UserManagement.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public String getActionCommand() {
        return actionCommand;
    }

    private void loadPermitions() throws JSONException {
        selectedUserIdx = jlstUsers.getSelectedIndex();

        JSONObject user = users.getJSONObject(selectedUserIdx);
        int selectedUserID = user.getInt("uid");
        boolean enable_flag;
        if (selectedUserID == workEnvironment.getUid()) {
            enable_flag = false;
        } else {
            enable_flag = true;
        }

        JSONArray permitions = user.getJSONArray("permitions");
        int perm_len = permitions.length();
        Vector granted = new Vector();
        Vector revoked = new Vector();
        for (int i = 0; i < perm_len; i++) {
            JSONObjectListItem permition = new JSONObjectListItem(permitions.getJSONObject(i));
            permition.setDisplayingValue("action_name");
            if (permition.getInt("permited") == 1) {
                granted.add(permition);
            } else {
                revoked.add(permition);
            }
        }
        jlstAvailablePermitions.setListData(revoked);
        jlstGrantedPermitions.setListData(granted);
        jlstAvailablePermitions.setEnabled(enable_flag);
        jlstGrantedPermitions.setEnabled(enable_flag);

    }

    private void clearPermitions() {
        throw new UnsupportedOperationException("Not yet implemented");
    }

    private void loadUsers() {
        try {
            CommandFactory cf = new CommandFactory();
            ICommand cmd = cf.createCommand(CommandFactory.CmdCode.GET_USER_LIST);
            users = (JSONArray) cmd.doRequest();
            if (users != null) {
                displayUsers();
            }
        } catch (JSONException ex) {
            Logger.getLogger(DesktopApplication1View.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace(System.err);
            JOptionPane.showMessageDialog(this,
                    "Communication Problem.",
                    "Error during users load",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private void displayUsers() {
        //$users[] = array ('uid' => $value["uid"], 'username' => $value['username']);
        try {
            int usr_len = users.length();
            JSONObject tmpUser;
            Vector v = new Vector();
            for (int i = 0; i < usr_len; i++) {
                tmpUser = (JSONObject) users.get(i);
                v.add(i, tmpUser.get("username"));
            }
            jlstUsers.setListData(v);

        } catch (Exception ex) {
            ex.printStackTrace(System.err);
            JOptionPane.showMessageDialog(this,
                    "Problem.",
                    "Error during users display",
                    JOptionPane.ERROR_MESSAGE);

        }
    }
}
